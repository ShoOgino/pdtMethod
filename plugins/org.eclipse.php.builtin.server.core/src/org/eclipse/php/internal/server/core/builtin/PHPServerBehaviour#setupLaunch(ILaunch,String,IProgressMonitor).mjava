	/**
	 * Setup for starting the server.
	 * 
	 * @param launch
	 *            ILaunch
	 * @param launchMode
	 *            String
	 * @param monitor
	 *            IProgressMonitor
	 * @throws CoreException
	 *             if anything goes wrong
	 */
	@Override
	public void setupLaunch(ILaunch launch, String launchMode, IProgressMonitor monitor) throws CoreException {
		if ("true".equals(launch.getLaunchConfiguration().getAttribute(ATTR_STOP, "false"))) { //$NON-NLS-1$ //$NON-NLS-2$
			launch.terminate();
			stopImpl();
			return;
		}
		Server server = ServersManager.getServer(getServer().getName());
		PathMapper pathMapper = PathMapperRegistry.getByServer(server);
		pathMapper.setMapping(getPHPServerConfiguration().getPathMappings());

		fLaunch = launch;

		IStatus status = getPHPRuntime().validate();
		if (status != null && status.getSeverity() == IStatus.ERROR)
			throw new CoreException(status);
		//
		// // setRestartNeeded(false);
		PHPServerConfiguration configuration = getPHPServerConfiguration();

		// check that ports are free
		Iterator<ServerPort> iterator = configuration.getServerPorts().iterator();
		List<ServerPort> usedPorts = new ArrayList<>();
		while (iterator.hasNext()) {
			ServerPort sp = iterator.next();
			if (sp.getPort() < 0)
				throw new CoreException(
						new Status(IStatus.ERROR, PHPServerPlugin.PLUGIN_ID, 0, Messages.errorPortInvalid, null));
			if (SocketUtil.isPortInUse(sp.getPort(), 5)) {
				usedPorts.add(sp);
			}
		}
		if (usedPorts.size() == 1) {
			ServerPort port = usedPorts.get(0);
			throw new CoreException(new Status(IStatus.ERROR, PHPServerPlugin.PLUGIN_ID, 0,
					NLS.bind(Messages.errorPortInUse, new String[] { port.getPort() + "", getServer().getName() }), //$NON-NLS-1$
					null));
		} else if (usedPorts.size() > 1) {
			String portStr = ""; //$NON-NLS-1$
			iterator = usedPorts.iterator();
			boolean first = true;
			while (iterator.hasNext()) {
				if (!first)
					portStr += ", "; //$NON-NLS-1$
				first = false;
				ServerPort sp = iterator.next();
				portStr += "" + sp.getPort(); //$NON-NLS-1$
			}
			throw new CoreException(new Status(IStatus.ERROR, PHPServerPlugin.PLUGIN_ID, 0,
					NLS.bind(Messages.errorPortsInUse, new String[] { portStr, getServer().getName() }), null));
		}

		setServerRestartState(false);
		setServerState(IServer.STATE_STARTING);
		setMode(launchMode);

		if (ILaunchManager.DEBUG_MODE.equals(launchMode)) {
			fSessionId = DebugSessionIdGenerator.generateSessionID();
			int debugPort = PHPDebugPlugin.getDebugPort(DebuggerCommunicationDaemon.ZEND_DEBUGGER_ID);
			PHPSessionLaunchMapper.put(fSessionId, launch);
			launch.setAttribute(IDebugParametersKeys.SESSION_ID, String.valueOf(fSessionId));
			launch.setAttribute(IDebugParametersKeys.BUILTIN_SERVER_DEBUGGER, "true"); //$NON-NLS-1$
			launch.setAttribute(IDebugParametersKeys.PORT, String.valueOf(debugPort));
		}

		// ping server to check for startup
		try {
			String url = "http://" + getServer().getHost(); //$NON-NLS-1$
			int port = configuration.getMainPort().getPort();
			if (port != 80)
				url += ":" + port; //$NON-NLS-1$
			ping = new PingThread(getServer(), url, -1, this);
		} catch (Exception e) {
			Trace.trace(Trace.SEVERE, "Can't ping for PHP Server startup."); //$NON-NLS-1$
		}
	}

