	/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.wst.server.core.model.IRuntimeFactoryDelegate#
	 * getKnownRuntimes()
	 */
	@Override
	public void searchForRuntimes(IPath path, IRuntimeSearchListener listener, IProgressMonitor monitor) {

		final List<File> locations = new ArrayList<File>();
		final List<PHPexeItem> found = new ArrayList<PHPexeItem>();

		searchForRuntimes2(path.toFile(), locations, monitor);

		if (!locations.isEmpty()) {
			monitor.setTaskName(Messages.PHPRuntimeLocator_Processing_search_results);
			Iterator<File> iter2 = locations.iterator();
			while (iter2.hasNext()) {
				if (monitor.isCanceled())
					break;
				File location = iter2.next();
				PHPexeItem phpExe = new PHPexeItem(null, location, null, null, true);
				if (phpExe.getName() == null)
					continue;
				String nameCopy = new String(phpExe.getName());
				monitor.subTask(MessageFormat.format(Messages.PHPRuntimeLocator_Fetching_php_exe_info, nameCopy));
				List<PHPModuleInfo> modules = PHPExeUtil.getModules(phpExe);
				AbstractDebuggerConfiguration[] debuggers = PHPDebuggersRegistry.getDebuggersConfigurations();
				for (AbstractDebuggerConfiguration debugger : debuggers) {
					for (PHPModuleInfo m : modules)
						if (m.getName().equalsIgnoreCase(debugger.getModuleId())) {
							phpExe.setDebuggerID(debugger.getDebuggerId());
							break;
						}
				}
				if (phpExe.getDebuggerID() == null)
					phpExe.setDebuggerID(PHPDebuggersRegistry.NONE_DEBUGGER_ID);
				phpExe.setName(nameCopy);
				phpExe.setLoadDefaultINI(true);
				if (phpExe.getExecutable() != null) {
					found.add(phpExe);
				}
			}
		}

		for (PHPexeItem phpExe : found) {
			IRuntimeWorkingCopy runtime = getRuntimeFromDir(phpExe, monitor);
			if (runtime != null) {
				PHPexes.getInstance().addItem(phpExe);
				listener.runtimeFound(runtime);
			}
		}
	}

