		@Override
		public void run() {

			if (Thread.currentThread().isInterrupted()) {
				closed();
				return;
			}

			try {
				URI uri = URI.create(url);
				// https://bugs.eclipse.org/bugs/show_bug.cgi?id=546208
				//
				// Previous connection code didn't take care about proxy
				// authentication, even when SystemDefaultRoutePlanner was
				// "luckily" able to find the right proxy to use.
				// Also calling directly planner.determineRoute() didn't take
				// care about the proxy authentication requests,
				// see InternalHttpClient.doExecute() for better request
				// execution chain.
				// All proxy authentication informations (and the manual
				// proxy definitions) are part of the proxy data settings stored
				// and managed by eclipse, and can be retrieved
				// by using IProxyService and a service tracker.
				//
				// final HttpGet httpGet = new HttpGet(uri);
				// httpGet.addHeader("Accept", "*/*"); //$NON-NLS-1$
				// //$NON-NLS-2$
				// httpGet.addHeader("User-Agent", getClass().getName());
				// //$NON-NLS-1$
				// httpGet.addHeader("Host", uri.getHost()); //$NON-NLS-1$
				// HttpHost host = new HttpHost(uri.getHost(), uri.getPort(),
				// uri.getScheme());
				// SystemDefaultRoutePlanner planner = new
				// SystemDefaultRoutePlanner(ProxySelector.getDefault());
				// HttpClientContext context = HttpClientContext.create();
				// HttpRoute route = planner.determineRoute(host, httpGet,
				// context);

				HttpClientBuilder httpClientBuilder = ProxyHelper.createHttpClientBuilder(uri);

				httpClientBuilder.setUserAgent("org.eclipse.php.composer.api"); //$NON-NLS-1$
				httpClientBuilder.setConnectionManager(connectionManager);
				RequestConfig.Builder requestBuilder = RequestConfig.custom();
				requestBuilder = requestBuilder.setConnectTimeout(TIMEOUT_SECONDS * 1000)
						.setConnectionRequestTimeout(TIMEOUT_SECONDS * 1000).setSocketTimeout(TIMEOUT_SECONDS * 1000);
				httpClientBuilder.setDefaultRequestConfig(requestBuilder.build());

				CloseableHttpClient httpClient = httpClientBuilder.build();
				HttpHost target = new HttpHost(uri.getHost(), uri.getPort(), uri.getScheme());
				HttpGet httpGet = new HttpGet(uri);

				CloseableHttpResponse response = null;

				try {
					if (Thread.currentThread().isInterrupted()) {
						closed();
						return;
					}

					response = httpClient.execute(target, httpGet);

					if (Thread.currentThread().isInterrupted()) {
						httpGet.abort();
						closed();
						return;
					}

					if (response.getStatusLine().getStatusCode() >= 300) {
						throw new HttpResponseException(response.getStatusLine().getStatusCode(),
								response.getStatusLine().getReasonPhrase());
					}

					HttpEntity entity = response.getEntity();

					if (Thread.currentThread().isInterrupted()) {
						closed();
						return;
					}
					if (entity == null) {
						throw new ClientProtocolException("Response contains no content"); //$NON-NLS-1$

					}
					try {
						synchronized (AsyncDownloader.this) {
							for (DownloadListenerInterface listener : listeners) {
								try {
									if (Thread.currentThread().isInterrupted()) {
										closed();
										return;
									}

									listener.dataReceived(response.getEntity().getContent(),
											httpGet.getURI().toString());
								} catch (Exception e) {
									listener.errorOccured(e);
								}
							}
						}
					} finally {
						EntityUtils.consume(entity);
					}
				} finally {
					if (response != null) {
						response.close();
					}
					// Closing httpClient also shuts the
					// PoolingHttpClientConnectionManager "connectionManager"
					// down, don't do that.
					// httpClient.close();
				}

			} catch (Exception ex) {
				synchronized (AsyncDownloader.this) {
					for (DownloadListenerInterface listener : listeners) {
						listener.errorOccured(ex);
					}
				}
			}

		}

