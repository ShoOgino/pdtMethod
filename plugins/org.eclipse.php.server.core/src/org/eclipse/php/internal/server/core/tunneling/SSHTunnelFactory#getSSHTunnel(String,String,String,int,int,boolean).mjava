	/**
	 * Returns a {@link SSHTunnel} for port-forwarding between a remote host to
	 * this localhost. The returned tunnel may be connected or disconnected.
	 * 
	 * @param remoteHost
	 * @param userName
	 * @param password
	 * @param localPort
	 * @param remotePort
	 * @param cacheTunnel
	 *            Load/save the result tunnel from/to an inner cache for further
	 *            use (note that the tunnel is not comparing passwords, so make
	 *            sure that password is not changing when you are using the
	 *            cache)
	 * @return A {@link SSHTunnel} instance.
	 */
	public static SSHTunnel getSSHTunnel(String remoteHost, String userName,
			String password, int localPort, int remotePort, boolean cacheTunnel) {
		SSHTunnel tunnel = createSSHTunnel(remoteHost, userName, password,
				localPort, remotePort);
		if (cacheTunnel) {
			if (tunnels.containsKey(tunnel)) {
				tunnel = tunnels.get(tunnel);
			} else {
				tunnels.put(tunnel, tunnel);
			}
		}
		return tunnel;
	}

