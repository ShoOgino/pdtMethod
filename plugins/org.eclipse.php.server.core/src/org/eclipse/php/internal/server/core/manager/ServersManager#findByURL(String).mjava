	/**
	 * Tries to find and return a server that corresponds to given URL
	 * 
	 * @param urlString
	 *            URL text form
	 * @return server that corresponds to given URL or <code>null</code> if
	 *         there is no match
	 */
	public static Server findByURL(String urlString) {
		if (urlString == null) {
			return null;
		}
		List<Server> matches = null;
		URL url;
		try {
			url = new URL(urlString);
		} catch (MalformedURLException ex) {
			Logger.logException("Find server match by URL error: Invalid URL.", //$NON-NLS-1$
					ex);
			return null;
		}
		String urlHostAddress = url.getHost();
		try {
			InetAddress urlHostInetAddress = InetAddress.getByName(urlHostAddress);
			// Resolve it to IP address
			urlHostAddress = urlHostInetAddress.getHostAddress();
		} catch (UnknownHostException e) {
			// may not exists - ignore
		}
		// Find all servers that match given URL host address
		List<Server> matchedByHost = new ArrayList<>();
		for (Server server : getServers()) {
			if (isNoneServer(server)) {
				continue;
			}
			String serverHost = server.getHost();
			try {
				InetAddress serverHostAddress = InetAddress.getByName(serverHost);
				if (urlHostAddress.equals(serverHostAddress.getHostAddress())) {
					matchedByHost.add(server);
				}
			} catch (UnknownHostException e) {
				// ignore
			}
		}
		matches = matchedByHost;
		if (matches.isEmpty()) {
			return null;
		}
		// Filter out the servers by URL protocol
		List<Server> matchedByProtocol = new ArrayList<>();
		for (Server server : matches) {
			if (url.getProtocol().equals(server.getRootURL().getProtocol())) {
				matchedByProtocol.add(server);
			}
		}
		if (!matchedByProtocol.isEmpty()) {
			matches = matchedByProtocol;
		}
		// Filter out the servers by URL port
		List<Server> matchedByPort = new ArrayList<>();
		int urlPort = url.getPort() != -1 ? url.getPort() : Server.DEFAULT_HTTP_PORT;
		for (Server server : matches) {
			if (urlPort == server.getPort()) {
				matchedByPort.add(server);
			}
		}
		if (!matchedByPort.isEmpty()) {
			matches = matchedByPort;
		}
		// Return first match
		return matches.get(0);
	}

