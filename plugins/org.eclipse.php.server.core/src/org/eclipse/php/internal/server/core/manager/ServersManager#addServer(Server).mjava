	/**
	 * Adds a Server to the manager. If a server with the same name exists in the
	 * manager, the existing server will be overidden with the new one and event
	 * notifications will be fired for the removal and for the addition. Note: The
	 * added server is not saved into the preferences until the {@link #save()} is
	 * called.
	 * 
	 * @param server
	 *            A Server
	 * @see #save()
	 */
	public static void addServer(Server server) {
		if (server == null) {
			return;
		}
		ServersManager manager = getInstance();
		Server oldValue = ServersManager.getServer(server);
		if (server != oldValue) {
			manager.servers.remove(oldValue.getName());
			oldValue.removePropertyChangeListener(manager);
			ServerManagerEvent event = new ServerManagerEvent(ServerManagerEvent.MANAGER_EVENT_REMOVED, oldValue);
			manager.fireEvent(event);
		}
		oldValue = manager.servers.put(server.getName(), server);
		if (oldValue != null) {
			oldValue.removePropertyChangeListener(manager);
			ServerManagerEvent event = new ServerManagerEvent(ServerManagerEvent.MANAGER_EVENT_REMOVED, oldValue);
			manager.fireEvent(event);
		}
		Server defaultServer = getDefaultServer(null);
		if (defaultServer == null || isNoneServer(defaultServer)) {
			// Set workspace default if there is no any
			setDefaultServer(null, server);
		}
		ServerManagerEvent event = new ServerManagerEvent(ServerManagerEvent.MANAGER_EVENT_ADDED, server);
		manager.fireEvent(event);
		// Register the manager as a Server lister to get nofitications about
		// attribute changes.
		server.addPropertyChangeListener(manager);
	}

