	/**
	 * Create the tunnel connection. If the tunnel is already connected, nothing
	 * happens. This call will potentially change the password value of this
	 * class in case the user is prompted to enter a valid one. There are
	 * several return values possibilities to this call (as IStatus instances):<br>
	 * <ul>
	 * <li>Status OK - Signals that the connection was successful with no errors
	 * or warnings</li>
	 * <li>Status ERROR - Signals that the connection was unsuccessful</li>
	 * <li>Status WARNING - Signals that the connection was successful, however
	 * there are a few warning notifications that should be reviewed</li>
	 * <li>Status INFO - Signals that the connection was successful, however
	 * there was a modification to the connection data that is expressed in the
	 * INFO code (such as a password change data)</li>
	 * </ul>
	 * 
	 * @return An IStatus that holds the creation result.
	 */
	@SuppressWarnings("unchecked")
	public IStatus connect() {
		IStatus status = Status.OK_STATUS;
		if (isConnected()) {
			return status;
		}
		// ssh -R 9000:localhost:9000 you@example.aptanacloud.com
		int retry = 1;
		String newPassword = null;
		while (true) {
			try {
				session = SSHTunnelSession.getSession(userName, password,
						remoteHost, SSH_DEFAULT_PORT, null).getSession();
				// This might throw exception because of binary compatibility
				// issues.
				// The JSCH API for the port forwarding was different in eclipse
				// 3.2 and 3.4
				Exception ex = null;

				String actualPassword = session.getUserInfo().getPassword();
				if (!password.equals(actualPassword)) {
					newPassword = actualPassword;
				}
				Class sessionClass = session.getClass();
				Class[] parameterTypes = new Class[] { int.class, String.class,
						int.class };
				try {
					// session.setPortForwardingR(rport, host, lport)
					Object[] values = new Object[] { new Integer(remotePort),
							localHost, new Integer(localPort) };
					java.lang.reflect.Method mSetPortForwarding = sessionClass
							.getMethod("setPortForwardingR", //$NON-NLS-1$
									parameterTypes);
					mSetPortForwarding.invoke(session, values);
				} catch (NoSuchMethodException nsme) {
					// it will not be thrown.
				} catch (InvocationTargetException e) {
					// this can be thrown if we already binded the remote port.
					// if this is the case, ignore it. If not, log it.
					if (e.getCause() != null
							&& e.getCause().getMessage() != null
							&& e.getCause().getMessage().toLowerCase().indexOf(
									Messages.SSHTunnel_2) == -1) 
					{
						ex = e;
					}
				} catch (Exception e) {
					ex = e;
				}
				if (ex != null) {
					if (isConnected()) {
						status = new Status(
								IStatus.WARNING,
								Activator.PLUGIN_ID,
								CONNECTION_WARNING_CODE,
								Messages.SSHTunnel_3, ex); 
					} else {
						status = new Status(
								IStatus.ERROR,
								Activator.PLUGIN_ID,
								CONNECTION_ERROR_CODE,
								Messages.SSHTunnel_4, ex); 
					}
				}
			} catch (JSchException ee) {
				retry--;
				if (retry < 0) {
					status = new Status(
							IStatus.ERROR,
							Activator.PLUGIN_ID,
							CONNECTION_ERROR_CODE,
							Messages.SSHTunnel_5 + remoteHost, ee); 
					break;
				}
				if (session != null && session.isConnected()) {
					// Make sure we disconnect before retrying
					session.disconnect();
				}
				continue;
			}
			break;
		}
		if (newPassword != null) {
			password = newPassword;
		}
		if (status.isOK() && newPassword != null) {
			// Change the Status to INFO and deliver the accurate password to
			// the caller.
			status = new Status(IStatus.INFO, Activator.PLUGIN_ID,
					CONNECTION_PASSWORD_CHANGED_CODE, newPassword, null); 
		}

		return status;
	}

