	/**
	 * Returns the dafault debug server.
	 * 
	 * @return
	 */
	public static Server getDefaultServer(IProject project) {
		ServersManager manager = getInstance();
		// Try to get it from the memory first.
		Server server = manager.defaultServersMap.get(project);
		if (project != null) {
			/*
			 * In case that the project is not null, check that we have project-specific
			 * settings for it. Otherwise, map it to the workspace default server.
			 */
			IScopeContext[] preferenceScopes = createPreferenceScopes(project);
			String projectSpecificServer = preferenceScopes[0].getNode(NODE_QUALIFIER)
					.get(DEFAULT_SERVER_PREFERENCES_KEY, (String) null);
			if (projectSpecificServer == null) {
				// We do not have a project specific setting for this project.
				// Map it to the default workspace server.
				manager.defaultServersMap.put(project, manager.defaultServersMap.get(null));
				server = manager.defaultServersMap.get(null);
			}
		}
		/*
		 * If the server was no found in our hash, try to load it from the preferences.
		 * This part of code should only happen one time when the first call for the
		 * getDefaultServer. Once it's done, there is no reason to re-load the servers
		 * definitions from the preferences (XML).
		 */
		if (server == null) {
			IEclipsePreferences preferences = InstanceScope.INSTANCE.getNode(Activator.PLUGIN_ID);
			String serverName = null;
			if (project == null) {
				// Get the default workspace server.
				serverName = preferences.get(DEFAULT_SERVER_PREFERENCES_KEY, null);
			} else {
				// Get the projects' default server
				IScopeContext[] preferenceScopes = createPreferenceScopes(project);
				serverName = preferenceScopes[0].getNode(NODE_QUALIFIER).get(DEFAULT_SERVER_PREFERENCES_KEY, null);
				if (serverName == null) {
					// No project server - take the workspace one
					serverName = preferences.get(DEFAULT_SERVER_PREFERENCES_KEY, null);
				}
			}
			if (serverName != null && !"".equals(serverName)) { //$NON-NLS-1$
				server = manager.servers.get(serverName);
				/*
				 * Map this server as the default for the project (if not null) or for the
				 * workspace (when the project is null).
				 */
				manager.defaultServersMap.put(project, server);
			}
		}
		// fixed bug 197579 - in case of no default server mark the first server
		// as default
		if (server == null) {
			if (manager.servers.size() > 0) {
				server = manager.servers.values().iterator().next();
				setDefaultServer(null, server);
			}
		}
		return server;
	}

