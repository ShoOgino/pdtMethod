	/**
	 * Creates new FilteredTypesSelectionDialog instance.
	 * 
	 * @param shell
	 *            shell to parent the dialog on
	 * @param multi
	 *            <code>true</code> if multiple selection is allowed
	 * @param context
	 *            context used to execute long-running operations associated with
	 *            this dialog
	 * @param scope
	 *            scope used when searching for types. If the scope is
	 *            <code>null</code>, then workspace is scope is used as default, and
	 *            the user can choose a working set as scope.
	 * @param elementKinds
	 *            flags defining nature of searched elements; the only valid values
	 *            are: <code>IJavaSearchConstants.TYPE</code>
	 *            <code>IJavaSearchConstants.ANNOTATION_TYPE</code>
	 *            <code>IJavaSearchConstants.INTERFACE</code>
	 *            <code>IJavaSearchConstants.ENUM</code>
	 *            <code>IJavaSearchConstants.CLASS_AND_INTERFACE</code>
	 *            <code>IJavaSearchConstants.CLASS_AND_ENUM</code>. Please note that
	 *            the bitwise OR combination of the elementary constants is not
	 *            supported.
	 * @param extension
	 *            an extension of the standard type selection dialog; See
	 *            {@link TypeSelectionExtension}
	 */
	public PHPUnitFilteredTypesSelectionDialog(Shell shell, boolean multi, IRunnableContext context,
			IDLTKSearchScope scope, int elementKinds, TypeSelectionExtension extension, IDLTKLanguageToolkit toolkit) {
		super(shell, multi);

		this.fToolkit = toolkit;

		setSelectionHistory(new TypeSelectionHistory());

		if (scope == null) {
			fAllowScopeSwitching = true;
			scope = SearchEngine.createWorkspaceScope(toolkit);
		}

		fElementKinds = elementKinds;
		fExtension = extension;
		fFilterExtension = (extension == null) ? null : extension.getFilterExtension();
		fSearchScope = scope;

		if (extension != null) {
			fValidator = extension.getSelectionValidator();
		}

		fTypeInfoUtil = new TypeInfoUtil(extension != null ? extension.getImageProvider() : null);

		fTypeInfoLabelProvider = new TypeItemLabelProvider();

		setListLabelProvider(fTypeInfoLabelProvider);
		setListSelectionLabelDecorator(fTypeInfoLabelProvider);
		setDetailsLabelProvider(new TypeItemDetailsLabelProvider(fTypeInfoUtil));

		fTypeItemsComparator = new TypeItemsComparator();
	}

