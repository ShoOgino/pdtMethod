	private IResource chooseContainer(final Object initElement) {
		final ITreeContentProvider provider = new WorkbenchContentProvider();
		final ILabelProvider labelProvider = new WorkbenchLabelProvider();
		final ElementTreeSelectionDialog dialog = new ElementTreeSelectionDialog(getShell(), labelProvider, provider);
		dialog.setTitle(PHPUnitMessages.PHPUnitLaunchConfigurationTab_Container_Selection);
		dialog.setMessage(PHPUnitMessages.PHPUnitLaunchConfigurationTab_Choose_Container);

		// filter elements
		RSEProjectFilter filter1 = new RSEProjectFilter();
		dialog.addFilter(filter1);

		DotFileFilter filter2 = new DotFileFilter();
		dialog.addFilter(filter2);

		ClosedProjectFilter filter3 = new ClosedProjectFilter();
		dialog.addFilter(filter3);

		dialog.addFilter(new ViewerFilter() {

			@Override
			public boolean select(Viewer viewer, Object parentElement, Object element) {
				if (element instanceof IFile) {
					IResource resource = (IResource) element;
					return "php".equalsIgnoreCase(resource.getFileExtension()); //$NON-NLS-1$
				}
				return true;
			}
		});

		LibraryFilter filter6 = new LibraryFilter();
		dialog.addFilter(filter6);
		dialog.setComparator(new ResourceComparator(ResourceComparator.NAME));

		dialog.setInput(ResourcesPlugin.getWorkspace().getRoot());

		dialog.setAllowMultiple(false);
		dialog.setInitialSelection(initElement);

		if (dialog.open() == Dialog.OK) {
			return (IResource) dialog.getFirstResult();
		}
		return null;
	}

