	@Override
	public Object init(final IStructuredSelection selection) {
		super.init(selection);
		IModelElement element;
		final IType superClass = null;
		final List<IContainer> containers = new ArrayList<>(1);
		IContainer container = null;
		Object next;
		for (final Iterator i = selection.iterator(); i.hasNext();) {
			next = i.next();
			if ((container = getInitialContainer(new StructuredSelection(next))) != null)
				containers.add(container);
			else if (superClass == null && (element = getInitialPHPElement(new StructuredSelection(next))) != null) {
				final IResource res = element.getResource();
				if (res != null) {
					setContainer(res.getParent());
				}
			}
		}
		if (containers.size() > 1) {
			for (final Iterator<IContainer> i = containers.iterator(); i.hasNext();) {
				final IContainer iContainer = i.next();
				// if a project, just select it:
				if (iContainer.getType() == IResource.PROJECT) {
					container = iContainer;
					break;
				}
				// if a folder, first find the most rooted folder
				if (container == null
						|| iContainer.getFullPath().segmentCount() < container.getFullPath().segmentCount())
					container = iContainer;
			}
			// now find the common root:
			for (final Iterator<IContainer> i = containers.iterator(); i.hasNext();) {
				// the most rooted folder has highest priority:
				IContainer iContainer = (IContainer) i.next();
				if (iContainer.getProject() != container.getProject())
					continue;
				// get higher to the level of the most rooted folder:
				for (int j = 0; j < iContainer.getFullPath().segmentCount()
						- container.getFullPath().segmentCount(); ++j)
					iContainer = iContainer.getParent();
				// if still not equals - get 1 level higher:
				if (iContainer != container)
					container = container.getParent();
			}
			setContainer(container);
		} else if (!containers.isEmpty()) {
			setContainer((IContainer) containers.get(0));
		}

		return null;
	}

