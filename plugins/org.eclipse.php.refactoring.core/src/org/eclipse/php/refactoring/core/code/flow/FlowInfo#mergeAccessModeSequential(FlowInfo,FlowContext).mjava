	protected void mergeAccessModeSequential(FlowInfo otherInfo, FlowContext context) {
		if (!context.considerAccessMode())
			return;

		int[] others = otherInfo.fAccessModes;
		if (others == null) // others are all unused. So nothing to do
			return;

		// Must not consider return kind since a return statement can't control
		// execution flow
		// inside a method. It always leaves the method.
		if (branches() || hasUncaughtException()) {
			for (int i = 0; i < others.length; i++)
				others[i] = ACCESS_MODE_OPEN_BRANCH_TABLE[getIndex(others[i])];
		}

		if (fAccessModes == null) { // all current variables are unused
			fAccessModes = others;
			return;
		}

		if (context.computeArguments()) {
			handleComputeArguments(others);
		} else if (context.computeReturnValues()) {
			handleComputeReturnValues(others);
		} else if (context.computeMerge()) {
			handleMergeValues(others);
		}
	}

