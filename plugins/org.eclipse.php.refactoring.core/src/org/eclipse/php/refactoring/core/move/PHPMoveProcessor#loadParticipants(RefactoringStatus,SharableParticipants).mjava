	/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ltk.core.refactoring.participants.RefactoringProcessor#
	 * loadParticipants(org.eclipse.ltk.core.refactoring.RefactoringStatus,
	 * org.eclipse.ltk.core.refactoring.participants.SharableParticipants)
	 */
	@Override
	public RefactoringParticipant[] loadParticipants(RefactoringStatus status,
			SharableParticipants sharedParticipants) {

		try {
			String[] affectedNatures = ResourceProcessors.computeAffectedNatures(fSourceResources);
			MoveArguments arguments = new MoveArguments(fResourceDestination, getUpdateReferences());
			List<IResource> resourceList = new ArrayList<>();
			for (IResource fResource : fSourceResources) {
				resourceList.add(fResource);
			}
			return ParticipantManager.loadMoveParticipants(status, this, resourceList, arguments, null, affectedNatures,
					sharedParticipants);
		} catch (CoreException e) {
			e.printStackTrace();
		}
		return new RefactoringParticipant[0];
	}

