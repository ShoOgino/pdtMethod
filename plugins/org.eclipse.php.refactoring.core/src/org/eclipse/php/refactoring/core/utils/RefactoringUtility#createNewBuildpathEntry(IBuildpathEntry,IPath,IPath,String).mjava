	public static IBuildpathEntry createNewBuildpathEntry(IBuildpathEntry fEntryToChange, IPath path, IPath filePath,
			String newName) {
		switch (fEntryToChange.getEntryKind()) {
		case IBuildpathEntry.BPE_LIBRARY:
			return DLTKCore.newLibraryEntry(path, fEntryToChange.getAccessRules(), fEntryToChange.getExtraAttributes(),
					fEntryToChange.isExported(), fEntryToChange.isExternal());
		case IBuildpathEntry.BPE_PROJECT:
			return DLTKCore.newProjectEntry(path, fEntryToChange.getAccessRules(), fEntryToChange.combineAccessRules(),
					fEntryToChange.getExtraAttributes(), fEntryToChange.isExported());
		case IBuildpathEntry.BPE_SOURCE:
			IPath[] excludes = updatePathPatternes(fEntryToChange.getExclusionPatterns(), fEntryToChange.getPath(),
					filePath, newName);
			IPath[] includes = updatePathPatternes(fEntryToChange.getInclusionPatterns(), fEntryToChange.getPath(),
					filePath, newName);
			return DLTKCore.newSourceEntry(path, includes, excludes, fEntryToChange.getExtraAttributes());
		case IBuildpathEntry.BPE_CONTAINER:
			return DLTKCore.newContainerEntry(path, fEntryToChange.getAccessRules(),
					fEntryToChange.getExtraAttributes(), fEntryToChange.isExported());
		case IBuildpathEntry.BPE_VARIABLE:
			return DLTKCore.newVariableEntry(path, fEntryToChange.getAccessRules(), fEntryToChange.getExtraAttributes(),
					fEntryToChange.isExported());
		default:
			Assert.isTrue(false);
			return null;
		}
	}

