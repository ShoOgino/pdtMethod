	private void removeBuildPath(IResource resource, IProject project) {

		IScriptProject projrct = DLTKCore.create(project);
		IPath filePath = resource.getFullPath();

		oldBuildEntries = Arrays.asList(projrct.readRawBuildpath());

		newBuildEntries = new ArrayList<IBuildpathEntry>();

		newBuildEntries.addAll(oldBuildEntries);

		for (int i = 0; i < oldBuildEntries.size(); i++) {
			IBuildpathEntry fEntryToChange = oldBuildEntries.get(i);
			IPath entryPath = fEntryToChange.getPath();

			int mattchedPath = entryPath.matchingFirstSegments(filePath);

			if (mattchedPath == filePath.segmentCount()) {
				newBuildEntries.remove(fEntryToChange);
			} else {
				IBuildpathEntry newEntry = RefactoringUtility
						.createNewBuildpathEntry(fEntryToChange,
								fEntryToChange.getPath(), filePath, ""); //$NON-NLS-1$
				newBuildEntries.remove(fEntryToChange);
				newBuildEntries.add(newEntry);
			}
		}

		oldIncludePath = new ArrayList<IBuildpathEntry>();

		newIncludePathEntries = new ArrayList<IBuildpathEntry>();
		List<IncludePath> includePathEntries = Arrays.asList(IncludePathManager
				.getInstance().getIncludePaths(project));

		for (IncludePath entry : includePathEntries) {
			Object includePathEntry = entry.getEntry();
			IResource includeResource = null;
			if (!(includePathEntry instanceof IBuildpathEntry)) {
				includeResource = (IResource) includePathEntry;
				IPath entryPath = includeResource.getFullPath();

				IBuildpathEntry oldEntry = RefactoringUtility
						.createNewBuildpathEntry(IBuildpathEntry.BPE_SOURCE,
								entryPath);
				oldIncludePath.add((IBuildpathEntry) oldEntry);

				if (filePath.isPrefixOf(entryPath)
						|| entryPath.equals(filePath)) {
				} else {
					IBuildpathEntry newEntry = RefactoringUtility
							.createNewBuildpathEntry(
									IBuildpathEntry.BPE_SOURCE, entryPath);
					newIncludePathEntries.add(newEntry);
				}
			} else {
				newIncludePathEntries.add((IBuildpathEntry) includePathEntry);
				oldIncludePath.add((IBuildpathEntry) includePathEntry);

			}
		}
	}

