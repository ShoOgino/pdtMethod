	@Override
	public Change perform(IProgressMonitor pm) throws CoreException {

		// Breakpoint change is not undoable;
		if (fBreakpoints == null || fBreakpointAttributes == null) {
			return new RenameBreackpointChange(fDest, fSource, fNewName, fName, null, null);
		}
		// Add the fBreakpoints that got removed after the rename action.

		// WorkspaceJob createMarker = new WorkspaceJob("Creating markers") {
		// @Override
		// public IStatus runInWorkspace(IProgressMonitor monitor) throws
		// CoreException {
		//
		// synchronized (this) {
		final IPath dest = fDest.append(fNewName);
		final IBreakpointManager breakpointManager = DebugPlugin.getDefault().getBreakpointManager();

		// if (getResource()!=null && getResource().isAccessible()) { // in case
		// the old file exists (fast undo-redo)
		// return Status.CANCEL_STATUS;
		//
		// }
		// IResource file = workspace.getRoot().findMember(dest);
		// if (file == null) {
		// return Status.CANCEL_STATUS;
		// }
		for (final IResource markerResource : fBreakpoints.getKeys()) {
			Set<IBreakpoint> breakPoints = fBreakpoints.get(markerResource);
			final Path newPath = new Path(markerResource.getFullPath().toString()
					.replaceFirst(fSource.append(fName).toString(), dest.toString()));

			final IResource newMarkerResource = ResourcesPlugin.getWorkspace().getRoot().findMember(newPath);

			for (final IBreakpoint breakpoint : breakPoints) {
				final Map<String, Object> oldAttributesMap = fBreakpointAttributes.get(breakpoint);

				IWorkspaceRunnable wr = new IWorkspaceRunnable() {
					@Override
					public void run(IProgressMonitor monitor) throws CoreException {
						IMarker newMarker = newMarkerResource
								.createMarker("org.eclipse.php.debug.core.PHPConditionalBreakpointMarker"); //$NON-NLS-1$
						// Fix the breakpoint's tooltip string before applying
						// the old
						// attributes to the new marker.

						final Map<String, Object> newAttributesMap = new HashMap<>();

						String oldMessge = (String) oldAttributesMap.get(IMarker.MESSAGE);
						if (oldMessge != null) {
							newAttributesMap.put(IMarker.MESSAGE, oldMessge.replaceFirst(fName, dest.lastSegment()));
						}

						newAttributesMap.put(IMarker.LOCATION, newPath.toPortableString());

						newAttributesMap.put(IMarker.LINE_NUMBER, oldAttributesMap.get(IMarker.LINE_NUMBER));

						newAttributesMap.put(IBreakpoint.ENABLED, oldAttributesMap.get(IBreakpoint.ENABLED));

						newAttributesMap.put(IBreakpoint.PERSISTED, false);
						newAttributesMap.put(IBreakpoint.ID, oldAttributesMap.get(IBreakpoint.ID));
						newMarker.setAttributes(newAttributesMap);

						PHPLineBreakpoint newBreakPoint = createBreakPoint(breakpoint);

						newBreakPoint.setMarker(newMarker);
						newBreakPoint.setPersisted(breakpoint.isPersisted());
						breakpointManager.addBreakpoint(newBreakPoint);

						breakpoint.delete();
					}

				};

				try {
					ResourcesPlugin.getWorkspace().run(wr, getMarkerRule(newMarkerResource), 0, null);
				} catch (CoreException e) {
					throw new DebugException(e.getStatus());
				}
			}
		}
		// }
		// return Status.OK_STATUS;
		// }
		// };

		// createMarker.setRule(workspace.getRoot());
		// createMarker.setSystem(true);
		// createMarker.schedule(1000); // wait for UI refresh which refreshes
		// the markers

		// Breakpoint change is not undoable;
		return new RenameBreackpointChange(fDest, fSource, fNewName, fName, null, null);
	}

