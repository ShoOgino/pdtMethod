	private RefactoringStatus analyzeSelection(RefactoringStatus status) {
		fInputFlowContext = new FlowContext(0, fMaxVariableId + 1);
		fInputFlowContext.setConsiderAccessMode(true);
		fInputFlowContext.setComputeMode(FlowContext.ARGUMENTS);

		InOutFlowAnalyzer flowAnalyzer = new InOutFlowAnalyzer(
				fInputFlowContext);
		fInputFlowInfo = flowAnalyzer.perform(getSelectedNodes());

		if (fInputFlowInfo.branches()) {
			status.addFatalError(PhpRefactoringCoreMessages
					.getString("ExtractFunctionAnalyzer.0")); //$NON-NLS-1$
			fReturnKind = ERROR;
			return status;
		}
		if (fInputFlowInfo.isValueReturn()) {
			fReturnKind = RETURN_STATEMENT_VALUE;
		} else if (fInputFlowInfo.isVoidReturn()
				|| (fInputFlowInfo.isPartialReturn() && isVoidMethod() && isLastStatementSelected())) {
			fReturnKind = RETURN_STATEMENT_VOID;
		} else if (fInputFlowInfo.isNoReturn() || fInputFlowInfo.isThrow()
				|| fInputFlowInfo.isUndefined()) {
			fReturnKind = NO;
		}
		//
		// if (fReturnKind == UNDEFINED) {
		// status.addError(RefactoringCoreMessages.FlowAnalyzer_execution_flow,
		// JavaStatusContext.create(fCUnit, getSelection()));
		// fReturnKind= NO;
		// }
		computeInput();
		// computeExceptions();
		computeOutput(status);
		// if (status.hasFatalError())
		// return status;
		//
		// adjustArgumentsAndMethodLocals();
		// compressArrays();
		return status;
	}

