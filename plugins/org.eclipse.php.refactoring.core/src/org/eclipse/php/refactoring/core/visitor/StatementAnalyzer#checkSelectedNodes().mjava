	protected void checkSelectedNodes() {
		ASTNode[] nodes = getSelectedNodes();
		if (nodes.length == 0)
			return;

		ASTNode node = nodes[0];
		int selectionOffset = getSelection().getOffset();
		try {
			int pos = fScanner.getNextStartOffset(selectionOffset);
			if (pos == node.getStart()) {
				int lastNodeEnd = nodes[nodes.length - 1].getEnd();

				try {
					pos = fScanner.getNextStartOffset(lastNodeEnd);
				} catch (IllegalArgumentException e) {
					// The last statement;
					pos = -1;
				} catch (CoreException e) {
					pos = -1;
				}

				int selectionEnd = getSelection().getInclusiveEnd();
				if (pos > 0 && pos <= selectionEnd) {
					ISourceRange range = new SourceRange(lastNodeEnd, pos
							- lastNodeEnd);
					invalidSelection(
							"The end of the selection contains characters that do not belong to a statement.", //$NON-NLS-1$
							new SourceModuleSourceContext(fFile,
									new org.eclipse.dltk.corext.SourceRange(
											range.getOffset(), range
													.getLength())));
				}
				return; // success
			}
		} catch (CoreException e) {
			// fall through
		}
		ISourceRange range = new SourceRange(selectionOffset, node.getStart()
				- selectionOffset + 1);
		invalidSelection(
				"The beginning of the selection contains characters that do not belong to a statement.", //$NON-NLS-1$
				new SourceModuleSourceContext(fFile,
						new org.eclipse.dltk.corext.SourceRange(range
								.getOffset(), range.getLength())));
	}

