	@SuppressWarnings("unchecked")
	private ASTNode[] createCallNodes(Object duplicate) {
		List result = new ArrayList(2);

		Expression invocation = null;

		List arguments = null;
		if (isClassMethod()) {
			if (isStaticMethod()) {
				invocation = fAST.newStaticMethodInvocation();
				FunctionInvocation funcInv = fAST.newFunctionInvocation();
				funcInv.setFunctionName(fAST.newFunctionName(fAST
						.newIdentifier(fNewFunctionName)));
				((StaticMethodInvocation) invocation).setMethod(funcInv);
				((StaticMethodInvocation) invocation).setClassName(fAST
						.newIdentifier("self")); //$NON-NLS-1$
				arguments = ((StaticMethodInvocation) invocation).getMethod()
						.parameters();

			} else {
				invocation = fAST.newMethodInvocation();
				FunctionInvocation funcInv = fAST.newFunctionInvocation();
				funcInv.setFunctionName(fAST.newFunctionName(fAST
						.newIdentifier(fNewFunctionName)));
				((MethodInvocation) invocation).setMethod(funcInv);
				((MethodInvocation) invocation).setDispatcher(fAST
						.newVariable("this")); //$NON-NLS-1$
				arguments = ((MethodInvocation) invocation).getMethod()
						.parameters();
			}

		} else {
			invocation = fAST.newFunctionInvocation();
			((FunctionInvocation) invocation).setFunctionName(fAST
					.newFunctionName(fAST.newIdentifier(fNewFunctionName)));
			arguments = ((FunctionInvocation) invocation).parameters();
		}

		for (int i = 0; i < fParameterInfos.size(); i++) {
			ParameterInfo parameter = (ParameterInfo) fParameterInfos.get(i);
			arguments.add(fAST.newScalar(parameter.getOldName()));
		}

		ASTNode call;
		int returnKind = fAnalyzer.getReturnKind();
		switch (returnKind) {
		case ExtractFunctionAnalyzer.ACCESS_TO_LOCAL:
			Assignment assignment = fAST.newAssignment();
			assignment.setLeftHandSide(fAST.newVariable(removeDollar(fAnalyzer
					.getReturnValue().getName())));
			assignment.setRightHandSide(invocation);
			call = assignment;
			break;
		case ExtractFunctionAnalyzer.RETURN_STATEMENT_VALUE:
			ReturnStatement rs = fAST.newReturnStatement();
			rs.setExpression(invocation);
			call = rs;
			break;
		default:
			call = invocation;
		}

		if (call instanceof Expression && !fAnalyzer.isExpressionSelected()) {
			call = fAST.newExpressionStatement((Expression) call);
		}
		result.add(call);
		return (ASTNode[]) result.toArray(new ASTNode[result.size()]);
	}

