	public void parseXML(final Reader input, final IniHandler handler) throws IOException, InvalidIniFormatException {
		class XML2Ini extends DefaultHandler {
			static final String ATTR_KEY = "key"; //$NON-NLS-1$
			static final String ATTR_VALUE = "value"; //$NON-NLS-1$
			static final String ATTR_VERSION = "version"; //$NON-NLS-1$
			static final String CURRENT_VERSION = "1.0"; //$NON-NLS-1$
			static final String TAG_INI = "ini"; //$NON-NLS-1$
			static final String TAG_OPTION = "option"; //$NON-NLS-1$

			static final String TAG_SECTION = "section"; //$NON-NLS-1$

			public void endElement(final String uri, final String localName, final String qname) {
				if (qname.equals(TAG_SECTION))
					handler.endSection();
			}

			public void startElement(final String uri, final String localName, final String qname, final Attributes attrs) throws SAXException {
				final String key = attrs.getValue(ATTR_KEY);

				if (qname.equals(TAG_INI)) {
					final String ver = attrs.getValue(ATTR_VERSION);

					if (ver == null || !ver.equals(CURRENT_VERSION))
						throw new SAXException("Missing or invalid 'version' attribute"); //$NON-NLS-1$
				} else {
					if (key == null)
						throw new SAXException("missing '" + ATTR_KEY + "' attribute"); //$NON-NLS-1$ //$NON-NLS-2$

					if (qname.equals(TAG_SECTION))
						handler.startSection(key);
					else if (qname.equals(TAG_OPTION))
						handler.handleOption(key, attrs.getValue(ATTR_VALUE));
					else
						throw new SAXException("Invalid element: " + qname); //$NON-NLS-1$
				}
			}
		}

		final XML2Ini xml2ini = new XML2Ini();

		try {
			SAXParserFactory.newInstance().newSAXParser().parse(new InputSource(input), xml2ini);
		} catch (final Exception x) {
			throw new InvalidIniFormatException(x);
		}
	}

