	/**
	 * Service oszt�ly keres�s
	 *
	 * a JDK JAR specifik�ci�ban defini�lt <B>Services API</B>-nak
	 * megfelel�en service oszt�ly keres�s.</p><p>
	 * Az implement�l� oszt�ly n�v keres�se a <CODE>serviceId</CODE> nev�
	 * system property vizsg�lat�val kezd�dik. Amennyiben nincs ilyen
	 * property, �gy a keres�s a
	 * <CODE>/META-INF/services/<I>serviceId</I></CODE> nev� file tartalm�val
	 * folytat�dik. Amennyiben nincs ilyen nev� file, �gy a param�terk�nt �tadott
	 * <CODE>defaultService</CODE> lesz az oszt�ly neve.</p><p>
	 * @param serviceId keresett oszt�ly/service neve
	 * @param defaultService alap�rtelmezett implement�l� oszt�ly neve
	 * @throws IllegalArgumentException keres�si vagy p�ld�nyos�t�si hiba eset�n
	 * @return a keresett oszt�ly objektum
	 */
	protected static Class findServiceClass(final String serviceId, final String defaultService) throws IllegalArgumentException {
		final ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
		final String serviceClassName = findServiceClassName(serviceId, defaultService);

		try {
			return classLoader == null ? Class.forName(serviceClassName) : classLoader.loadClass(serviceClassName);
		} catch (final ClassNotFoundException x) {
			throw (IllegalArgumentException) new IllegalArgumentException("Provider " + serviceClassName + " not found").initCause(x); //$NON-NLS-1$ //$NON-NLS-2$
		}
	}

