	public static/*<T> T*/Object newInstance(final Class/*<T>*/clazz, final Preferences prefs) {
		return clazz.cast(Proxy.newProxyInstance(clazz.getClassLoader(), new Class[] { clazz }, new AbstractBeanInvocationHandler() {
			protected Object getPropertySpi(final String property, final Class/*<?>*/clazz) {
				return prefs.get(property, null);
			}

			protected boolean hasPropertySpi(final String property) {
				return prefs.get(property, null) != null;
			}

			protected void setPropertySpi(final String property, final Object value, final Class/*<?>*/clazz) {
				prefs.put(property, value.toString());
			}
		}));
	}

