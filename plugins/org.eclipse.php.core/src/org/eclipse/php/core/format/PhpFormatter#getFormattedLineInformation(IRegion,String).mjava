	/**
	 * @return the formatted line (without whitespaces) information
	 * Note: this is an O(n) implementation (firstly it looks a bit complicated but it worth it, 
	 * the previous version was 3*n on the string's length)
	 */
	private IRegion getFormattedLineInformation(IRegion lineInfo, String lineText) {
		// start checking from left and right to the center 
		int leftNonWhitespaceChar = 0;
		int rightNonWhitespaceChar = lineText.length() - 1;
		final byte[] bytes = lineText.getBytes();
		boolean keepSearching = true;
		
		while (keepSearching) {
			final boolean leftIsWhiteSpace = bytes[leftNonWhitespaceChar] == CHAR_SPACE || bytes[leftNonWhitespaceChar] == CHAR_TAB; 
			final boolean rightIsWhiteSpace = bytes[rightNonWhitespaceChar] == CHAR_SPACE || bytes[rightNonWhitespaceChar] == CHAR_TAB;
			if (leftIsWhiteSpace) leftNonWhitespaceChar++;
			if (rightIsWhiteSpace) rightNonWhitespaceChar--;
			keepSearching = (leftIsWhiteSpace || rightIsWhiteSpace) && (leftNonWhitespaceChar < rightNonWhitespaceChar) ;
		}
		
		// if line is empty then the indexes were switched
		if (leftNonWhitespaceChar > rightNonWhitespaceChar) 
			return new SimpleStructuredRegion(lineInfo.getOffset() , 0);  
		
		// if there are no changes - return the original line information, else build a fixed region
		return leftNonWhitespaceChar == 0 && rightNonWhitespaceChar == lineText.length() - 1 ? 
			lineInfo :  
			new SimpleStructuredRegion(lineInfo.getOffset() + leftNonWhitespaceChar, rightNonWhitespaceChar - leftNonWhitespaceChar + 1); 
	}

