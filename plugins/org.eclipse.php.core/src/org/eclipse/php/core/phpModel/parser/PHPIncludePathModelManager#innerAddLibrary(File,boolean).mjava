	private void innerAddLibrary(File library, boolean isZip) {
		PHPIncludePathModel model = new PHPIncludePathModel(library.getPath(), isZip ? PHPIncludePathModel.TYPE_ZIP : PHPIncludePathModel.TYPE_LIBRARY);

		PHPLanguageManager languageManager = PHPLanguageManagerProvider.instance().getPHPLanguageManager(phpVersion);
		ParserClient client = languageManager.createParserClient(model);

		updateExtentionList();
		if (library.exists()) {
			if (isZip) {
				// Check if the zip file is newer then the cached file. If so, the zip was modified and we would like to re-parse it.
				// Also, when the zip is un-cached or modified, add it to the list of libraries that we need to cache in the dispose. 
				if (library.lastModified() < DefaultCacheManager.instance().getSharedCacheModificationTime(project, model)) {
					// The zip is valid.
					DefaultCacheManager.instance().load(project, model, true);
					compositePhpModel.addModel(model);
					return;
				} else {
					modelsToCache.put(model, model);
				}
				parseZip(library, client);
			} else {
				// Load the cache for the library
				PHPIncludePathModel cacheModel = new PHPIncludePathModel(library.getPath(), PHPIncludePathModel.TYPE_LIBRARY);
				DefaultCacheManager.instance().load(project, cacheModel, true);
				recursiveParse(library, client, model, cacheModel);
			}
		}
		compositePhpModel.addModel(model);
	}

