	public boolean visit(ASTNode s) throws Exception {
		Class<? extends ASTNode> nodeClass = s.getClass();
		if (nodeClass.equals(ArrayCreation.class)) {
			return visit((ArrayCreation) s);
		}
		if (nodeClass.equals(ArrayElement.class)) {
			return visit((ArrayElement) s);
		}
		if (nodeClass.equals(ArrayVariableReference.class)) {
			return visit((ArrayVariableReference) s);
		}
		if (nodeClass.equals(Assignment.class)) {
			return visit((Assignment) s);
		}
		if (nodeClass.equals(ASTError.class)) {
			return visit((ASTError) s);
		}
		if (nodeClass.equals(BackTickExpression.class)) {
			return visit((BackTickExpression) s);
		}
		if (nodeClass.equals(BreakStatement.class)) {
			return visit((BreakStatement) s);
		}
		if (nodeClass.equals(CastExpression.class)) {
			return visit((CastExpression) s);
		}
		if (nodeClass.equals(CatchClause.class)) {
			return visit((CatchClause) s);
		}
		if (nodeClass.equals(FinallyClause.class)) {
			return visit((FinallyClause) s);
		}
		if (nodeClass.equals(ConstantDeclaration.class)) {
			return visit((ConstantDeclaration) s);
		}
		if (nodeClass.equals(ClassDeclaration.class)) {
			return visit((ClassDeclaration) s);
		}
		if (nodeClass.equals(ClassInstanceCreation.class)) {
			return visit((ClassInstanceCreation) s);
		}
		if (nodeClass.equals(CloneExpression.class)) {
			return visit((CloneExpression) s);
		}
		if (nodeClass.equals(Comment.class)) {
			return visit((Comment) s);
		}
		if (nodeClass.equals(ConditionalExpression.class)) {
			return visit((ConditionalExpression) s);
		}
		if (nodeClass.equals(ConstantReference.class)) {
			return visit((ConstantReference) s);
		}
		if (nodeClass.equals(ContinueStatement.class)) {
			return visit((ContinueStatement) s);
		}
		if (nodeClass.equals(DeclareStatement.class)) {
			return visit((DeclareStatement) s);
		}
		if (nodeClass.equals(StaticFieldAccess.class)) {
			return visit((StaticFieldAccess) s);
		}
		if (nodeClass.equals(FieldAccess.class)) {
			return visit((FieldAccess) s);
		}
		if (nodeClass.equals(Dispatch.class)) {
			return visit((Dispatch) s);
		}
		if (nodeClass.equals(DoStatement.class)) {
			return visit((DoStatement) s);
		}
		if (nodeClass.equals(EchoStatement.class)) {
			return visit((EchoStatement) s);
		}
		if (nodeClass.equals(EmptyStatement.class)) {
			return visit((EmptyStatement) s);
		}
		if (nodeClass.equals(ExpressionStatement.class)) {
			return visit((ExpressionStatement) s);
		}
		if (nodeClass.equals(ForEachStatement.class)) {
			return visit((ForEachStatement) s);
		}
		if (nodeClass.equals(FormalParameter.class)) {
			return visit((FormalParameter) s);
		}
		if (nodeClass.equals(FormalParameterByReference.class)) {
			return visit((FormalParameterByReference) s);
		}
		if (nodeClass.equals(ForStatement.class)) {
			return visit((ForStatement) s);
		}
		if (nodeClass.equals(GlobalStatement.class)) {
			return visit((GlobalStatement) s);
		}
		if (nodeClass.equals(IfStatement.class)) {
			return visit((IfStatement) s);
		}
		if (nodeClass.equals(IgnoreError.class)) {
			return visit((IgnoreError) s);
		}
		if (nodeClass.equals(Include.class)) {
			return visit((Include) s);
		}
		if (nodeClass.equals(InfixExpression.class)) {
			return visit((InfixExpression) s);
		}
		if (nodeClass.equals(InstanceOfExpression.class)) {
			return visit((InstanceOfExpression) s);
		}
		if (nodeClass.equals(InterfaceDeclaration.class)) {
			return visit((InterfaceDeclaration) s);
		}
		if (nodeClass.equals(ListVariable.class)) {
			return visit((ListVariable) s);
		}
		if (nodeClass.equals(PHPCallArgumentsList.class)) {
			return visit((PHPCallArgumentsList) s);
		}
		if (nodeClass.equals(PHPCallExpression.class)) {
			return visit((PHPCallExpression) s);
		}
		if (nodeClass.equals(PHPFieldDeclaration.class)) {
			return visit((PHPFieldDeclaration) s);
		}
		if (nodeClass.equals(PHPDocBlock.class)) {
			return visit((PHPDocBlock) s);
		}
		if (nodeClass.equals(PHPDocTag.class)) {
			return visit((PHPDocTag) s);
		}
		if (nodeClass.equals(PHPMethodDeclaration.class)) {
			return visit((PHPMethodDeclaration) s);
		}
		if (nodeClass.equals(PostfixExpression.class)) {
			return visit((PostfixExpression) s);
		}
		if (nodeClass.equals(PrefixExpression.class)) {
			return visit((PrefixExpression) s);
		}
		if (nodeClass.equals(Quote.class)) {
			return visit((Quote) s);
		}
		if (nodeClass.equals(ReferenceExpression.class)) {
			return visit((ReferenceExpression) s);
		}
		if (nodeClass.equals(ReflectionArrayVariableReference.class)) {
			return visit((ReflectionArrayVariableReference) s);
		}
		if (nodeClass.equals(ReflectionCallExpression.class)) {
			return visit((ReflectionCallExpression) s);
		}
		if (nodeClass.equals(ReflectionStaticMethodInvocation.class)) {
			return visit((ReflectionStaticMethodInvocation) s);
		}
		if (nodeClass.equals(ReflectionVariableReference.class)) {
			return visit((ReflectionVariableReference) s);
		}
		if (nodeClass.equals(ReturnStatement.class)) {
			return visit((ReturnStatement) s);
		}
		if (nodeClass.equals(ReturnType.class)) {
			return visit((ReturnType) s);
		}
		if (nodeClass.equals(YieldExpression.class)) {
			return visit((YieldExpression) s);
		}
		if (nodeClass.equals(Scalar.class)) {
			return visit((Scalar) s);
		}
		if (nodeClass.equals(StaticConstantAccess.class)) {
			return visit((StaticConstantAccess) s);
		}
		if (nodeClass.equals(StaticDispatch.class)) {
			return visit((StaticDispatch) s);
		}
		if (nodeClass.equals(StaticMethodInvocation.class)) {
			return visit((StaticMethodInvocation) s);
		}
		if (nodeClass.equals(StaticStatement.class)) {
			return visit((StaticStatement) s);
		}
		if (nodeClass.equals(SwitchCase.class)) {
			return visit((SwitchCase) s);
		}
		if (nodeClass.equals(SwitchStatement.class)) {
			return visit((SwitchStatement) s);
		}
		if (nodeClass.equals(ThrowStatement.class)) {
			return visit((ThrowStatement) s);
		}
		if (nodeClass.equals(TryStatement.class)) {
			return visit((TryStatement) s);
		}
		if (nodeClass.equals(TypeReference.class)) {
			return visit((TypeReference) s);
		}
		if (nodeClass.equals(UnaryOperation.class)) {
			return visit((UnaryOperation) s);
		}
		if (nodeClass.equals(VariableReference.class)) {
			return visit((VariableReference) s);
		}
		if (nodeClass.equals(WhileStatement.class)) {
			return visit((WhileStatement) s);
		}
		if (nodeClass.equals(SimpleReference.class)) {
			return visit((SimpleReference) s);
		}
		if (nodeClass.equals(UseStatement.class)) {
			return visit((UseStatement) s);
		}
		if (nodeClass.equals(UsePart.class)) {
			return visit((UsePart) s);
		}
		if (nodeClass.equals(NamespaceReference.class)) {
			return visit((NamespaceReference) s);
		}
		if (nodeClass.equals(FullyQualifiedReference.class)) {
			return visit((FullyQualifiedReference) s);
		}
		if (nodeClass.equals(GotoLabel.class)) {
			return visit((GotoLabel) s);
		}
		if (nodeClass.equals(GotoStatement.class)) {
			return visit((GotoStatement) s);
		}
		if (nodeClass.equals(LambdaFunctionDeclaration.class)) {
			return visit((LambdaFunctionDeclaration) s);
		}
		if (nodeClass.equals(AnonymousClassDeclaration.class)) {
			return visit((AnonymousClassDeclaration) s);
		}

		// php5.4
		if (nodeClass.equals(FullyQualifiedTraitMethodReference.class)) {
			return visit((FullyQualifiedTraitMethodReference) s);
		}
		if (nodeClass.equals(TraitAlias.class)) {
			return visit((TraitAlias) s);
		}
		if (nodeClass.equals(TraitAliasStatement.class)) {
			return visit((TraitAliasStatement) s);
		}
		if (nodeClass.equals(TraitPrecedence.class)) {
			return visit((TraitPrecedence) s);
		}
		if (nodeClass.equals(TraitPrecedenceStatement.class)) {
			return visit((TraitPrecedenceStatement) s);
		}
		if (nodeClass.equals(TraitUseStatement.class)) {
			return visit((TraitUseStatement) s);
		}
		if (nodeClass.equals(TraitDeclaration.class)) {
			return visit((TraitDeclaration) s);
		}
		return true;
	}

