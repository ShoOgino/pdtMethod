	/**
	 * Removes this node from its parent. Has no effect if this node is unparented.
	 * If this node appears as an element of a child list property of its parent,
	 * then this node is removed from the list using <code>List.remove</code>. If
	 * this node appears as the value of a child property of its parent, then this
	 * node is detached from its parent by passing <code>null</code> to the
	 * appropriate setter method; this operation fails if this node is in a
	 * mandatory property.
	 * 
	 */
	public final void delete() {
		StructuralPropertyDescriptor p = getLocationInParent();
		if (p == null) {
			// node is unparented
			return;
		}
		if (p.isChildProperty()) {
			getParent().setStructuralProperty(this.location, null);
			return;
		}
		if (p.isChildListProperty()) {
			List<?> l = (List<?>) getParent().getStructuralProperty(this.location);
			l.remove(this);
		}
	}

