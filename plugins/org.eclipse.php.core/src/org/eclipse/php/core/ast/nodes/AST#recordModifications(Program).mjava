	/**
	 * Enables the recording of changes to the given compilation unit and its
	 * descendents. The compilation unit must have been created by
	 * <code>ASTParser</code> and still be in its original state. Once recording is
	 * on, arbitrary changes to the subtree rooted at the compilation unit are
	 * recorded internally. Once the modification has been completed, call
	 * <code>rewrite</code> to get an object representing the corresponding edits to
	 * the original source code string.
	 * 
	 * @exception IllegalArgumentException
	 *                if this compilation unit is marked as unmodifiable, or if this
	 *                compilation unit has already been tampered with, or if
	 *                recording has already been enabled, or if <code>root</code> is
	 *                not owned by this AST
	 * @see Program#recordModifications()
	 * @since 3.0
	 */
	void recordModifications(Program root) {
		if (this.modificationCount != this.originalModificationCount) {
			throw new IllegalArgumentException("AST is already modified"); //$NON-NLS-1$
		} else if (this.rewriter != null) {
			throw new IllegalArgumentException("AST modifications are already recorded"); //$NON-NLS-1$
		} else if ((root.getFlags() & ASTNode.PROTECT) != 0) {
			throw new IllegalArgumentException("Root node is unmodifiable"); //$NON-NLS-1$
		} else if (root.getAST() != this) {
			throw new IllegalArgumentException("Root node is not owned by this ast"); //$NON-NLS-1$
		}

		this.rewriter = new InternalASTRewriter(root);
		this.setEventHandler(this.rewriter);
	}

