	/**
	 * Resolves the given method declaration and returns the binding for it.
	 * <p>
	 * The implementation of <code>MethodDeclaration.resolveBinding</code> forwards
	 * to this method. How the method resolves is often a function of the context in
	 * which the method declaration node is embedded as well as the method
	 * declaration subtree itself.
	 * </p>
	 * <p>
	 * The default implementation of this method returns <code>null</code>.
	 * Subclasses may reimplement.
	 * </p>
	 * 
	 * @param method
	 *                   the method or constructor declaration of interest
	 * @return the binding for the given method declaration, or <code>null</code> if
	 *         no binding is available
	 */
	@Override
	IMethodBinding resolveMethod(MethodDeclaration method) {
		if (method == null || method.getFunction() == null) {
			throw new IllegalArgumentException("Can not resolve null expression"); //$NON-NLS-1$
		}

		try {
			IModelElement elementAt = sourceModule.getElementAt(method.getStart());
			if (elementAt instanceof IMethod) {
				return getMethodBinding((IMethod) elementAt);
			}

		} catch (ModelException e) {
			if (DLTKCore.DEBUG) {
				e.printStackTrace();
			}
		}
		return null;
	}

