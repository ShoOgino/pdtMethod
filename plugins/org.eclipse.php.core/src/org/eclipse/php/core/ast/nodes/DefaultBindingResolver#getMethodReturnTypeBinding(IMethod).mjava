	@Override
	public ITypeBinding[] getMethodReturnTypeBinding(IMethod method) {
		List<ITypeBinding> result = new LinkedList<>();
		try {
			int flags = method.getFlags();
			if (!PHPFlags.isAbstract(flags)) {
				IEvaluatedType[] evaluatedFunctionReturnTypes = bindingUtil.getFunctionReturnType(method);
				for (IEvaluatedType currentEvaluatedType : evaluatedFunctionReturnTypes) {
					ITypeBinding typeBinding = getTypeBinding(currentEvaluatedType, sourceModule);
					if (typeBinding != null) {
						result.add(typeBinding);
					}
				}
			} else {
				IModelElement parentElement = method.getParent();
				if (parentElement instanceof IType) {
					IType parent = (IType) parentElement;
					IType[] functionReturnTypes = CodeAssistUtils.getFunctionReturnType(new IType[] { parent },
							method.getElementName(), CodeAssistUtils.USE_FACTORYMETHOD | CodeAssistUtils.USE_PHPDOC,
							method.getSourceModule(), 0);
					for (IType currentEvaluatedType : functionReturnTypes) {
						ITypeBinding typeBinding = getTypeBinding(currentEvaluatedType);
						if (typeBinding != null) {
							result.add(typeBinding);
						}
					}
				}
			}
		} catch (ModelException e) {
			if (DLTKCore.DEBUG) {
				e.printStackTrace();
			}
		}
		return result.toArray(new ITypeBinding[result.size()]);
	}

