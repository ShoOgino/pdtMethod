	/**
	 * Prelude portion of the "3 step program" for changing the value of a simple
	 * property of this node. Here is the code pattern found in all AST node
	 * subclasses:
	 * 
	 * <pre>
	 * preValueChange(FOO_PROPERTY);
	 * this.foo = newFoo;
	 * postValueChange(FOO_PROPERTY);
	 * </pre>
	 * 
	 * The first part (preValueChange) does the precondition check to make sure the
	 * node is modifiable (not PROTECTED). The change operation must fail
	 * atomically; so it is crucial that the precondition checks are done before the
	 * field is hammered. The final part (postValueChange)reports post-change
	 * events.
	 * <p>
	 * This method calls <code>ast.modifying()</code> for the node affected.
	 * </p>
	 * 
	 * @param property
	 *            the property descriptor of this node
	 * @exception RuntimeException
	 *                if:
	 *                <ul>
	 *                <li>this node is unmodifiable</li>
	 *                </ul>
	 */
	final void preValueChange(SimplePropertyDescriptor property) {
		if ((this.flags & PROTECT) != 0) {
			// this node is protected => cannot change valure of properties
			throw new IllegalArgumentException("AST node cannot be modified"); //$NON-NLS-1$
		}
		this.ast.preValueChangeEvent(this, property);
		this.ast.modifying();
	}

