	public LambdaFunctionDeclaration(int start, int end, AST ast, List<FormalParameter> formalParameters,
			List<Expression> lexicalVars, Block body, final boolean isReference, final boolean isStatic,
			int staticStart, Identifier returnType) {
		super(start, end, ast);

		if (formalParameters == null) {
			throw new IllegalArgumentException();
		}

		setIsReference(isReference);

		Iterator<FormalParameter> paramIt = formalParameters.iterator();
		while (paramIt.hasNext()) {
			this.formalParameters.add(paramIt.next());
		}
		if (lexicalVars != null) {
			Iterator<Expression> varsIt = lexicalVars.iterator();
			while (varsIt.hasNext()) {
				this.lexicalVariables.add(varsIt.next());
			}
		}
		if (returnType != null) {
			setReturnType(returnType);
		}
		if (body != null) {
			setBody(body);
		}
		setStatic(isStatic);
		this.staticStart = staticStart;
	}

