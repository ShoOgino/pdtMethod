	/**
	 * Returns a list of type bindings representing the direct superinterfaces
	 * of the class, interface, or enum type represented by this type binding.
	 * <p>
	 * If this type binding represents a class or enum type, the return value is
	 * an array containing type bindings representing all interfaces directly
	 * implemented by this class. The number and order of the interface objects
	 * in the array corresponds to the number and order of the interface names
	 * in the <code>implements</code> clause of the original declaration of this
	 * type.
	 * </p>
	 * <p>
	 * If this type binding represents an interface, the array contains type
	 * bindings representing all interfaces directly extended by this interface.
	 * The number and order of the interface objects in the array corresponds to
	 * the number and order of the interface names in the <code>extends</code>
	 * clause of the original declaration of this interface.
	 * </p>
	 * <p>
	 * If the class or enum implements no interfaces, or the interface extends
	 * no interfaces, or if this type binding represents an array type, a
	 * primitive type, the null type, a type variable, an annotation type, a
	 * wildcard type, or a capture binding, this method returns an array of
	 * length 0.
	 * </p>
	 * 
	 * @return the list of type bindings for the interfaces extended by this
	 *         class or enum, or interfaces extended by this interface, or
	 *         otherwise the empty list
	 */
	@Override
	public ITypeBinding[] getInterfaces() {
		if (isUnknown()) {
			return new ITypeBinding[0];
		}

		if (this.interfaces == null) {
			IType[] types = getSuperTypes();
			List<ITypeBinding> interfaces = new LinkedList<>();
			for (IType type : types) {
				try {
					if (PHPFlags.isInterface(type.getFlags())) {
						interfaces.add(resolver.getTypeBinding(type));
					}
				} catch (ModelException e) {
					if (DLTKCore.DEBUG) {
						e.printStackTrace();
					}
				}
			}
			this.interfaces = interfaces.toArray(new ITypeBinding[interfaces.size()]);
		}
		return this.interfaces;
	}

