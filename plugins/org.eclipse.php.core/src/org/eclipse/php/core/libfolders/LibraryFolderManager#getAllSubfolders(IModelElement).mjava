	/**
	 * Returns all subfolders of the given model element.
	 * 
	 * <p>
	 * This method traverses the complete element's subtree to find the
	 * subfolders on all levels.
	 * </p>
	 * 
	 * @param element
	 *            a model element
	 * 
	 * @return an array of model elements containing the given element and all
	 *         its children
	 * 
	 * @throws ModelException
	 *             if any of the given element does not exist or if an exception
	 *             occurs while accessing its corresponding resource
	 */
	public IModelElement[] getAllSubfolders(IModelElement element)
			throws ModelException {
		List<IModelElement> children = new ArrayList<IModelElement>();

		IPath path = element.getPath();

		// check all project fragments in the project
		IProjectFragment[] fragments = element.getScriptProject()
				.getProjectFragments();

		for (IProjectFragment fragment : fragments) {
			if (pathContainsModelElement(path, fragment)) {
				// the project fragment is in the path
				children.add(fragment);
			}

			// check all script folders in the project fragment
			for (IModelElement child : fragment.getChildren()) {
				if (child.getElementType() == IModelElement.SCRIPT_FOLDER
						&& pathContainsModelElement(path, child)) {
					// the script folder is in the path
					children.add(child);
				}
			}
		}

		return children.toArray(new IModelElement[children.size()]);
	}

