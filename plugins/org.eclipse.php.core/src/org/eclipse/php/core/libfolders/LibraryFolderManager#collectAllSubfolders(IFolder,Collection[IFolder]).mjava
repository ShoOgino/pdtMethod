	/**
	 * Add the given folder and all its subfolders (recursively) to the given result
	 * collection.
	 * 
	 * <p>
	 * This method traverses the complete folder's subtree to find the subfolders on
	 * all levels.
	 * </p>
	 * 
	 * @param folder
	 *            a folder
	 * @param result
	 *            a collection of folder to hold the result
	 * 
	 * @throws CoreException
	 *             if the folder does not exist or is in a closed project
	 */
	private void collectAllSubfolders(IFolder folder, Collection<IFolder> result) throws CoreException {
		result.add(folder);

		if (!folder.exists()) {
			return;
		}

		for (IResource child : folder.members()) {
			if (child.getType() == IResource.FOLDER) {
				collectAllSubfolders((IFolder) child, result);
			}
		}
	}

