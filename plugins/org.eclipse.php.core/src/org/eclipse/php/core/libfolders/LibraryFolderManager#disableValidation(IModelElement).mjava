	/**
	 * Disables validation for the given model element in the WTP Validation
	 * Framework.
	 * 
	 * <p>
	 * This method cleans up the disabled state for all subfolders of the given
	 * model element (i.e. source folder). This is necessary to avoid nested
	 * declarations of library folders. Otherwise, if the user marks a library
	 * folder as a source folder and there are nested library folders then there
	 * will be still subfolders which remain library folders.
	 * </p>
	 * 
	 * @param elements
	 *            a model element to disable validation for
	 * 
	 * @throws ModelException
	 *             if the given element does not exist or if an exception occurs
	 *             while accessing its corresponding resource
	 */
	public void disableValidation(IModelElement element) throws ModelException {
		ValidationFramework vf = ValidationFramework.getDefault();

		// clean up the state of all subfolders
		for (IModelElement subfolder : getAllSubfolders(element)) {
			vf.enableValidation(subfolder.getResource());
		}

		if (!isInLibraryFolder(element)) {
			// disable the given folder only if no parent folder is a library
			// folder yet
			vf.disableValidation(element.getResource());
		}
	}

