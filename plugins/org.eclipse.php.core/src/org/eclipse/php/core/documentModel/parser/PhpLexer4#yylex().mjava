  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public String yylex() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      if (yy_markedPos_l > yy_startRead) {
        switch (yy_buffer_l[yy_markedPos_l-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yy_atBOL = true;
          break;
        case '\r': 
          if (yy_markedPos_l < yy_endRead_l)
            yy_atBOL = yy_buffer_l[yy_markedPos_l] != '\n';
          else if (yy_atEOF)
            yy_atBOL = false;
          else {
            boolean eof = yy_refill();
            yy_markedPos_l = yy_markedPos;
            yy_buffer_l = yy_buffer;
            if (eof) 
              yy_atBOL = false;
            else 
              yy_atBOL = yy_buffer_l[yy_markedPos_l] != '\n';
          }
          break;
        default:
          yy_atBOL = false;
        }
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      if (yy_atBOL)
        yy_state = YY_LEXSTATE[yy_lexical_state+1];
      else
        yy_state = YY_LEXSTATE[yy_lexical_state];


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 525: 
          { return PHPDOC_GLOBAL; }
        case 592: break;
        case 521: 
          { return PHPDOC_STATIC; }
        case 593: break;
        case 516: 
          { return PHPDOC_THROWS; }
        case 594: break;
        case 514: 
          { return PHPDOC_IGNORE; }
        case 595: break;
        case 511: 
          { return PHPDOC_ACCESS; }
        case 596: break;
        case 510: 
          { return PHPDOC_AUTHOR; }
        case 597: break;
        case 508: 
          { return PHPDOC_RETURN; }
        case 598: break;
        case 486: 
          { return PHPDOC_MAGIC; }
        case 599: break;
        case 482: 
          { return PHPDOC_PARAM; }
        case 600: break;
        case 479: 
          { return PHPDOC_SINCE; }
        case 601: break;
        case 474: 
          { return PHPDOC_FINAL; }
        case 602: break;
        case 587: 
          { return PHPDOC_SUBPACKAGE; }
        case 603: break;
        case 586: 
          { return PHPDOC_FILESOURCE; }
        case 604: break;
        case 585: 
          { return PHPDOC_DEPRECATED; }
        case 605: break;
        case 580: 
          { return PHPDOC_STATICVAR; }
        case 606: break;
        case 579: 
          { return PHPDOC_COPYRIGHT; }
        case 607: break;
        case 576: 
          { return PHPDOC_EXCEPTION; }
        case 608: break;
        case 177: 
          { 
    popState();
    return PHPDOC_COMMENT_END;
 }
        case 609: break;
        case 121: 
          { 
    return PHP_AS;
 }
        case 610: break;
        case 124: 
          { 
    return PHP_DO;
 }
        case 611: break;
        case 127: 
          { 
    return PHP_IF;
 }
        case 612: break;
        case 212: 
          { 
    return PHP_NEW;
 }
        case 613: break;
        case 215: 
          { 
    return PHP_DIE;
 }
        case 614: break;
        case 219: 
          { 
    return PHP_FOR;
 }
        case 615: break;
        case 224: 
          { 
    return PHP_USE;
 }
        case 616: break;
        case 238: 
          { 
    return PHP_VAR;
 }
        case 617: break;
        case 90: 
        case 91: 
          { 
    popState();
    return PHP_LINE_COMMENT;
 }
        case 618: break;
        case 176: 
          { 
    popState();
    return PHP_COMMENT_END;
 }
        case 619: break;
        case 13: 
        case 80: 
          { 
    yypushback(1);
    pushState(ST_PHP_HIGHLIGHTING_ERROR);
 }
        case 620: break;
        case 589: 
          { 
    return PHP_INCLUDE_ONCE;
 }
        case 621: break;
        case 588: 
          { 
    return PHP_REQUIRE_ONCE;
 }
        case 622: break;
        case 92: 
        case 93: 
        case 94: 
          { 
    return PHP_LINE_COMMENT;
 }
        case 623: break;
        case 89: 
          { 
    return PHP_LINE_COMMENT;
 }
        case 624: break;
        case 172: 
          { 
    popState();
    pushState(ST_PHP_LOOKING_FOR_PROPERTY);
    return PHP_OPERATOR;
     }
        case 625: break;
        case 58: 
          { 
    pushState(ST_PHP_LINE_COMMENT);
    return PHP_LINE_COMMENT;
 }
        case 626: break;
        case 168: 
          { 
    pushState(ST_PHP_IN_SCRIPTING);
    return PHP_TOKEN;
 }
        case 627: break;
        case 194: 
          { 
	if (asp_tags) {
	    return PHP_CLOSETAG;
	}
	return PHP_LINE_COMMENT;
 }
        case 628: break;
        case 106: 
          { 
    pushState(ST_PHP_LOOKING_FOR_PROPERTY);
    return PHP_OPERATOR;
 }
        case 629: break;
        case 590: 
          { 
    return PHP__FUNCTION__;
 }
        case 630: break;
        case 572: 
          { 
    return PHP_ENDFOREACH;
 }
        case 631: break;
        case 571: 
          { 
    return PHP_ENDDECLARE;
 }
        case 632: break;
        case 538: 
          { 
    return PHP__LINE__;
 }
        case 633: break;
        case 535: 
          { 
    return PHP__FILE__;
 }
        case 634: break;
        case 496: 
          { 
    return PHP_FOREACH;
 }
        case 635: break;
        case 495: 
          { 
    return PHP_INCLUDE;
 }
        case 636: break;
        case 494: 
          { 
    return PHP_DECLARE;
 }
        case 637: break;
        case 493: 
          { 
    return PHP_DEFAULT;
 }
        case 638: break;
        case 492: 
          { 
    return PHP_REQUIRE;
 }
        case 639: break;
        case 487: 
          { 
    return PHP_EXTENDS;
 }
        case 640: break;
        case 462: 
          { 
    return PHP_GLOBAL;
 }
        case 641: break;
        case 457: 
          { 
    return PHP_PARENT;
 }
        case 642: break;
        case 456: 
          { 
    return PHP_SWITCH;
 }
        case 643: break;
        case 455: 
          { 
    return PHP_STATIC;
 }
        case 644: break;
        case 442: 
          { 
    return PHP_RETURN;
 }
        case 645: break;
        case 441: 
          { 
    return PHP_ELSEIF;
 }
        case 646: break;
        case 438: 
          { 
    return PHP_ENDFOR;
 }
        case 647: break;
        case 403: 
          { 
    return PHP_CASTING;
 }
        case 648: break;
        case 97: 
        case 195: 
          { 
    return PHP_NUMBER;
 }
        case 649: break;
        case 85: 
          { 
    return PHP_COMMENT;
 }
        case 650: break;
        case 84: 
          { 
    return PHP_COMMENT;
 }
        case 651: break;
        case 79: 
          { 
    return PHP_ENCAPSED_AND_WHITESPACE;
 }
        case 652: break;
        case 69: 
          { 
    popState();
    return PHP_CONSTANT_ENCAPSED_STRING;
 }
        case 653: break;
        case 14: 
        case 18: 
          { 
    return PHP_NUMBER;
 }
        case 654: break;
        case 161: 
          { 
	return PHP_CLOSETAG;
 }
        case 655: break;
        case 204: 
          { 
    return PHP_NUMBER;
 }
        case 656: break;
        case 56: 
          { 
    pushState(ST_PHP_IN_SCRIPTING);
    return PHP_CURLY_OPEN;
 }
        case 657: break;
        case 65: 
        case 81: 
          { 
	return PHP_CONSTANT_ENCAPSED_STRING;
 }
        case 658: break;
        case 147: 
          { 
    return PHP_PAAMAYIM_NEKUDOTAYIM;
 }
        case 659: break;
        case 115: 
          { 
	if (asp_tags) {
	    return PHP_CLOSETAG;
	}
	return UNKNOWN_TOKEN;
 }
        case 660: break;
        case 165: 
          { 
    yypushback(1);
    pushState(ST_PHP_IN_SCRIPTING);
    return PHP_CURLY_OPEN;
 }
        case 661: break;
        case 560: 
          { 
    return PHP__CLASS__;
 }
        case 662: break;
        case 555: 
          { 
    return PHP_ENDSWITCH;
 }
        case 663: break;
        case 533: 
          { 
    return PHP_CONTINUE;
 }
        case 664: break;
        case 532: 
          { 
    return PHP_FUNCTION;
 }
        case 665: break;
        case 529: 
          { 
    return PHP_ENDWHILE;
 }
        case 666: break;
        case 24: 
          { 
    return PHP_SEMICOLON;
 }
        case 667: break;
        case 99: 
        case 112: 
        case 113: 
        case 116: 
          { 
    return PHP_OPERATOR;
 }
        case 668: break;
        case 160: 
          { 
    return PHP_VARIABLE;
 }
        case 669: break;
        case 74: 
          { 
    return PHP_CONSTANT_ENCAPSED_STRING;
 }
        case 670: break;
        case 73: 
          { 
    return PHP_CONSTANT_ENCAPSED_STRING;
 }
        case 671: break;
        case 72: 
          { 
    return PHP_CONSTANT_ENCAPSED_STRING;
 }
        case 672: break;
        case 71: 
          { 
    return PHP_CONSTANT_ENCAPSED_STRING;
 }
        case 673: break;
        case 62: 
        case 70: 
          { 
    return PHP_CONSTANT_ENCAPSED_STRING;
 }
        case 674: break;
        case 63: 
        case 66: 
        case 249: 
          { 
    return PHP_CONSTANT_ENCAPSED_STRING;
 }
        case 675: break;
        case 64: 
        case 78: 
          { 
    return PHP_CONSTANT_ENCAPSED_STRING;
 }
        case 676: break;
        case 67: 
        case 68: 
          { 
    return PHP_CONSTANT_ENCAPSED_STRING;
 }
        case 677: break;
        case 167: 
          { 
    pushState(ST_PHP_QUOTES_AFTER_VARIABLE);
    return PHP_VARIABLE;
 }
        case 678: break;
        case 169: 
        case 250: 
          { 
    return PHP_CONSTANT_ENCAPSED_STRING;
 }
        case 679: break;
        case 170: 
          { 
    return PHP_CONSTANT_ENCAPSED_STRING;
 }
        case 680: break;
        case 251: 
          { 
    return PHP_CONSTANT_ENCAPSED_STRING;
 }
        case 681: break;
        case 82: 
          { 
    yypushback(1);
    popState();
 }
        case 682: break;
        case 166: 
          { 
    if (yylength() == 2) {
        yypushback(1);
    }
    return PHP_CONSTANT_ENCAPSED_STRING;
 }
        case 683: break;
        case 558: 
          {  /* guy - support old versions */
    return PHP_FUNCTION;
 }
        case 684: break;
        case 371: 
        case 372: 
          { 
    int startString=3;
    heredoc_len = yylength()-3-1-(yytext().charAt(yylength()-2)=='\r'?1:0);
    while ((yytext().charAt(startString) == ' ') || (yytext().charAt(startString) == '\t')) {
        startString++;
        heredoc_len--;
    }
    heredoc = yytext().substring(startString,heredoc_len+startString);
    pushState(ST_PHP_HEREDOC);
    return PHP_HEREDOC_TAG;
 }
        case 685: break;
        case 395: 
          { 
    return PHP_PRINT;
 }
        case 686: break;
        case 394: 
          { 
    return PHP_WHILE;
 }
        case 687: break;
        case 387: 
          { 
    return PHP_CLASS;
 }
        case 688: break;
        case 385: 
          { 
    return PHP_CONST;
 }
        case 689: break;
        case 383: 
          { 
    return PHP_UNSET;
 }
        case 690: break;
        case 381: 
          { 
    return PHP_FALSE;
 }
        case 691: break;
        case 379: 
          { 
    return PHP_ISSET;
 }
        case 692: break;
        case 375: 
          { 
    return PHP_ARRAY;
 }
        case 693: break;
        case 370: 
          { 
    return PHP_BREAK;
 }
        case 694: break;
        case 369: 
          { 
    return PHP_EMPTY;
 }
        case 695: break;
        case 364: 
          { 
    return PHP_ENDIF;
 }
        case 696: break;
        case 311: 
          { 
    return PHP_LIST;
 }
        case 697: break;
        case 83: 
          { 
    popState();
    return PHP_STRING;
 }
        case 698: break;
        case 26: 
          { 
    pushState(ST_PHP_SINGLE_QUOTE);
    return PHP_CONSTANT_ENCAPSED_STRING;
 }
        case 699: break;
        case 25: 
          { 
    if (!phpStack.isEmpty()) {
        popState();
        return  PHP_CURLY_CLOSE;
    }
    return  UNKNOWN_TOKEN;
 }
        case 700: break;
        case 22: 
          { 
    return  WHITESPACE;
 }
        case 701: break;
        case 16: 
        case 19: 
        case 20: 
        case 21: 
        case 37: 
        case 38: 
        case 39: 
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 53: 
        case 55: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
        case 104: 
        case 105: 
        case 108: 
        case 109: 
        case 117: 
        case 118: 
        case 119: 
        case 120: 
        case 122: 
        case 123: 
        case 125: 
        case 126: 
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
        case 144: 
        case 145: 
        case 146: 
        case 148: 
        case 159: 
        case 197: 
        case 198: 
        case 199: 
        case 200: 
        case 201: 
        case 202: 
        case 203: 
        case 205: 
        case 208: 
        case 209: 
        case 210: 
        case 211: 
        case 213: 
        case 214: 
        case 216: 
        case 217: 
        case 218: 
        case 220: 
        case 221: 
        case 222: 
        case 223: 
        case 225: 
        case 226: 
        case 227: 
        case 228: 
        case 229: 
        case 230: 
        case 231: 
        case 232: 
        case 233: 
        case 234: 
        case 235: 
        case 236: 
        case 237: 
        case 248: 
        case 279: 
        case 280: 
        case 281: 
        case 282: 
        case 283: 
        case 284: 
        case 288: 
        case 289: 
        case 292: 
        case 293: 
        case 294: 
        case 295: 
        case 296: 
        case 297: 
        case 298: 
        case 299: 
        case 301: 
        case 303: 
        case 304: 
        case 305: 
        case 306: 
        case 307: 
        case 309: 
        case 310: 
        case 312: 
        case 313: 
        case 314: 
        case 315: 
        case 316: 
        case 317: 
        case 318: 
        case 319: 
        case 320: 
        case 330: 
        case 362: 
        case 363: 
        case 365: 
        case 366: 
        case 367: 
        case 368: 
        case 373: 
        case 374: 
        case 376: 
        case 377: 
        case 378: 
        case 380: 
        case 382: 
        case 384: 
        case 386: 
        case 388: 
        case 389: 
        case 390: 
        case 391: 
        case 392: 
        case 393: 
        case 396: 
        case 406: 
        case 436: 
        case 437: 
        case 439: 
        case 440: 
        case 443: 
        case 444: 
        case 445: 
        case 446: 
        case 447: 
        case 448: 
        case 449: 
        case 450: 
        case 451: 
        case 452: 
        case 453: 
        case 454: 
        case 488: 
        case 489: 
        case 490: 
        case 491: 
        case 497: 
        case 498: 
        case 499: 
        case 500: 
        case 501: 
        case 502: 
        case 503: 
        case 526: 
        case 527: 
        case 528: 
        case 530: 
        case 531: 
        case 534: 
        case 536: 
        case 537: 
        case 553: 
        case 554: 
        case 556: 
        case 557: 
        case 559: 
        case 573: 
        case 574: 
        case 575: 
        case 582: 
        case 583: 
        case 584: 
          { 
    return  PHP_STRING;
 }
        case 702: break;
        case 15: 
        case 17: 
        case 23: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 52: 
        case 54: 
        case 57: 
        case 59: 
          { 
    return PHP_TOKEN;
 }
        case 703: break;
        case 60: 
          { 
    pushState(ST_PHP_DOUBLE_QUOTES);
    return PHP_CONSTANT_ENCAPSED_STRING;
 }
        case 704: break;
        case 61: 
          { 
    pushState(ST_PHP_BACKQUOTE);
    return PHP_CONSTANT_ENCAPSED_STRING;
 }
        case 705: break;
        case 173: 
        case 175: 
          { 
    int label_len;
    int length=yylength();
    if (yytext().charAt(length-2)=='\r') {
        label_len = length-2;
    } else {
        label_len = length-1;
    }

    if (yytext().charAt(label_len-1)==';') {
	    label_len--;
    }

    if (label_len==heredoc_len && yytext().substring(0,label_len).equals(heredoc)) {
        heredoc=null;
        heredoc_len=0;
        popState();
        return  PHP_HEREDOC_TAG;
    } else {
        return  PHP_CONSTANT_ENCAPSED_STRING;
    }
 }
        case 706: break;
        case 278: 
          { 
    return PHP_EXIT;
 }
        case 707: break;
        case 285: 
          { 
    return PHP_ECHO;
 }
        case 708: break;
        case 286: 
          { 
    return PHP_ELSE;
 }
        case 709: break;
        case 287: 
          { 
    return PHP_EVAL;
 }
        case 710: break;
        case 300: 
          { 
    return PHP_TRUE;
 }
        case 711: break;
        case 302: 
          { 
    return PHP_FROM;
 }
        case 712: break;
        case 308: 
          { 
    return PHP_CASE;
 }
        case 713: break;
        case 96: 
          { popState();return WHITESPACE; }
        case 714: break;
        case 114: 
          { 
    pushState(ST_PHP_COMMENT);
    return PHP_COMMENT_START;
 }
        case 715: break;
        case 291: 
          { 
    pushState(ST_PHP_DOC_COMMENT);
    return PHPDOC_COMMENT_START;
 }
        case 716: break;
        case 75: 
        case 76: 
        case 77: 
          { 
        yypushback(1);
        popState();
     }
        case 717: break;
        case 426: 
          { return PHPDOC_LINK; }
        case 718: break;
        case 423: 
          { return PHPDOC_USES; }
        case 719: break;
        case 418: 
          { return PHPDOC_TODO; }
        case 720: break;
        case 414: 
          { return PHPDOC_DESC; }
        case 721: break;
        case 413: 
          { return PHPDOC_NAME; }
        case 722: break;
        case 359: 
          { return PHPDOC_VAR; }
        case 723: break;
        case 352: 
          { return PHPDOC_SEE; }
        case 724: break;
        case 568: 
          { return PHPDOC_CATEGORY; }
        case 725: break;
        case 565: 
          { return PHPDOC_TUTORIAL; }
        case 726: break;
        case 564: 
          { return PHPDOC_INTERNAL; }
        case 727: break;
        case 562: 
          { return PHPDOC_ABSTRACT; }
        case 728: break;
        case 552: 
          { return PHPDOC_VERSION; }
        case 729: break;
        case 551: 
          { return PHPDOC_PACKAGE; }
        case 730: break;
        case 548: 
          { return PHPDOC_LICENSE; }
        case 731: break;
        case 539: 
          { return PHPDOC_EXAMPLE; }
        case 732: break;
        case 86: 
        case 87: 
        case 88: 
          { return PHPDOC_COMMENT; }
        case 733: break;
        case 95: 
          { return UNKNOWN_TOKEN; }
        case 734: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            return null;
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }

