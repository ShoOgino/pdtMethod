	/**
	 * Returns cached result of a trait search, or invokes a new search query
	 * 
	 * @param sourceModule
	 *            Current source module
	 * @param typeName
	 *            The name of the trait
	 * @param monitor
	 *            Progress monitor
	 * @return a collection of traits according to a given name, or
	 *         <code>null</code> if not found
	 */
	public Collection<IType> getTraits(ISourceModule sourceModule, String typeName, String namespaceName,
			IProgressMonitor monitor) {

		Collection<IType> types;

		if (!this.sourceModule.equals(sourceModule)) {
			// Invoke a new search, since we only cache for the original file in
			// this class:
			IScriptProject scriptProject = sourceModule.getScriptProject();
			IDLTKSearchScope scope = SearchEngine.createSearchScope(scriptProject);
			types = Arrays.asList(PhpModelAccess.getDefault().findTraits(typeName, MatchRule.EXACT, 0, 0, scope, null));

		} else {
			typeName = typeName.toLowerCase();

			// if the namespace is not blank, append it to the key.
			final StringBuffer key = new StringBuffer();
			if (namespaceName != null && !"".equals(namespaceName.trim())) { //$NON-NLS-1$
				String nameSpace = namespaceName;
				if (namespaceName.startsWith("\\") //$NON-NLS-1$
						|| namespaceName.startsWith("/")) { //$NON-NLS-1$
					nameSpace = namespaceName.substring(1);
				}
				if (nameSpace.length() > 0) {
					key.append(nameSpace.toLowerCase()).append("$"); //$NON-NLS-1$
				}
			}
			key.append(typeName);

			final String searchFor = key.toString();
			if (!allTraitsCache.containsKey(searchFor)) {
				IScriptProject scriptProject = sourceModule.getScriptProject();
				IDLTKSearchScope scope = SearchEngine.createSearchScope(scriptProject);

				allTraitsCache.put(searchFor, Arrays.asList(PhpModelAccess.getDefault().findTraits(namespaceName,
						typeName, MatchRule.PREFIX, 0, 0, scope, null)));
			}

			types = allTraitsCache.get(searchFor);
		}
		return filterModelElements(sourceModule, types, monitor);
	}

