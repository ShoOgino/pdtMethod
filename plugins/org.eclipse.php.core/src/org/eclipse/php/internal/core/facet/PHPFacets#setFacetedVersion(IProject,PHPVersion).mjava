	/**
	 * Synchronizes the php version for facets
	 * 
	 * @param project
	 * @return the status of setting the version
	 */
	public static IStatus setFacetedVersion(IProject project, PHPVersion version) {
		if (isFacetedProject(project)) {
			try {
				final IProjectFacetVersion facetedVersion = convertToFacetVersion(version);
				final IProjectFacet phpFacet = ProjectFacetsManager
						.getProjectFacet(PHPFacetsConstants.PHP_COMPONENT);
				final IFacetedProject faceted = ProjectFacetsManager
						.create(project);
				if (!facetedVersion.equals(faceted
						.getInstalledVersion(phpFacet))) {
					final Set<IFacetedProject.Action> actions = new HashSet<IFacetedProject.Action>();
					actions.add(new IFacetedProject.Action(
							IFacetedProject.Action.Type.VERSION_CHANGE,
							facetedVersion, null));
					faceted.modify(actions, new NullProgressMonitor());
				}
			} catch (CoreException ex) {
				return new Status(IStatus.ERROR, PHPCorePlugin.ID,
						Messages.PHPFacets_SettingVersionFailed, ex);
			} catch (IllegalArgumentException ex) {
				return new Status(IStatus.ERROR, PHPCorePlugin.ID,
						Messages.PHPFacets_SettingVersionFailed, ex);
			}
		}
		return Status.OK_STATUS;
	}

