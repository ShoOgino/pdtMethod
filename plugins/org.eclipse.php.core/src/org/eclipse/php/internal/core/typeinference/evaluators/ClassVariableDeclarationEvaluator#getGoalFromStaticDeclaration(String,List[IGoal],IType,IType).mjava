	protected void getGoalFromStaticDeclaration(String variableName,
			final List<IGoal> subGoals, final IType declaringType,
			IType realType) throws ModelException {
		ISourceModule sourceModule = declaringType.getSourceModule();
		ModuleDeclaration moduleDeclaration = SourceParserUtil
				.getModuleDeclaration(sourceModule);
		TypeDeclaration typeDeclaration = PHPModelUtils.getNodeByClass(
				moduleDeclaration, declaringType);

		// try to search declarations of type "self::$var =" or
		// "$this->var ="
		ClassDeclarationSearcher searcher;
		if (realType != null) {
			searcher = new ClassDeclarationSearcher(sourceModule,
					typeDeclaration, 0, 0, variableName, realType,
					declaringType);
		} else {
			searcher = new ClassDeclarationSearcher(sourceModule,
					typeDeclaration, 0, 0, variableName);
		}
		try {
			moduleDeclaration.traverse(searcher);
			Map<ASTNode, IContext> staticDeclarations = searcher
					.getStaticDeclarations();
			for (ASTNode node : staticDeclarations.keySet()) {
				IContext context = staticDeclarations.get(node);
				if (context instanceof MethodContext) {
					MethodContext methodContext = (MethodContext) context;
					methodContext.setCurrentType(realType);
				}
				subGoals.add(new ExpressionTypeGoal(context, node));
			}
		} catch (Exception e) {
			if (DLTKCore.DEBUG) {
				e.printStackTrace();
			}
		}
	}

