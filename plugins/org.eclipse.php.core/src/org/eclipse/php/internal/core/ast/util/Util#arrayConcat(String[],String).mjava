	/**
	 * Returns a new array adding the second array at the end of first array. It
	 * answers null if the first and second are null. If the first array is null or
	 * if it is empty, then a new array is created with second. If the second array
	 * is null, then the first array is returned. <br>
	 * <br>
	 * For example:
	 * <ol>
	 * <li>
	 * 
	 * <pre>
	 *    first = null
	 *    second = &quot;a&quot;
	 *    =&gt; result = {&quot;a&quot;}
	 * </pre>
	 * 
	 * <li>
	 * 
	 * <pre>
	 *    first = {&quot;a&quot;}
	 *    second = null
	 *    =&gt; result = {&quot;a&quot;}
	 * </pre>
	 * 
	 * </li>
	 * <li>
	 * 
	 * <pre>
	 *    first = {&quot;a&quot;}
	 *    second = {&quot;b&quot;}
	 *    =&gt; result = {&quot;a&quot;, &quot;b&quot;}
	 * </pre>
	 * 
	 * </li>
	 * </ol>
	 * 
	 * @param first
	 *                   the first array to concatenate
	 * @param second
	 *                   the array to add at the end of the first array
	 * @return a new array adding the second array at the end of first array, or
	 *         null if the two arrays are null.
	 */
	public static final String[] arrayConcat(String[] first, String second) {
		if (second == null) {
			return first;
		}
		if (first == null) {
			return new String[] { second };
		}

		int length = first.length;
		if (first.length == 0) {
			return new String[] { second };
		}

		String[] result = new String[length + 1];
		System.arraycopy(first, 0, result, 0, length);
		result[length] = second;
		return result;
	}

