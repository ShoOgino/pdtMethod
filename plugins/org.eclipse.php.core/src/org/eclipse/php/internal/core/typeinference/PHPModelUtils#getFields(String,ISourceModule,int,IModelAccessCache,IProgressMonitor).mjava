	/**
	 * This method returns field corresponding to its name and the file where it
	 * was referenced. The field name may contain also the namespace part, like:
	 * A\B\C or \A\B\C
	 * 
	 * @param fieldName
	 *            Tye fully qualified field name
	 * @param sourceModule
	 *            The file where the element is referenced
	 * @param offset
	 *            The offset where the element is referenced
	 * @param cache
	 *            Model access cache if available
	 * @param monitor
	 *            Progress monitor
	 * @return a list of relevant IField elements, or <code>null</code> in case
	 *         there's no IField found
	 * @throws ModelException
	 */
	public static IField[] getFields(String fieldName,
			ISourceModule sourceModule, int offset, IModelAccessCache cache,
			IProgressMonitor monitor) throws ModelException {
		if (fieldName == null || fieldName.length() == 0) {
			return PhpModelAccess.NULL_FIELDS;
		}
		if (!fieldName.startsWith("$")) { // variables are not supported by
			// namespaces in PHP 5.3
			String namespace = extractNamespaceName(fieldName, sourceModule,
					offset);
			fieldName = extractElementName(fieldName);
			if (namespace != null) {
				if (namespace.length() > 0) {
					IField[] fields = getNamespaceField(namespace, fieldName,
							true, sourceModule, cache, monitor);
					if (fields.length > 0) {
						return fields;
					}
					return PhpModelAccess.NULL_FIELDS;
				}
				// it's a global reference: \C
			} else {
				// look for the element in current namespace:
				IType currentNamespace = getCurrentNamespace(sourceModule,
						offset);
				if (currentNamespace != null) {
					namespace = currentNamespace.getElementName();
					IField[] fields = getNamespaceField(namespace, fieldName,
							true, sourceModule, cache, monitor);
					if (fields.length > 0) {
						return fields;
					}

					// For functions and constants, PHP will fall back to global
					// functions or constants if a namespaced function or
					// constant does not exist:
					IDLTKSearchScope scope = SearchEngine
							.createSearchScope(sourceModule.getScriptProject());
					fields = PhpModelAccess.getDefault().findFields(fieldName,
							MatchRule.EXACT,
							Modifiers.AccConstant | Modifiers.AccGlobal, 0,
							scope, null);

					Collection<IField> filteredElements = filterElements(
							sourceModule, Arrays.asList(fields));
					return (IField[]) filteredElements
							.toArray(new IField[filteredElements.size()]);
				}
			}
		}
		IDLTKSearchScope scope = SearchEngine.createSearchScope(sourceModule
				.getScriptProject());
		IField[] fields = PhpModelAccess.getDefault().findFields(fieldName,
				MatchRule.EXACT, Modifiers.AccGlobal, 0, scope, null);

		Collection<IField> filteredElements = null;
		if (fields != null) {
			filteredElements = filterElements(sourceModule, Arrays
					.asList(fields));
			return (IField[]) filteredElements
					.toArray(new IField[filteredElements.size()]);
		}
		return PhpModelAccess.NULL_FIELDS;
	}

