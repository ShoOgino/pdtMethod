	protected void getEntries() throws IOException, PharException {
		byte[] buffer;

		for (int j = 0; j < fileNumber; j++) {
			buffer = new byte[4];
			PharEntry pharEntry = new PharEntry();
			read(bis, buffer);
			int fileNameLength = getInt(buffer);

			// file Name
			String fileName = null;
			if (fileNameLength > 0) {
				buffer = new byte[fileNameLength];
				read(bis, buffer);
				fileName = getString(buffer);
				pharEntry.setName(fileName);
				buffer = new byte[4];
			}

			read(bis, buffer);
			pharEntry.setSizeByte(buffer);

			pharEntry.setSize(getInt(buffer));

			read(bis, buffer);
			pharEntry.setTime(getInt(buffer));

			read(bis, buffer);
			pharEntry.setCsize(getInt(buffer));

			read(bis, buffer);
			pharEntry.setCrcByte(buffer);

			read(bis, buffer);
			pharEntry.setBitMappedFlag(buffer);

			read(bis, buffer);
			int metaFileLength = getInt(buffer);

			// file Name
			String metaFileData = null;
			if (metaFileLength > 0) {
				buffer = new byte[metaFileLength];
				read(bis, buffer);
				metaFileData = getString(buffer);
				pharEntry.setMetadata(metaFileData);

			}

			pharEntryList.add(pharEntry);
			pharEntryMap.put(pharEntry.getName(), pharEntry);
		}
		for (int j = 0; j < pharEntryList.size(); j++) {

			PharEntry pharEntry = pharEntryList.get(j);
			if (j == 0) {
				pharEntry.setPosition(currentIndex);
			} else {
				pharEntry.setPosition(pharEntryList.get(j - 1).getEnd());
			}

		}

		stubEntry = new PharEntry();
		stubEntry.setName(PharConstants.STUB_PATH);
		// pharEntry.setSizeByte(buffer);
		stubEntry.setSize(stubLength);
		stubEntry.setCsize(stubLength);
		// pharEntry.setCrcByte(buffer);
		stubEntry.setBitMappedFlag(PharConstants.Default_Entry_Bitmap);
		stubEntry.setPosition(0);
		pharEntryList.add(stubEntry);
		pharEntryMap.put(stubEntry.getName(), stubEntry);

		if (hasSignature) {
			signatureEntry = new PharEntry();
			signatureEntry.setName(PharConstants.SIGNATURE_PATH);
			signatureEntry.setBitMappedFlag(PharConstants.Default_Entry_Bitmap);

			int signatureLength = bis.available();
			if (fileNumber == 0) {// no file,so the manifest's end is the
				// signature's begin
				signatureEntry.setPosition(currentIndex);

			} else {
				signatureEntry.setPosition(pharEntryList.get(fileNumber - 1).getEnd());
				PharUtil.skip(bis, pharEntryList.get(fileNumber - 1).getEnd() - currentIndex);
				signatureLength = bis.available();
			}
			if (signatureLength <= 4) {
				signatureEntry = null;
				return;
			}
			signatureEntry.setSize(signatureLength);
			signatureEntry.setCsize(signatureLength);
			if (signatureLength < 24) {
				throw new PharException(Messages.Phar_Signature_Corrupted);
			} else {
				boolean found = false;
				byte[] signatureData = new byte[signatureLength];
				bis.read(signatureData);

				// checking phar signature should be done from the end of file
				// like done in phar.c (from php source)
				// especially reading digest from signature begining is wrong in some cases

				if (!PharUtil.byteArrayEquals(signatureData, PharConstants.GBMB, signatureData.length - 4)) {
					throw new PharException(Messages.Phar_Signature_Corrupted);
				}

				byte[] digestFlags = Arrays.copyOfRange(signatureData, signatureData.length - 8,
						signatureData.length - 4);

				for (Iterator<Digest> iterator = Digest.DIGEST_MAP.values().iterator(); iterator.hasNext();) {
					Digest digest = iterator.next();
					if (PharUtil.byteArrayEquals(digest.getBitMap(), digestFlags)) {
						int digestLen = digest.getDigest().digest().length;
						if (signatureData.length - 8 < digestLen) {
							throw new PharException(Messages.Phar_Signature_Corrupted);
						}
						byte[] digestData = Arrays.copyOfRange(signatureData, signatureData.length - 8 - digestLen,
								signatureData.length - 8);

						if (!PharUtil.checkSignature(file, (int) (file.length() - 8 - digestLen), digest, digestData)) {
							throw new PharException(Messages.Phar_Signature_Corrupted);
						}

						found = true;
						break;
					}
				}
				if (!found) {
					throw new PharException(Messages.Phar_Signature_Unsupported);
				}
			}
			pharEntryList.add(signatureEntry);
			pharEntryMap.put(signatureEntry.getName(), signatureEntry);
		}

	}

