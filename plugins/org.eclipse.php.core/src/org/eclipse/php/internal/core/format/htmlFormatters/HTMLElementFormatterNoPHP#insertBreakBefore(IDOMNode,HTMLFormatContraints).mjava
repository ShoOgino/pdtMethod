	/**
	 */
	protected void insertBreakBefore(IDOMNode node,
			HTMLFormatContraints contraints) {
		if (node == null) {
			return;
		}
		if (node.getNodeType() == Node.TEXT_NODE) {
			return;
		}
		Node parent = node.getParentNode();
		if (parent == null) {
			return;
		}
		Node prev = node.getPreviousSibling();

		String spaces = null;
		if (prev != null && prev.getNodeType() == Node.TEXT_NODE) {
			if (contraints != null && contraints.getFormatWithSiblingIndent()) {
				IDOMNode text = (IDOMNode) prev;
				IStructuredFormatter formatter = HTMLFormatterNoPHPFactory
						.getInstance().createFormatter(text,
								getFormatPreferences());
				if (formatter instanceof HTMLTextFormatter) {
					HTMLTextFormatterNoPHP textFormatter = (HTMLTextFormatterNoPHP) formatter;
					textFormatter.formatText(text, contraints,
							HTMLTextFormatter.FORMAT_TAIL);

					if (node.hasChildNodes()) { // container
						formatChildNodes(node, contraints);
					} else { // leaf
						IStructuredDocumentRegion flatNode = node
								.getStartStructuredDocumentRegion();
						if (flatNode != null) {
							String source = flatNode.getText();
							if (source != null && source.length() > 0) {
								setWidth(contraints, source);
							}
						}
					}

				}
			}
			return;
		} else {
			spaces = getBreakSpaces(node);
		}
		if (spaces == null || spaces.length() == 0) {
			return;
		}

		replaceSource(node.getModel(), node.getStartOffset(), 0, spaces);
		setWidth(contraints, spaces);
	}

