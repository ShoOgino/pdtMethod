	@Override
	public boolean isValid(ISourceModule sourceModule, int offset, CompletionRequestor requestor) {
		if (!super.isValid(sourceModule, offset, requestor)) {
			return false;
		}

		// check whether enclosing element is not a class
		try {
			IModelElement enclosingElement = getEnclosingElement();
			if (enclosingElement == null) {
				int actualOffset = offset - 1;
				try {
					PHPHeuristicScanner scanner = PHPHeuristicScanner.createHeuristicScanner(getDocument(),
							actualOffset, true);
					int index = scanner.findOpeningPeer(actualOffset, PHPHeuristicScanner.UNBOUND,
							PHPHeuristicScanner.LBRACE, PHPHeuristicScanner.RBRACE);
					if (index != PHPHeuristicScanner.NOT_FOUND) {
						ITextRegion textRegion = getPHPToken(index);
						while (textRegion.getStart() != 0 && textRegion.getType() != PHPRegionTypes.PHP_CURLY_CLOSE) {
							if (textRegion.getType() == PHPRegionTypes.PHP_CLASS
									|| textRegion.getType() == PHPRegionTypes.PHP_INTERFACE
									|| textRegion.getType() == PHPRegionTypes.PHP_TRAIT
									|| textRegion.getType() == PHPRegionTypes.PHP_FUNCTION) {
								return false;
							}

							actualOffset = textRegion.getStart() - 1;
							textRegion = getPHPScriptRegion().getPHPToken(actualOffset);
						}
					}
				} catch (BadLocationException e1) {
					PHPCorePlugin.log(e1);
				}
			}
			while (enclosingElement instanceof IField) {
				enclosingElement = enclosingElement.getParent();
			}
			if ((enclosingElement instanceof IMethod) || (enclosingElement instanceof IType
					&& !PHPFlags.isNamespace(((IType) enclosingElement).getFlags()))) {
				if (enclosingElement instanceof IType && isBeforeName(offset, (ISourceReference) enclosingElement)) {
					return true;
				}
				return false;
			}
		} catch (ModelException e) {
			PHPCorePlugin.log(e);
		}

		return true;
	}

