	public IEvaluatedType[] getFunctionReturnType(IMethod functionElement) {

		ISourceModule sourceModule = functionElement.getSourceModule();
		ModuleDeclaration sourceModuleDeclaration = SourceParserUtil.getModuleDeclaration(sourceModule);
		MethodDeclaration functionDeclaration = null;
		try {
			functionDeclaration = PHPModelUtils.getNodeByMethod(sourceModuleDeclaration, functionElement);

		} catch (ModelException e) {
			if (DLTKCore.DEBUG) {
				e.printStackTrace();
			}
		}
		// FileContext fileContext = new FileContext(sourceModule,
		// sourceModuleDeclaration);

		final List<IEvaluatedType> evaluated = new LinkedList<>();
		final List<Expression> returnExpressions = new LinkedList<>();
		final List<Expression> yieldExpressions = new LinkedList<>();

		if (functionDeclaration != null) {
			final MethodDeclaration topDeclaration = functionDeclaration;

			ASTVisitor visitor = new ASTVisitor() {
				@Override
				public boolean visitGeneral(ASTNode node) throws Exception {
					// https://bugs.eclipse.org/bugs/show_bug.cgi?id=464921
					// do not evaluate content of inner lambda functions
					if (node instanceof LambdaFunctionDeclaration
							// but never exclude top node (even if this case
							// cannot
							// happen here)
							&& node != topDeclaration) {
						return false;
					}
					if (node instanceof ReturnStatement) {
						ReturnStatement statement = (ReturnStatement) node;
						Expression expr = statement.getExpr();
						if (expr == null) {
							evaluated.add(PHPSimpleTypes.VOID);
						} else {
							returnExpressions.add(expr);
						}
					} else if (node instanceof YieldExpression) {
						YieldExpression statement = (YieldExpression) node;
						Expression expr = statement.getExpr();
						yieldExpressions.add(expr);
					}
					return super.visitGeneral(node);
				}
			};

			try {
				functionDeclaration.traverse(visitor);
			} catch (Exception e) {
				if (DLTKCore.DEBUG) {
					e.printStackTrace();
				}
			}
		}

		for (Expression expr : returnExpressions) {
			SourceRange sourceRange = new SourceRange(expr);
			try {
				ContextFinder contextFinder = getContext(sourceRange);
				IContext context = contextFinder.getContext();
				IEvaluatedType resolvedExpression = PHPTypeInferenceUtils.resolveExpression(getTypeInferencer(),
						sourceModule, sourceModuleDeclaration, context, expr);
				if (resolvedExpression != null) {
					evaluated.add(resolvedExpression);
				} else {
					evaluated.add(UnknownType.INSTANCE);
				}
			} catch (ModelException e) {
				if (DLTKCore.DEBUG) {
					e.printStackTrace();
				}
				continue;
			}
		}
		if (yieldExpressions.size() > 0) {
			GenericClassType generator = new GenericClassType(GenericClassType.GENERATOR);
			for (Expression expr : yieldExpressions) {
				if (expr == null) {
					generator.getTypes().add(PHPSimpleTypes.NULL);
				} else {
					SourceRange sourceRange = new SourceRange(expr);
					try {
						ContextFinder contextFinder = getContext(sourceRange);
						IContext context = contextFinder.getContext();
						IEvaluatedType resolvedExpression = PHPTypeInferenceUtils.resolveExpression(getTypeInferencer(),
								sourceModule, sourceModuleDeclaration, context, expr);
						if (resolvedExpression != null) {
							generator.getTypes().add(resolvedExpression);
						}
					} catch (ModelException e) {
						if (DLTKCore.DEBUG) {
							e.printStackTrace();
						}
						continue;
					}
				}

				evaluated.add(generator);
			}
		}
		return evaluated.toArray(new IEvaluatedType[evaluated.size()]);
	}

