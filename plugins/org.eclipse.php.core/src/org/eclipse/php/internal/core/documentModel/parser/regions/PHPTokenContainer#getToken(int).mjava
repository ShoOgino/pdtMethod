	/**
	 * find token for a given location
	 * 
	 * @param offset
	 * @return token (will never be null)
	 * @throws BadLocationException
	 *             - if the offset is out of bound
	 */
	public synchronized ITextRegion getToken(int offset) throws BadLocationException {
		assert tokensIterator != null;
		if (phpTokens.isEmpty()) {
			throw new BadLocationException("offset " + offset + " cannot be contained in an empty region"); //$NON-NLS-1$ //$NON-NLS-2$
		}

		// we have at least one region...
		checkBadLocation(offset);

		// smart searching
		ITextRegion result = tokensIterator.hasNext() ? tokensIterator.next() : tokensIterator.previous();
		assert result != null && result.getLength() > 0;

		if (isInside(result, offset)) {
			return result;
		}

		if (offset >= result.getEnd()) { // if the offset is
											// beyond - go fetch
			// from next
			while (tokensIterator.hasNext() && !isInside(result, offset)) {
				result = tokensIterator.next();
				assert result != null && result.getLength() > 0;
			}
		} else { // else go fetch from previous
			while (tokensIterator.hasPrevious() && !isInside(result, offset)) {
				result = tokensIterator.previous();
				assert result != null && result.getLength() > 0;
			}
			// moves the iterator to the next one
			if (tokensIterator.hasNext()) {
				tokensIterator.next();
			}
		}

		assert isInside(result, offset) || offset == getLastToken().getEnd();
		return result;
	}

