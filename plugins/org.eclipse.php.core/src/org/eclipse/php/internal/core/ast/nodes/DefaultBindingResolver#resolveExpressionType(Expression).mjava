	/**
	 * @return the resolved type of the given expression, null if can't evaluate
	 */
	@Override
	ITypeBinding resolveExpressionType(Expression expression) {
		if (expression == null) {
			throw new IllegalArgumentException("Can not resolve null expression");
		}
		
		IEvaluatedType type = this.bindingUtil.getType(expression.getStart(), expression.getLength());
		return new TypeBinding(type);

		/*
		 * TODO handle caching
			IModelElement element;
			try {
				element = this.sourceModule.getElementAt(expression.getStart());
			} catch (ModelException e) {
				// will throw an error, in next command
				element = null;
			}
			if (element == null) {
				element = this.sourceModule;
			}
			
			final String handleIdentifier = element.getHandleIdentifier() + "_" +   ;
			IBinding binding = this.bindingTables.bindingKeysToBindings.get(handleIdentifier);
			
			if (binding != null) {
				return (ITypeBinding) binding;
			}
	
			type = this.bindingUtil.getType(expression.getStart(), expression.getLength());
			binding = new TypeBinding(type);
			
			this.bindingTables.bindingKeysToBindings.put(handleIdentifier, binding);
			return (ITypeBinding) binding;
		*/
	}

