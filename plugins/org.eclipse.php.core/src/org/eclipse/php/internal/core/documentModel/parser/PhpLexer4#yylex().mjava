  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public String yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 119: 
          { return PHPDOC_CATEGORY;
          }
        case 132: break;
        case 39: 
          { popState();
    pushState(ST_PHP_LOOKING_FOR_PROPERTY);
    return PHP_OPERATOR;
          }
        case 133: break;
        case 45: 
          { return PHP_NEW;
          }
        case 134: break;
        case 75: 
          { return PHPDOC_DESC;
          }
        case 135: break;
        case 22: 
          { return PHP_LINE_COMMENT;
          }
        case 136: break;
        case 77: 
          { return PHPDOC_USES;
          }
        case 137: break;
        case 4: 
          { return  PHP_STRING;
          }
        case 138: break;
        case 68: 
          { return PHP_UNSET;
          }
        case 139: break;
        case 34: 
          { return PHP_CLOSETAG;
          }
        case 140: break;
        case 123: 
          { return PHPDOC_EXCEPTION;
          }
        case 141: break;
        case 103: 
          { return PHPDOC_METHOD;
          }
        case 142: break;
        case 40: 
          { int label_len;
    int length=yylength();
    if (yytext().charAt(length-2)=='\r') {
        label_len = length-2;
    } else {
        label_len = length-1;
    }

    if (yytext().charAt(label_len-1)==';') {
	    label_len--;
    }

    if (label_len==heredoc_len && yytext().substring(0,label_len).equals(heredoc)) {
        heredoc=null;
        heredoc_len=0;
        popState();
        return  PHP_HEREDOC_TAG;
    } else {
        return  PHP_CONSTANT_ENCAPSED_STRING;
    }
          }
        case 143: break;
        case 99: 
          { return PHPDOC_IGNORE;
          }
        case 144: break;
        case 129: 
          { return PHP_REQUIRE_ONCE;
          }
        case 145: break;
        case 102: 
          { return PHPDOC_GLOBAL;
          }
        case 146: break;
        case 28: 
          { if (asp_tags) {
	    return PHP_CLOSETAG;
	}
	return UNKNOWN_TOKEN;
          }
        case 147: break;
        case 110: 
          { return PHPDOC_LICENSE;
          }
        case 148: break;
        case 10: 
          { pushState(ST_PHP_LINE_COMMENT);
    return PHP_LINE_COMMENT;
          }
        case 149: break;
        case 120: 
          { return PHPDOC_PROPERTY;
          }
        case 150: break;
        case 51: 
          { return PHP_ECHO;
          }
        case 151: break;
        case 100: 
          { return PHPDOC_THROWS;
          }
        case 152: break;
        case 7: 
          { if (!phpStack.isEmpty()) {
        popState();
    }
	return  PHP_CURLY_CLOSE;
          }
        case 153: break;
        case 13: 
          { return PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 154: break;
        case 115: 
          { return PHP__CLASS__;
          }
        case 155: break;
        case 89: 
          { return PHPDOC_MAGIC;
          }
        case 156: break;
        case 49: 
          { return PHP_VAR;
          }
        case 157: break;
        case 38: 
          { pushState(ST_PHP_IN_SCRIPTING);
    return PHP_TOKEN;
          }
        case 158: break;
        case 121: 
          { return PHP_ENDDECLARE;
          }
        case 159: break;
        case 91: 
          { return PHP_REQUIRE;
          }
        case 160: break;
        case 6: 
          { return PHP_SEMICOLON;
          }
        case 161: break;
        case 66: 
          { return PHP_ISSET;
          }
        case 162: break;
        case 73: 
          { return PHP_CASTING;
          }
        case 163: break;
        case 118: 
          { return PHPDOC_TUTORIAL;
          }
        case 164: break;
        case 80: 
          { return PHP_ELSEIF;
          }
        case 165: break;
        case 82: 
          { return PHP_STATIC;
          }
        case 166: break;
        case 125: 
          { return PHPDOC_STATICVAR;
          }
        case 167: break;
        case 108: 
          { return PHP__LINE__;
          }
        case 168: break;
        case 61: 
          { return PHP_ENDIF;
          }
        case 169: break;
        case 111: 
          { return PHPDOC_PACKAGE;
          }
        case 170: break;
        case 21: 
          { String yytext = yytext();
	switch (yytext.charAt(yytext.length() - 1)) {
		case '?':
		case '%':
		case '>':
			yypushback(1);
			break;
		default:
			popState();
	}
	return PHP_LINE_COMMENT;
          }
        case 171: break;
        case 79: 
          { return PHP_ENDFOR;
          }
        case 172: break;
        case 41: 
          { popState();
    return PHP_COMMENT_END;
          }
        case 173: break;
        case 47: 
          { return PHP_FOR;
          }
        case 174: break;
        case 127: 
          { return PHPDOC_FILESOURCE;
          }
        case 175: break;
        case 37: 
          { pushState(ST_PHP_QUOTES_AFTER_VARIABLE);
    return PHP_VARIABLE;
          }
        case 176: break;
        case 53: 
          { return PHP_EVAL;
          }
        case 177: break;
        case 64: 
          { int startString=3;
    heredoc_len = yylength()-3-1-(yytext().charAt(yylength()-2)=='\r'?1:0);
    while ((yytext().charAt(startString) == ' ') || (yytext().charAt(startString) == '\t')) {
        startString++;
        heredoc_len--;
    }
    heredoc = yytext().substring(startString,heredoc_len+startString);
    pushState(ST_PHP_HEREDOC);
    return PHP_HEREDOC_TAG;
          }
        case 178: break;
        case 26: 
          { pushState(ST_PHP_LOOKING_FOR_PROPERTY);
    return PHP_OPERATOR;
          }
        case 179: break;
        case 24: 
          { popState();return WHITESPACE;
          }
        case 180: break;
        case 62: 
          { return PHP_EMPTY;
          }
        case 181: break;
        case 35: 
          { yypushback(1);
    pushState(ST_PHP_IN_SCRIPTING);
    return PHP_CURLY_OPEN;
          }
        case 182: break;
        case 2: 
          { return PHP_NUMBER;
          }
        case 183: break;
        case 30: 
          { return PHP_DO;
          }
        case 184: break;
        case 84: 
          { return PHP_PARENT;
          }
        case 185: break;
        case 20: 
          { return PHPDOC_COMMENT;
          }
        case 186: break;
        case 130: 
          { return PHP_INCLUDE_ONCE;
          }
        case 187: break;
        case 56: 
          { return PHP_FROM;
          }
        case 188: break;
        case 65: 
          { return PHP_ARRAY;
          }
        case 189: break;
        case 12: 
          { pushState(ST_PHP_BACKQUOTE);
    return PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 190: break;
        case 97: 
          { return PHPDOC_AUTHOR;
          }
        case 191: break;
        case 71: 
          { return PHP_WHILE;
          }
        case 192: break;
        case 90: 
          { return PHP_EXTENDS;
          }
        case 193: break;
        case 98: 
          { return PHPDOC_ACCESS;
          }
        case 194: break;
        case 69: 
          { return PHP_CONST;
          }
        case 195: break;
        case 3: 
          { return PHP_TOKEN;
          }
        case 196: break;
        case 117: 
          { return PHPDOC_INTERNAL;
          }
        case 197: break;
        case 78: 
          { return PHPDOC_LINK;
          }
        case 198: break;
        case 8: 
          { pushState(ST_PHP_SINGLE_QUOTE);
    return PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 199: break;
        case 5: 
          { return  WHITESPACE;
          }
        case 200: break;
        case 16: 
          { return PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 201: break;
        case 36: 
          { if (yylength() == 2) {
        yypushback(1);
    }
    return PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 202: break;
        case 1: 
          { yypushback(1);
    pushState(ST_PHP_HIGHLIGHTING_ERROR);
          }
        case 203: break;
        case 101: 
          { return PHPDOC_STATIC;
          }
        case 204: break;
        case 63: 
          { return PHP_BREAK;
          }
        case 205: break;
        case 86: 
          { return PHPDOC_FINAL;
          }
        case 206: break;
        case 81: 
          { return PHP_RETURN;
          }
        case 207: break;
        case 105: 
          { return PHP_FUNCTION;
          }
        case 208: break;
        case 88: 
          { return PHPDOC_PARAM;
          }
        case 209: break;
        case 104: 
          { return PHP_ENDWHILE;
          }
        case 210: break;
        case 32: 
          { return PHP_PAAMAYIM_NEKUDOTAYIM;
          }
        case 211: break;
        case 46: 
          { return PHP_DIE;
          }
        case 212: break;
        case 106: 
          { return PHP_CONTINUE;
          }
        case 213: break;
        case 94: 
          { return PHP_INCLUDE;
          }
        case 214: break;
        case 44: 
          { if (asp_tags) {
	    return PHP_CLOSETAG;
	}
	String text = yytext();
	if(text.indexOf('\r') != -1 || text.indexOf('\n') != -1 ){
		popState();
	}
	return PHP_LINE_COMMENT;
          }
        case 215: break;
        case 23: 
          { return UNKNOWN_TOKEN;
          }
        case 216: break;
        case 83: 
          { return PHP_SWITCH;
          }
        case 217: break;
        case 27: 
          { pushState(ST_PHP_COMMENT);
    return PHP_COMMENT_START;
          }
        case 218: break;
        case 52: 
          { return PHP_ELSE;
          }
        case 219: break;
        case 87: 
          { return PHPDOC_SINCE;
          }
        case 220: break;
        case 17: 
          { yypushback(1);
    popState();
          }
        case 221: break;
        case 11: 
          { pushState(ST_PHP_DOUBLE_QUOTES);
    return PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 222: break;
        case 109: 
          { return PHPDOC_EXAMPLE;
          }
        case 223: break;
        case 112: 
          { return PHPDOC_VERSION;
          }
        case 224: break;
        case 131: 
          { return PHP__FUNCTION__;
          }
        case 225: break;
        case 18: 
          { popState();
    return PHP_STRING;
          }
        case 226: break;
        case 95: 
          { return PHP_FOREACH;
          }
        case 227: break;
        case 25: 
          { return PHP_OPERATOR;
          }
        case 228: break;
        case 48: 
          { return PHP_USE;
          }
        case 229: break;
        case 31: 
          { return PHP_IF;
          }
        case 230: break;
        case 57: 
          { return PHP_CASE;
          }
        case 231: break;
        case 92: 
          { return PHP_DEFAULT;
          }
        case 232: break;
        case 107: 
          { return PHP__FILE__;
          }
        case 233: break;
        case 96: 
          { return PHPDOC_RETURN;
          }
        case 234: break;
        case 76: 
          { return PHPDOC_TODO;
          }
        case 235: break;
        case 15: 
          { yypushback(1);
        popState();
          }
        case 236: break;
        case 58: 
          { return PHP_LIST;
          }
        case 237: break;
        case 113: 
          { return PHP_ENDSWITCH;
          }
        case 238: break;
        case 50: 
          { return PHP_EXIT;
          }
        case 239: break;
        case 29: 
          { return PHP_AS;
          }
        case 240: break;
        case 70: 
          { return PHP_CLASS;
          }
        case 241: break;
        case 19: 
          { return PHP_COMMENT;
          }
        case 242: break;
        case 128: 
          { return PHPDOC_SUBPACKAGE;
          }
        case 243: break;
        case 14: 
          { popState();
    return PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 244: break;
        case 9: 
          { return PHP_CURLY_OPEN;
          }
        case 245: break;
        case 59: 
          { return PHPDOC_SEE;
          }
        case 246: break;
        case 33: 
          { return PHP_VARIABLE;
          }
        case 247: break;
        case 42: 
          { popState();
    return PHPDOC_COMMENT_END;
          }
        case 248: break;
        case 116: 
          { return PHPDOC_ABSTRACT;
          }
        case 249: break;
        case 55: 
          { return PHP_TRUE;
          }
        case 250: break;
        case 54: 
          { pushState(ST_PHP_DOC_COMMENT);
    return PHPDOC_COMMENT_START;
          }
        case 251: break;
        case 74: 
          { return PHPDOC_NAME;
          }
        case 252: break;
        case 93: 
          { return PHP_DECLARE;
          }
        case 253: break;
        case 124: 
          { return PHPDOC_COPYRIGHT;
          }
        case 254: break;
        case 43: 
          { popState();
    return PHP_LINE_COMMENT;
          }
        case 255: break;
        case 114: 
          { /* guy - support old versions */
    return PHP_FUNCTION;
          }
        case 256: break;
        case 126: 
          { return PHPDOC_DEPRECATED;
          }
        case 257: break;
        case 67: 
          { return PHP_FALSE;
          }
        case 258: break;
        case 85: 
          { return PHP_GLOBAL;
          }
        case 259: break;
        case 72: 
          { return PHP_PRINT;
          }
        case 260: break;
        case 122: 
          { return PHP_ENDFOREACH;
          }
        case 261: break;
        case 60: 
          { return PHPDOC_VAR;
          }
        case 262: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

