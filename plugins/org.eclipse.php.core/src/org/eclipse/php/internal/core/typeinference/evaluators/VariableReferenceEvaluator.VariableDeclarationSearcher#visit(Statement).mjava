		public boolean visit(Statement s) throws Exception {
			if (!shouldContinue(s)) {
				return false;
			}
			if (s instanceof GlobalStatement) {
				GlobalStatement globalStatement = (GlobalStatement) s;
				for (Expression variable : globalStatement.getVariables()) {
					if (variable instanceof VariableReference) {
						VariableReference variableReference = (VariableReference) variable;
						if (variableReference.getName().equals(variableName)) {
							seenGlobal = level;
							mergeWithGlobalScope = true;

							// remove all declarations, since global statement overrides them
							for (int i = 0; i < declarations.size(); ++i) {
								declarations.set(i, null);
								return visitGeneral(s);
							}
						}
					}
				}
			}
			else if (s instanceof FormalParameter) {
				FormalParameter parameter = (FormalParameter) s;
				if (parameter.getName().equals(variableName)) {
					declarations.clear(); // declarations list should be empty, but we still remove everything (maybe user typed the same argument twice)
					declarations.addLast(s);
					return visitGeneral(s);
				}
			}
			else if (s instanceof CatchClause) {
				CatchClause catchClause = (CatchClause) s;
				if (catchClause.getVariable().getName().equals(variableName)) {
					declarations.clear();
					declarations.addLast(catchClause);
					return visitGeneral(s);
				}
			} else if (s instanceof ForEachStatement) {
				ForEachStatement foreachStatement = (ForEachStatement) s;
				if (foreachStatement.getValue() instanceof SimpleReference && ((SimpleReference)foreachStatement.getValue()).getName().equals(variableName)) {
					declarations.clear();
					declarations.addLast(foreachStatement);
					return visitGeneral(s);
				}
			}
			ASTNode parent = nodesStack.peek();
			if (parent instanceof IfStatement || parent instanceof ForStatement || parent instanceof ForEachStatement || parent instanceof SwitchCase || parent instanceof WhileStatement) {
				increaseConditionalLevel();
			}
			return visitGeneral(s);
		}

