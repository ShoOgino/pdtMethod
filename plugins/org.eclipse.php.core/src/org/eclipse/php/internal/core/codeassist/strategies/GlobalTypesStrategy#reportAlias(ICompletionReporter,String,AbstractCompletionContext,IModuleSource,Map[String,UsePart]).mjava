	protected void reportAlias(ICompletionReporter reporter, String suffix,
			AbstractCompletionContext abstractContext, IModuleSource module,
			final Map<String, UsePart> result) throws BadLocationException {
		SourceRange replacementRange = getReplacementRange(abstractContext);
		String prefix = abstractContext.getPrefixWithoutProcessing();
		IDLTKSearchScope scope = createSearchScope();
		for (Iterator iterator = result.keySet().iterator(); iterator.hasNext();) {
			String name = (String) iterator.next();
			String fullName = result.get(name).getNamespace()
					.getFullyQualifiedName();
			if (fullName.startsWith("\\")) {
				fullName = fullName.substring(1);
			}
			IType[] elements = PhpModelAccess.getDefault().findTypes(null,
					fullName, MatchRule.PREFIX, 0, 0, scope, null);
			try {
				for (int i = 0; i < elements.length; i++) {
					String elementName = elements[i].getElementName();
					if (!PHPFlags.isNamespace(elements[i].getFlags())) {
						reportAlias(reporter, scope, module, replacementRange,
								elements[i], elementName,
								elementName.replace(fullName, name), suffix);
					} else {
						String nsname = prefix.replace(name, fullName);
						if (nsname.startsWith(elementName + SPLASH)
								&& nsname.lastIndexOf(SPLASH) == elementName
										.length()) {
							// namespace strategy will handle this case
							continue;
						}
						IType[] typesOfNS = elements[i].getTypes();

						for (int j = 0; j < typesOfNS.length; j++) {
							reportAlias(
									reporter,
									scope,
									module,
									replacementRange,
									typesOfNS[j],
									elementName + SPLASH
											+ typesOfNS[j].getElementName(),
									(elementName + SPLASH + typesOfNS[j]
											.getElementName()).replace(
											fullName, name), suffix);
						}
					}
				}

				elements = PhpModelAccess.getDefault().findTypes(fullName,
						MatchRule.EXACT, 0, 0, scope, null);

				for (int i = 0; i < elements.length; i++) {
					String elementName = elements[i].getElementName();
					if (!PHPFlags.isNamespace(elements[i].getFlags())) {
						reportAlias(reporter, scope, module, replacementRange,
								elements[i], elementName, name, suffix);
					} else {
						String nsname = prefix.replace(name, fullName);
						if (nsname.startsWith(elementName + SPLASH)
								&& nsname.lastIndexOf(SPLASH) == elementName
										.length()) {
							// namespace strategy will handle this case
							continue;
						}
						IType[] typesOfNS = elements[i].getTypes();

						for (int j = 0; j < typesOfNS.length; j++) {
							reportAlias(
									reporter,
									scope,
									module,
									replacementRange,
									typesOfNS[j],
									elementName + SPLASH
											+ typesOfNS[j].getElementName(),
									(elementName + SPLASH + typesOfNS[j]
											.getElementName()).replace(
											fullName, name), suffix);
						}
					}
				}
			} catch (ModelException e) {
				e.printStackTrace();
			}
		}
	}

