	/**
	 * Read string argnames from CharSequence
	 * 
	 * TODO Nested parenthesis expression
	 * 
	 * @return
	 */
	@SuppressWarnings("null")
	public static @NonNull String[] getArgNames(@Nullable PHPVersion phpVersion, @Nullable CharSequence textSequence,
			@Nullable ISourceModule sourceModule, int offset) {
		List<String> args = new ArrayList<>();
		if (textSequence != null && textSequence.length() > 2) {
			if (textSequence.charAt(textSequence.length() - 1) == ')') {
				textSequence = textSequence.subSequence(0, textSequence.length() - 1);
			}
			if (textSequence != null && textSequence.charAt(0) == '(') {
				textSequence = textSequence.subSequence(1, textSequence.length());
			}
			if (textSequence == null) {
				// should never happen (but makes @Nullable control for parameter textSequence
				// happy)
				return args.toArray(new String[args.size()]);
			}
			if (phpVersion == null) {
				phpVersion = PHPVersion.getLatestVersion();
			}

			AbstractPHPLexer lexer = PHPLexerFactory.createLexer(new StringReader(textSequence.toString()), phpVersion);
			lexer.initialize(lexer.getScriptingState());
			ArgNameClassDecoder ancd = null;
			if (sourceModule != null && !phpVersion.isLessThan(PHPVersion.PHP5_5)) {
				PHPTextSequenceUtilities out = new PHPTextSequenceUtilities();
				ancd = out.new ArgNameClassDecoder();
			}
			String symbol = null;
			int level = 0;
			int argIndex = 0;
			do {
				try {
					symbol = lexer.getNextToken();
					if (symbol != null) {
						CharSequence text = textSequence.subSequence(lexer.getTokenStart(),
								lexer.getTokenStart() + lexer.getLength());
						if (level == 0 && ancd != null) {
							ancd.addSymbol(symbol, text);
						}
						if (symbol.equals(PHPRegionTypes.PHP_TOKEN)) {
							if (text.equals(LPAREN) || text.equals(LBRACE) || text.equals(LBRACKET)) {
								level++;
							} else if (text.equals(RPAREN) || text.equals(RBRACE) || text.equals(RBRACKET)) {
								level--;
							} else if (level == 0 && text.equals(COMMA)) {
								argIndex++;
								if (ancd != null) {
									ancd.reset();
								}
							}
						} else if (level == 0) {
							if (symbol.equals(PHPRegionTypes.PHP_CONSTANT_ENCAPSED_STRING)) {
								if (args.size() < argIndex + 1) {
									args.add(ASTUtils.stripQuotes(text.toString()));
								}
							} else if (ancd != null && ancd.isBuilding()) {
								if (ancd.getAssignedArgumentIndex() < 0) {
									ancd.setAssignedArgumentIndex(args.size());
								}
								if (args.size() < ancd.getAssignedArgumentIndex() + 1) {
									args.add(null);
								}
							} else if (ancd != null && ancd.isReady()) {
								if (argIndex == ancd.getAssignedArgumentIndex()) {
									args.set(argIndex, ancd.resolve(sourceModule, offset));
								}
							} else if (!symbol.equals(PHPRegionTypes.WHITESPACE)) {
								if (args.size() < argIndex + 1) {
									args.add(null);
								} else {
									args.set(argIndex, null);
								}
							}
						}
					}
				} catch (IOException e) {
					symbol = null;
				}
			} while (symbol != null);
		}

		return args.toArray(new String[args.size()]);
	}

