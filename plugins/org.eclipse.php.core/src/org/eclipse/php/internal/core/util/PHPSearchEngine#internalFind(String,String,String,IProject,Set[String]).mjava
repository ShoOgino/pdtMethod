	private Result<?, ?> internalFind(String path, String currentWorkingDir, String currentScriptDir,
			IProject currentProject, Set<String> exclusiveFiles) {
		if (path == null || currentWorkingDir == null || currentScriptDir == null || currentProject == null) {
			throw new NullPointerException(Messages.PHPSearchEngine_1);
		}

		// check whether the path is absolute
		File file = new File(path);
		if (file.isAbsolute()) {
			return searchExternalOrWorkspaceFile(file);
		}
		if (RELATIVE_PATH_PATTERN.matcher(path).matches()) { // check whether
			// the path
			// starts with
			// ./ or ../
			return searchExternalOrWorkspaceFile(currentWorkingDir, path);
		}
		List<Result<?, ?>> list = new ArrayList<>();

		// look into include path:
		IncludePath[] includePaths = buildIncludePath(currentProject);
		for (IncludePath includePath : includePaths) {
			if (includePath.isBuildpath()) {
				Result<?, ?> searchInBuildpathEntry = searchInBuildpathEntry(path,
						(IBuildpathEntry) includePath.getEntry(), currentProject);
				if (searchInBuildpathEntry != null) {
					return searchInBuildpathEntry;
				}
			} else if (includePath.getEntry() instanceof IFile) {
				IFile resource = (IFile) includePath.getEntry();
				Result<?, ?> result = new ResourceResult(resource);
				if (exclusiveFiles == null || (resource.getLocation() != null
						&& !exclusiveFiles.contains(resource.getLocation().toOSString()))) {
					return result;
				} else {
					list.add(result);
				}
			} else if (includePath.getEntry() instanceof IContainer) {
				IContainer container = (IContainer) includePath.getEntry();
				IResource resource = container.findMember(path);
				if ((resource instanceof IFile)) {
					Result<?, ?> result = new ResourceResult((IFile) resource);
					if (exclusiveFiles == null || (resource.getLocation() != null
							&& !exclusiveFiles.contains(resource.getLocation().toOSString()))) {
						return result;
					} else {
						list.add(result);
					}

				}
			} else {
				Logger.log(Logger.ERROR, "Unknown IncludePath entry: " + includePath); //$NON-NLS-1$
			}
		}
		if (!list.isEmpty()) {
			return list.get(0);
		}

		// look at current script directory:
		return searchExternalOrWorkspaceFile(currentScriptDir, path);
	}

