	/**
	 * formats a PHP line according to the strategies and formatting conventions
	 * 
	 * @param document
	 * @param lineNumber
	 */
	private void formatLine(IStructuredDocument document, int lineNumber) {
		resultBuffer.setLength(0);

		try {

			// get original line information
			final IRegion originalLineInfo = document.getLineInformation(lineNumber);
			final int originalLineStart = originalLineInfo.getOffset();
			int originalLineLength = originalLineInfo.getLength();

			// fast resolving of empty line
			if (originalLineLength == 0) {
				retrieveEmptyLineIndentation(document, resultBuffer, lineNumber, originalLineStart);
				document.replace(originalLineStart, originalLineLength, resultBuffer.toString());
				return;
			}

			// get formatted line information
			final String lineText = document.get(originalLineStart, originalLineLength);
			final IRegion formattedLineInformation = getFormattedLineInformation(originalLineInfo, lineText);

			if (!shouldReformat(document, formattedLineInformation)) {
				return;
			}

			// remove ending spaces.
			final int formattedLineStart = formattedLineInformation.getOffset();
			final int formattedTextEnd = formattedLineStart + formattedLineInformation.getLength();
			if (formattedTextEnd != originalLineStart + originalLineLength) {
				document.replace(formattedTextEnd, originalLineStart + originalLineLength - formattedTextEnd, ""); //$NON-NLS-1$
				originalLineLength = formattedTextEnd - originalLineStart;
				// in case there is no text in the line just quit (since the
				// formatted of empty line is empty line)
				if (formattedLineStart == formattedTextEnd) {
					retrieveEmptyLineIndentation(document, resultBuffer, lineNumber, originalLineStart);
					document.replace(originalLineStart, originalLineLength, resultBuffer.toString());
					return;
				}
			}

			// get regions
			final int endingWhiteSpaces = formattedLineStart - originalLineStart;
			final IIndentationStrategy insertionStrategy;
			final IStructuredDocumentRegion sdRegion = document.getRegionAtCharacterOffset(formattedLineStart);
			int scriptRegionPos = sdRegion.getStartOffset();
			ITextRegion firstTokenInLine = sdRegion.getRegionAtCharacterOffset(formattedLineStart);
			ITextRegion lastTokenInLine = null;
			int regionStart = firstTokenInLine != null ? sdRegion.getStartOffset(firstTokenInLine) : 0;
			if (firstTokenInLine instanceof ITextRegionContainer) {
				scriptRegionPos = regionStart;
				ITextRegionContainer container = (ITextRegionContainer) firstTokenInLine;
				firstTokenInLine = container.getRegionAtCharacterOffset(formattedLineStart);
				regionStart += firstTokenInLine.getStart();
			}
			if (firstTokenInLine instanceof IPhpScriptRegion) {
				IPhpScriptRegion scriptRegion = (IPhpScriptRegion) firstTokenInLine;
				if (regionStart + scriptRegion.getEnd() <= formattedLineStart) {
					retrieveEmptyLineIndentation(document, resultBuffer, lineNumber, originalLineStart);
					document.replace(originalLineStart, originalLineLength, resultBuffer.toString());
					return;
				}
				scriptRegionPos = regionStart;
				firstTokenInLine = scriptRegion.getPhpToken(formattedLineStart - regionStart);
				if (regionStart + firstTokenInLine.getStart() < originalLineStart
						&& firstTokenInLine.getType() == PHPRegionTypes.WHITESPACE) {
					firstTokenInLine = scriptRegion.getPhpToken(firstTokenInLine.getEnd());
				}
				if (formattedTextEnd <= regionStart + scriptRegion.getEnd()) {
					lastTokenInLine = scriptRegion.getPhpToken(formattedTextEnd - regionStart - 1);
					if (regionStart + lastTokenInLine.getEnd() > originalLineStart + originalLineLength
							&& lastTokenInLine.getType() == PHPRegionTypes.WHITESPACE
							&& lastTokenInLine.getStart() > 0) {
						lastTokenInLine = scriptRegion.getPhpToken(lastTokenInLine.getStart() - 1);
					}
				}
			}

			// if the next char is not from this line
			if (firstTokenInLine == null) {
				retrieveEmptyLineIndentation(document, resultBuffer, lineNumber, originalLineStart);
				document.replace(originalLineStart, originalLineLength, resultBuffer.toString());
				return;
			}

			String firstTokenType = firstTokenInLine.getType();

			boolean formatThisLine = !isInHeredoc;
			if (firstTokenType == PHPRegionTypes.PHP_HEREDOC_TAG
					|| (lastTokenInLine != null && lastTokenInLine.getType() == PHPRegionTypes.PHP_HEREDOC_TAG)) {
				isInHeredoc = !isInHeredoc;
			}

			if (firstTokenType == PHPRegionTypes.PHP_CONSTANT_ENCAPSED_STRING) {
				int startLine = document.getLineOfOffset(scriptRegionPos + firstTokenInLine.getStart());
				if (startLine < lineNumber) {
					ignoreLines.add(lineNumber);
					return;
				}
			}

			if (!formatThisLine) {
				ignoreLines.add(lineNumber);
				return;
			}
			if (firstTokenType == PHPRegionTypes.PHP_CASE || firstTokenType == PHPRegionTypes.PHP_DEFAULT) {
				insertionStrategy = caseDefaultIndentationStrategy;
			} else if (isInsideOfPHPCommentRegion(firstTokenType)) {
				insertionStrategy = commentIndentationStrategy;
			} else if (firstTokenType == PHPRegionTypes.PHP_CLOSETAG) {
				insertionStrategy = phpCloseTagIndentationStrategy;
			} else {
				insertionStrategy = getIndentationStrategy(lineText.charAt(endingWhiteSpaces));
			}

			// Fill the buffer with blanks as if we added a "\n" to the end of
			// the prev element.
			// insertionStrategy.placeMatchingBlanks(editor,doc,insertionStrtegyKey,resultBuffer,startOffset-1);
			insertionStrategy.placeMatchingBlanks(document, resultBuffer, lineNumber, originalLineStart);

			// replace the starting spaces
			final String newIndentation = resultBuffer.toString();
			final String oldIndentation = lineText.substring(0, endingWhiteSpaces);
			char newChar = '\0';
			if (newIndentation.length() > 0) {
				newChar = newIndentation.charAt(0);
			}
			char oldChar = '\0';
			if (oldIndentation.length() > 0) {
				oldChar = oldIndentation.charAt(0);
			}
			if (newIndentation.length() != oldIndentation.length() || newChar != oldChar) {
				document.replace(originalLineStart, endingWhiteSpaces, newIndentation);
			}

		} catch (BadLocationException e) {
			Logger.logException(e);
		}
	}

