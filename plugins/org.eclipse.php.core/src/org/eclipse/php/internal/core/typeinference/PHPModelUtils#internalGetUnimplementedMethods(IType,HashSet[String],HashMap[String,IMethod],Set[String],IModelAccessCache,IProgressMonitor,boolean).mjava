	private static void internalGetUnimplementedMethods(IType type, HashSet<String> nonAbstractMethods,
			HashMap<String, IMethod> abstractMethods, Set<String> processedTypes, IModelAccessCache cache,
			IProgressMonitor monitor, boolean checkConstructor) throws ModelException {

		int typeFlags = type.getFlags();
		IMethod[] methods = getTypeMethod(type, "", false); //$NON-NLS-1$
		for (IMethod method : methods) {
			String methodName = method.getElementName();
			int methodFlags = method.getFlags();
			boolean isAbstract = PHPFlags.isAbstract(methodFlags);
			if (/* !PHPFlags.isInterface(typeFlags)&& */isConstructor(method)) {
				if (checkConstructor) {
					checkConstructor = false;
				} else {
					continue;
				}
			}
			if (isAbstract || PHPFlags.isInterface(typeFlags)) {
				if (!abstractMethods.containsKey(methodName)) {
					abstractMethods.put(methodName, method);
				}
			} else if (!isAbstract) {
				nonAbstractMethods.add(methodName);
			}
		}

		String[] superClasses = type.getSuperClasses();
		if (superClasses != null) {
			for (String superClass : superClasses) {
				if (!processedTypes.add(superClass)) {
					continue;
				}

				Collection<IType> types = null;
				if (cache == null) {
					IDLTKSearchScope scope = SearchEngine.createSearchScope(type.getScriptProject());
					IType[] superTypes = PHPModelAccess.getDefault().findTypes(superClass, MatchRule.EXACT, 0,
							Modifiers.AccNameSpace, scope, null);

					List<IType> list = new ArrayList<IType>();
					for (IType superType : superTypes) {
						if (superClass.equalsIgnoreCase(PHPModelUtils.getFullName(superType))) {
							list.add(superType);
						}
					}

					types = fileNetworkFilter(type.getSourceModule(), list, null, monitor);
				} else {
					String namespaceName = null;
					int i = superClass.lastIndexOf(NamespaceReference.NAMESPACE_SEPARATOR);
					if (i != -1) {
						namespaceName = superClass.substring(0, i);
						superClass = superClass.substring(i + 1);
					}
					types = cache.getClassesOrInterfaces(type.getSourceModule(), superClass, namespaceName, monitor);
				}
				if (types != null) {
					for (IType superType : types) {
						internalGetUnimplementedMethods(superType, nonAbstractMethods, abstractMethods, processedTypes,
								cache, monitor, checkConstructor);
					}
				}
			}
		}
	}

