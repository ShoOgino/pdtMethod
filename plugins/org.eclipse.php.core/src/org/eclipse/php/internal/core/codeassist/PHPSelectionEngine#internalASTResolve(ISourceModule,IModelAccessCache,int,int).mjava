	private IModelElement[] internalASTResolve(ISourceModule sourceModule, IModelAccessCache cache, int offset,
			int end /* inclusive end */) throws ModelException {
		String source;

		try {

			source = sourceModule.getSource();
			offset = PHPTextSequenceUtilities.readIdentifierStartIndex(source, offset, true);
			if (offset < 0) {
				return null;
			}
		} catch (IndexOutOfBoundsException ex) {
			// ISourceModule.getSource() may throw
			// ArrayIndexOutOfBoundsException and
			// PHPTextSequenceUtilities.readIdentifierStartIndex() may throw
			// StringIndexOutOfBoundExceptio in case when main thread
			// modifies editor content in parallel to this action in background
			// thread
			return null;
		}

		end = PHPTextSequenceUtilities.readIdentifierEndIndex(source, end, true);

		ModuleDeclaration parsedUnit = SourceParserUtil.getModuleDeclaration(sourceModule, null);

		// boolean inDocBlock=false;
		if (parsedUnit instanceof PHPModuleDeclaration) {
			PHPModuleDeclaration phpModuleDeclaration = (PHPModuleDeclaration) parsedUnit;
			List<PHPDocBlock> phpBlocks = phpModuleDeclaration.getPHPDocBlocks();
			for (PHPDocBlock phpDocBlock : phpBlocks) {
				int realStart = phpDocBlock.sourceStart();
				int realEnd = phpDocBlock.sourceEnd();
				if (realStart <= offset && realEnd >= end) {
					// inDocBlock=true;
					PHPDocTag[] tags = phpDocBlock.getTags();
					boolean isMethodOrFunction = PHPTextSequenceUtilities.getMethodEndIndex(source, end, false) != -1;
					return lookForMatchingElements(tags, sourceModule, parsedUnit, offset, end, isMethodOrFunction,
							cache);
				}
				if (offset < realStart) {
					break;
				}
			}
			List<VarComment> varComments = phpModuleDeclaration.getVarComments();
			for (VarComment varComment : varComments) {
				int realStart = varComment.sourceStart();
				int realEnd = varComment.sourceEnd();
				if (realStart <= offset && realEnd >= end) {
					boolean isMethodOrFunction = PHPTextSequenceUtilities.getMethodEndIndex(source, end, false) != -1;
					return lookForMatchingElements(varComment.getTypeReferences(), sourceModule, offset, end,
							isMethodOrFunction, cache);
				}
				if (offset < realStart) {
					break;
				}
			}
		}
		int methodEnd = PHPTextSequenceUtilities.getMethodEndIndex(source, end, true);
		if (methodEnd != -1) {
			end = methodEnd;
		}
		ASTNode node = ASTUtils.findMinimalNode(parsedUnit, offset, end);
		if (node == null) {
			return null;
		}

		IContext context = ASTUtils.findContext(sourceModule, parsedUnit, node);
		if (context == null) {
			return null;
		}
		if (context instanceof IModelCacheContext) {
			((IModelCacheContext) context).setCache(cache);
		}

		// Function call:
		if (node instanceof PHPCallExpression) {
			return processPHPCallExpression((PHPCallExpression) node, sourceModule, parsedUnit, offset, context, cache);
		}
		// Static field or constant access:
		else if (node instanceof StaticDispatch) {
			StaticDispatch dispatch = (StaticDispatch) node;
			String fieldName = null;
			if (dispatch instanceof StaticConstantAccess) {
				fieldName = ((StaticConstantAccess) dispatch).getConstant().getName();
			} else if (dispatch instanceof StaticFieldAccess) {
				ASTNode field = ((StaticFieldAccess) dispatch).getField();
				if (field instanceof VariableReference) {
					fieldName = ((VariableReference) field).getName();
				}
			}
			if (fieldName != null && dispatch.getDispatcher() != null) {
				IEvaluatedType dispatcherType = PHPTypeInferenceUtils.resolveExpression(sourceModule, parsedUnit,
						context, dispatch.getDispatcher());
				if (dispatcherType != null) {
					IType[] elements = PHPTypeInferenceUtils.getModelElements(dispatcherType,
							(ISourceModuleContext) context, offset);
					List<IModelElement> fields = new LinkedList<>();
					if (elements != null) {
						for (IModelElement element : elements) {
							IType type = (IType) element;
							try {
								fields.addAll(Arrays.asList(PHPModelUtils.getTypeHierarchyField(type,
										cache.getSuperTypeHierarchy(type, new NullProgressMonitor()), fieldName, true,
										new NullProgressMonitor())));
							} catch (Exception e) {
								PHPCorePlugin.log(e);
							}
						}
					}
					return fields.toArray(new IModelElement[fields.size()]);
				}
			}
		}
		// Dynamic field access:
		else if (node instanceof FieldAccess) {
			FieldAccess fieldAccess = (FieldAccess) node;
			ASTNode field = fieldAccess.getField();
			String fieldName = null;
			if (field instanceof SimpleReference) {
				fieldName = ((SimpleReference) field).getName();
			}
			if (fieldName != null && fieldAccess.getDispatcher() != null) {
				IEvaluatedType dispatcherType = PHPTypeInferenceUtils.resolveExpression(sourceModule, parsedUnit,
						context, fieldAccess.getDispatcher());
				if (dispatcherType != null) {
					IModelElement[] elements = PHPTypeInferenceUtils.getModelElements(dispatcherType,
							(ISourceModuleContext) context, offset);
					List<IModelElement> fields = new LinkedList<>();
					if (elements != null) {
						for (IModelElement element : elements) {
							if (element instanceof IType) {
								IType type = (IType) element;
								try {
									fields.addAll(Arrays.asList(PHPModelUtils.getTypeField(type, fieldName, true)));
								} catch (ModelException e) {
									PHPCorePlugin.log(e);
								}
							}
						}
					}
					return fields.toArray(new IModelElement[fields.size()]);
				}
			}
		} else if (node instanceof NamespaceReference) {
			String name = ((NamespaceReference) node).getName();
			IType[] namespace = PHPModelUtils.getNamespaceOf(name + NamespaceReference.NAMESPACE_SEPARATOR,
					sourceModule, offset, cache, null);
			return namespace;
		}
		// Class/Interface/Trait/Constant/Function reference:
		else if (node instanceof TypeReference) {
			// "use function" (see also TypeReferenceEvaluator.init()):
			if (node instanceof FullyQualifiedReference
					&& ((FullyQualifiedReference) node).getElementType() == FullyQualifiedReference.T_FUNCTION) {
				IModelElement element = sourceModule.getElementAt(offset);
				if (element instanceof ImportDeclaration) {
					String fullyQualifiedName = ((ImportDeclaration) element).getElementName();
					String namespace = PHPModelUtils.extractNameSpaceName(fullyQualifiedName);
					// http://php.net/manual/en/language.namespaces.importing.php
					// "Note that for namespaced names (fully qualified
					// namespace names containing namespace separator, such as
					// Foo\Bar as opposed to global names that do not, such as
					// FooBar), the leading backslash is unnecessary and not
					// recommended, as import names must be fully qualified, and
					// are not processed relative to the current namespace."
					if (namespace != null && fullyQualifiedName.length() > 0
							&& fullyQualifiedName.charAt(0) != NamespaceReference.NAMESPACE_SEPARATOR) {
						fullyQualifiedName = NamespaceReference.NAMESPACE_DELIMITER + fullyQualifiedName;
					}
					return PHPModelUtils.getFunctions(fullyQualifiedName, sourceModule, offset, cache, null);
				}
			}
			int nodeType = FullyQualifiedReference.T_TYPE;
			if (node instanceof FullyQualifiedReference) {
				nodeType = ((FullyQualifiedReference) node).getElementType();
			}

			TypeReference typeReference = (TypeReference) node;

			if (nodeType == FullyQualifiedReference.T_CONSTANT) {
				String constantName = typeReference.getName();
				String qualifier = null;
				IModelElement element = sourceModule.getElementAt(offset);
				if (element instanceof IImportDeclaration) {
					qualifier = PHPModelUtils.extractNameSpaceName(element.getElementName());
				} else if (typeReference instanceof FullyQualifiedReference) {
					String fqn = ((FullyQualifiedReference) typeReference).getFullyQualifiedName();
					qualifier = PHPModelUtils.extractNamespaceName(fqn, sourceModule, typeReference.start());
				}
				IModelElement[] elements = PHPModelAccess.getDefault().findConstants(qualifier, null, constantName,
						MatchRule.EXACT, 0, 0, SearchEngine.createSearchScope(sourceModule.getScriptProject()), null);
				return elements;
			}

			IEvaluatedType evaluatedType = PHPTypeInferenceUtils.resolveExpression(sourceModule, node);
			if (evaluatedType == null) {
				return EMPTY;
			}
			IModelElement[] elements = new IModelElement[0];
			String name = evaluatedType.getTypeName();

			if (nodeType == FullyQualifiedReference.T_FUNCTION) {
				elements = PHPModelUtils.getFunctions(name, sourceModule, offset, cache, null);
				if (elements.length == 0) {
					elements = PHPModelUtils.getFunctions(typeReference.getName(), sourceModule, offset, cache, null);
				}
			} else if (nodeType == FullyQualifiedReference.T_TYPE) {
				elements = PHPModelUtils.getTypes(name, sourceModule, offset, cache, null);
				if (elements.length == 0) {
					elements = PHPModelUtils.getTraits(name, sourceModule, offset, cache, null);
				}
				if (elements.length == 0) {
					// This can be a constant or namespace in PHP 5.3:
					if (name.length() > 0 && name.charAt(0) == NamespaceReference.NAMESPACE_SEPARATOR) {
						name = name.substring(1);
					}
					IDLTKSearchScope scope = SearchEngine.createSearchScope(sourceModule.getScriptProject());
					elements = PHPModelAccess.getDefault().findNamespaces(null, name, MatchRule.EXACT, 0, 0, scope,
							null);
				}
			}
			return elements;
		}
		// 'new' statement
		else if (node instanceof ClassInstanceCreation) {
			ClassInstanceCreation newNode = (ClassInstanceCreation) node;
			Expression className = newNode.getClassName();

			if ((className instanceof SimpleReference || className instanceof FullyQualifiedReference)) {
				IEvaluatedType evaluatedType = PHPTypeInferenceUtils.resolveExpression(sourceModule, node);
				if (evaluatedType != null) {
					return getConstructorsIfAny(extractClasses(
							PHPModelUtils.getTypes(evaluatedType.getTypeName(), sourceModule, offset, cache, null)));
				}
			} else if ((className instanceof StaticFieldAccess)) {
				StaticFieldAccess staticFieldAccess = (StaticFieldAccess) className;
				if ((offset >= staticFieldAccess.getDispatcher().sourceStart())
						&& (offset <= staticFieldAccess.getDispatcher().sourceEnd())) {
					className = staticFieldAccess.getDispatcher();
					IEvaluatedType evaluatedType = PHPTypeInferenceUtils.resolveExpression(sourceModule, className);
					if (evaluatedType != null) {
						return extractClasses(
								PHPModelUtils.getTypes(evaluatedType.getTypeName(), sourceModule, offset, cache, null));
					}
				} else if ((offset >= staticFieldAccess.getField().sourceStart())
						&& (offset <= staticFieldAccess.getField().sourceEnd())) {
					className = staticFieldAccess.getField();

					String fieldName = null;
					ASTNode field = staticFieldAccess.getField();
					if (field instanceof VariableReference) {
						fieldName = ((VariableReference) field).getName();
					}
					if (fieldName != null && staticFieldAccess.getDispatcher() != null) {
						IEvaluatedType dispatcherType = PHPTypeInferenceUtils.resolveExpression(sourceModule,
								parsedUnit, context, staticFieldAccess.getDispatcher());
						if (dispatcherType != null) {
							IModelElement[] elements = PHPTypeInferenceUtils.getModelElements(dispatcherType,
									(ISourceModuleContext) context, offset);
							List<IModelElement> fields = new LinkedList<>();
							if (elements != null) {
								for (IModelElement element : elements) {
									if (element instanceof IType) {
										IType type = (IType) element;
										try {
											fields.addAll(
													Arrays.asList(PHPModelUtils.getTypeField(type, fieldName, true)));
										} catch (ModelException e) {
											PHPCorePlugin.log(e);
										}
									}
								}
							}
							return fields.toArray(new IModelElement[fields.size()]);
						}
					}
				}

			}
		}
		// Class name in declaration
		else if ((node instanceof TypeDeclaration || node instanceof MethodDeclaration)
				&& ((Declaration) node).getNameStart() <= offset && ((Declaration) node).getNameEnd() >= offset) {

			IModelElement element = sourceModule.getElementAt(node.sourceStart());
			if (element != null) {
				return new IModelElement[] { element };
			}
		} else if (node instanceof SimpleReference) {
			SimpleReference reference = (SimpleReference) node;

			node = ASTUtils.findMinimalNode(parsedUnit, offset, node.end() + 1);
			if (node instanceof TraitAliasStatement) {
				node = ASTUtils.findMinimalNode(parsedUnit, offset, node.end() + 1);
				if (node instanceof TraitUseStatement) {
					TraitUseStatement statement = (TraitUseStatement) node;
					List<IModelElement> methods = new LinkedList<>();
					for (TypeReference typeReference : statement.getTraitList()) {
						IType[] types = PHPModelUtils.getTypes(typeReference.getName(), sourceModule, offset, cache,
								null, false);
						for (IType t : types) {
							IModelElement[] children = t.getChildren();
							for (IModelElement modelElement : children) {
								String name = modelElement.getElementName();
								if (name.startsWith("$")) { //$NON-NLS-1$
									name = name.substring(1);
								}
								if (name.equals(reference.getName())) {
									methods.add(modelElement);
								}
							}
						}
					}

					return methods.toArray(new IMethod[methods.size()]);
				}
			}
		}
		/*
		 * else if (node instanceof Scalar) { Scalar scalar = (Scalar) node; if
		 * (PHPModelUtils.isQuotesString(scalar.getValue())) {
		 * 
		 * IEvaluatedType evaluatedType = PHPTypeInferenceUtils
		 * .resolveExpression(sourceModule, node); if (evaluatedType != null) {
		 * 
		 * IType[] types = PHPModelUtils.getTypes( evaluatedType.getTypeName(),
		 * sourceModule, offset, null, null); return types; } } }
		 */
		return null;
	}

