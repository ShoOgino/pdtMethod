	private static void internalBuildReferencingFilesTree(Node root,
			Set<ISourceModule> processedFiles,
			Map<IModelElement, IField[]> includesCache, IProgressMonitor monitor) {

		if (monitor != null && monitor.isCanceled()) {
			return;
		}

		ISourceModule file = root.getFile();
		IDLTKSearchScope scope = createSearchScope(file);
		if (scope == null) {
			return;
		}

		IModelElement parentElement = (file instanceof ExternalSourceModule) ? ((ExternalSourceModule) file)
				.getProjectFragment()
				: file.getScriptProject();

		IField[] includes = includesCache.get(parentElement);
		if (includes == null) {
			includes = PhpModelAccess.getDefault().findIncludes(null,
					MatchRule.PREFIX, scope, monitor);
			includesCache.put(parentElement, includes);
		}

		for (IField include : includes) {
			if (monitor != null && monitor.isCanceled()) {
				return;
			}
			String filePath = ((IncludeField) include).getFilePath();
			String lastSegment = filePath;
			int i = Math.max(filePath.lastIndexOf('/'), filePath
					.lastIndexOf('\\'));
			if (i > 0) {
				lastSegment = lastSegment.substring(i + 1);
			}
			if (!lastSegment.equals(file.getElementName())) {
				continue;
			}

			// Candidate that includes the original source module:
			ISourceModule referencingFile = include.getSourceModule();

			// Try to resolve include:
			ISourceModule testFile = findSourceModule(referencingFile, filePath);

			// If this is the correct include (that means that included file is
			// the original file):
			if (file.equals(testFile)
					&& !processedFiles.contains(referencingFile)) {
				processedFiles.add(referencingFile);
				Node node = new Node(referencingFile);
				root.addChild(node);
			}
		}

		Collection<Node> children = root.getChildren();
		if (children != null) {
			for (Node child : children) {
				internalBuildReferencingFilesTree(child, processedFiles,
						includesCache, monitor);
			}
		}
	}

