	public IModelElement[] select(org.eclipse.dltk.compiler.env.ISourceModule sourceUnit, int offset, int end) {

		fileNetwokFilter = PHPCorePlugin.getDefault().getPluginPreferences().getBoolean(PHPCoreConstants.CODESELECT_FILE_NETWORK_FILTER);

		if (end < offset) {
			end = offset + 1;
		}

		ISourceModule sourceModule = (ISourceModule) sourceUnit.getModelElement();

		// First, try to resolve using AST (if we have parsed it well):
		try {
			IModelElement[] elements = internalASTResolve(sourceModule, offset, end);
			if (elements != null) {
				return elements;
			}
		} catch (Exception e) {
			Logger.logException(e);
		}

		// Use the old way by playing with document & buffer:
		IStructuredDocument document = null;
		IStructuredModel structuredModel = null;
		try {
			IFile file = (IFile) sourceUnit.getModelElement().getResource();
			if (file != null) {
				structuredModel = StructuredModelManager.getModelManager().getExistingModelForRead(file);
				if (structuredModel == null) {
					structuredModel = StructuredModelManager.getModelManager().createUnManagedStructuredModelFor(file);
				}
				if (structuredModel instanceof AbstractStructuredModel) {
					document = ((AbstractStructuredModel) structuredModel).getStructuredDocument();
				}
			}
		} catch (Exception e) {
			Logger.logException(e);
		} finally {
			if (structuredModel != null && structuredModel.isSharedForRead()) {
				structuredModel.releaseFromRead();
			}
		}

		if (document != null) {
			return internalResolve(document, sourceModule, offset, end);
		}

		return EMPTY;
	}

