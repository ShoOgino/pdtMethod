	@NonNull
	public static IType[] getTypes(String typeName, ISourceModule sourceModule, int offset, IModelAccessCache cache,
			IProgressMonitor monitor, boolean isType, boolean isGlobal) throws ModelException {

		if (typeName == null || typeName.length() == 0) {
			return PHPModelAccess.NULL_TYPES;
		}

		if (!isGlobal) {
			String fullTypeName = typeName;
			String namespace = extractNamespaceName(typeName, sourceModule, offset);
			typeName = extractElementName(typeName);
			if (namespace != null) {
				if (namespace.length() > 0) {
					String typeNameSpaceName = extractNameSpaceName(fullTypeName);
					// https://bugs.eclipse.org/bugs/show_bug.cgi?id=515844
					// only look for aliases when there is no namespace
					// separator in the type name
					if (typeNameSpaceName == null) {
						typeName = getRealName(typeName, sourceModule, offset, typeName);
					}

					IType[] types = getNamespaceType(namespace, typeName, true, sourceModule, cache, monitor, isType);
					if (types.length > 0) {
						return types;
					}
					return PHPModelAccess.NULL_TYPES;
				}
				// it's a global reference: \A
			} else {
				// look for the element in current namespace:
				IType currentNamespace = getCurrentNamespace(sourceModule, offset);
				if (currentNamespace != null) {
					namespace = currentNamespace.getElementName();
					IType[] types = getNamespaceType(namespace, typeName, true, sourceModule, cache, monitor, isType);
					if (types.length > 0) {
						return types;
					}
				}
			}
		}

		Collection<IType> types;
		if (cache == null) {
			IDLTKSearchScope scope = SearchEngine.createSearchScope(sourceModule.getScriptProject());
			if (isType) {
				types = Arrays
						.asList(PHPModelAccess.getDefault().findTypes(typeName, MatchRule.EXACT, 0, 0, scope, null));
			} else {
				types = Arrays
						.asList(PHPModelAccess.getDefault().findTraits(typeName, MatchRule.EXACT, 0, 0, scope, null));
			}
		} else {
			// Cached types will already be filtered by method
			// PHPModelUtils.filterElements() when cache is an instance of
			// PerFileModelAccessCache. The filtering is too early here but it's
			// ok so long it doesn't change the results of bottom
			// getCurrentNamespace(type) and filterElements(sourceModule,
			// result, null, monitor) filtering for types without namespace.
			// See https://bugs.eclipse.org/bugs/show_bug.cgi?id=497003 and
			// https://bugs.eclipse.org/bugs/show_bug.cgi?id=496530
			if (isType) {
				types = cache.getTypes(sourceModule, typeName, null, monitor);
			} else {
				types = cache.getTraits(sourceModule, typeName, null, monitor);
			}
			if (types == null) {
				return PHPModelAccess.NULL_TYPES;
			}
		}
		List<IType> result = new ArrayList<>();
		for (IType type : types) {
			if (getCurrentNamespace(type) == null) {
				result.add(type);
			}
		}
		types = filterElements(sourceModule, result, null, monitor);
		return result.toArray(new IType[result.size()]);
	}

