	protected boolean isClassFunctionCompletion(TextSequence statementText, int offset, int line, String functionName, int startFunctionPosition) {
		startFunctionPosition = PHPTextSequenceUtilities.readBackwardSpaces(statementText, startFunctionPosition);
		if (startFunctionPosition <= 2) {
			return false;
		}
		
		boolean isClassTriger = false;
		boolean isParent = false;
		
		String triggerText = statementText.subSequence(startFunctionPosition - 2, startFunctionPosition).toString();
		if (triggerText.equals(OBJECT_FUNCTIONS_TRIGGER)) {
		} else if (triggerText.equals(PAAMAYIM_NEKUDOTAIM) || triggerText.endsWith(NS_SEPARATOR)) {
			isClassTriger = true;
			if (startFunctionPosition >= 8) {
				String parentText = statementText.subSequence(startFunctionPosition - 8, startFunctionPosition - 2).toString();
				if (parentText.equals("parent")) { //$NON-NLS-1$
					isParent = true;
				}
			}
		} else {
			return false;
		}

		if (internalPHPRegion.getType() == PHPRegionTypes.PHP_OBJECT_OPERATOR || internalPHPRegion.getType() == PHPRegionTypes.PHP_PAAMAYIM_NEKUDOTAYIM
				|| internalPHPRegion.getType() == PHPRegionTypes.PHP_NS_SEPARATOR) {
			try {
				ITextRegion nextRegion = phpScriptRegion.getPhpToken(internalPHPRegion.getEnd());
				wordEndOffset = regionContainer.getStartOffset() + phpScriptRegion.getStart() + nextRegion.getTextEnd();
			} catch (BadLocationException e) {
			}
		}

		IType[] types = CodeAssistUtils.getTypesFor(sourceModule, statementText, startFunctionPosition, offset, line);
		if (types != null) {
			if (hasWhitespaceAtEnd && functionName.length() > 0) {
				// check if current position is between the end of a function call and open bracket.
				return CodeAssistUtils.isClassFunctionCall(sourceModule, types, functionName);
			}

			if (isClassTriger) {
				if (isParent) {
					// Collect parents:
					Set<IType> parents = new HashSet<IType>();
					for (IType type : types) {
						try {
							ITypeHierarchy hierarchy = type.newSupertypeHierarchy(null);
							parents.addAll(Arrays.asList(hierarchy.getAllSuperclasses(type)));
						} catch (ModelException e) {
							if (DLTKCore.DEBUG_COMPLETION) {
								e.printStackTrace();
							}
						}
					}
					showClassMembers(offset, parents.toArray(new IType[parents.size()]), functionName, false, NON_STATIC_MEMBERS | STATIC_MEMBERS);
				} else {
					showClassMembers(offset, types, functionName, false, STATIC_MEMBERS);
				}
			} else {
				boolean isThisVar = false;
				final String text = statementText.toString();
				final String parent = text.substring(0, text.lastIndexOf(OBJECT_FUNCTIONS_TRIGGER)).trim();
				// check if the end of the statement is $this expression
				if (parent.length() >= 5) {
					isThisVar = "$this".equals(parent.substring(Math.max(0, parent.length() - 5))); //$NON-NLS-1$					
				}
				showClassMembers(offset, types, functionName, isThisVar, NON_STATIC_MEMBERS);
			}
		}
		return true;
	}

