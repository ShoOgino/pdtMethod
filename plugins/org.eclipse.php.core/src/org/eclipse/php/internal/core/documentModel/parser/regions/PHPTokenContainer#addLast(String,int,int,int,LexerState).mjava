	/**
	 * Push region to the end of the tokens list
	 * 
	 * @param region
	 * @param lexerState
	 */
	public synchronized void addLast(String yylex, int start, int yylengthLength, int yylength, LexerState lexerState) {
		assert (phpTokens.size() == 0 || getLastToken().getEnd() == start) && tokensIterator == null;

		if (phpTokens.size() > 0) {
			ContextRegion lastContextRegion = phpTokens.get(phpTokens.size() - 1);
			if (deprecatedKeywordAfter(lastContextRegion.getType())) {
				if (isKeyword(yylex)) {
					yylex = PHPRegionTypes.PHP_LABEL;
				}
			}
		}
		// if state was change - we add a new token and add state
		if (lexerStateChanges.size() == 0 || !getLastChange().state.equals(lexerState)) {
			int textLength = yylengthLength;
			if (yylex == AbstractPHPLexer.WHITESPACE) {
				textLength = 0;
			} else if (yylex == AbstractPHPLexer.PHP_CURLY_OPEN || yylex == AbstractPHPLexer.PHP_CURLY_CLOSE) {
				textLength = 1;
			}

			final ContextRegion contextRegion = new ContextRegion(yylex, start, textLength, yylength);
			phpTokens.addLast(contextRegion);
			lexerStateChanges.addLast(new LexerStateChange(lexerState, contextRegion));
			return;
		}

		assert phpTokens.size() > 0;
		// if we can only adjust the previous token size
		if (yylex == AbstractPHPLexer.WHITESPACE) {
			final ITextRegion last = phpTokens.getLast();
			last.adjustLength(yylength);
		} else { // else - add as a new token
			int textLength = yylengthLength;
			if (yylex == AbstractPHPLexer.PHP_CURLY_OPEN || yylex == AbstractPHPLexer.PHP_CURLY_CLOSE) {
				textLength = 1;
			}
			final ContextRegion contextRegion = new ContextRegion(yylex, start, textLength, yylength);
			phpTokens.addLast(contextRegion);
		}
	}

