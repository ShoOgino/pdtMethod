	protected void getRegularCompletion(String prefix, int offset, boolean explicit, ITextRegionCollection sdRegion, ITextRegion tRegion, ContextRegion internalPhpRegion, IStructuredDocument document) {
		
		this.setSourceRange(offset - prefix.length(), offset);

		boolean inClass = false;
		try {
			if (((SourceModule)sourceModule.getModelElement()).getElementAt(offset) instanceof IType) {
				inClass = true;
			}
		} catch (ModelException e) {
			Logger.logException(e);
		}
		
		Collection<KeywordData> keywordsList = PHPKeywords.findByPrefix(((SourceModule) sourceModule).getScriptProject().getProject(), prefix);
		for (KeywordData k : keywordsList) {
			if (inClass == k.isClassKeyword) {
				reportKeyword(k.name, k.suffix);
			}
		}
		
		if (prefix.length() == 0) {
			return;
		}

		if (internalPhpRegion != null) {
			final String type = internalPhpRegion.getType();

			if (prefix.startsWith(DOLLAR) && !inClass) { //$NON-NLS-1$
				if (!explicit && !autoactivateForVariables())
					return;
				try {
					//if we're right next to a letter, in an implicit scenario, we don't want it to complete the variables name.
					if (!explicit && prefix.equals(DOLLAR) && document.getLength() != offset && Character.isLetter(document.getChar(offset))) { //$NON-NLS-1$
						return;
					}
				} catch (BadLocationException e) {
				}
				if (PHPPartitionTypes.isPHPQuotesState(type)) {
					final IStructuredDocument doc = document;
					try {
						final char charBefore = doc.get(offset - 2, 1).charAt(0);
						if (charBefore == '\\')
							return;
					} catch (final BadLocationException badLocationException) {
						Logger.logException(badLocationException);
					}
				}

				int relevance = 424242;
				reportVariables(phpVariables, prefix, relevance--, false);

				IModelElement[] variables = CodeAssistUtils.getWorkspaceFields(prefix, false);
				for (IModelElement var : variables) {
					reportField((IField) var, relevance--, false);
				}
				return;
			}

			if (PHPPartitionTypes.isPHPQuotesState(type) || type.equals(PHPRegionTypes.PHP_HEREDOC_TAG) && sdRegion.getStartOffset(tRegion) + tRegion.getLength() <= offset) {
				return;
			}
		}

		if ((explicit || autoactivateForFunctionsKeywordsConstants()) && !inClass) {
			IModelElement[] functions = CodeAssistUtils.getWorkspaceMethods(prefix, false);
			for (IModelElement function : functions) {
				reportMethod((IMethod) function, RELEVANCE_METHODS);
			}

			if (showConstantAssist()) {
				int relevance = 4242;
				IModelElement[] constants = CodeAssistUtils.getWorkspaceFields(prefix, false);
				for (IModelElement constant : constants) {
					try {
						if ((((IField)constant).getFlags() & Modifiers.AccConstant) != 0) {
							reportField((IField) constant, relevance--, false);
						}
					} catch (ModelException e) {
						Logger.logException(e);
					}
				}
			}
		}

		if (!inClass) {
			if (showClassNamesInGlobalCompletion()) {
				if (explicit || autoactivateForClassnames()) {
					int relevance = 424242;
					IModelElement[] classes = CodeAssistUtils.getWorkspaceClasses(prefix, false);
					for (IModelElement type : classes) {
						reportType((IType) type, relevance--, PAAMAYIM_NEKUDOTAIM);
					}
				}
			}
		}
		return;
	}

