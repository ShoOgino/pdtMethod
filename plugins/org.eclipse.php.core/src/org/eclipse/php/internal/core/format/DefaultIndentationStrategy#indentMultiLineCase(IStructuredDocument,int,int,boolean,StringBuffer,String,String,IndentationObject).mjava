	private static boolean indentMultiLineCase(IStructuredDocument document,
			int lineNumber, int offset, boolean enterKeyPressed,
			StringBuffer result, String blanks, String commandText,
			IndentationObject indentationObject) {
		// LineState lineState = new LineState();
		// StringBuffer sb = new StringBuffer();
		try {
			IRegion region = document.getLineInformationOfOffset(offset);
			String content = document.get(offset,
					region.getOffset() + region.getLength() - offset);
			PHPHeuristicScanner scanner = PHPHeuristicScanner
					.createHeuristicScanner(document, offset, true);
			if (inBracelessBlock(scanner, document, offset)) {
				// lineState.inBracelessBlock = true;
				if (!"{".equals(commandText)) {
					indent(document, result, indentationObject.indentationChar,
							indentationObject.indentationSize);
				}
				return true;
			} else if (content.trim().startsWith(
					BLANK + PHPHeuristicScanner.LBRACE)) {
				// lineState.inBracelessBlock = true;
				int token = scanner.previousToken(offset - 1,
						PHPHeuristicScanner.UNBOUND);
				if (token == PHPHeuristicScanner.TokenRPAREN) {

					int peer = scanner.findOpeningPeer(scanner.getPosition(),
							PHPHeuristicScanner.UNBOUND,
							PHPHeuristicScanner.LPAREN,
							PHPHeuristicScanner.RPAREN);
					if (peer != PHPHeuristicScanner.NOT_FOUND) {

						String newblanks = FormatterUtils.getLineBlanks(
								document,
								document.getLineInformationOfOffset(peer));
						StringBuffer newBuffer = new StringBuffer(newblanks);
						// IRegion region = document
						// .getLineInformationOfOffset(offset);

						result.setLength(result.length() - blanks.length());
						result.append(newBuffer.toString());
						return true;
					}
				}

			} else if (inMultiLine(scanner, document, lineNumber, offset)) {
				// lineState.inBracelessBlock = true;
				int peer = scanner.findOpeningPeer(offset - 1,
						PHPHeuristicScanner.UNBOUND,
						PHPHeuristicScanner.LPAREN, PHPHeuristicScanner.RPAREN);
				if (peer != PHPHeuristicScanner.NOT_FOUND) {

					// search for assignment (i.e. "=>")
					int position = peer - 1;
					int token = scanner.previousToken(position,
							PHPHeuristicScanner.UNBOUND);
					// scan tokens backwards until reaching a PHP token
					while (token > 100
							|| token == PHPHeuristicScanner.TokenOTHER) {
						position--;
						token = scanner.previousToken(position,
								PHPHeuristicScanner.UNBOUND);
					}

					position--;
					boolean isAssignment = scanner.previousToken(position,
							PHPHeuristicScanner.UNBOUND) == PHPHeuristicScanner.TokenGREATERTHAN
							&& scanner.previousToken(position - 1,
									PHPHeuristicScanner.UNBOUND) == PHPHeuristicScanner.TokenEQUAL;

					token = scanner.previousToken(peer - 1,
							PHPHeuristicScanner.UNBOUND);

					boolean isArray = token == Symbols.TokenARRAY;
					// lineState.indent.setLength(0)
					// int baseLine = document.getLineOfOffset(peer);
					String newblanks = FormatterUtils.getLineBlanks(document,
							document.getLineInformationOfOffset(peer));
					StringBuffer newBuffer = new StringBuffer(newblanks);
					pairArrayParen = false;
					// IRegion region = document
					// .getLineInformationOfOffset(offset);
					if (enterKeyPressed
							|| !document
									.get(offset,
											region.getOffset()
													+ region.getLength()
													- offset)
									.trim()
									.startsWith(
											BLANK + PHPHeuristicScanner.RPAREN)) {
						if (isArray) {
							region = document
									.getLineInformationOfOffset(offset);
							if (scanner.nextToken(offset, region.getOffset()
									+ region.getLength()) == PHPHeuristicScanner.TokenRPAREN) {
								if (isAssignment)
									indent(document, newBuffer, 0,
											indentationObject.indentationChar,
											indentationObject.indentationSize);
								else {
									indent(document,
											newBuffer,
											indentationObject.indentationArrayInitSize,
											indentationObject.indentationChar,
											indentationObject.indentationSize);
									pairArrayParen = true;
								}
							} else {
								indent(document,
										newBuffer,
										indentationObject.indentationArrayInitSize,
										indentationObject.indentationChar,
										indentationObject.indentationSize);
							}
						} else {
							indent(document,
									newBuffer,
									indentationObject.indentationWrappedLineSize,
									indentationObject.indentationChar,
									indentationObject.indentationSize);
						}
					}

					result.setLength(result.length() - blanks.length());
					result.append(newBuffer.toString());
					if (pairArrayParen) {
						pairArrayOffset = offset + result.length();
						result.append(Util.getLineSeparator(null, null));
						result.append(blanks);

					}
					return true;
				}
			} else {
				int baseLine = inMultiLineString(document, offset, lineNumber,
						enterKeyPressed);
				if (baseLine >= 0) {
					String newblanks = FormatterUtils.getLineBlanks(document,
							document.getLineInformation(baseLine));
					StringBuffer newBuffer = new StringBuffer(newblanks);
					indent(document, newBuffer,
							indentationObject.indentationWrappedLineSize,
							indentationObject.indentationChar,
							indentationObject.indentationSize);
					result.setLength(result.length() - blanks.length());
					result.append(newBuffer.toString());
					return true;
				}
			}
		} catch (final BadLocationException e) {
		}
		return false;
	}

