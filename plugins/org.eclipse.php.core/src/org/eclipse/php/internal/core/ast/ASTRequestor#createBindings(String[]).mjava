	/**
	 * Resolves bindings for the given binding keys. The given binding keys must
	 * have been obtained earlier using {@link IBinding#getKey()}.
	 * <p>
	 * If a binding key cannot be resolved, <code>null</code> is put in the
	 * resulting array. Bindings can only be resolved in the dynamic scope of a
	 * <code>ASTParser.createASTs</code>, and only if
	 * <code>ASTParser.resolveBindings(true)</code> was specified.
	 * </p>
	 * <p>
	 * Caveat: During an <code>acceptAST</code> callback, there are
	 * implementation limitations concerning the look up of binding keys
	 * representing local elements. In some cases, the binding is unavailable,
	 * and <code>null</code> will be returned. This is only an issue during an
	 * <code>acceptAST</code> callback, and only when the binding key represents
	 * a local element (e.g., local variable, local class, method declared in
	 * anonymous class). There is no such limitation outside of
	 * <code>acceptAST</code> callbacks, or for top-level types and their
	 * members even within <code>acceptAST</code> callbacks.
	 * </p>
	 * 
	 * @param bindingKeys
	 *            the binding keys to look up
	 * @return a list of bindings paralleling the <code>bindingKeys</code>
	 *         parameter, with <code>null</code> entries for keys that could not
	 *         be resolved
	 */
	public final IBinding[] createBindings(String[] bindingKeys) {
		int length = bindingKeys.length;
		IBinding[] result = new IBinding[length];
		for (int i = 0; i < length; i++) {
			result[i] = null;
			// if (this.compilationUnitResolver != null) {
			// result[i] =
			// this.compilationUnitResolver.createBinding(bindingKeys[i]);
			// }
		}
		return result;
	}

