	public static IField[] getTraitFields(IType type, Set<String> nameSet) {
		UseTrait useTrait = parse(type);
		List<IField> fieldList = new ArrayList<IField>();
		Set<String> traitNameSet = new HashSet<String>();
		for (String trait : useTrait.getTraits()) {
			IType[] traitTypes = PhpModelAccess.getDefault().findTraits(trait,
					MatchRule.EXACT, 0, 0, createSearchScope(type), null);
			for (IType traitType : traitTypes) {
				String traitName = PHPModelUtils.getFullName(traitType);
				if (!trait.equals(traitName)) {
					continue;
				}
				if (traitNameSet.contains(traitName)) {
					continue;
				} else {
					traitNameSet.add(traitName);
				}
				IField[] fields;
				try {
					fields = PHPModelUtils.getTypeField(traitType, "", false);
					// fields = traitType.getFields();
					for (IField field : fields) {
						List<IField> aliasList = getFieldWrapper(useTrait,
								field, type);
						for (IField alias : aliasList) {
							if (alias == null) {
								continue;
							}
							String elementName = alias.getElementName();
							if (elementName.startsWith("$")) {
								elementName = elementName.substring(1);
							}
							if (!nameSet.contains(elementName)) {
								fieldList.add(alias);
							}
						}
					}
				} catch (ModelException e) {
				}
			}
		}
		return fieldList.toArray(new IField[fieldList.size()]);
	}

