	/**
	 * Search for magic variables using the @property tag
	 * @param types
	 * @param variableName
	 */
	private void resolveMagicClassVariableDeclaration(IType[] types, String variableName) {
		for (IType type : types) {
			IScriptProject scriptProject = type.getScriptProject();
			IDLTKSearchScope scope = SearchEngine.createSearchScope(scriptProject);
			final IModelElement[] elements = PHPMixinModel.getInstance(scriptProject).getClassDoc(type.getElementName(), scope);
			for (IModelElement e : elements) {
				final PHPDocBlock docBlock = ((PHPDocField) e).getDocBlock();
				for (PHPDocTag tag : docBlock.getTags()) {
					final int tagKind = tag.getTagKind();
					if (tagKind == PHPDocTag.PROPERTY || tagKind == PHPDocTag.PROPERTY_READ || tagKind == PHPDocTag.PROPERTY_WRITE) {
						final String typeName = getTypeBinding(variableName, tag);
						if (typeName != null) {
							IEvaluatedType resolved = PHPSimpleTypes.fromString(typeName);
							if (resolved == null) {
								resolved = new PHPClassType(typeName);
							}
							evaluated.add(resolved);
						}
					}
				}
			}
		}
	}

