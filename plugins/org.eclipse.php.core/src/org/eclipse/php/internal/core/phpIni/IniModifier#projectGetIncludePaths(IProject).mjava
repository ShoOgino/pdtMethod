	static IPath[] projectGetIncludePaths(final IProject project) {
		final PHPProjectOptions options = PHPProjectOptions.forProject(project);
		final IIncludePathEntry[] entries = options.readRawIncludePath();
		final List/*<IPath>*/paths = new ArrayList(entries.length);
		paths.add(project.getLocation());
		for (int i = 0; i < entries.length; ++i) {
			final IPath path = entries[i].getPath();
			if (entries[i].getEntryKind() == IIncludePathEntry.IPE_LIBRARY) {
				paths.add(path);
			} else if (entries[i].getEntryKind() == IIncludePathEntry.IPE_PROJECT) {
				final IResource includeResource = entries[i].getResource();
				if (includeResource != null && includeResource instanceof IProject && includeResource.isAccessible())
					paths.add(includeResource.getLocation());
			} else if (entries[i].getEntryKind() == IIncludePathEntry.IPE_VARIABLE) {
				String variableName = path.toString();
				final int index = variableName.indexOf('/');
				String extension = ""; //$NON-NLS-1$
				if (index != -1) {
					if (index + 1 < variableName.length())
						extension = variableName.substring(index + 1);
					variableName = variableName.substring(0, index);
				}
				if (extension != "") { //$NON-NLS-1$
				}
				IPath includePath = PHPProjectOptions.getIncludePathVariable(variableName);
				if (includePath != null) {
					includePath = includePath.append(extension);
					extension = includePath.getFileExtension();
					paths.add(includePath);
				}
			}
		}
		return (IPath[]) paths.toArray(new IPath[paths.size()]);
	}

