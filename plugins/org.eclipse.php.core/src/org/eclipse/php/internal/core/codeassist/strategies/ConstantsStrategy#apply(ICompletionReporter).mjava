	@Override
	public void apply(ICompletionReporter reporter) throws BadLocationException {
		ICompletionContext context = getContext();

		AbstractCompletionContext abstractContext = (AbstractCompletionContext) context;
		CompletionRequestor requestor = abstractContext.getCompletionRequestor();

		String prefix = abstractContext.getPrefix();
		if (StringUtils.isBlank(prefix) || prefix.startsWith("$")) { //$NON-NLS-1$
			return;
		}

		String nsUseGroupPrefix = null;
		if (context instanceof UseStatementContext) {
			nsUseGroupPrefix = ((UseStatementContext) context).getGroupPrefixBeforeOpeningCurly();
		}

		MatchRule matchRule = MatchRule.PREFIX;
		if (requestor.isContextInformationMode()) {
			matchRule = MatchRule.EXACT;
		}

		ISourceModule sourceModule = abstractContext.getSourceModule();

		IType enclosingType = null;
		try {
			IModelElement enclosingElement = sourceModule.getElementAt(abstractContext.getOffset());

			if (enclosingElement != null && enclosingElement instanceof IType) {
				enclosingType = (IType) enclosingElement;
			}

		} catch (ModelException e) {
			PHPCorePlugin.log(e);
		}

		IDLTKSearchScope scope = null;
		IModelElement[] enclosingTypeConstants = null;

		if (enclosingType != null && nsUseGroupPrefix != null
				&& isStartOfStatement(prefix, abstractContext, abstractContext.getOffset())) {
			// See the case of testClassStatement1.pdtt and
			// testClassStatement2.pdtt
			scope = SearchEngine.createSearchScope(enclosingType);
		} else {
			scope = getSearchScope(abstractContext);
		}

		String memberName = abstractContext.getMemberName();
		String namespaceName = abstractContext.getQualifier(true);
		int extraInfo = getExtraInfo();
		if (abstractContext.isAbsoluteName()) {
			extraInfo |= ProposalExtraInfo.FULL_NAME;
			extraInfo |= ProposalExtraInfo.NO_INSERT_USE;
			extraInfo |= ProposalExtraInfo.ABSOLUTE_NAME;
		}

		if (abstractContext.isAbsolute()) {
			extraInfo |= ProposalExtraInfo.FULL_NAME;
			extraInfo |= ProposalExtraInfo.NO_INSERT_USE;
		}

		if (nsUseGroupPrefix != null) {
			extraInfo |= ProposalExtraInfo.NO_INSERT_NAMESPACE;
			extraInfo |= ProposalExtraInfo.NO_INSERT_USE;
		}

		enclosingTypeConstants = PHPModelAccess.getDefault().findFileFields(namespaceName, memberName, matchRule,
				Modifiers.AccConstant, 0, scope, null);

		if (isCaseSensitive()) {
			enclosingTypeConstants = filterByCase(enclosingTypeConstants, prefix);
		}
		// workaround for https://bugs.eclipse.org/bugs/show_bug.cgi?id=310383
		enclosingTypeConstants = filterClassConstants(enclosingTypeConstants);
		// workaround end
		ISourceRange replacementRange = getReplacementRange(abstractContext);
		ISourceRange memberReplacementRange = getReplacementRangeForMember(abstractContext);
		boolean isAbsoluteField = abstractContext.isAbsoluteName() || abstractContext.isAbsolute();
		for (IModelElement constant : enclosingTypeConstants) {
			IField field = (IField) constant;
			if (nsUseGroupPrefix != null) {
				reporter.reportField(field, nsUseGroupPrefix, "", memberReplacementRange, 0, //$NON-NLS-1$
						extraInfo);
			} else {
				reporter.reportField(field, "", isAbsoluteField ? replacementRange : memberReplacementRange, false, 0,
						extraInfo); // $NON-NLS-1$
			}
		}
		addAlias(reporter);
	}

