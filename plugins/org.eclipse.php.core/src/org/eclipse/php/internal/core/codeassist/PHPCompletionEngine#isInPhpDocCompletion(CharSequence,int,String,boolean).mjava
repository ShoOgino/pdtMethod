	private boolean isInPhpDocCompletion(CharSequence statementText, int offset, String tagName, boolean hasSpacesAtEnd) {
		if (hasSpacesAtEnd) {
			return false;
		}
		int startPosition = statementText.length() - tagName.length();
		if (startPosition <= 0 || statementText.charAt(startPosition - 1) != TAG_SIGN) {
			return false; // this is not a tag
		}

		startPosition--;
		// verify that only whitespaces and '*' before the tag
		boolean founeX = false;
		for (; startPosition > 0; startPosition--) {
			if (!Character.isWhitespace(statementText.charAt(startPosition - 1))) {
				if (founeX || statementText.charAt(startPosition - 1) != '*') {
					break;
				}
				founeX = true;
			}
		}
		if (!founeX) {
			return false;
		}

		this.setSourceRange(offset - tagName.length(), offset);

		int relevanceKeyword = RELEVANCE_KEYWORD;
		for (String phpDocTag : phpDocTags) {
			if (CodeAssistUtils.startsWithIgnoreCase(phpDocTag, tagName)) {
				if (!requestor.isContextInformationMode() || phpDocTag.length() == tagName.length()) {
					reportKeyword(phpDocTag, EMPTY, relevanceKeyword--);
				}
			}
		}
		return true;
	}

