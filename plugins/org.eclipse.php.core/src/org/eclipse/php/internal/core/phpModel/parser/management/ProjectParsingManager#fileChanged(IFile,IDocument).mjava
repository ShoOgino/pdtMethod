	public void fileChanged(IFile file, IDocument sDocument) {
		ParserClient parserClient = buildParserClient(file, IParserClientFactory.fileChanged);
		if (parserClient == null) {
			return;
		}
		try {
			final Reader reader = new DocumentReader(sDocument);
			IProject project = null;
			if (file.exists()) {
				project = file.getProject();
			}
			//external file
			else if (ExternalFilesRegistry.getInstance().isEntryExist(file)) {
				project = ExternalFilesRegistry.getInstance().getExternalFilesProject();
			}
			Pattern[] tasksPatterns = TaskPatternsProvider.getInstance().getPatternsForProject(project);
			String fileToParseName = file.getFullPath().toString();
			if (new File(fileToParseName).exists()){
				fileToParseName = file.getFullPath().toOSString();
			}
			
			parserManager.parseNow(reader, fileToParseName, file.getModificationStamp(), parserClient, tasksPatterns, UseAspTagsHandler.useAspTagsAsPhp(project));
		} catch (Exception e) {
			PHPCorePlugin.log(e);
			return;
		}
	}

