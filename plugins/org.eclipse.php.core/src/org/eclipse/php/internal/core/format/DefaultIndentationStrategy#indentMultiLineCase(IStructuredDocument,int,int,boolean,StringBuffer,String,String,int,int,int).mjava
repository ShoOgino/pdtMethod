	private static boolean indentMultiLineCase(IStructuredDocument document,
			int lineNumber, int offset, boolean enterKeyPressed,
			StringBuffer result, String blanks, String commandText,
			int indentationWrappedLineSize, int indentationChar,
			int indentationSize) {
		// LineState lineState = new LineState();
		// StringBuffer sb = new StringBuffer();
		try {
			IRegion region = document.getLineInformationOfOffset(offset);
			String content = document.get(offset,
					region.getOffset() + region.getLength() - offset);
			PHPHeuristicScanner scanner = PHPHeuristicScanner
					.createHeuristicScanner(document, offset, true);
			if (inBracelessBlock(scanner, document, offset)) {
				// lineState.inBracelessBlock = true;
				if (!"{".equals(commandText)) {
					indent(document, result, indentationChar, indentationSize);
				}
				return true;
			} else if (content.trim().startsWith(
					BLANK + PHPHeuristicScanner.LBRACE)) {
				// lineState.inBracelessBlock = true;
				int token = scanner.previousToken(offset - 1,
						PHPHeuristicScanner.UNBOUND);
				if (token == PHPHeuristicScanner.TokenRPAREN) {

					int peer = scanner.findOpeningPeer(scanner.getPosition(),
							PHPHeuristicScanner.LPAREN,
							PHPHeuristicScanner.RPAREN);
					if (peer != PHPHeuristicScanner.NOT_FOUND) {

						String newblanks = FormatterUtils.getLineBlanks(
								document,
								document.getLineInformationOfOffset(peer));
						StringBuffer newBuffer = new StringBuffer(newblanks);
						// IRegion region = document
						// .getLineInformationOfOffset(offset);

						result.setLength(result.length() - blanks.length());
						result.append(newBuffer.toString());
						return true;
					}
				}
			} else if (inMultiLine(scanner, document, lineNumber, offset,
					enterKeyPressed)) {
				// lineState.inBracelessBlock = true;
				int peer = scanner.findOpeningPeer(offset - 1,
						PHPHeuristicScanner.LPAREN, PHPHeuristicScanner.RPAREN);
				if (peer != PHPHeuristicScanner.NOT_FOUND) {
					// lineState.indent.setLength(0)
					// int baseLine = document.getLineOfOffset(peer);
					String newblanks = FormatterUtils.getLineBlanks(document,
							document.getLineInformationOfOffset(peer));
					StringBuffer newBuffer = new StringBuffer(newblanks);
					// IRegion region = document
					// .getLineInformationOfOffset(offset);
					if (enterKeyPressed
							|| !document
									.get(offset,
											region.getOffset()
													+ region.getLength()
													- offset)
									.trim()
									.startsWith(
											BLANK + PHPHeuristicScanner.RPAREN)) {
						indent(document, newBuffer, indentationWrappedLineSize,
								indentationChar, indentationSize);
					}
					// if (newBuffer.length() > blanks.length()) {

					result.setLength(result.length() - blanks.length());
					result.append(newBuffer.toString());
					return true;
					// }
					// if(isset($a)
					// ||abc(isset($b),
					// isset($b))){
					// echo "";//
					// echo "";//
					// }
				}
			}
		} catch (final BadLocationException e) {
		}
		return false;
	}

