		@Override
		public void remove() {
			if (!iterator) {
				throw new UnsupportedOperationException();
			}
			if (lastReturned == null)
			 {
				throw new IllegalStateException("Hashtable Enumerator"); //$NON-NLS-1$
			}
			if (modCount != expectedModCount) {
				throw new ConcurrentModificationException();
			}

			synchronized (IntHashtable.this) {
				Entry[] tab = IntHashtable.this.table;
				int index = (lastReturned.hash & 0x7FFFFFFF) % tab.length;

				for (Entry e = tab[index], prev = null; e != null; prev = e, e = e.next) {
					if (e == lastReturned) {
						modCount++;
						expectedModCount++;
						if (prev == null) {
							tab[index] = e.next;
						} else {
							prev.next = e.next;
						}
						count--;
						lastReturned = null;
						return;
					}
				}
				throw new ConcurrentModificationException();
			}
		}

