	protected void showClassList(String prefix, int offset, States state) {
		this.setSourceRange(offset - prefix.length(), offset);

		switch (state) {
			case NEW:
				IType[] types = CodeAssistUtils.getOnlyClasses(prefix, false);
				for (IType type : types) {
					try {
						if ((type.getFlags() & IPHPModifiers.Internal) == 0) {
							reportType(type, RELEVANCE_FREE_SPACE, BRACKETS_SUFFIX);
						}
					} catch (ModelException e) {
						Logger.logException(e);
					}
				}
				if (CodeAssistUtils.startsWithIgnoreCase(SELF, prefix)) {
					// get the class data for "self". In case of null, the self function will not be added
					IType selfClassData = CodeAssistUtils.getSelfClassData(sourceModule, offset);
					if (selfClassData != null) {
						addSelfFunctionToProposals(selfClassData);
					}
				}
				break;
			case INSTANCEOF:
				IModelElement[] typeElements = CodeAssistUtils.getWorkspaceClasses(prefix, false);
				for (IModelElement typeElement : typeElements) {
					try {
						if ((((IType)typeElement).getFlags() & IPHPModifiers.Internal) == 0) {
							reportType((IType) typeElement, RELEVANCE_FREE_SPACE, EMPTY);
						}
					} catch (ModelException e) {
						Logger.logException(e);
					}
				}
				if (CodeAssistUtils.startsWithIgnoreCase(SELF, prefix)) {
					// get the class data for "self". In case of null, the self function will not be added
					IType selfClassData = CodeAssistUtils.getSelfClassData(sourceModule, offset);
					if (selfClassData != null) {
						addSelfFunctionToProposals(selfClassData);
					}
				}
				break;
			case CATCH:
				typeElements = CodeAssistUtils.getWorkspaceClasses(prefix, false);
				for (IModelElement typeElement : typeElements) {
					try {
						if ((((IType)typeElement).getFlags() & IPHPModifiers.Internal) == 0) {
							reportType((IType) typeElement, RELEVANCE_FREE_SPACE, EMPTY);
						}
					} catch (ModelException e) {
						Logger.logException(e);
					}
				}
				break;
			default:
				break;
		}
	}

