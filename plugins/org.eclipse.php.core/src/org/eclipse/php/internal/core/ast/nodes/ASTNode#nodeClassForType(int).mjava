	/**
	 * Returns the node class for the corresponding node type.
	 * 
	 * @param nodeType AST node type
	 * @return the corresponding <code>ASTNode</code> subclass
	 * @exception IllegalArgumentException if <code>nodeType</code> is 
	 * not a legal AST node type
	 * @see #getNodeType()
	 */
	public static Class<? extends ASTNode> nodeClassForType(int nodeType) {
		switch (nodeType) {
			case ARRAY_ACCESS:
				return ArrayAccess.class;
			case ARRAY_CREATION:
				return ArrayCreation.class;			
			case ARRAY_ELEMENT:
				return ArrayElement.class;			
			case ASSIGNMENT:
				return Assignment.class;
			case AST_ERROR:
				return ASTError.class;			
			case BACK_TICK_EXPRESSION:
				return BackTickExpression.class;			
			case BLOCK:
				return Block.class;			
			case BREAK_STATEMENT:
				return BreakStatement.class;			
			case CAST_EXPRESSION:
				return CastExpression.class;			
			case CATCH_CLAUSE:
				return CatchClause.class;
			case STATIC_CONSTANT_ACCESS:
				return StaticConstantAccess.class;			
			case CLASS_CONSTANT_DECLARATION:
				return ClassConstantDeclaration.class;			
			case CLASS_DECLARATION:
				return ClassDeclaration.class;			
			case CLASS_INSTANCE_CREATION:
				return ClassInstanceCreation.class;			
			case CLASS_NAME:
				return ClassName.class;			
			case CLONE_EXPRESSION:
				return CloneExpression.class;			
			case COMMENT:
				return Comment.class;			
			case CONDITIONAL_EXPRESSION:
				return ConditionalExpression.class;			
			case CONTINUE_STATEMENT:
				return ContinueStatement.class;
			case DECLARE_STATEMENT:
				return DeclareStatement.class;
			case DO_STATEMENT:
				return DoStatement.class;			
			case ECHO_STATEMENT:
				return EchoStatement.class;			
			case EMPTY_STATEMENT:
				return EmptyStatement.class;			
			case EXPRESSION_STATEMENT:
				return ExpressionStatement.class;			
			case FIELD_ACCESS:
				return FieldAccess.class;			
			case FIELD_DECLARATION:
				return FieldsDeclaration.class;			
			case FOR_EACH_STATEMENT:
				return ForEachStatement.class;			
			case FORMAL_PARAMETER:
				return FormalParameter.class;			
			case FOR_STATEMENT:
				return ForStatement.class;			
			case FUNCTION_DECLARATION:
				return FunctionDeclaration.class;			
			case FUNCTION_INVOCATION:
				return FunctionInvocation.class;			
			case FUNCTION_NAME:
				return FunctionName.class;			
			case GLOBAL_STATEMENT:
				return GlobalStatement.class;
			case IDENTIFIER:
				return Identifier.class;
			case IF_STATEMENT:
				return IfStatement.class;
			case IGNORE_ERROR:
				return IgnoreError.class;
			case INCLUDE:
				return Include.class;
			case INFIX_EXPRESSION:
				return InfixExpression.class;
			case IN_LINE_HTML:
				return InLineHtml.class;
			case INSTANCE_OF_EXPRESSION:
				return InstanceOfExpression.class;
			case INTERFACE_DECLARATION:
				return InterfaceDeclaration.class;
			case LIST_VARIABLE:
				return ListVariable.class;
			case METHOD_DECLARATION:
				return MethodDeclaration.class;
			case METHOD_INVOCATION:
				return MethodInvocation.class;
			case POSTFIX_EXPRESSION:
				return PostfixExpression.class;
			case PREFIX_EXPRESSION:
				return PrefixExpression.class;
			case PROGRAM:
				return Program.class;
			case QUOTE:
				return Quote.class;
			case REFERENCE:
				return Reference.class;
			case REFLECTION_VARIABLE:
				return ReflectionVariable.class;
			case RETURN_STATEMENT:
				return ReturnStatement.class;
			case SCALAR:
				return Scalar.class;
			case STATIC_FIELD_ACCESS:
				return StaticFieldAccess.class;
			case STATIC_METHOD_INVOCATION:
				return StaticMethodInvocation.class;
			case STATIC_STATEMENT:
				return StaticStatement.class;
			case SWITCH_CASE:
				return SwitchCase.class;
			case SWITCH_STATEMENT:
				return SwitchStatement.class;
			case THROW_STATEMENT:
				return ThrowStatement.class;
			case TRY_STATEMENT:
				return TryStatement.class;
			case UNARY_OPERATION:
				return UnaryOperation.class;
			case VARIABLE:
				return Variable.class;
			case WHILE_STATEMENT:
				return WhileStatement.class;
			case PARENTHESIS_EXPRESSION:
				return ParenthesisExpression.class;
		}
		throw new IllegalArgumentException();
	}

