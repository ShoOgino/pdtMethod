  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Php4AstParser$do_action(
    int                        CUP$Php4AstParser$act_num,
    java_cup.runtime.lr_parser CUP$Php4AstParser$parser,
    java.util.Stack            CUP$Php4AstParser$stack,
    int                        CUP$Php4AstParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Php4AstParser$result;

      /* select the action based on the action number */
      switch (CUP$Php4AstParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // string_st ::= T_DEFINE 
            {
              String RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 RESULT = value; 
              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(64/*string_st*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // string_st ::= T_STRING 
            {
              String RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 RESULT = value; 
              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(64/*string_st*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // tracked_variable ::= T_VARIABLE 
            {
              VariableReference RESULT = null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	RESULT = new VariableReference(varNameleft, varNameright, varName); 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(75/*tracked_variable*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // isset_variables ::= isset_variables T_COMMA cvar 
            {
              PHPCallArgumentsList RESULT = null;
		int varListleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		PHPCallArgumentsList varList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	varList.addNode(var);
	RESULT = varList;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(74/*isset_variables*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // isset_variables ::= cvar 
            {
              PHPCallArgumentsList RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	PHPCallArgumentsList list = new PHPCallArgumentsList();
	list.addNode(var);
	RESULT = list;	

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(74/*isset_variables*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // internal_functions_in_yacc ::= T_REQUIRE_ONCE expr 
            {
              Expression RESULT = null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	Include result = new Include(includeleft, exprright, expr, Include.IT_REQUIRE_ONCE);
	RESULT = result;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(63/*internal_functions_in_yacc*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // internal_functions_in_yacc ::= T_REQUIRE expr 
            {
              Expression RESULT = null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	Include result = new Include(includeleft, exprright, expr, Include.IT_REQUIRE);
	RESULT = result;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(63/*internal_functions_in_yacc*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // internal_functions_in_yacc ::= T_EVAL T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).value;
		int openParleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int openParright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Object openPar = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	SimpleReference name = new SimpleReference(startleft, startright, "eval");
	PHPCallArgumentsList exprList = new PHPCallArgumentsList(openParright, endleft);
	exprList.addNode(expr);
	PHPCallExpression result = new PHPCallExpression(startleft, endright, null, name, exprList);
	RESULT = result;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(63/*internal_functions_in_yacc*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // internal_functions_in_yacc ::= T_INCLUDE_ONCE expr 
            {
              Expression RESULT = null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	Include result = new Include(includeleft, exprright, expr, Include.IT_INCLUDE_ONCE);
	RESULT = result;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(63/*internal_functions_in_yacc*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // internal_functions_in_yacc ::= T_INCLUDE expr 
            {
              Expression RESULT = null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	Include result = new Include(includeleft, exprright, expr, Include.IT_INCLUDE);
	RESULT = result;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(63/*internal_functions_in_yacc*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // internal_functions_in_yacc ::= T_EMPTY T_OPEN_PARENTHESE cvar T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).value;
		int openParleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int openParright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Object openPar = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	SimpleReference name = new SimpleReference(startleft, startright, "empty");
	PHPCallArgumentsList varList = new PHPCallArgumentsList(openParright, endleft);
	varList.addNode(var);
	PHPCallExpression result = new PHPCallExpression(startleft, endright, null, name, varList);
	RESULT = result;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(63/*internal_functions_in_yacc*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // internal_functions_in_yacc ::= T_ISSET T_OPEN_PARENTHESE isset_variables T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).value;
		int openParleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int openParright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Object openPar = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		PHPCallArgumentsList varList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	varList.setStart(openParright);
	varList.setEnd(endleft);
	SimpleReference name = new SimpleReference(startleft, startright, "isset");
	PHPCallExpression result = new PHPCallExpression(startleft, endright, null, name, varList);
	RESULT = result;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(63/*internal_functions_in_yacc*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // encaps_var_offset ::= tracked_variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		VariableReference var = (VariableReference)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	RESULT = var;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(62/*encaps_var_offset*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // encaps_var_offset ::= T_NUM_STRING 
            {
              Expression RESULT = null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	Scalar scalar = new Scalar(numleft, numright, num, Scalar.TYPE_REAL);
	RESULT = scalar;	

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(62/*encaps_var_offset*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // encaps_var_offset ::= string_st 
            {
              Expression RESULT = null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	Scalar scalar = new Scalar(stringleft, stringright, string, Scalar.TYPE_STRING);
	RESULT = scalar;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(62/*encaps_var_offset*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // encaps_var ::= T_CURLY_OPEN cvar T_CURLY_CLOSE 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		
	RESULT = var;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(61/*encaps_var*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME T_OPEN_RECT expr T_CLOSE_RECT T_CURLY_CLOSE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-5)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-5)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-5)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	VariableReference indexedVar = new ArrayVariableReference(startleft, endright, varName, index, ArrayVariableReference.VARIABLE_ARRAY);
    RESULT = indexedVar;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(61/*encaps_var*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES expr T_CURLY_CLOSE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	ReflectionVariableReference var = new ReflectionVariableReference(startleft, endright, expr);
    RESULT = var;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(61/*encaps_var*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // encaps_var ::= tracked_variable T_OBJECT_OPERATOR string_st 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		VariableReference var = (VariableReference)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	VariableReference property = new VariableReference(stringleft, stringright, string);
    Expression dispatch = parser.createDispatch(var, property);
    RESULT = dispatch;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(61/*encaps_var*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // encaps_var ::= tracked_variable T_OPEN_RECT encaps_var_offset T_CLOSE_RECT 
            {
              Expression RESULT = null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).right;
		VariableReference varName = (VariableReference)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	VariableReference var = new ArrayVariableReference(varNameleft, endright, varName.getName(), index, ArrayVariableReference.VARIABLE_ARRAY);
    RESULT = var;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(61/*encaps_var*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // encaps_var ::= tracked_variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		VariableReference var = (VariableReference)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	RESULT = var;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(61/*encaps_var*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // encaps_list ::= 
            {
              List RESULT = null;
		
	RESULT = new LinkedList();

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(60/*encaps_list*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // encaps_list ::= encaps_list T_OBJECT_OPERATOR 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Object string = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	Scalar scalar = new Scalar(stringleft, stringright, "->", Scalar.TYPE_STRING);
	list.add(scalar);
	RESULT = list;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(60/*encaps_list*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // encaps_list ::= encaps_list T_CURLY_CLOSE 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Object string = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	Scalar scalar = new Scalar(stringleft, stringright, "}", Scalar.TYPE_STRING);
	list.add(scalar);
	RESULT = list;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(60/*encaps_list*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // encaps_list ::= encaps_list T_CURLY_OPEN 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Object string = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	Scalar scalar = new Scalar(stringleft, stringright, "{", Scalar.TYPE_STRING);
	list.add(scalar);
	RESULT = list;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(60/*encaps_list*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // encaps_list ::= encaps_list T_CLOSE_RECT 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Object string = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	Scalar scalar = new Scalar(stringleft, stringright, "]", Scalar.TYPE_STRING);
	list.add(scalar);
	RESULT = list;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(60/*encaps_list*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // encaps_list ::= encaps_list T_OPEN_RECT 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Object string = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	Scalar scalar = new Scalar(stringleft, stringright, "[", Scalar.TYPE_STRING);
	list.add(scalar);
	RESULT = list;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(60/*encaps_list*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // encaps_list ::= encaps_list T_BAD_CHARACTER 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	Scalar scalar = new Scalar(stringleft, stringright, string, Scalar.TYPE_STRING);
	list.add(scalar);
	RESULT = list;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(60/*encaps_list*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // encaps_list ::= encaps_list T_CHARACTER 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	Scalar scalar = new Scalar(stringleft, stringright, string, Scalar.TYPE_STRING);
	list.add(scalar);
	RESULT = list;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(60/*encaps_list*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // encaps_list ::= encaps_list T_ENCAPSED_AND_WHITESPACE 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	Scalar scalar = new Scalar(stringleft, stringright, string, string == null ? Scalar.TYPE_UNKNOWN : Scalar.TYPE_STRING);
	list.add(scalar);
	RESULT = list;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(60/*encaps_list*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // encaps_list ::= encaps_list T_NUM_STRING 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	Scalar scalar = new Scalar(stringleft, stringright, string, Scalar.TYPE_STRING);
	list.add(scalar);
	RESULT = list;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(60/*encaps_list*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // encaps_list ::= encaps_list string_st 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	Scalar scalar = new Scalar(stringleft, stringright, string, Scalar.TYPE_STRING);
	list.add(scalar);
	RESULT = list;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(60/*encaps_list*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // encaps_list ::= encaps_list encaps_var 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	list.add(var);
	RESULT = list;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(60/*encaps_list*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // non_empty_array_pair_list ::= T_REFERENCE w_cvar 
            {
              List RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	List list = new LinkedList();
    ReferenceExpression ref = new ReferenceExpression(startleft, varright, var);
    ArrayElement element = new ArrayElement(startleft, varright, ref);
    list.add(element);
    RESULT = list;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(59/*non_empty_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // non_empty_array_pair_list ::= expr T_DOUBLE_ARROW T_REFERENCE w_cvar 
            {
              List RESULT = null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	List list = new LinkedList();
    ReferenceExpression value = new ReferenceExpression(startleft, varright, var);
    ArrayElement element = new ArrayElement(keyleft, varright, key, value);
    list.add(element);
    RESULT = list;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(59/*non_empty_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA T_REFERENCE w_cvar 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	ReferenceExpression ref = new ReferenceExpression(startleft, varright, var);
    ArrayElement element = new ArrayElement(startleft, varright, ref);
    list.add(element);
    RESULT = list;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(59/*non_empty_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr T_DOUBLE_ARROW T_REFERENCE w_cvar 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-5)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-5)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-5)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	ReferenceExpression value = new ReferenceExpression(startleft, varright, var);
    ArrayElement element = new ArrayElement(keyleft, varright, key, value);
    list.add(element);
    RESULT = list;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(59/*non_empty_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // non_empty_array_pair_list ::= expr 
            {
              List RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	List list = new LinkedList();
	ArrayElement element = new ArrayElement(exprleft, exprright, expr);
	list.add(element);
	RESULT = list;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(59/*non_empty_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // non_empty_array_pair_list ::= expr T_DOUBLE_ARROW expr 
            {
              List RESULT = null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	List list = new LinkedList();
	ArrayElement element = new ArrayElement(keyleft, valueright, key, value);
	list.add(element);
	RESULT = list;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(59/*non_empty_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	ArrayElement element = new ArrayElement(exprleft, exprright, expr);
	list.add(element);
	RESULT = list;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(59/*non_empty_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr T_DOUBLE_ARROW expr 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	ArrayElement element = new ArrayElement(keyleft, valueright, key, value);
	list.add(element);
	RESULT = list;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(59/*non_empty_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // array_pair_list ::= non_empty_array_pair_list possible_comma 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		
	RESULT = list;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(58/*array_pair_list*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // array_pair_list ::= 
            {
              List RESULT = null;
		
	List list = new LinkedList();
	RESULT = list;	

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(58/*array_pair_list*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // assignment_list_element ::= 
            {
              Expression RESULT = null;
		
	RESULT = null;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(57/*assignment_list_element*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // assignment_list_element ::= T_LIST T_OPEN_PARENTHESE assignment_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	ListVariable vars = new ListVariable(startleft, endright, varList);
	RESULT = vars;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(57/*assignment_list_element*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // assignment_list_element ::= cvar 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	RESULT = var;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(57/*assignment_list_element*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // assignment_list ::= assignment_list_element 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	List listElements = new LinkedList();
	if (var != null) {
		listElements.add(var);	
	}
	RESULT = listElements;
	;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(56/*assignment_list*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // assignment_list ::= assignment_list T_COMMA assignment_list_element 
            {
              List RESULT = null;
		int listElementsleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int listElementsright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		List listElements = (List)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int elementleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int elementright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression element = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	if (element != null) {
		listElements.add(element);
	}
	RESULT = listElements;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(56/*assignment_list*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // simple_indirect_reference ::= simple_indirect_reference T_DOLLAR 
            {
              Integer RESULT = null;
		int refleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		Integer ref = (Integer)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		
	RESULT = new Integer(1 + ref.intValue());

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(55/*simple_indirect_reference*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // simple_indirect_reference ::= T_DOLLAR 
            {
              Integer RESULT = null;
		
	RESULT = new Integer(1);

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(55/*simple_indirect_reference*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // variable_name ::= T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	RESULT = new ReflectionVariableReference(startleft, endright, expr);

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(54/*variable_name*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // variable_name ::= string_st 
            {
              Expression RESULT = null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	RESULT = new SimpleReference(varNameleft, varNameright, varName);

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(54/*variable_name*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // object_dim_list ::= variable_name 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 RESULT = var; 
              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(53/*object_dim_list*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // object_dim_list ::= object_dim_list T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	Expression varArray;
    if(var.getKind() == ExpressionConstants.E_IDENTIFIER) { //VariableReference  - $a
        varArray = new ArrayVariableReference(varleft, endright, ((SimpleReference)var).getName(), index, ArrayVariableReference.VARIABLE_HASHTABLE);
    } else {
        varArray = new ReflectionArrayVariableReference(varleft, endright, var, index, ReflectionArrayVariableReference.VARIABLE_HASHTABLE);
    }
    RESULT = varArray;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(53/*object_dim_list*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // object_dim_list ::= object_dim_list T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	Expression varArray;
    if(var.getKind() == ExpressionConstants.E_IDENTIFIER) { //VariableReference  - $a
        varArray = new ArrayVariableReference(varleft, endright, ((SimpleReference)var).getName(), index, ArrayVariableReference.VARIABLE_ARRAY);
    } else {
        varArray = new ReflectionArrayVariableReference(varleft, endright, var, index, ReflectionArrayVariableReference.VARIABLE_ARRAY);
    }
    RESULT = varArray;


              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(53/*object_dim_list*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // object_property ::= cvar_without_objects 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
    RESULT = var; 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(52/*object_property*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // object_property ::= object_dim_list 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
    RESULT = var; 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(52/*object_property*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // ref_list ::= ref_list T_OBJECT_OPERATOR object_property 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int propertyleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int propertyright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression property = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	list.add(property); 
	RESULT = list;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(76/*ref_list*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // ref_list ::= object_property 
            {
              List RESULT = null;
		int propertyleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int propertyright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression property = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	List list = new LinkedList();
	list.add(property); 
	RESULT = list;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(76/*ref_list*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // dim_offset ::= expr 
            {
              Expression RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	RESULT = expr; 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(51/*dim_offset*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // dim_offset ::= 
            {
              Expression RESULT = null;
		 
	RESULT = null;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(51/*dim_offset*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // compound_variable ::= T_DOLLAR T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	ReflectionVariableReference var = new ReflectionVariableReference(startleft, endright, expr);
    RESULT = var;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(50/*compound_variable*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // compound_variable ::= tracked_variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		VariableReference var = (VariableReference)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 RESULT = var; 
              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(50/*compound_variable*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // reference_variable ::= compound_variable 
            {
              Expression RESULT = null;
		int comp_varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int comp_varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression comp_var = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 RESULT = comp_var; 
              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(49/*reference_variable*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // reference_variable ::= reference_variable T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Expression RESULT = null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).right;
		Expression varName = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	Expression var;
    if(varName.getKind() == ExpressionConstants.E_IDENTIFIER) { //VariableReference  - $a
        var = new ArrayVariableReference(varNameleft, endright, ((SimpleReference)varName).getName(), index, ArrayVariableReference.VARIABLE_HASHTABLE);
    } else {
        var = new ReflectionArrayVariableReference(varNameleft, endright, varName, index, ReflectionArrayVariableReference.VARIABLE_HASHTABLE);
    }
    RESULT = var;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(49/*reference_variable*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // reference_variable ::= reference_variable T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              Expression RESULT = null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).right;
		Expression varName = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	Expression var;
    if(varName.getKind() == ExpressionConstants.E_IDENTIFIER) { //VariableReference  - $a
        var = new ArrayVariableReference(varNameleft, endright, ((SimpleReference)varName).getName(), index, ArrayVariableReference.VARIABLE_ARRAY);
    } else {
        var = new ReflectionArrayVariableReference(varNameleft, endright, varName, index, ReflectionArrayVariableReference.VARIABLE_ARRAY);
    }
    RESULT = var;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(49/*reference_variable*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // cvar_without_objects ::= simple_indirect_reference reference_variable 
            {
              Expression RESULT = null;
		int ref_countleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int ref_countright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		Integer ref_count = (Integer)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	// the ref_count counts the number of reflection (DOLLAR sign) so now we should
    // accomulate the dolars into reflection variables
    Expression finalVar = var;
    for (int i=0; i<ref_count.intValue(); i++) {
        finalVar = new ReflectionVariableReference(ref_countright - i - 1, varright, finalVar);
    }
    RESULT = finalVar;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(73/*cvar_without_objects*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // cvar_without_objects ::= reference_variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	RESULT = var; 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(73/*cvar_without_objects*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // cvar ::= cvar_without_objects T_OBJECT_OPERATOR ref_list 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int propertyListleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int propertyListright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		List propertyList = (List)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	// now create the dispatch(es) nodes 
	Expression dispatcher = var;
	Iterator listIt = propertyList.iterator();
	while (listIt.hasNext()) {
		Expression property = (Expression)listIt.next();
		dispatcher = parser.createDispatch(dispatcher, property);
	}

	RESULT = dispatcher;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(68/*cvar*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // cvar ::= cvar_without_objects 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	RESULT = var; 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(68/*cvar*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // rw_cvar ::= cvar 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 RESULT = var; 
              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(72/*rw_cvar*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // w_cvar ::= cvar 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 RESULT = var; 
              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(71/*w_cvar*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // r_cvar ::= cvar 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 RESULT = var; 
              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(70/*r_cvar*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // expr ::= expr_without_variable 
            {
              Expression RESULT = null;
		int ewvleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int ewvright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression ewv = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 RESULT = ewv; 
              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(48/*expr*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // expr ::= r_cvar 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 RESULT = var; 
              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(48/*expr*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // non_empty_static_array_pair_list ::= static_scalar 
            {
              List RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	List list = new LinkedList();
	ArrayElement element = new ArrayElement(valueleft, valueright, value);
	list.add(element);
	RESULT = list;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(47/*non_empty_static_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // non_empty_static_array_pair_list ::= static_scalar T_DOUBLE_ARROW static_scalar 
            {
              List RESULT = null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	List list = new LinkedList();
	ArrayElement element = new ArrayElement(keyleft, valueright, key, value);
	list.add(element);
	RESULT = list;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(47/*non_empty_static_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // non_empty_static_array_pair_list ::= non_empty_static_array_pair_list T_COMMA static_scalar 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	ArrayElement element = new ArrayElement(valueleft, valueright, value);
	list.add(element);
	RESULT = list;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(47/*non_empty_static_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // non_empty_static_array_pair_list ::= non_empty_static_array_pair_list T_COMMA static_scalar T_DOUBLE_ARROW static_scalar 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	ArrayElement element = new ArrayElement(keyleft, valueright, key, value);
	list.add(element);
	RESULT = list;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(47/*non_empty_static_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // possible_comma ::= T_COMMA 
            {
              Object RESULT = null;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(46/*possible_comma*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // possible_comma ::= 
            {
              Object RESULT = null;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(46/*possible_comma*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // static_array_pair_list ::= non_empty_static_array_pair_list possible_comma 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		
	RESULT = list;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(45/*static_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // static_array_pair_list ::= 
            {
              List RESULT = null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(45/*static_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // scalar ::= T_START_HEREDOC encaps_list T_END_HEREDOC 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	Quote hereDoc = new Quote(startleft, endright, list, Quote.QT_HEREDOC);
	RESULT = hereDoc;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(44/*scalar*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // scalar ::= T_SINGLE_QUATE encaps_list T_SINGLE_QUATE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	Quote quote = new Quote(startleft, endright, list, Quote.QT_SINGLE);
	RESULT = quote;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(44/*scalar*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // scalar ::= T_QUATE encaps_list T_QUATE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	Quote quote = new Quote(startleft, endright, list, Quote.QT_QUOTE);
	RESULT = quote;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(44/*scalar*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // scalar ::= common_scalar 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Scalar scalar = (Scalar)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	RESULT = scalar;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(44/*scalar*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // scalar ::= T_STRING_VARNAME 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	// TODO: check if this is a scalar
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_STRING);
	RESULT = s;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(44/*scalar*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // scalar ::= string_st 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_STRING);
	RESULT = s;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(44/*scalar*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // static_scalar ::= T_ARRAY T_OPEN_PARENTHESE static_array_pair_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	ArrayCreation array = new ArrayCreation(startleft, endright, list);
	RESULT = array;	

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(43/*static_scalar*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // static_scalar ::= T_MINUS static_scalar 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	UnaryOperation op = new UnaryOperation(startleft, exprright, expr, UnaryOperation.OP_MINUS);
	RESULT = op;	

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(43/*static_scalar*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // static_scalar ::= T_PLUS static_scalar 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	UnaryOperation op = new UnaryOperation(startleft, exprright, expr, UnaryOperation.OP_PLUS);
	RESULT = op;	

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(43/*static_scalar*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // static_scalar ::= string_st 
            {
              Expression RESULT = null;
		int strleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	Scalar s = new Scalar(strleft, strright, str, Scalar.TYPE_STRING);
	RESULT = s;	

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(43/*static_scalar*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // static_scalar ::= common_scalar 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Scalar scalar = (Scalar)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	RESULT = scalar;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(43/*static_scalar*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // common_scalar ::= T_FUNC_C 
            {
              Scalar RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__FUNCTION__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(42/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // common_scalar ::= T_CLASS_C 
            {
              Scalar RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__CLASS__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(42/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // common_scalar ::= T_FILE 
            {
              Scalar RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__FILE__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(42/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // common_scalar ::= T_LINE 
            {
              Scalar RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__LINE__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(42/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // common_scalar ::= T_CONSTANT_ENCAPSED_STRING 
            {
              Scalar RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_STRING);
	RESULT = s;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(42/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // common_scalar ::= T_DNUMBER 
            {
              Scalar RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_REAL);
	RESULT = s;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(42/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // common_scalar ::= T_LNUMBER 
            {
              Scalar RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_INT);
	RESULT = s;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(42/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // ctor_arguments ::= T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              PHPCallArgumentsList RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	paramsList.setStart(startright);
	paramsList.setEnd(endleft);
	RESULT = paramsList;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(41/*ctor_arguments*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // ctor_arguments ::= 
            {
              PHPCallArgumentsList RESULT = null;
		
	RESULT = new PHPCallArgumentsList();

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(41/*ctor_arguments*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // exit_expr ::= T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		
	RESULT = expr;	

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(40/*exit_expr*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // exit_expr ::= T_OPEN_PARENTHESE T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		
	RESULT = null;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(40/*exit_expr*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // exit_expr ::= 
            {
              Expression RESULT = null;
		
	RESULT = null;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(40/*exit_expr*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // static_or_variable_string ::= r_cvar 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	RESULT = var; 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(65/*static_or_variable_string*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // static_or_variable_string ::= T_STRING 
            {
              Expression RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	SimpleReference cname = new SimpleReference(classNameleft, classNameright, className);
	RESULT = cname;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(65/*static_or_variable_string*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // function_call ::= string_st T_PAAMAYIM_NEKUDOTAYIM static_or_variable_string T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-5)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-5)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).right;
		Expression functionName = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		PHPCallArgumentsList parameters = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	parameters.setStart(startright);
	parameters.setEnd(endleft);
	
	TypeReference classReference = new TypeReference(classNameleft, classNameright, className);
	Expression result = null;
	
	if (functionName.getKind() == ASTNodeKinds.FIELD_ACCESS) {
		FieldAccess fieldAccess = (FieldAccess) functionName;
		Expression dispatcher = parser.constructStaticMember(classReference, fieldAccess.getDispatcher());
		Expression fieldName = fieldAccess.getField();
		
		Expression functionInvocation;
		if (fieldName.getClass().equals(SimpleReference.class)) {
			functionInvocation = new PHPCallExpression(fieldName.sourceStart(), endright, null, (SimpleReference)fieldName, parameters);
		} else {
			functionInvocation = new ReflectionCallExpression(fieldName.sourceStart(), endright, null, fieldName, parameters);
		}
		result = parser.createDispatch(dispatcher, functionInvocation);
	}
	else if (functionName.getKind() == ASTNodeKinds.REFLECTION_CALL_EXPRESSION) {
		ReflectionCallExpression methodInvocation = (ReflectionCallExpression) functionName;
		ReflectionCallExpression functionInvocation = new ReflectionCallExpression(methodInvocation.getName().sourceStart(), endright, null, methodInvocation.getName(), parameters); 
		Expression dispatcher = parser.constructStaticMember(classReference, methodInvocation.getReceiver());
		result = parser.createDispatch(dispatcher, functionInvocation);
	}
	else if (functionName.getKind() == ASTNodeKinds.METHOD_INVOCATION) {
		PHPCallExpression methodInvocation = (PHPCallExpression) functionName;
		PHPCallExpression functionInvocation = new PHPCallExpression(methodInvocation.getCallName().sourceStart(), endright, null, methodInvocation.getName(), parameters); 
		Expression dispatcher = parser.constructStaticMember(classReference, (Expression)methodInvocation.getReceiver());
		result = parser.createDispatch(dispatcher, functionInvocation);
	}	
	else {
		if (functionName.getClass().equals(SimpleReference.class)) {
			result = new StaticMethodInvocation(classNameleft, endright, classReference, (SimpleReference)functionName, parameters); 
		} else {
			result = new ReflectionStaticMethodInvocation(classNameleft, endright, classReference, functionName, parameters);
		}  
	}
	
	RESULT = result;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(39/*function_call*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // function_call ::= cvar T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).right;
		Expression functionName = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		PHPCallArgumentsList parameters = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	parameters.setStart(startright);
	parameters.setEnd(endleft);
	Expression result;
	if (functionName.getKind() == ASTNodeKinds.FIELD_ACCESS) {
		FieldAccess fieldAccess = (FieldAccess) functionName;
		Expression fieldName = fieldAccess.getField();
		Expression functionInvocation;
		if (fieldName.getClass().equals(SimpleReference.class)) {
			functionInvocation = new PHPCallExpression(fieldName.sourceStart(), endright, null, (SimpleReference)fieldName, parameters);
		} else {
			functionInvocation = new ReflectionCallExpression(fieldName.sourceStart(), endright, null, fieldName, parameters);
		}
		result = parser.createDispatch(fieldAccess.getDispatcher(), functionInvocation);
	} else {
		result = new ReflectionCallExpression(functionNameleft, endright, null, functionName, parameters);
	} 
	RESULT = result;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(39/*function_call*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // function_call ::= string_st T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		PHPCallArgumentsList parameters = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	parameters.setStart(startright);
	parameters.setEnd(endleft);
	SimpleReference name = new SimpleReference(functionNameleft, functionNameright, functionName);
	RESULT = new PHPCallExpression(functionNameleft, endright, null, name, parameters); 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(39/*function_call*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // expr_without_variable ::= T_PRINT expr 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	PHPCallArgumentsList expList = new PHPCallArgumentsList();
	if (expr != null) {
		expList.addNode(expr);
		expList.setStart(expr.sourceStart());
		expList.setEnd(expr.sourceEnd());
	} else {
		expList.setStart(startright);
		expList.setEnd(startright);
	}
	SimpleReference name = new SimpleReference(startleft, startright, "print");
	PHPCallExpression result = new PHPCallExpression(startleft, exprright, null, name, expList);
	RESULT = result;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(38/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // expr_without_variable ::= T_BACKQUATE encaps_list T_BACKQUATE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	BackTickExpression backTickExpression = new BackTickExpression(startleft, endright, list);
	RESULT = backTickExpression;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(38/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // expr_without_variable ::= T_ARRAY T_OPEN_PARENTHESE array_pair_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	Expression expr = new ArrayCreation(startleft, endright, list);
	RESULT = expr;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(38/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // expr_without_variable ::= scalar 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	RESULT = scalar; 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(38/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // expr_without_variable ::= T_AT expr 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	IgnoreError ignoreError = new IgnoreError(startleft, exprright, expr);
	RESULT = ignoreError;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(38/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // expr_without_variable ::= T_EXIT exit_expr 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	PHPCallArgumentsList list = new PHPCallArgumentsList();
    if (expr != null) {
        list.addNode(expr);
		list.setStart(expr.sourceStart());
		list.setEnd(expr.sourceEnd());
	} else {
		list.setStart(startright);
		list.setEnd(startright);
    }
    SimpleReference functionName = new SimpleReference(startleft, startright, start);
    PHPCallExpression result = new PHPCallExpression(startleft, exprright, null, functionName, list);
    RESULT = result;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(38/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // expr_without_variable ::= T_UNSET_CAST expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.TYPE_UNSET); 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(38/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // expr_without_variable ::= T_BOOL_CAST expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.TYPE_BOOL); 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(38/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // expr_without_variable ::= T_OBJECT_CAST expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.TYPE_OBJECT); 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(38/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // expr_without_variable ::= T_ARRAY_CAST expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.TYPE_ARRAY); 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(38/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // expr_without_variable ::= T_STRING_CAST expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.TYPE_STRING); 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(38/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // expr_without_variable ::= T_DOUBLE_CAST expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.TYPE_REAL); 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(38/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // expr_without_variable ::= T_INT_CAST expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.TYPE_INT); 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(38/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // expr_without_variable ::= internal_functions_in_yacc 
            {
              Expression RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	RESULT = expr;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(38/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // expr_without_variable ::= function_call 
            {
              Expression RESULT = null;
		int callleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int callright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression call = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
        RESULT = call;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(38/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // expr_without_variable ::= expr T_QUESTION_MARK expr T_NEKUDOTAIM expr 
            {
              Expression RESULT = null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).value;
		int ifTrueleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int ifTrueright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Expression ifTrue = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int ifFalseleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int ifFalseright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression ifFalse = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	RESULT = new ConditionalExpression(conditionleft, ifFalseright, condition , ifTrue, ifFalse); 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(38/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // expr_without_variable ::= T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	RESULT = expr;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(38/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // expr_without_variable ::= expr T_IS_GREATER_OR_EQUAL expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_IS_GREATER_OR_EQUAL, expr2); 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(38/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // expr_without_variable ::= expr T_LGREATER expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_LGREATER, expr2); 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(38/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // expr_without_variable ::= expr T_IS_SMALLER_OR_EQUAL expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_IS_SMALLER_OR_EQUAL, expr2); 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(38/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // expr_without_variable ::= expr T_RGREATER expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_RGREATER, expr2); 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(38/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // expr_without_variable ::= expr T_IS_NOT_EQUAL expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_IS_NOT_EQUAL, expr2); 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(38/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // expr_without_variable ::= expr T_IS_EQUAL expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_IS_EQUAL, expr2); 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(38/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // expr_without_variable ::= expr T_IS_NOT_IDENTICAL expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_IS_NOT_IDENTICAL, expr2); 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(38/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // expr_without_variable ::= expr T_IS_IDENTICAL expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_IS_IDENTICAL, expr2); 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(38/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // expr_without_variable ::= T_TILDA expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	RESULT = new UnaryOperation(tokenleft, exprright, expr , UnaryOperation.OP_TILDA); 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(38/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // expr_without_variable ::= T_NOT expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	RESULT = new UnaryOperation(tokenleft, exprright, expr , UnaryOperation.OP_NOT); 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(38/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // expr_without_variable ::= T_MINUS expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	RESULT = new UnaryOperation(tokenleft, exprright, expr , UnaryOperation.OP_MINUS); 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(38/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // expr_without_variable ::= T_PLUS expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	RESULT = new UnaryOperation(tokenleft, exprright, expr , UnaryOperation.OP_PLUS); 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(38/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // expr_without_variable ::= expr T_SR expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_SR, expr2); 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(38/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // expr_without_variable ::= expr T_SL expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_SL, expr2); 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(38/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // expr_without_variable ::= expr T_PRECENT expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_MOD, expr2); 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(38/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // expr_without_variable ::= expr T_DIV expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_DIV, expr2); 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(38/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // expr_without_variable ::= expr T_TIMES expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_MUL, expr2); 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(38/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // expr_without_variable ::= expr T_MINUS expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_MINUS, expr2); 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(38/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // expr_without_variable ::= expr T_PLUS expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_PLUS, expr2); 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(38/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // expr_without_variable ::= expr T_NEKUDA expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_CONCAT, expr2); 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(38/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // expr_without_variable ::= expr T_KOVA expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_XOR, expr2); 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(38/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // expr_without_variable ::= expr T_REFERENCE expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_AND, expr2); 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(38/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // expr_without_variable ::= expr T_OR expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_OR, expr2); 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(38/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // expr_without_variable ::= expr T_LOGICAL_XOR expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_STRING_XOR, expr2);

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(38/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // expr_without_variable ::= expr T_LOGICAL_AND expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_STRING_AND, expr2); 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(38/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // expr_without_variable ::= expr T_LOGICAL_OR expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_STRING_OR, expr2); 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(38/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // expr_without_variable ::= expr T_BOOLEAN_AND expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_BOOL_AND, expr2); 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(38/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // expr_without_variable ::= expr T_BOOLEAN_OR expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_BOOL_OR, expr2); 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(38/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // expr_without_variable ::= T_DEC rw_cvar 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	RESULT = new PrefixExpression(tokenleft, varright, var , PrefixExpression.OP_DEC); 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(38/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // expr_without_variable ::= rw_cvar T_DEC 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	RESULT = new PostfixExpression(varleft, tokenright, var , PostfixExpression.OP_DEC); 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(38/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // expr_without_variable ::= T_INC rw_cvar 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	RESULT = new PrefixExpression(tokenleft, varright, var , PrefixExpression.OP_INC); 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(38/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // expr_without_variable ::= rw_cvar T_INC 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	RESULT = new PostfixExpression(varleft, tokenright, var , PostfixExpression.OP_INC); 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(38/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // expr_without_variable ::= cvar T_SR_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_SR_EQUAL, expr); 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(38/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // expr_without_variable ::= cvar T_SL_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_SL_EQUAL, expr); 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(38/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // expr_without_variable ::= cvar T_XOR_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_XOR_EQUAL, expr); 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(38/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // expr_without_variable ::= cvar T_OR_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_OR_EQUAL, expr); 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(38/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // expr_without_variable ::= cvar T_AND_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_AND_EQUAL, expr); 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(38/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // expr_without_variable ::= cvar T_MOD_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_MOD_EQUAL, expr); 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(38/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // expr_without_variable ::= cvar T_CONCAT_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_CONCAT_EQUAL, expr); 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(38/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // expr_without_variable ::= cvar T_DIV_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 	
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_DIV_EQUAL, expr); 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(38/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // expr_without_variable ::= cvar T_MUL_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_MUL_EQUAL, expr); 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(38/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // expr_without_variable ::= cvar T_MINUS_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_MINUS_EQUAL, expr); 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(38/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // expr_without_variable ::= cvar T_PLUS_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_PLUS_EQUAL, expr); 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(38/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // expr_without_variable ::= T_NEW static_or_variable_string ctor_arguments 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int ctorleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int ctorright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		PHPCallArgumentsList ctor = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	if (ctor.sourceStart() == 0) {
		ctor.setStart(classNameright);
		ctor.setEnd(classNameright);
	}
	ClassInstanceCreation classInstanceCreation;
	if (className.getClass().equals(SimpleReference.class)) {
		TypeReference classReference = new TypeReference(classNameleft, classNameright, ((SimpleReference)className).getName());
		classInstanceCreation = new ClassInstanceCreation(startleft, ctorright, classReference, ctor);
	} else {
		classInstanceCreation = new ClassInstanceCreation(startleft, ctorright, className, ctor);
	}
	RESULT = classInstanceCreation;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(38/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // expr_without_variable ::= cvar T_EQUAL T_REFERENCE T_NEW static_or_variable_string ctor_arguments 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-5)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-5)).value;
		int varCommentleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).left;
		int varCommentright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).right;
		VarComment varComment = (VarComment)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).value;
		int reftokenleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).left;
		int reftokenright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).right;
		Object reftoken = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int ctorleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int ctorright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		PHPCallArgumentsList ctor = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	if (ctor.sourceStart() == 0) {
		ctor.setStart(classNameright);
		ctor.setEnd(classNameright);
	}
	ClassInstanceCreation classInstanceCreation;
	if (className.getClass().equals(SimpleReference.class)) {
		TypeReference classReference = new TypeReference(classNameleft, classNameright, ((SimpleReference)className).getName());
		classInstanceCreation = new ClassInstanceCreation(startleft, ctorright, classReference, ctor);
	} else {
		classInstanceCreation = new ClassInstanceCreation(startleft, ctorright, className, ctor);
	}
    Assignment assignment = new Assignment(varleft, ctorright, var, Assignment.OP_REF_EQUAL, classInstanceCreation, varComment);
    RESULT = assignment;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(38/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // expr_without_variable ::= cvar T_EQUAL T_REFERENCE function_call 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).value;
		int varCommentleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int varCommentright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		VarComment varComment = (VarComment)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int reftokenleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int reftokenright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		Object reftoken = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int refvarleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int refvarright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression refvar = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, refvarright, var, Assignment.OP_REF_EQUAL, refvar, varComment);

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(38/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // expr_without_variable ::= cvar T_EQUAL T_REFERENCE w_cvar 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).value;
		int varCommentleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int varCommentright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		VarComment varComment = (VarComment)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int reftokenleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int reftokenright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		Object reftoken = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int refvarleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int refvarright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression refvar = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, refvarright, var, Assignment.OP_REF_EQUAL, refvar, varComment);

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(38/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // expr_without_variable ::= cvar T_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int varCommentleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int varCommentright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		VarComment varComment = (VarComment)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_EQUAL, expr, varComment); 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(38/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // expr_without_variable ::= T_LIST T_OPEN_PARENTHESE assignment_list T_CLOSE_PARENTHESE T_EQUAL expr 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-5)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-5)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-5)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).value;
		int closeleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int closeright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Object close = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int varCommentleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int varCommentright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		VarComment varComment = (VarComment)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	ListVariable vars = new ListVariable(startleft, closeright, varList);
	Assignment list = new Assignment(startleft, exprright, vars, Assignment.OP_EQUAL, expr, varComment);
	RESULT = list; 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(38/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // non_empty_for_expr ::= expr 
            {
              List RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	List exprList = new LinkedList();
	exprList.add(expr);
	RESULT = exprList;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(37/*non_empty_for_expr*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // non_empty_for_expr ::= non_empty_for_expr T_COMMA expr 
            {
              List RESULT = null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	exprList.add(expr);
	RESULT = exprList;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(37/*non_empty_for_expr*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // for_expr ::= non_empty_for_expr 
            {
              List RESULT = null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	RESULT = exprList;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(36/*for_expr*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // for_expr ::= 
            {
              List RESULT = null;
		
	RESULT = new LinkedList();

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(36/*for_expr*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // echo_expr_list ::= expr 
            {
              List RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	List exprList = new LinkedList();
	exprList.add(expr);
	RESULT = exprList;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(35/*echo_expr_list*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // echo_expr_list ::= echo_expr_list T_COMMA expr 
            {
              List RESULT = null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	exprList.add(expr);
	RESULT = exprList;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(35/*echo_expr_list*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // class_variable_declaration ::= T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
    List list = new LinkedList();
    VariableReference varId = new VariableReference(varleft, varright, var);
    list.add(new ASTNode[] {varId, expr});
    RESULT = list;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(66/*class_variable_declaration*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // class_variable_declaration ::= T_VARIABLE 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
    List list = new LinkedList();
    VariableReference varId = new VariableReference(varleft, varright, var);
    list.add(new ASTNode[] {varId, null});
    RESULT = list;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(66/*class_variable_declaration*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // class_variable_declaration ::= class_variable_declaration T_COMMA T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
    VariableReference varId = new VariableReference(varleft, varright, var);
    list.add(new ASTNode[] {varId, expr});
    RESULT = list;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(66/*class_variable_declaration*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // class_variable_declaration ::= class_variable_declaration T_COMMA T_VARIABLE 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
    VariableReference varId = new VariableReference(varleft, varright, var);
    list.add(new ASTNode[] {varId, null});
    RESULT = list;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(66/*class_variable_declaration*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // is_reference ::= T_REFERENCE 
            {
              Boolean RESULT = null;
		
	RESULT = Boolean.TRUE;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(34/*is_reference*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // is_reference ::= 
            {
              Boolean RESULT = null;
		
	RESULT = Boolean.FALSE;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(34/*is_reference*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // method_body ::= 
            {
              Statement RESULT = null;
		
	parser.reportError();
	RESULT = new ASTError(0,0);

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(79/*method_body*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // method_body ::= T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	PHPMethodDeclaration methodDeclaration = (PHPMethodDeclaration)parser.declarations.peek();
	methodDeclaration.getBody().setStart(startleft);
	methodDeclaration.getBody().setEnd(endright);
	methodDeclaration.getBody().getStatements().clear();
	methodDeclaration.getBody().acceptStatements(statementList);
	methodDeclaration.setEnd(endright);
	RESULT = null;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(79/*method_body*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // class_statement ::= error 
            {
              Object RESULT = null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	parser.reportError();
	ASTError error = new ASTError(theErrorleft, theErrorright);
	parser.addDeclarationStatement(error);

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(33/*class_statement*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // class_statement ::= T_VAR_COMMENT 
            {
              Object RESULT = null;
		int varCommentleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int varCommentright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		String varComment = (String)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		


              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(33/*class_statement*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // class_statement ::= T_FUNCTION is_reference string_st NT$6 T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE NT$7 method_body 
            {
              Object RESULT = null;
              // propagate RESULT from NT$6
              if ( ((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-5)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-5)).value;
              // propagate RESULT from NT$7
              if ( ((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-8)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-8)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-8)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-7)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-7)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-7)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-6)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-6)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-6)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).value;
		int closeParentheseleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int closeParentheseright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Object closeParenthese = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Statement body = (Statement)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	PHPMethodDeclaration methodDeclaration = (PHPMethodDeclaration)parser.declarations.pop();
	if(body instanceof ASTError) {
		parser.reportError(new ASTError(methodDeclaration.sourceEnd() - 1, methodDeclaration.sourceEnd()), "syntax error, unfinished method declaration");
	}
	TypeDeclaration type = (TypeDeclaration)parser.declarations.peek();
	methodDeclaration.setDeclaringTypeName(type.getName());

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(33/*class_statement*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // NT$7 ::= 
            {
              Object RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-6)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-6)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-6)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-5)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-5)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-5)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int closeParentheseleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int closeParentheseright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Object closeParenthese = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;

	PHPMethodDeclaration functionDeclaration = (PHPMethodDeclaration)parser.declarations.peek();
	functionDeclaration.acceptArguments(paramList);
	functionDeclaration.setEnd(closeParentheseright);

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(90/*NT$7*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // NT$6 ::= 
            {
              Object RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;

	int modifierValue = Modifiers.AccDefault;
	PHPDocBlock docBlock = start;
	PHPMethodDeclaration methodDeclaration = new PHPMethodDeclaration(startleft, functionNameright, functionNameleft, functionNameright, functionName, modifierValue, null, new Block(functionNameright, functionNameright, null), isReference.booleanValue(), docBlock);
	parser.addDeclarationStatement(methodDeclaration);
	parser.declarations.push(methodDeclaration);

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(89/*NT$6*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // class_statement ::= T_VAR class_variable_declaration T_SEMICOLON 
            {
              Object RESULT = null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		PHPDocBlock modifier = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int decListleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int decListright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		List decList = (List)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		
    Iterator i = decList.iterator();
    while (i.hasNext()) {
        ASTNode[] decl = (ASTNode[]) i.next();
        VariableReference variable = (VariableReference)decl[0];
        Expression initializer = (Expression)decl[1];
        int start = variable.sourceStart();
        int end = (initializer == null ? variable.sourceEnd() : initializer.sourceEnd());
		parser.addDeclarationStatement(new PHPFieldDeclaration(variable, initializer, start, end, Modifiers.AccDefault, modifierleft, modifier));		
    }

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(33/*class_statement*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // class_statement_list ::= 
            {
              Object RESULT = null;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(32/*class_statement_list*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // class_statement_list ::= class_statement_list class_statement 
            {
              Object RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int classStatementleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int classStatementright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Object classStatement = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	if(!(parser.declarations.peek() instanceof TypeDeclaration)) {
		parser.declarations.pop();
	}

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(32/*class_statement_list*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // static_var_list ::= T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int varCommentleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int varCommentright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		VarComment varComment = (VarComment)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	VariableReference v = new VariableReference(varleft, varright, var);
    Assignment assignment = new Assignment(varleft, exprright, v, Assignment.OP_EQUAL, expr, varComment);
    List list = new LinkedList();
    list.add(assignment);
    RESULT = list;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(31/*static_var_list*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // static_var_list ::= T_VARIABLE 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	VariableReference v = new VariableReference(varleft, varright, var);
    List list = new LinkedList();
    list.add(v);
    RESULT = list;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(31/*static_var_list*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // static_var_list ::= static_var_list T_COMMA T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int varCommentleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int varCommentright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		VarComment varComment = (VarComment)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	VariableReference v = new VariableReference(varleft, varright, var);
    Assignment assignment = new Assignment(varleft, exprright, v, Assignment.OP_EQUAL, expr, varComment);
    list.add(assignment);
    RESULT = list;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(31/*static_var_list*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // static_var_list ::= static_var_list T_COMMA T_VARIABLE 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	VariableReference v = new VariableReference(varleft, varright, var);
    list.add(v);
    RESULT = list;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(31/*static_var_list*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // global_var ::= T_DOLLAR T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		Expression varName = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	ReflectionVariableReference var = new ReflectionVariableReference(startleft, endright, varName);
    RESULT = var;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(30/*global_var*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // global_var ::= T_DOLLAR r_cvar 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
    ReflectionVariableReference ref = new ReflectionVariableReference(startleft, varright, var);
    RESULT = ref;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(30/*global_var*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // global_var ::= T_VARIABLE 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
    VariableReference variable = new VariableReference(varleft, varright, var);
    RESULT = variable;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(30/*global_var*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // global_var_list ::= global_var 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(var);
	RESULT = list;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(29/*global_var_list*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // global_var_list ::= global_var_list T_COMMA global_var 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	list.add(var);
	RESULT = list;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(29/*global_var_list*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA T_REFERENCE w_cvar 
            {
              PHPCallArgumentsList RESULT = null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
    Expression var_ref = new ReferenceExpression(startleft, varright, var);
    paramsList.addNode(var_ref);
    RESULT = paramsList;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(28/*non_empty_function_call_parameter_list*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA cvar 
            {
              PHPCallArgumentsList RESULT = null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	paramsList.addNode(var);	
	RESULT = paramsList;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(28/*non_empty_function_call_parameter_list*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA expr_without_variable 
            {
              PHPCallArgumentsList RESULT = null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	paramsList.addNode(var);	
	RESULT = paramsList;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(28/*non_empty_function_call_parameter_list*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // non_empty_function_call_parameter_list ::= T_REFERENCE w_cvar 
            {
              PHPCallArgumentsList RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
    PHPCallArgumentsList paramsList = new PHPCallArgumentsList();
    Expression var_ref = new ReferenceExpression(startleft, varright, var);
    paramsList.addNode(var_ref);
    RESULT = paramsList;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(28/*non_empty_function_call_parameter_list*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // non_empty_function_call_parameter_list ::= cvar 
            {
              PHPCallArgumentsList RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
    PHPCallArgumentsList paramsList = new PHPCallArgumentsList();
    paramsList.addNode(var);
    RESULT = paramsList;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(28/*non_empty_function_call_parameter_list*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // non_empty_function_call_parameter_list ::= expr_without_variable 
            {
              PHPCallArgumentsList RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
    PHPCallArgumentsList paramsList = new PHPCallArgumentsList();
    paramsList.addNode(var);
	RESULT = paramsList;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(28/*non_empty_function_call_parameter_list*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // function_call_parameter_list ::= 
            {
              PHPCallArgumentsList RESULT = null;
		
    PHPCallArgumentsList list = new PHPCallArgumentsList();
    RESULT = list;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(27/*function_call_parameter_list*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // function_call_parameter_list ::= non_empty_function_call_parameter_list 
            {
              PHPCallArgumentsList RESULT = null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	RESULT = paramsList;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(27/*function_call_parameter_list*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // parameter ::= error 
            {
              FormalParameter RESULT = null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	parser.reportError(new ASTError(theErrorleft, theErrorright));
	RESULT = null;	

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(26/*parameter*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // parameter ::= T_CONST T_VARIABLE 
            {
              FormalParameter RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	VariableReference v = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	FormalParameter parameter = new FormalParameter(startleft, varright, null, v, true);
	RESULT = parameter;	

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(26/*parameter*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // parameter ::= T_VARIABLE T_EQUAL static_scalar 
            {
              FormalParameter RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
    VariableReference v = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
    FormalParameter parameter = new FormalParameter(varleft, scalarright, null, v, scalar);
    RESULT = parameter;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(26/*parameter*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // parameter ::= T_REFERENCE T_VARIABLE 
            {
              FormalParameter RESULT = null;
		int refleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	VariableReference v = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
    FormalParameter parameter = new FormalParameterByReference(varleft, varright, null, v);
	RESULT = parameter;	

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(26/*parameter*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // parameter ::= T_VARIABLE 
            {
              FormalParameter RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	VariableReference v = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
    FormalParameter parameter = new FormalParameter(varleft, varright, null, v);
	RESULT = parameter;	

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(26/*parameter*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // non_empty_parameter_list ::= non_empty_parameter_list T_COMMA 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int commaleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int commaright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Object comma = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	parser.reportError(new ASTError(commaleft, commaright), "syntax error, unexpected ','");
	RESULT = list;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(25/*non_empty_parameter_list*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // non_empty_parameter_list ::= non_empty_parameter_list T_COMMA parameter 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int parameterleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int parameterright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		FormalParameter parameter = (FormalParameter)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	if(parameter != null) {
		list.add(parameter);
	}
	RESULT = list;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(25/*non_empty_parameter_list*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // non_empty_parameter_list ::= parameter 
            {
              List RESULT = null;
		int parameterleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int parameterright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		FormalParameter parameter = (FormalParameter)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	List list = new LinkedList();
	if(parameter != null) {
		list.add(parameter);
	}
	RESULT = list;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(25/*non_empty_parameter_list*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // parameter_list ::= 
            {
              List RESULT = null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(24/*parameter_list*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // parameter_list ::= non_empty_parameter_list 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	RESULT = list;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(24/*parameter_list*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // new_else_single ::= T_ELSE T_NEKUDOTAIM inner_statement_list 
            {
              Statement RESULT = null;
		int colonleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	Block block = new Block(colonleft, statementListright, statementList);
	RESULT = block;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(23/*new_else_single*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // new_else_single ::= 
            {
              Statement RESULT = null;
		
	RESULT = null;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(23/*new_else_single*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // else_single ::= T_ELSE statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	RESULT = statement;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(22/*else_single*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // else_single ::= 
            {
              Statement RESULT = null;
		
	RESULT = null;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(22/*else_single*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // new_elseif_list ::= new_elseif_list T_ELSEIF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_NEKUDOTAIM inner_statement_list 
            {
              List[] RESULT = null;
		int elseifListleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-6)).left;
		int elseifListright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-6)).right;
		List[] elseifList = (List[])((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-6)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-5)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-5)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-5)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
			
	Block block = new Block(colonleft, statementListright, statementList);
	((LinkedList)elseifList[0]).addFirst(condition);
	((LinkedList)elseifList[1]).addFirst(block);
	((LinkedList)elseifList[2]).addFirst(new Integer(tokenleft));

	RESULT = elseifList;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(21/*new_elseif_list*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // new_elseif_list ::= 
            {
              List[] RESULT = null;
		
	List listConditions = new LinkedList();
	List listStatements = new LinkedList();
	List listTokens = new LinkedList();
	
	List[] returnList = new List[] { listConditions, listStatements, listTokens };
	
	RESULT = returnList;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(21/*new_elseif_list*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // elseif_list ::= elseif_list T_ELSEIF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE statement 
            {
              List[] RESULT = null;
		int elseifListleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-5)).left;
		int elseifListright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-5)).right;
		List[] elseifList = (List[])((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-5)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int iftrueleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int iftrueright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Statement iftrue = (Statement)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
			
	((LinkedList)elseifList[0]).addFirst(condition);
	((LinkedList)elseifList[1]).addFirst(iftrue);
	((LinkedList)elseifList[2]).addFirst(new Integer(tokenleft));

	RESULT = elseifList;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(20/*elseif_list*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // elseif_list ::= 
            {
              List[] RESULT = null;
		
	List listConditions = new LinkedList();
	List listStatements = new LinkedList();
	List listTokens = new LinkedList();
	
	List[] returnList = new List[] { listConditions, listStatements, listTokens };
	
	RESULT = returnList;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(20/*elseif_list*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // while_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDWHILE T_SEMICOLON 
            {
              Statement RESULT = null;
		int colonleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		
	Block block = new Block(colonleft, statementListright, statementList);
	RESULT = block;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(19/*while_statement*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // while_statement ::= statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	RESULT = statement;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(19/*while_statement*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // case_separator ::= T_SEMICOLON 
            {
              Object RESULT = null;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(18/*case_separator*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // case_separator ::= T_NEKUDOTAIM 
            {
              Object RESULT = null;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(18/*case_separator*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // case_list ::= case_list T_DEFAULT case_separator inner_statement_list 
            {
              List RESULT = null;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		List statements = (List)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	SwitchCase switchCase = new SwitchCase(tokenleft, statementsright, null, statements, true);
	if (caseList == null) {
		caseList = new LinkedList(); // of SwitchCase
	}
	caseList.add(switchCase);
	RESULT = caseList;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(17/*case_list*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // case_list ::= case_list T_CASE expr case_separator inner_statement_list 
            {
              List RESULT = null;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		List statements = (List)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	SwitchCase switchCase = new SwitchCase(tokenleft, statementsright, expr, statements, false);
	if (caseList == null) {
		caseList = new LinkedList(); // of SwitchCase
	}
	caseList.add(switchCase);
	RESULT = caseList;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(17/*case_list*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // case_list ::= 
            {
              List RESULT = null;
		
	RESULT = new LinkedList(); // of SwitchCase

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(17/*case_list*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // switch_case_list ::= T_NEKUDOTAIM T_SEMICOLON case_list T_ENDSWITCH T_SEMICOLON 
            {
              Block RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	Block block = new Block(startleft, endright, caseList);	
	RESULT = block; 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(16/*switch_case_list*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // switch_case_list ::= T_NEKUDOTAIM case_list T_ENDSWITCH T_SEMICOLON 
            {
              Block RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	Block block = new Block(startleft, endright, caseList);	
	RESULT = block; 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(16/*switch_case_list*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // switch_case_list ::= T_CURLY_OPEN T_SEMICOLON case_list T_CURLY_CLOSE 
            {
              Block RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	Block block = new Block(startleft, endright, caseList);	
	RESULT = block; 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(16/*switch_case_list*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // switch_case_list ::= T_CURLY_OPEN case_list T_CURLY_CLOSE 
            {
              Block RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	Block block = new Block(startleft, endright, caseList);	
	RESULT = block; 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(16/*switch_case_list*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // declare_list ::= declare_list T_COMMA string_st T_EQUAL static_scalar 
            {
              List[] RESULT = null;
		int listsleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).left;
		int listsright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).right;
		List[] lists = (List[])((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	lists[0].add(key);
	lists[1].add(value);
	RESULT = lists;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(15/*declare_list*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // declare_list ::= string_st T_EQUAL static_scalar 
            {
              List[] RESULT = null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	List listKeys = new LinkedList();
	List listValues = new LinkedList();
	
	listKeys.add(key);
	listValues.add(value);

	List[] returnList = new List[] { listKeys, listValues };
	RESULT = returnList;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(15/*declare_list*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // declare_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDDECLARE T_SEMICOLON 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		
	Block block = new Block(startleft, statementListright, statementList);
	RESULT = block;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(14/*declare_statement*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // declare_statement ::= statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	RESULT = statement;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(14/*declare_statement*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // foreach_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDFOREACH T_SEMICOLON 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		
	Block block = new Block(startleft, statementListright, statementList);
	RESULT = block;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(13/*foreach_statement*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // foreach_statement ::= statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	RESULT = statement;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(13/*foreach_statement*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // for_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDFOR T_SEMICOLON 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		
	Block block = new Block(startleft, statementListright, statementList);
	RESULT = block;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(12/*for_statement*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // for_statement ::= statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	RESULT = statement;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(12/*for_statement*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // foreach_optional_arg ::= T_DOUBLE_ARROW w_cvar 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	RESULT = var;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(11/*foreach_optional_arg*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // foreach_optional_arg ::= 
            {
              Expression RESULT = null;
		 
	RESULT = null;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(11/*foreach_optional_arg*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // function_body ::= error 
            {
              PHPMethodDeclaration RESULT = null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	RESULT = (PHPMethodDeclaration)parser.declarations.pop();

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(78/*function_body*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // function_body ::= T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              PHPMethodDeclaration RESULT = null;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	PHPMethodDeclaration functionDeclaration = (PHPMethodDeclaration)parser.declarations.pop();
	Block block = functionDeclaration.getBody();
	block.setStart(blockStartleft);
	block.setEnd(blockEndright);
	block.getStatements().clear();
	block.acceptStatements(statementList);
	functionDeclaration.setEnd(blockEndright);
	RESULT = functionDeclaration;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(78/*function_body*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // class_closure ::= unticked_class_declaration_statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	RESULT = statement;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(77/*class_closure*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // class_closure ::= unticked_statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	RESULT = statement;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(77/*class_closure*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // class_closure ::= T_CURLY_CLOSE 
            {
              Statement RESULT = null;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(77/*class_closure*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // errorOrNot ::= 
            {
              Object RESULT = null;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(80/*errorOrNot*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // errorOrNot ::= error 
            {
              Object RESULT = null;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(80/*errorOrNot*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // extends_from ::= T_EXTENDS error 
            {
              TypeReference RESULT = null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	parser.reportError(new ASTError(theErrorleft, theErrorright));

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(82/*extends_from*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // extends_from ::= T_EXTENDS T_STRING 
            {
              TypeReference RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	TypeReference name = new TypeReference(classNameleft, classNameright, className);
	RESULT = name;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(82/*extends_from*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // unticked_class_declaration_statement ::= T_CLASS T_STRING NT$4 extends_from errorOrNot NT$5 T_CURLY_OPEN class_statement_list class_closure 
            {
              Statement RESULT = null;
              // propagate RESULT from NT$4
              if ( ((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-6)).value != null )
                RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-6)).value;
              // propagate RESULT from NT$5
              if ( ((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).value != null )
                RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-8)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-8)).right;
		PHPDocBlock modifier = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-8)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-7)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-7)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-7)).value;
		int superClassleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-5)).left;
		int superClassright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-5)).right;
		TypeReference superClass = (TypeReference)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-5)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		Object statementList = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Statement blockEnd = (Statement)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	if(blockEnd != null) {
		parser.reportError(new ASTError(statementListright - 1, statementListright), "syntax error, unfinished class declaration");
		parser.pendingStatement = blockEnd;
	}

	ClassDeclaration classDeclaration = (ClassDeclaration)parser.declarations.pop();
	classDeclaration.setEnd(blockEndright);
	classDeclaration.getBody().setStart(blockStartleft);
	classDeclaration.getBody().setEnd(blockEndright);
	RESULT = classDeclaration;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(81/*unticked_class_declaration_statement*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$5 ::= 
            {
              Object RESULT = null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).right;
		PHPDocBlock modifier = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).value;
		int superClassleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int superClassright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		TypeReference superClass = (TypeReference)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;

	ClassDeclaration classDeclaration = (ClassDeclaration)parser.declarations.peek();
	if (superClass != null) {
		classDeclaration.setSuperClass(superClass);
	}
	classDeclaration.setEnd(superClassright);
	classDeclaration.getBody().setStart(superClassright);
	classDeclaration.getBody().setEnd(superClassright);

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(88/*NT$5*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$4 ::= 
            {
              Object RESULT = null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		PHPDocBlock modifier = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;

	ClassDeclaration classDeclaration = new ClassDeclaration(modifierleft ,classNameright, classNameleft, classNameright, Modifiers.AccDefault, className, null, null, new Block(classNameright,classNameright,null), modifier);
	parser.addDeclarationStatement(classDeclaration);
	parser.declarations.push(classDeclaration);

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(87/*NT$4*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // unticked_class_declaration_statement ::= T_CLASS T_STRING NT$3 errorOrNot T_CURLY_OPEN class_statement_list class_closure 
            {
              Statement RESULT = null;
              // propagate RESULT from NT$3
              if ( ((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).value != null )
                RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-6)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-6)).right;
		PHPDocBlock modifier = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-6)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-5)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-5)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		Object statementList = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Statement blockEnd = (Statement)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	if(blockEnd != null) {
		parser.reportError(new ASTError(statementListright - 1, statementListright), "syntax error, unfinished class declaration");
		parser.pendingStatement = blockEnd;
	}

	ClassDeclaration classDeclaration = (ClassDeclaration)parser.declarations.pop();
	classDeclaration.setEnd(blockEndright);
	classDeclaration.getBody().setStart(blockStartleft);
	classDeclaration.getBody().setEnd(blockEndright);
	RESULT = classDeclaration;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(81/*unticked_class_declaration_statement*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$3 ::= 
            {
              Object RESULT = null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		PHPDocBlock modifier = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;

	ClassDeclaration classDeclaration = new ClassDeclaration(modifierleft ,classNameright, classNameleft, classNameright, Modifiers.AccDefault, className, null, null, new Block(classNameright,classNameright,null), modifier);
	parser.addDeclarationStatement(classDeclaration);
	parser.declarations.push(classDeclaration);

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(86/*NT$3*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // unticked_declaration_statement ::= unticked_class_declaration_statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
RESULT = statement;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(69/*unticked_declaration_statement*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // unticked_declaration_statement ::= T_FUNCTION is_reference string_st NT$1 T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE NT$2 function_body 
            {
              Statement RESULT = null;
              // propagate RESULT from NT$1
              if ( ((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-5)).value != null )
                RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-5)).value;
              // propagate RESULT from NT$2
              if ( ((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value != null )
                RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-8)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-8)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-8)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-7)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-7)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-7)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-6)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-6)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-6)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).value;
		int closeParentheseleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int closeParentheseright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Object closeParenthese = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		PHPMethodDeclaration body = (PHPMethodDeclaration)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
RESULT = body;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(69/*unticked_declaration_statement*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$2 ::= 
            {
              Object RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-6)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-6)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-6)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-5)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-5)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-5)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int closeParentheseleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int closeParentheseright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Object closeParenthese = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;

	PHPMethodDeclaration functionDeclaration = (PHPMethodDeclaration)parser.declarations.peek();
	functionDeclaration.acceptArguments(paramList);
	functionDeclaration.setEnd(closeParentheseright);

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(85/*NT$2*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$1 ::= 
            {
              Object RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;

	PHPMethodDeclaration functionDeclaration = new PHPMethodDeclaration(startleft, functionNameright, functionNameleft, functionNameright, functionName, Modifiers.AccDefault, null, new Block(functionNameright,functionNameright,null), isReference.booleanValue(), start);
	parser.addDeclarationStatement(functionDeclaration);
	parser.declarations.push(functionDeclaration);

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(84/*NT$1*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // declaration_statement ::= unticked_declaration_statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	RESULT = statement;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(67/*declaration_statement*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // use_filename ::= T_OPEN_PARENTHESE T_CONSTANT_ENCAPSED_STRING T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	Scalar s = new Scalar(startleft, endright, scalar, Scalar.TYPE_STRING);
	RESULT = s;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(10/*use_filename*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // use_filename ::= T_CONSTANT_ENCAPSED_STRING 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_STRING);
	RESULT = s;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(10/*use_filename*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // unset_variable ::= cvar 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	RESULT = var;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(9/*unset_variable*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // unset_variables ::= unset_variables T_COMMA unset_variable 
            {
              PHPCallArgumentsList RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		PHPCallArgumentsList list = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	list.addNode(var);
	RESULT = list;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(8/*unset_variables*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // unset_variables ::= unset_variable 
            {
              PHPCallArgumentsList RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	PHPCallArgumentsList list = new PHPCallArgumentsList();
    list.addNode(var);
	RESULT = list;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(8/*unset_variables*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // unticked_statement ::= T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	RESULT = new EmptyStatement(tokenleft, tokenright); 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // unticked_statement ::= T_DECLARE T_OPEN_PARENTHESE declare_list T_CLOSE_PARENTHESE declare_statement 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).value;
		int listsleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int listsright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		List[] lists = (List[])((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	DeclareStatement declare = new DeclareStatement(startleft, statementright, lists[0], lists[1], statement);
	RESULT = declare;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // unticked_statement ::= T_FOREACH T_OPEN_PARENTHESE expr_without_variable T_AS w_cvar foreach_optional_arg T_CLOSE_PARENTHESE foreach_statement 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-7)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-7)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-7)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-5)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-5)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Expression arg = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	ForEachStatement forEachStatement = null;
	if (arg == null) {
		forEachStatement = new ForEachStatement(tokenleft, statementright, expr, var, statement);
	} else {
		forEachStatement = new ForEachStatement(tokenleft, statementright, expr, var, arg, statement);
	}
	RESULT = forEachStatement;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // unticked_statement ::= T_FOREACH T_OPEN_PARENTHESE w_cvar T_AS w_cvar foreach_optional_arg T_CLOSE_PARENTHESE foreach_statement 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-7)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-7)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-7)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-5)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-5)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Expression arg = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	ForEachStatement forEachStatement = null;
	if (arg == null) {
		forEachStatement = new ForEachStatement(tokenleft, statementright, expr, var, statement);
	} else {
		forEachStatement = new ForEachStatement(tokenleft, statementright, expr, var, arg, statement);
	}
	RESULT = forEachStatement;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // unticked_statement ::= T_UNSET T_OPEN_PARENTHESE unset_variables T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).value;
		int openParleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).left;
		int openParright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).right;
		Object openPar = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		PHPCallArgumentsList list = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int closeParleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int closeParright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		Object closePar = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	list.setStart(openParright);
	list.setEnd(closeParleft);
	SimpleReference functionName = new SimpleReference(startleft, startright, "unset");
    PHPCallExpression functionInvocation = new PHPCallExpression(startleft, closeParright, null, functionName, list);
    ExpressionStatement expressionStatement = new ExpressionStatement(startleft, endright, functionInvocation);
    RESULT = expressionStatement;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // unticked_statement ::= T_USE use_filename T_SEMICOLON 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	PHPCallArgumentsList list = new PHPCallArgumentsList(expr.sourceStart(), expr.sourceEnd());
    list.addNode(expr);
    SimpleReference functionName = new SimpleReference(startleft, startright, "use");
    PHPCallExpression functionInvocation = new PHPCallExpression(startleft, exprright, null, functionName, list);
    ExpressionStatement expressionStatement = new ExpressionStatement(startleft, endright, functionInvocation);
    RESULT = expressionStatement;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // unticked_statement ::= expr T_SEMICOLON 
            {
              Statement RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	ExpressionStatement eval = new ExpressionStatement(exprleft, endright, expr);
	RESULT = eval;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // unticked_statement ::= T_INLINE_HTML 
            {
              Statement RESULT = null;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // unticked_statement ::= T_ECHO echo_expr_list T_SEMICOLON 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	RESULT = new EchoStatement(startleft, endright, exprList); 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // unticked_statement ::= T_STATIC static_var_list T_SEMICOLON 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	StaticStatement s = new StaticStatement(startleft, endright, list);
	RESULT = s;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // unticked_statement ::= T_GLOBAL global_var_list T_SEMICOLON 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	GlobalStatement  global = new GlobalStatement(startleft, endright, list);
	RESULT = global;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // unticked_statement ::= T_RETURN cvar T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	RESULT = new ReturnStatement(tokenleft, endright, expr); 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // unticked_statement ::= T_RETURN expr_without_variable T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	RESULT = new ReturnStatement(tokenleft, endright, expr); 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // unticked_statement ::= T_RETURN T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	RESULT = new ReturnStatement(tokenleft, endright); 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // unticked_statement ::= T_CONTINUE expr T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	RESULT = new ContinueStatement(tokenleft, endright, expr); 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // unticked_statement ::= T_CONTINUE T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	RESULT = new ContinueStatement(tokenleft, endright); 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // unticked_statement ::= T_BREAK expr T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	RESULT = new BreakStatement(tokenleft, endright, expr); 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // unticked_statement ::= T_BREAK T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	RESULT = new BreakStatement(tokenleft, endright); 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // unticked_statement ::= T_SWITCH T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE switch_case_list 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int caseBlockleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int caseBlockright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Block caseBlock = (Block)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	SwitchStatement switchStatement = new SwitchStatement(tokenleft, caseBlockright, expr, caseBlock);
	RESULT = switchStatement;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // unticked_statement ::= T_FOR T_OPEN_PARENTHESE for_expr T_SEMICOLON for_expr T_SEMICOLON for_expr T_CLOSE_PARENTHESE for_statement 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-8)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-8)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-8)).value;
		int initializationsleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-6)).left;
		int initializationsright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-6)).right;
		List initializations = (List)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-6)).value;
		int conditionsleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).left;
		int conditionsright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).right;
		List conditions = (List)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).value;
		int increasementsleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int increasementsright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		List increasements = (List)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
				
	ForStatement forStatement = new ForStatement(tokenleft, statementright, initializations, conditions, increasements, statement);			
	RESULT = forStatement;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // unticked_statement ::= T_DO statement T_WHILE T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-6)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-6)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-6)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-5)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-5)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-5)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	DoStatement doStatement = new DoStatement(tokenleft, endright, expr, statement);			
	RESULT = doStatement;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // unticked_statement ::= T_WHILE T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE while_statement 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	WhileStatement whileStatement = new WhileStatement(tokenleft, statementright, expr, statement);			
	RESULT = whileStatement;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // unticked_statement ::= T_IF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_NEKUDOTAIM inner_statement_list new_elseif_list new_else_single T_ENDIF T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-9)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-9)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-9)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-7)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-7)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-7)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-5)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-5)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-5)).value;
		int ifTrueStatementListleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).left;
		int ifTrueStatementListright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).right;
		List ifTrueStatementList = (List)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).value;
		int elseifleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).left;
		int elseifright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).right;
		List[] elseif = (List[])((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).value;
		int iffalseleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int iffalseright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Statement iffalse = (Statement)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	Expression innerCondition = null;	
	Statement trueStatement = null;
	Statement falseStatement = iffalse;
		
	for (int i=0 ; i < elseif[0].size() ; i++) {
		innerCondition = (Expression)elseif[0].get(i);	
	 	trueStatement = (Statement)elseif[1].get(i);
	 	int start = ((Integer)elseif[2].get(i)).intValue();
		falseStatement = new IfStatement(start, iffalseright, innerCondition, trueStatement, falseStatement);
	}
	Block block = new Block(colonleft, ifTrueStatementListright, ifTrueStatementList);
	IfStatement ifStatement = new IfStatement(tokenleft, iffalseright, condition, block, falseStatement);		
	
	RESULT = ifStatement;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-9)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // unticked_statement ::= T_IF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE statement elseif_list else_single 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-6)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-6)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-6)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-4)).value;
		int iftrueleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).left;
		int iftrueright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).right;
		Statement iftrue = (Statement)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int elseifleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int elseifright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		List[] elseif = (List[])((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int iffalseleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int iffalseright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Statement iffalse = (Statement)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	Expression innerCondition = null;	
	Statement trueStatement = null;
	Statement falseStatement = iffalse;
		
	for (int i=0 ; i < elseif[0].size() ; i++) {
		innerCondition = (Expression)elseif[0].get(i);	
	 	trueStatement = (Statement)elseif[1].get(i);
	 	int start = ((Integer)elseif[2].get(i)).intValue();
		falseStatement = new IfStatement(start, iffalseright, innerCondition, trueStatement, falseStatement);
	}
	IfStatement ifStatement = new IfStatement(tokenleft, iffalseright, condition, iftrue, falseStatement);		
	
	RESULT = ifStatement;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // unticked_statement ::= T_CURLY_OPEN NT$0 inner_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT = null;
              // propagate RESULT from NT$0
              if ( ((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value != null )
                RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	Block block = (Block)parser.declarations.pop();
	block.setEnd(endright);
	block.getStatements().clear();
	block.acceptStatements(statementList);
	
	RESULT = block;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$0 ::= 
            {
              Object RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;

	Block block = new Block(tokenleft, tokenleft, new LinkedList());
	parser.declarations.push(block);
	

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(83/*NT$0*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= error 
            {
              Statement RESULT = null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	parser.reportError();
	ASTError error = new ASTError(theErrorleft, theErrorright);
	RESULT = error;	

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(4/*statement*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= T_VAR_COMMENT 
            {
              Statement RESULT = null;
		int varCommentleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int varCommentright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		String varComment = (String)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	// TODO: var comment should be added as ast node

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(4/*statement*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= unticked_statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	RESULT = statement; 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(4/*statement*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // inner_statement ::= declaration_statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	RESULT = statement;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(6/*inner_statement*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // inner_statement ::= statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	RESULT = statement; 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(6/*inner_statement*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // inner_statement_list ::= 
            {
              List RESULT = null;
		 
	RESULT = new LinkedList(); 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(5/*inner_statement_list*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // inner_statement_list ::= inner_statement_list inner_statement 
            {
              List RESULT = null;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	// Ignore null statements
	if(statement != null) {
		statementList.add(statement);
		if(statement.getKind() == ASTNodeKinds.AST_ERROR){
			if(!parser.declarations.isEmpty()) {
				Statement node = parser.declarations.peek();
				if(node.sourceStart() == statement.sourceStart() && node.sourceEnd() == statement.sourceEnd()) {
					statementList.add(parser.declarations.pop());
				}
			}		
		}
	}		
	RESULT = statementList;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(5/*inner_statement_list*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // top_statement ::= declaration_statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	RESULT = statement;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(3/*top_statement*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // top_statement ::= statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		 
	RESULT = statement; 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(3/*top_statement*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // top_statement_list ::= 
            {
              Object RESULT = null;

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(2/*top_statement_list*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // top_statement_list ::= top_statement_list top_statement 
            {
              Object RESULT = null;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		Object statementList = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	if(statement != null) {
		parser.addStatement(statement);
		if(parser.pendingStatement != null){
			parser.addStatement(parser.pendingStatement);
			parser.pendingStatement = null;
		}
	}
	while(!parser.declarations.isEmpty() ) {
		parser.getModuleDeclaration().addStatement(parser.declarations.pop());
	}

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(2/*top_statement_list*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= thestart EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).right;
		ModuleDeclaration start_val = (ModuleDeclaration)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).value;
		RESULT = start_val;
              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$Php4AstParser$parser.done_parsing();
          return CUP$Php4AstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // thestart ::= top_statement_list 
            {
              ModuleDeclaration RESULT = null;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right;
		Object statementList = (Object)((java_cup.runtime.Symbol) CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).value;
		
	PHPModuleDeclaration program = parser.getModuleDeclaration();
	program.setStart(statementListleft);
	program.setEnd(statementListright);
	RESULT = program; 

              CUP$Php4AstParser$result = new java_cup.runtime.Symbol(1/*thestart*/, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Php4AstParser$stack.elementAt(CUP$Php4AstParser$top-0)).right, RESULT);
            }
          return CUP$Php4AstParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }

