	private void checkVarComment(VariableReference s) throws Exception {
		// See also VariableReferenceEvaluator.init().
		// XXX: we only analyze VarComments that are located before some
		// VariableReferences but we don't check that those VarComments are
		// *directly* located before the VariableReferences.
		int minPos = currentNamespace != null ? currentNamespace.sourceStart() : 0;
		int maxPos = s.sourceStart();
		Iterator<VarComment> itr = varComments.iterator();
		while (itr.hasNext()) {
			VarComment varComment = itr.next();
			if (varComment.sourceStart() < minPos) {
				itr.remove();
				continue;
			}
			if (varComment.sourceEnd() > maxPos) {
				break;
			}
			visit(varComment);
			itr.remove();
		}
		if (currentDeclaration instanceof ASTNode) {
			// currentDeclaration.sourceStart() is the minimal position to look
			// for PHPDocBlocks, to avoid getting out of current declaration
			// block
			minPos = Math.max(minPos, ((ASTNode) currentDeclaration).sourceStart());
		}
		Iterator<PHPDocBlock> itr2 = docBlocks.iterator();
		while (itr2.hasNext()) {
			PHPDocBlock docBlock = itr2.next();
			if (docBlock.sourceStart() < minPos) {
				itr2.remove();
				continue;
			}
			if (docBlock.sourceEnd() > maxPos) {
				break;
			}
			visitVarTags(docBlock);
			itr2.remove();
		}
	}

