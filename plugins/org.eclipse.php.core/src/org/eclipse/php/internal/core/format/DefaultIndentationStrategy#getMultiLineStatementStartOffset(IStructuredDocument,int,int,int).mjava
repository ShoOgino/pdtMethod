	private static int getMultiLineStatementStartOffset(
			IStructuredDocument document, int lineStart, int currLineIndex,
			int checkedOffset) throws BadLocationException {

		// TODO moveLineStartToNonBlankChar or moveLineEndToNonBlankChar
		lineStart = moveLineStartToNonBlankChar(document, lineStart,
				currLineIndex);
		// char lineStartChar = document.getChar(lineStart - 1);
		// if (lineStartChar == PHPHeuristicScanner.RBRACE
		// // || lineStartChar == PHPHeuristicScanner.RBRACKET
		// || lineStartChar == PHPHeuristicScanner.RPAREN) {
		//
		// PHPHeuristicScanner scanner = PHPHeuristicScanner
		// .createHeuristicScanner(document, lineStart, true);
		// if (lineStartChar == PHPHeuristicScanner.RBRACE) {
		// int peer = scanner.findOpeningPeer(checkedOffset,
		// PHPHeuristicScanner.UNBOUND,
		// PHPHeuristicScanner.LBRACE, PHPHeuristicScanner.RBRACE);
		// if (peer != PHPHeuristicScanner.NOT_FOUND) {
		// lineStart = peer;
		// }
		// } else if (lineStartChar == PHPHeuristicScanner.RBRACKET) {
		// int peer = scanner.findOpeningPeer(checkedOffset,
		// PHPHeuristicScanner.UNBOUND,
		// PHPHeuristicScanner.LBRACKET,
		// PHPHeuristicScanner.RBRACKET);
		// if (peer != PHPHeuristicScanner.NOT_FOUND) {
		// lineStart = peer;
		// }
		// } else {
		// int peer = scanner.findOpeningPeer(checkedOffset,
		// PHPHeuristicScanner.UNBOUND,
		// PHPHeuristicScanner.LPAREN, PHPHeuristicScanner.RPAREN);
		// if (peer != PHPHeuristicScanner.NOT_FOUND) {
		// lineStart = peer;
		// }
		// }
		// }

		TextSequence textSequence = PHPTextSequenceUtilities
				.getStatement(lineStart,
						document.getRegionAtCharacterOffset(lineStart), true);
		if (textSequence != null
				&& isRegionTypeAllowedMultiline(FormatterUtils.getRegionType(
						document, textSequence.getOriginalOffset(0)))
				&& document.getLineOfOffset(textSequence.getOriginalOffset(0)) < currLineIndex) {
			return document.getLineOfOffset(textSequence.getOriginalOffset(0));
		}

		return -1;
	}

