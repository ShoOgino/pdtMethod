	/**
	 * Returns the partition at <code>position</code>. Classify the partition as
	 * PHPPartitionTypes.PHP_SINGLE_LINE_COMMENT,
	 * PHPPartitionTypes.PHP_MULTI_LINE_COMMENT, PHPPartitionTypes.PHP_DOC,
	 * PHPPartitionTypes.PHP_QUOTED_STRING or PHPPartitionTypes.PHP_DEFAULT.
	 * Matching open/close symbol will only be looked for in the same partition
	 * type, so that for example a closing bracket in a commented line will not
	 * match an opening bracket in the code.
	 * 
	 * @param position
	 *            the position to get the partition for
	 * @return the partition at <code>position</code> or a dummy zero-length
	 *         partition if accessing the document fails
	 */
	private ITypedRegion getPartition(int position) {
		Assert.isTrue(position >= 0);
		Assert.isTrue(position <= fDocument.getLength());

		try {
			// If we have a structured document - extract the text region from
			// the document and classify it
			if (fDocument instanceof BasicStructuredDocument) {
				IStructuredDocumentRegion sdRegion = ((BasicStructuredDocument) fDocument)
						.getRegionAtCharacterOffset(position);
				ITextRegion textRegion = sdRegion != null ? sdRegion.getRegionAtCharacterOffset(position) : null;
				if (textRegion instanceof IPhpScriptRegion) {
					IPhpScriptRegion phpScriptRegion = (IPhpScriptRegion) textRegion;
					textRegion = phpScriptRegion
							.getPhpToken(position - phpScriptRegion.getStart() - sdRegion.getStartOffset());

					int regionStart = textRegion.getStart() + phpScriptRegion.getStart() + sdRegion.getStartOffset();
					String partitionType = PHPPartitionTypes.getPartitionType(textRegion.getType());
					return new TypedRegion(regionStart, textRegion.getLength(), partitionType);
				}
			}

			return TextUtilities.getPartition(fDocument, fPartitioning, position, false);
		} catch (BadLocationException e) {
			return new TypedRegion(position, 0, "__no_partition_at_all"); //$NON-NLS-1$
		}

	}

