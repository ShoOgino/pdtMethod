	private void putModel(final IProject project, PHPProjectModel projectModel) {
		PHPProjectModel oldPhpProjectModel = (PHPProjectModel) models.get(project);
		models.put(project, projectModel);
		projectModel.initialize(project);
		if (oldPhpProjectModel == null) {
			projectModel.getPHPUserModel().addModelListener(this);
		} else {
			this.copyUserModelListeners(projectModel.getPHPUserModel(), oldPhpProjectModel.getPHPUserModel().getModelListenerList());
		}
		fireProjectModelAdded(project);
		if (projectModel.isBuildNeeded()) {
			//checking if we are currently at a job with build scheduling rule
			//because the build must run in such a job
			Job currentJob = Job.getJobManager().currentJob();
			boolean newJobNeeded = currentJob == null || currentJob.getRule() != ResourcesPlugin.getWorkspace().getRuleFactory().buildRule();
			if (newJobNeeded) {
				WorkspaceJob buildJob = new WorkspaceJob(NLS.bind(CoreMessages.getString("PHPWorkspaceModelManager_4"), project.getName())) {
					@Override
					public IStatus runInWorkspace(IProgressMonitor monitor) throws CoreException {
						buildModel(monitor, project);
						return Status.OK_STATUS;
					}
				};
				buildJob.setRule(ResourcesPlugin.getWorkspace().getRuleFactory().buildRule());
				buildJob.setUser(false);
				buildJob.schedule();

			} else {
				IProgressMonitor monitor = new NullProgressMonitor();
				buildModel(monitor, project);
			}
		} else {
			if (project.exists()) {//the event should not be lunched if we're dealing with the defaultPHPProjectModel
				fireProjectModelChanged(project);
			}
		}

	}

