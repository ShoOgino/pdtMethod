	@Override
	public SearchMatch newMethodReferenceMatch(IModelElement enclosingElement,
			int accuracy, int offset, int length, boolean isConstructor,
			boolean isSynthetic, ASTNode reference) {
		if (pattern instanceof MethodPattern
				&& (reference instanceof PHPCallExpression)) {
			PHPCallExpression pce = (PHPCallExpression) reference;
			ISourceModule module = (ISourceModule) enclosingElement
					.getAncestor(IModelElement.SOURCE_MODULE);
			if (module != null) {
				try {
					IModelElement[] elements = module.codeSelect(pce
							.getCallName().sourceStart(), 0);
					if (elements == null || elements.length == 0) {
						return super.newMethodReferenceMatch(enclosingElement,
								accuracy, offset, length, isConstructor,
								isSynthetic, reference);
					} else {
						for (int i = 0; i < elements.length; i++) {
							if (pattern.focus != null) {
								if (pattern.focus.equals(elements[i])) {
									return super.newMethodReferenceMatch(
											enclosingElement, accuracy, offset,
											length, isConstructor, isSynthetic,
											reference);
								}
							} else {
								// MethodPattern methodPattern = (MethodPattern) pattern;
								// if (new String(methodPattern.selector)
								// .equals(elements[i].getElementName())) {
								return super.newMethodReferenceMatch(
										enclosingElement, accuracy, offset,
										length, isConstructor, isSynthetic,
										reference);
								// }

							}
						}
					}

				} catch (ModelException e) {
					e.printStackTrace();
				}
			}
		} else if (pattern instanceof OrPattern) {
			return super.newMethodReferenceMatch(enclosingElement, accuracy,
					offset, length, isConstructor, isSynthetic, reference);
		}
		return null;
	}

