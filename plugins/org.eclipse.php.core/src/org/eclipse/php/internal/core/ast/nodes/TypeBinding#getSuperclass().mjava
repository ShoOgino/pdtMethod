	/**
	 * Returns the type binding for the superclass of the type represented by
	 * this class binding.
	 * <p>
	 * If this type binding represents any class other than the class
	 * <code>java.lang.Object</code>, then the type binding for the direct
	 * superclass of this class is returned. If this type binding represents the
	 * class <code>java.lang.Object</code>, then <code>null</code> is returned.
	 * <p>
	 * Loops that ascend the class hierarchy need a suitable termination test.
	 * Rather than test the superclass for <code>null</code>, it is more
	 * transparent to check whether the class is <code>Object</code>, by
	 * comparing whether the class binding is identical to
	 * <code>ast.resolveWellKnownType("java.lang.Object")</code>.
	 * </p>
	 * <p>
	 * If this type binding represents an interface, an array type, a primitive
	 * type, the null type, a type variable, an enum type, an annotation type, a
	 * wildcard type, or a capture binding then <code>null</code> is returned.
	 * </p>
	 * 
	 * @return the superclass of the class represented by this type binding, or
	 *         <code>null</code> if none
	 * @see AST#resolveWellKnownType(String)
	 */
	public ITypeBinding getSuperclass() {
		if (isUnknown()) {
			return null;
		}

		if (superClass == null) {
			final List<IType> superClasses = new ArrayList<IType>(
					elements.length);
			for (IModelElement element : elements) {
				IType type = (IType) element;
				try {
					IDLTKSearchScope scope = SearchEngine
							.createSearchScope(type.getScriptProject());
					String[] superClassNames = type.getSuperClasses();

					if (superClassNames != null) {
						StringBuilder buf = new StringBuilder();
						for (int i = 0; i < superClassNames.length; ++i) {
							if (i > 0) {
								buf.append(',');
							}
							buf.append(superClassNames[i]);
						}
						if (buf.length() > 0) {
							IType[] types = PhpModelAccess.getDefault()
									.findTypes(
											buf.toString(),
											MatchRule.SET,
											0,
											Modifiers.AccInterface
													| Modifiers.AccNameSpace,
											scope, null);
							superClasses.addAll(Arrays.asList(types));
						}
					}
				} catch (CoreException e) {
					if (DLTKCore.DEBUG) {
						e.printStackTrace();
					}
				}
			}
			superClass = resolver.getTypeBinding(superClasses
					.toArray(new IType[superClasses.size()]));
		}
		return superClass;
	}

