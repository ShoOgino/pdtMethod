	public static PHPFileData getFileData(Reader reader, String fileName, long lastModified, String phpVersion, Pattern[] tasksPatterns, boolean useAspTagsAsPhp) {
		PhpParser phpParser = null;
		ParserClient client = null;

		PHPUserModel model = new PHPUserModel();
		try {
			CompletionLexer lexer = null;
			if (phpVersion == PHPVersion.PHP5) {
				lexer = new CompletionLexer5(reader);
				phpParser = new PhpParser5();
				client = new PHP5DefaultParserClient(model, null);
			} else {
				lexer = new CompletionLexer4(reader);
				phpParser = new PhpParser4();
				client = new PHP4DefaultParserClient(model, null);
			}
			lexer.setUseAspTagsAsPhp(useAspTagsAsPhp);
			lexer.setParserClient(client);
			lexer.setTasksPatterns(tasksPatterns);

			phpParser.setScanner(lexer);
			phpParser.setParserClient(client);

			client.startParsing(fileName);

			phpParser.parse();

		} catch (Exception e) {
			Logger.logException(e);

		} finally {

			try {
				if (client != null && phpParser != null) {
					client.finishParsing(phpParser.getLength(), phpParser.getCurrentLine(), lastModified);
				}

			} catch (Exception ex) {
				Logger.logException(ex);

			} finally {
				try {
					reader.close();
				} catch (IOException exception) {
					Logger.logException(exception);
				}
			}
		}
		;
		PHPFileData fileData = model.getFileData(fileName);
		return fileData;
	}

