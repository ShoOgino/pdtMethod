	public void fileAdded(IFile file) {

		// check if it is an external file
		if (!file.exists()) {
			final File ioFile = new File(file.getFullPath().toOSString());
			// if it is an external file that doesn't exist - out
			if (!ioFile.exists()) {
				return;
			}
		}

		ParserClient parserClient = buildParserClient(file, IParserClientFactory.fileAdded);
		if (parserClient == null) {
			return;
		}

		InputStreamReader inputStreamReader;
		try {
			InputStream is = null;
			if (!file.exists()) {
				try {
					is = new FileInputStream(file.getFullPath().toOSString());
				} catch (IOException ioe) {
				}
			} else {
				is = file.getContents();
			}
			inputStreamReader = new InputStreamReader(is, file.getCharset());
		} catch (CoreException e) {
			PHPCorePlugin.log(e);
			return;
		} catch (RuntimeException e) {
			PHPCorePlugin.log(e);
			return;
		} catch (UnsupportedEncodingException e) {
			PHPCorePlugin.log(e);
			return;
		}

		Pattern[] tasksPatterns = TaskPatternsProvider.getInstance().getPatternsForProject(file.getProject());
		String fileNameToParse = file.getFullPath().toString();
		if (new File(fileNameToParse).exists()){
			fileNameToParse = file.getFullPath().toOSString();
		}
		try {
			parserManager.parseNow(inputStreamReader, fileNameToParse, file.getModificationStamp(), parserClient, tasksPatterns, UseAspTagsHandler.useAspTagsAsPhp(project));
		} catch (Exception e) {
			PHPCorePlugin.log(e);
			return;
		}
	}

