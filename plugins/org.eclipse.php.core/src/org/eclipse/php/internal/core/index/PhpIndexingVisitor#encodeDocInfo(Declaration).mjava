	/**
	 * See {@link PhpElementResolver#decodeDocInfo(String)} for the decoding
	 * routine.
	 * 
	 * @param declaration
	 *            Declaration ASTNode
	 * @return decoded PHPDoc info, or <code>null</code> if there's no PHPDoc
	 *         info to store.
	 */
	protected static String encodeDocInfo(Declaration declaration) {
		if (declaration instanceof IPHPDocAwareDeclaration) {
			PHPDocBlock docBlock = ((IPHPDocAwareDeclaration) declaration).getPHPDoc();
			if (docBlock != null) {
				Map<String, String> info = new HashMap<String, String>();
				for (PHPDocTag tag : docBlock.getTags()) {
					if (tag.getTagKind() == PHPDocTag.DEPRECATED) {
						info.put("d", null); //$NON-NLS-1$
					} else if (tag.getTagKind() == PHPDocTag.RETURN) {
						StringBuilder buf = new StringBuilder();
						for (TypeReference ref : tag.getTypeReferences()) {
							String type = ref.getName().replaceAll(",", "~"); //$NON-NLS-1$ //$NON-NLS-2$
							if (buf.length() > 0) {
								buf.append(',');
							}
							buf.append(type);
						}
						info.put("r", buf.toString()); //$NON-NLS-1$
					} else if (tag.getTagKind() == PHPDocTag.VAR) {
						if (tag.getTypeReferences().size() > 0) {
							String typeNames = PHPModelUtils.appendTypeReferenceNames(tag.getTypeReferences());
							typeNames = typeNames.replace(Constants.TYPE_SEPERATOR_CHAR, Constants.DOT);

							info.put("v", typeNames); //$NON-NLS-1$
						}
					}
				}
				return encodeDocInfo(info);
			}
		}
		return null;
	}

