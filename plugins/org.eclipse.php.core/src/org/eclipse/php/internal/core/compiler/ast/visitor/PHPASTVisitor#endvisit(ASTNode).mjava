	public boolean endvisit(ASTNode s) throws Exception {
		Class<? extends ASTNode> nodeClass = s.getClass();
		if (nodeClass.equals(ArrayCreation.class)) {
			return endvisit((ArrayCreation) s);
		}
		if (nodeClass.equals(ArrayElement.class)) {
			return endvisit((ArrayElement) s);
		}
		if (nodeClass.equals(ArrayVariableReference.class)) {
			return endvisit((ArrayVariableReference) s);
		}
		if (nodeClass.equals(Assignment.class)) {
			return endvisit((Assignment) s);
		}
		if (nodeClass.equals(ASTError.class)) {
			return endvisit((ASTError) s);
		}
		if (nodeClass.equals(BackTickExpression.class)) {
			return endvisit((BackTickExpression) s);
		}
		if (nodeClass.equals(BreakStatement.class)) {
			return endvisit((BreakStatement) s);
		}
		if (nodeClass.equals(CastExpression.class)) {
			return endvisit((CastExpression) s);
		}
		if (nodeClass.equals(CatchClause.class)) {
			return endvisit((CatchClause) s);
		}
		if (nodeClass.equals(FinallyClause.class)) {
			return endvisit((FinallyClause) s);
		}
		if (nodeClass.equals(ConstantDeclaration.class)) {
			return endvisit((ConstantDeclaration) s);
		}
		if (nodeClass.equals(ClassDeclaration.class)) {
			return endvisit((ClassDeclaration) s);
		}
		if (nodeClass.equals(ClassInstanceCreation.class)) {
			return endvisit((ClassInstanceCreation) s);
		}
		if (nodeClass.equals(CloneExpression.class)) {
			return endvisit((CloneExpression) s);
		}
		if (nodeClass.equals(Comment.class)) {
			return endvisit((Comment) s);
		}
		if (nodeClass.equals(ConditionalExpression.class)) {
			return endvisit((ConditionalExpression) s);
		}
		if (nodeClass.equals(ConstantReference.class)) {
			return endvisit((ConstantReference) s);
		}
		if (nodeClass.equals(ContinueStatement.class)) {
			return endvisit((ContinueStatement) s);
		}
		if (nodeClass.equals(DeclareStatement.class)) {
			return endvisit((DeclareStatement) s);
		}
		if (nodeClass.equals(FieldAccess.class)) {
			return endvisit((FieldAccess) s);
		}
		if (nodeClass.equals(StaticFieldAccess.class)) {
			return endvisit((StaticFieldAccess) s);
		}
		if (nodeClass.equals(Dispatch.class)) {
			return endvisit((Dispatch) s);
		}
		if (nodeClass.equals(DoStatement.class)) {
			return endvisit((DoStatement) s);
		}
		if (nodeClass.equals(EchoStatement.class)) {
			return endvisit((EchoStatement) s);
		}
		if (nodeClass.equals(EmptyStatement.class)) {
			return endvisit((EmptyStatement) s);
		}
		if (nodeClass.equals(ExpressionStatement.class)) {
			return endvisit((ExpressionStatement) s);
		}
		if (nodeClass.equals(ForEachStatement.class)) {
			return endvisit((ForEachStatement) s);
		}
		if (nodeClass.equals(FormalParameter.class)) {
			return endvisit((FormalParameter) s);
		}
		if (nodeClass.equals(FormalParameterByReference.class)) {
			return endvisit((FormalParameterByReference) s);
		}
		if (nodeClass.equals(ForStatement.class)) {
			return endvisit((ForStatement) s);
		}
		if (nodeClass.equals(GlobalStatement.class)) {
			return endvisit((GlobalStatement) s);
		}
		if (nodeClass.equals(IfStatement.class)) {
			return endvisit((IfStatement) s);
		}
		if (nodeClass.equals(IgnoreError.class)) {
			return endvisit((IgnoreError) s);
		}
		if (nodeClass.equals(Include.class)) {
			return endvisit((Include) s);
		}
		if (nodeClass.equals(InfixExpression.class)) {
			return endvisit((InfixExpression) s);
		}
		if (nodeClass.equals(InstanceOfExpression.class)) {
			return endvisit((InstanceOfExpression) s);
		}
		if (nodeClass.equals(InterfaceDeclaration.class)) {
			return endvisit((InterfaceDeclaration) s);
		}
		if (nodeClass.equals(ListVariable.class)) {
			return endvisit((ListVariable) s);
		}
		if (nodeClass.equals(PHPCallArgumentsList.class)) {
			return endvisit((PHPCallArgumentsList) s);
		}
		if (nodeClass.equals(PHPCallExpression.class)) {
			return endvisit((PHPCallExpression) s);
		}
		if (nodeClass.equals(PHPFieldDeclaration.class)) {
			return endvisit((PHPFieldDeclaration) s);
		}
		if (nodeClass.equals(PHPDocBlock.class)) {
			return endvisit((PHPDocBlock) s);
		}
		if (nodeClass.equals(PHPDocTag.class)) {
			return endvisit((PHPDocTag) s);
		}
		if (nodeClass.equals(PHPMethodDeclaration.class)) {
			return endvisit((PHPMethodDeclaration) s);
		}
		if (nodeClass.equals(PostfixExpression.class)) {
			return endvisit((PostfixExpression) s);
		}
		if (nodeClass.equals(PrefixExpression.class)) {
			return endvisit((PrefixExpression) s);
		}
		if (nodeClass.equals(Quote.class)) {
			return endvisit((Quote) s);
		}
		if (nodeClass.equals(ReferenceExpression.class)) {
			return endvisit((ReferenceExpression) s);
		}
		if (nodeClass.equals(ReflectionArrayVariableReference.class)) {
			return endvisit((ReflectionArrayVariableReference) s);
		}
		if (nodeClass.equals(ReflectionCallExpression.class)) {
			return endvisit((ReflectionCallExpression) s);
		}
		if (nodeClass.equals(ReflectionStaticMethodInvocation.class)) {
			return endvisit((ReflectionStaticMethodInvocation) s);
		}
		if (nodeClass.equals(ReflectionVariableReference.class)) {
			return endvisit((ReflectionVariableReference) s);
		}
		if (nodeClass.equals(ReturnStatement.class)) {
			return endvisit((ReturnStatement) s);
		}

		if (nodeClass.equals(YieldExpression.class)) {
			return endvisit((YieldExpression) s);
		}
		if (nodeClass.equals(Scalar.class)) {
			return endvisit((Scalar) s);
		}
		if (nodeClass.equals(StaticConstantAccess.class)) {
			return endvisit((StaticConstantAccess) s);
		}
		if (nodeClass.equals(StaticDispatch.class)) {
			return endvisit((StaticDispatch) s);
		}
		if (nodeClass.equals(StaticMethodInvocation.class)) {
			return endvisit((StaticMethodInvocation) s);
		}
		if (nodeClass.equals(StaticStatement.class)) {
			return endvisit((StaticStatement) s);
		}
		if (nodeClass.equals(SwitchCase.class)) {
			return endvisit((SwitchCase) s);
		}
		if (nodeClass.equals(SwitchStatement.class)) {
			return endvisit((SwitchStatement) s);
		}
		if (nodeClass.equals(ThrowStatement.class)) {
			return endvisit((ThrowStatement) s);
		}
		if (nodeClass.equals(TryStatement.class)) {
			return endvisit((TryStatement) s);
		}
		if (nodeClass.equals(TypeReference.class)) {
			return endvisit((TypeReference) s);
		}
		if (nodeClass.equals(UnaryOperation.class)) {
			return endvisit((UnaryOperation) s);
		}
		if (nodeClass.equals(VariableReference.class)) {
			return endvisit((VariableReference) s);
		}
		if (nodeClass.equals(WhileStatement.class)) {
			return endvisit((WhileStatement) s);
		}
		if (nodeClass.equals(SimpleReference.class)) {
			return endvisit((SimpleReference) s);
		}
		if (nodeClass.equals(UseStatement.class)) {
			return endvisit((UseStatement) s);
		}
		if (nodeClass.equals(UsePart.class)) {
			return endvisit((UsePart) s);
		}
		if (nodeClass.equals(NamespaceReference.class)) {
			return endvisit((NamespaceReference) s);
		}
		if (nodeClass.equals(FullyQualifiedReference.class)) {
			return endvisit((FullyQualifiedReference) s);
		}
		if (nodeClass.equals(GotoLabel.class)) {
			return endvisit((GotoLabel) s);
		}
		if (nodeClass.equals(GotoStatement.class)) {
			return endvisit((GotoStatement) s);
		}
		if (nodeClass.equals(LambdaFunctionDeclaration.class)) {
			return endvisit((LambdaFunctionDeclaration) s);
		}

		// php5.4
		if (nodeClass.equals(FullyQualifiedTraitMethodReference.class)) {
			return endvisit((FullyQualifiedTraitMethodReference) s);
		}
		if (nodeClass.equals(TraitAlias.class)) {
			return endvisit((TraitAlias) s);
		}
		if (nodeClass.equals(TraitAliasStatement.class)) {
			return endvisit((TraitAliasStatement) s);
		}
		if (nodeClass.equals(TraitPrecedence.class)) {
			return endvisit((TraitPrecedence) s);
		}
		if (nodeClass.equals(TraitPrecedenceStatement.class)) {
			return endvisit((TraitPrecedenceStatement) s);
		}
		if (nodeClass.equals(TraitUseStatement.class)) {
			return endvisit((TraitUseStatement) s);
		}
		if (nodeClass.equals(TraitDeclaration.class)) {
			return endvisit((TraitDeclaration) s);
		}
		return true;
	}

