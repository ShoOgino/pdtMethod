	public void syntax_error(Symbol cur_token) {
		super.syntax_error(cur_token);

		if (fileName == null || problemReporter == null) {
			return;
		}

		int state = ((Symbol) stack.peek()).parse_state;

		short[] rowOfProbe = action_tab[state];
		int startPosition = cur_token.left;
		int endPosition = cur_token.right;
		int lineNumber = ((AstLexer) getScanner()).getCurrentLine();

		StringBuilder errorMessage = new StringBuilder("syntax error");

		// current token can be either null, string or phpdoc - according to
		// this resolve:
		String currentText = cur_token.value instanceof String ? (String) cur_token.value
				: null;
		if (currentText == null || currentText.length() == 0) {
			currentText = getTokenName(cur_token.sym);
		}
		if (currentText != null && currentText.length() > 0) {
			if (currentText.equals(";")) { // This means EOF, since it's
				// substituted by the lexer
				// explicitly.
				currentText = "EOF"; //$NON-NLS-1$
			}
			endPosition = startPosition + currentText.length();
			errorMessage.append(", unexpected '").append(currentText).append(
					'\'');
		}

		if (rowOfProbe.length <= 6) {
			errorMessage.append(", expecting ");
			boolean first = true;
			for (int probe = 0; probe < rowOfProbe.length; probe += 2) {
				String tokenName = getTokenName(rowOfProbe[probe]);
				if (tokenName != null) {
					if (!first) {
						errorMessage.append(" or ");
					}
					errorMessage.append('\'').append(tokenName).append('\'');
					first = false;
				}
			}
		}

		reportError(problemReporter, fileName, startPosition, endPosition,
				lineNumber, errorMessage.toString());
	}

