	/**
	 * This method returns type declared under specified namespace
	 * 
	 * @param namespace
	 *            Namespace name
	 * @param prefix
	 *            Type name or prefix
	 * @param exactName
	 *            Whether the type name is exact or it is prefix
	 * @param sourceModule
	 *            Source module where the type is referenced
	 * @param cache
	 *            Model access cache if available
	 * @param monitor
	 *            Progress monitor
	 * @param isType
	 * @return type declared in the specified namespace, or null if there is
	 *         none
	 * @throws ModelException
	 */
	@NonNull
	public static IType[] getNamespaceType(String namespace, String prefix, boolean exactName,
			ISourceModule sourceModule, IModelAccessCache cache, IProgressMonitor monitor, boolean isType)
			throws ModelException {

		IType[] namespaces = getNamespaces(sourceModule, namespace, cache, monitor);
		Collection<IType> result = new LinkedList<IType>();
		for (IType ns : namespaces) {
			result.addAll(Arrays.asList(PHPModelUtils.getTypeType(ns, prefix, exactName, isType)));
		}
		if (cache != null) {
			result = cache.filterModelElements(sourceModule, result, monitor);
		}
		return result.toArray(new IType[result.size()]);
	}

