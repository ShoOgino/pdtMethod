	/**
	 * Returns a string representation of this <tt>Hashtable</tt> object in the
	 * form of a set of entries, enclosed in braces and separated by the ASCII
	 * characters "<tt>,&nbsp;</tt>" (comma and space). Each entry is rendered
	 * as the key, an equals sign <tt>=</tt>, and the associated element, where
	 * the <tt>toString</tt> method is used to convert the key and element to
	 * strings.
	 * <p>
	 * Overrides to <tt>toString</tt> method of <tt>Object</tt>.
	 * 
	 * @return a string representation of this hashtable.
	 */
	@Override
	public synchronized String toString() {
		int max = size() - 1;
		StringBuilder buf = new StringBuilder();
		Iterator<?> it = entrySet().iterator();

		buf.append("{"); //$NON-NLS-1$
		for (int i = 0; i <= max; i++) {
			Map.Entry<?, ?> e = (Map.Entry<?, ?>) (it.next());
			buf.append(e.getKey() + "=" + e.getValue()); //$NON-NLS-1$
			if (i < max)
				buf.append(", "); //$NON-NLS-1$
		}
		buf.append("}"); //$NON-NLS-1$
		return buf.toString();
	}

