	public boolean visit(ASTNode s) throws Exception {
		if (s.getClass().equals(ArrayCreation.class)) {
			return visit((ArrayCreation) s);
		}
		if (s.getClass().equals(ArrayElement.class)) {
			return visit((ArrayElement) s);
		}
		if (s.getClass().equals(ArrayVariableReference.class)) {
			return visit((ArrayVariableReference) s);
		}
		if (s.getClass().equals(Assignment.class)) {
			return visit((Assignment) s);
		}
		if (s.getClass().equals(ASTError.class)) {
			return visit((ASTError) s);
		}
		if (s.getClass().equals(BackTickExpression.class)) {
			return visit((BackTickExpression) s);
		}
		if (s.getClass().equals(BreakStatement.class)) {
			return visit((BreakStatement) s);
		}
		if (s.getClass().equals(CastExpression.class)) {
			return visit((CastExpression) s);
		}
		if (s.getClass().equals(CatchClause.class)) {
			return visit((CatchClause) s);
		}
		if (s.getClass().equals(ClassConstantDeclaration.class)) {
			return visit((ClassConstantDeclaration) s);
		}
		if (s.getClass().equals(ClassDeclaration.class)) {
			return visit((ClassDeclaration) s);
		}
		if (s.getClass().equals(ClassInstanceCreation.class)) {
			return visit((ClassInstanceCreation) s);
		}
		if (s.getClass().equals(CloneExpression.class)) {
			return visit((CloneExpression) s);
		}
		if (s.getClass().equals(Comment.class)) {
			return visit((Comment) s);
		}
		if (s.getClass().equals(ConditionalExpression.class)) {
			return visit((ConditionalExpression) s);
		}
		if (s.getClass().equals(ConstantReference.class)) {
			return visit((ConstantReference) s);
		}
		if (s.getClass().equals(ContinueStatement.class)) {
			return visit((ContinueStatement) s);
		}
		if (s.getClass().equals(DeclareStatement.class)) {
			return visit((DeclareStatement) s);
		}
		if (s.getClass().equals(StaticFieldAccess.class)) {
			return visit((StaticFieldAccess) s);
		}
		if (s.getClass().equals(FieldAccess.class)) {
			return visit((FieldAccess) s);
		}
		if (s.getClass().equals(Dispatch.class)) {
			return visit((Dispatch) s);
		}
		if (s.getClass().equals(DoStatement.class)) {
			return visit((DoStatement) s);
		}
		if (s.getClass().equals(EchoStatement.class)) {
			return visit((EchoStatement) s);
		}
		if (s.getClass().equals(EmptyStatement.class)) {
			return visit((EmptyStatement) s);
		}
		if (s.getClass().equals(ExpressionStatement.class)) {
			return visit((ExpressionStatement) s);
		}
		if (s.getClass().equals(ForEachStatement.class)) {
			return visit((ForEachStatement) s);
		}
		if (s.getClass().equals(FormalParameter.class)) {
			return visit((FormalParameter) s);
		}
		if (s.getClass().equals(FormalParameterByReference.class)) {
			return visit((FormalParameterByReference) s);
		}
		if (s.getClass().equals(ForStatement.class)) {
			return visit((ForStatement) s);
		}
		if (s.getClass().equals(GlobalStatement.class)) {
			return visit((GlobalStatement) s);
		}
		if (s.getClass().equals(IfStatement.class)) {
			return visit((IfStatement) s);
		}
		if (s.getClass().equals(IgnoreError.class)) {
			return visit((IgnoreError) s);
		}
		if (s.getClass().equals(Include.class)) {
			return visit((Include) s);
		}
		if (s.getClass().equals(InfixExpression.class)) {
			return visit((InfixExpression) s);
		}
		if (s.getClass().equals(InstanceOfExpression.class)) {
			return visit((InstanceOfExpression) s);
		}
		if (s.getClass().equals(InterfaceDeclaration.class)) {
			return visit((InterfaceDeclaration) s);
		}
		if (s.getClass().equals(ListVariable.class)) {
			return visit((ListVariable) s);
		}
		if (s.getClass().equals(PHPCallArgumentsList.class)) {
			return visit((PHPCallArgumentsList) s);
		}
		if (s.getClass().equals(PHPCallExpression.class)) {
			return visit((PHPCallExpression) s);
		}
		if (s.getClass().equals(PHPFieldDeclaration.class)) {
			return visit((PHPFieldDeclaration) s);
		}
		if (s.getClass().equals(PHPDocBlock.class)) {
			return visit((PHPDocBlock) s);
		}
		if (s.getClass().equals(PHPDocTag.class)) {
			return visit((PHPDocTag) s);
		}
		if (s.getClass().equals(PHPMethodDeclaration.class)) {
			return visit((PHPMethodDeclaration) s);
		}
		if (s.getClass().equals(PostfixExpression.class)) {
			return visit((PostfixExpression) s);
		}
		if (s.getClass().equals(PrefixExpression.class)) {
			return visit((PrefixExpression) s);
		}
		if (s.getClass().equals(Quote.class)) {
			return visit((Quote) s);
		}
		if (s.getClass().equals(ReferenceExpression.class)) {
			return visit((ReferenceExpression) s);
		}
		if (s.getClass().equals(ReflectionArrayVariableReference.class)) {
			return visit((ReflectionArrayVariableReference) s);
		}
		if (s.getClass().equals(ReflectionCallExpression.class)) {
			return visit((ReflectionCallExpression) s);
		}
		if (s.getClass().equals(ReflectionStaticMethodInvocation.class)) {
			return visit((ReflectionStaticMethodInvocation) s);
		}
		if (s.getClass().equals(ReflectionVariableReference.class)) {
			return visit((ReflectionVariableReference) s);
		}
		if (s.getClass().equals(ReturnStatement.class)) {
			return visit((ReturnStatement) s);
		}
		if (s.getClass().equals(Scalar.class)) {
			return visit((Scalar) s);
		}
		if (s.getClass().equals(StaticConstantAccess.class)) {
			return visit((StaticConstantAccess) s);
		}
		if (s.getClass().equals(StaticDispatch.class)) {
			return visit((StaticDispatch) s);
		}
		if (s.getClass().equals(StaticMethodInvocation.class)) {
			return visit((StaticMethodInvocation) s);
		}
		if (s.getClass().equals(StaticStatement.class)) {
			return visit((StaticStatement) s);
		}
		if (s.getClass().equals(SwitchCase.class)) {
			return visit((SwitchCase) s);
		}
		if (s.getClass().equals(SwitchStatement.class)) {
			return visit((SwitchStatement) s);
		}
		if (s.getClass().equals(ThrowStatement.class)) {
			return visit((ThrowStatement) s);
		}
		if (s.getClass().equals(TryStatement.class)) {
			return visit((TryStatement) s);
		}
		if (s.getClass().equals(TypeReference.class)) {
			return visit((TypeReference) s);
		}
		if (s.getClass().equals(UnaryOperation.class)) {
			return visit((UnaryOperation) s);
		}
		if (s.getClass().equals(VariableReference.class)) {
			return visit((VariableReference) s);
		}
		if (s.getClass().equals(WhileStatement.class)) {
			return visit((WhileStatement) s);
		}
		if (s.getClass().equals(SimpleReference.class)) {
			return visit((SimpleReference) s);
		}
		return true;
	}

