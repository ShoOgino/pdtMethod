	/**
	 * Returns the type method element by name
	 * 
	 * @param type
	 *            Type
	 * @param prefix
	 *            Method name or prefix
	 * @param exactName
	 *            Whether the name is exact name or prefix
	 * @throws ModelException
	 */
	@NonNull
	public static IMethod[] getTypeMethod(IType type, String prefix, boolean exactName) throws ModelException {

		List<IMethod> result = new LinkedList<IMethod>();
		if (type.exists()) {
			Set<String> nameSet = new HashSet<String>();
			IMethod[] methods = type.getMethods();
			for (IMethod method : methods) {
				String elementName = method.getElementName();
				nameSet.add(elementName);
				if (exactName && elementName.equalsIgnoreCase(prefix)
						|| !exactName && startsWithIgnoreCase(elementName, prefix)) {
					result.add(method);
				}
			}
			methods = TraitUtils.getTraitMethods(type, nameSet);
			for (IMethod method : methods) {
				String elementName = method.getElementName();
				if (exactName && elementName.equalsIgnoreCase(prefix)
						|| !exactName && startsWithIgnoreCase(elementName, prefix)) {
					result.add(method);
				}
			}
		}
		return result.toArray(new IMethod[result.size()]);
	}

