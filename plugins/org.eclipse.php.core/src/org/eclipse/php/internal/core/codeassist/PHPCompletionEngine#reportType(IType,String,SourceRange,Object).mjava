	public void reportType(IType type, String suffix, SourceRange replaceRange,
			Object extraInfo) {
		if (processedElements.containsKey(type)
				&& processedElements.get(type).getClass() == type.getClass()) {
			return;
		}
		processedElements.put(type, type);

		noProposal = false;

		if (!requestor.isIgnored(CompletionProposal.TYPE_REF)) {

			CompletionProposal proposal = createProposal(
					CompletionProposal.TYPE_REF, actualCompletionPosition);
			proposal.setExtraInfo(extraInfo);
			// Support parameter names for constructor:
			if (requestor.isContextInformationMode()) {
				try {
					for (IMethod method : type.getMethods()) {
						if (method.isConstructor()) {
							String[] params = method.getParameterNames();
							if (params != null && params.length > 0) {
								proposal.setParameterNames(params);
							}
							break;
						}
					}
				} catch (ModelException e) {
					PHPCorePlugin.log(e);
				}
			}

			String elementName = type.getElementName();
			String completionName = elementName;

			proposal.setModelElement(type);
			proposal.setName(elementName);

			int relevance = relevanceClass;
			proposal.setCompletion(completionName + suffix);

			try {
				proposal.setFlags(type.getFlags());
			} catch (ModelException e) {
				PHPCorePlugin.log(e);
			}

			proposal.setReplaceRange(replaceRange.getOffset(),
					replaceRange.getOffset() + replaceRange.getLength());
			proposal.setRelevance(relevance);

			this.requestor.accept(proposal);

			if (DEBUG) {
				this.printDebug(proposal);
			}
		}
	}

