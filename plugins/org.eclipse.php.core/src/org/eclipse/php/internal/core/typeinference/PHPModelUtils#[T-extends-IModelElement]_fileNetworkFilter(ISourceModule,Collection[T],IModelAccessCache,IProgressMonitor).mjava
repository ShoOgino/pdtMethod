	/**
	 * Filters model elements using file network.
	 * 
	 * @param sourceModule
	 *            Source module
	 * @param elements
	 *            Model elements to filter
	 * @param cache
	 *            Temporary model cache instance
	 * @param monitor
	 *            Progress monitor
	 * @return
	 */
	public static <T extends IModelElement> Collection<T> fileNetworkFilter(
			ISourceModule sourceModule, Collection<T> elements,
			IModelAccessCache cache, IProgressMonitor monitor) {

		if (elements != null && elements.size() > 0) {
			List<T> filteredElements = new LinkedList<T>();

			// If some of elements belong to current file return just it:
			for (T element : elements) {
				if (sourceModule.equals(element.getOpenable())) {
					filteredElements.add(element);
				}
			}
			if (filteredElements.size() == 0) {
				ReferenceTree referenceTree;
				if (cache != null) {
					referenceTree = cache.getFileHierarchy(sourceModule,
							monitor);
				} else {
					// Filter by includes network
					referenceTree = FileNetworkUtility
							.buildReferencedFilesTree(sourceModule, monitor);
				}
				for (T element : elements) {
					if (LanguageModelInitializer
							.isLanguageModelElement(element)
							|| referenceTree.find(((ModelElement) element)
									.getSourceModule())) {
						filteredElements.add(element);
					}
				}
			}
			if (filteredElements.size() > 0) {
				elements = filteredElements;
			}
		}
		return elements;
	}

