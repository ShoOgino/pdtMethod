	/**
	 * Returns the class containing the PHP element
	 *
	 * @param projectModel PHP project model
	 * @param fileData Current file data
	 * @param startPosition PHP element start position
	 * @param offset Absolute offset in the document
	 * @param line Line number which corresponds to the offset
	 */
	private String getClassName(PHPProjectModel projectModel, PHPFileData fileData, TextSequence statement, int startPosition, int offset, int line) {
		if (startPosition < 2) {
			return null;
		}

		startPosition = PHPTextSequenceUtilities.readBackwardSpaces(statement, startPosition); // read whitespace

		if (startPosition < 2) {
			return null;
		}

		boolean isClassTriger = false;

		String triggerText = statement.subSequence(startPosition - 2, startPosition).toString();
		if ("->".equals(triggerText)) { //$NON-NLS-1$
		} else if ("::".equals(triggerText)) { //$NON-NLS-1$
			isClassTriger = true;
		} else {
			return null;
		}

		int propertyEndPosition = PHPTextSequenceUtilities.readBackwardSpaces(statement, startPosition - 2);
		int lastObjectOperator = PHPTextSequenceUtilities.getPrivousTriggerIndex(statement, propertyEndPosition);

		if (lastObjectOperator == -1) {
			// if there is no "->" or "::" in the left sequence then we need to calc the object type
			return innerGetClassName(projectModel, fileData, statement, propertyEndPosition, isClassTriger, offset, line);
		}

		int propertyStartPosition = PHPTextSequenceUtilities.readForwardSpaces(statement, lastObjectOperator + 2);
		String propertyName = statement.subSequence(propertyStartPosition, propertyEndPosition).toString();
		String className = getClassName(projectModel, fileData, statement, propertyStartPosition, offset, line);

		int bracketIndex = propertyName.indexOf('(');

		if (bracketIndex == -1) {
			// meaning its a class variable and not a function
			return getVarType(projectModel, fileData.getName(), className, propertyName, offset, line);
		}

		String functionName = propertyName.substring(0, bracketIndex).trim();
		return getFunctionReturnType(projectModel, fileData, className, functionName);
	}

