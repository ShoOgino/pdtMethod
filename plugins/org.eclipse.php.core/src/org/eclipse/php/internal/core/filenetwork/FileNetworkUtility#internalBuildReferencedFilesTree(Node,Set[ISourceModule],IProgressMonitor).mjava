	private static void internalBuildReferencedFilesTree(Node root, Set<ISourceModule> processedFiles, IProgressMonitor monitor) throws CoreException {
		ISourceModule sourceModule = root.getFile();

		final List<String> includes = new LinkedList<String>();
		final IBuffer buffer = sourceModule.getBuffer();

		if (buffer != null) {

			ModuleDeclaration moduleDeclaration = SourceParserUtil.getModuleDeclaration(sourceModule, null);
			
			ASTVisitor visitor = new ASTVisitor() {
				public boolean visit(Expression expr) throws ModelException {
					if (expr instanceof Include) {
						Expression fileExpr = ((Include) expr).getExpr();
						if (fileExpr instanceof Scalar) {
							int start = fileExpr.sourceStart();
							int length = fileExpr.sourceEnd() - start;
							String fileName = ASTUtils.stripQuotes(buffer.getText(start, length));
							includes.add(fileName);
						}
					}
					return true;
				}
			};
			
			try {
				moduleDeclaration.traverse(visitor);
			} catch (Exception e) {
				Logger.logException(e);
			}
		}

		for (String filePath : includes) {
			ISourceModule testFile = findSourceModule(sourceModule, filePath);
			if (testFile != null && !processedFiles.contains(testFile)) {
				processedFiles.add(testFile);
				root.addChild(new Node(testFile));
			}
		}

		Collection<Node> children = root.getChildren();
		if (children != null) {
			for (Node child : children) {
				internalBuildReferencedFilesTree(child, processedFiles, monitor);
			}
		}
	}

