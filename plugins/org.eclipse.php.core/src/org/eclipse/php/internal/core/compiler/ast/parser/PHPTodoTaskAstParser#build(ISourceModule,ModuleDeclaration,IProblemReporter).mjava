	public void build(ISourceModule module, ModuleDeclaration astModuleDeclaration, IProblemReporter reporter) throws CoreException {
		final ITaskReporter taskReporter = (ITaskReporter) reporter.getAdapter(ITaskReporter.class);
		if (taskReporter == null) {
			return;
		}

		IStructuredModel model = null;
		try {
			IFile file = ResourcesPlugin.getWorkspace().getRoot().getFile(module.getPath());
			model = StructuredModelManager.getModelManager().getExistingModelForRead(file);
			if (model == null) {
				return;
			}
			IStructuredDocumentRegion[] sdRegions = model.getStructuredDocument().getStructuredDocumentRegions();
			for (IStructuredDocumentRegion structuredDocumentRegion : sdRegions) {
				
				IStructuredDocument document = structuredDocumentRegion.getParentDocument();
				
				ITextRegionList textRegions = structuredDocumentRegion.getRegions();
				for (int i = 0; i < textRegions.size(); i++) {
					ITextRegion textRegion = textRegions.get(i);
					int regionStart = structuredDocumentRegion.getStartOffset(textRegion);
					
					if (textRegion instanceof ContextRegionContainer) {					
						textRegion = extractPhpScriptRegion(textRegion);
						regionStart+=textRegion.getStart(); 
					}
					// parse the actual script
					if (textRegion instanceof PhpScriptRegion) {
						PhpScriptRegion scriptRegion = (PhpScriptRegion) textRegion;
						try {
							//go over the text regions and look for the tasks
							ITextRegion[] phpTokens = scriptRegion.getPhpTokens(textRegion.getStart(), textRegion.getLength());
							for (int j = 0; j < phpTokens.length; j++) {
								ITextRegion phpToken = phpTokens[j];
								if (phpToken.getType().equals(PHPRegionTypes.TASK)) {										
									// get the task information from the document 									
									int offset = regionStart + phpToken.getStart();
									int length = phpToken.getLength();
									
									String taskKeyword = document.get(offset, phpToken.getLength());
									int priority = getTaskPriority(taskKeyword);

									// get the actual message for this task - if any
									if (j + 1 < phpTokens.length) {
										ITextRegion phpNextToken = phpTokens[j + 1];
										length = length + phpNextToken.getLength();
									}

									reportTask(document, taskReporter, offset, length, priority);
								}
							}
						} catch (BadLocationException e) {
							Logger.logException(CoreMessages.PHPTodoTaskAstParser_0, e);
						}
					}
				}
			}
		} finally {
			if (model != null) {
				model.releaseFromRead();
			}

		}

	}

