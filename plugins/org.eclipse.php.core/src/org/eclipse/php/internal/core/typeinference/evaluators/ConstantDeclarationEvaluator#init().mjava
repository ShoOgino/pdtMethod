	public IGoal[] init() {
		ConstantDeclarationGoal typedGoal = (ConstantDeclarationGoal) goal;
		String constantName = typedGoal.getConstantName();
		String typeName = typedGoal.getTypeName();

		IDLTKSearchScope scope = null;
		IScriptProject scriptProject = null;
		ISourceModuleContext sourceModuleContext = (ISourceModuleContext) goal
				.getContext();
		if (sourceModuleContext != null) {
			scriptProject = sourceModuleContext.getSourceModule()
					.getScriptProject();
			scope = SearchEngine.createSearchScope(scriptProject);
		}

		if (scope == null) {
			scope = SearchEngine.createWorkspaceScope(PHPLanguageToolkit
					.getDefault());
		}
		IType[] types = PhpModelAccess.getDefault().findTypes(typeName,
				MatchRule.EXACT, 0, Modifiers.AccNameSpace, scope, null);
		Set<IModelElement> elements = new HashSet<IModelElement>();
		for (IType type : types) {
			try {
				IField field = type.getField(constantName);
				if (field.exists() && PHPFlags.isConstant(field.getFlags())) {
					elements.add(field);
				}
			} catch (ModelException e) {
				if (DLTKCore.DEBUG) {
					e.printStackTrace();
				}
			}
		}

		Map<ISourceModule, SortedSet<ISourceRange>> offsets = new HashMap<ISourceModule, SortedSet<ISourceRange>>();

		Comparator<ISourceRange> sourceRangeComparator = new Comparator<ISourceRange>() {
			public int compare(ISourceRange o1, ISourceRange o2) {
				return o1.getOffset() - o2.getOffset();
			}
		};

		for (IModelElement element : elements) {
			if (element instanceof IField) {
				IField field = (IField) element;
				ISourceModule sourceModule = field.getSourceModule();
				if (!offsets.containsKey(sourceModule)) {
					offsets.put(sourceModule, new TreeSet<ISourceRange>(
							sourceRangeComparator));
				}
				try {
					offsets.get(sourceModule).add(field.getSourceRange());
				} catch (ModelException e) {
					if (DLTKCore.DEBUG) {
						e.printStackTrace();
					}
				}
			}
		}

		List<IGoal> subGoals = new LinkedList<IGoal>();
		for (Entry<ISourceModule, SortedSet<ISourceRange>> entry : offsets
				.entrySet()) {
			final ISourceModule sourceModule = entry.getKey();
			ModuleDeclaration moduleDeclaration = SourceParserUtil
					.getModuleDeclaration(sourceModule);
			SortedSet<ISourceRange> fileOffsets = entry.getValue();

			if (!fileOffsets.isEmpty()) {
				ConstantDeclarationSearcher searcher = new ConstantDeclarationSearcher(
						fileOffsets, constantName);
				try {
					moduleDeclaration.traverse(searcher);
					for (Scalar scalar : searcher.getDeclarations()) {
						subGoals.add(new ExpressionTypeGoal(goal.getContext(),
								scalar));
					}
				} catch (Exception e) {
					if (DLTKCore.DEBUG) {
						e.printStackTrace();
					}
				}
			}
		}

		return subGoals.toArray(new IGoal[subGoals.size()]);
	}

