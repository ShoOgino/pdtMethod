	/**
	 * Removes the given entry from the include path (according to the path)
	 * 
	 * @param scriptProject
	 * @param buildpathEntry
	 * @throws ModelException
	 */
	public void removeEntryFromIncludePath(IProject project, IBuildpathEntry buildpathEntry) throws ModelException {

		IncludePath[] includePathEntries = getIncludePaths(project);
		List<IncludePath> newIncludePathEntries = new ArrayList<IncludePath>();

		// go over the entries and compare the path.
		// if it is the same as the given entry, it won't be added to the list.
		for (IncludePath entry : includePathEntries) {
			Object includePathEntry = entry.getEntry();
			IPath resourcePath = null;
			if (includePathEntry instanceof IBuildpathEntry) {
				IBuildpathEntry bpEntry = (IBuildpathEntry) includePathEntry;
				resourcePath = bpEntry.getPath();
			} else {
				IResource resource = (IResource) includePathEntry;
				resourcePath = resource.getFullPath();
			}

			if (resourcePath != null && !resourcePath.toString().equals(buildpathEntry.getPath().toString())) {
				newIncludePathEntries.add(entry);
			}

		}
		// update the include path for this project
		setIncludePath(project, newIncludePathEntries.toArray(new IncludePath[newIncludePathEntries.size()]));

		// if it's a library, remove it also from build path
		IScriptProject scriptProject = DLTKCore.create(project);
		if ((buildpathEntry.getEntryKind() == IBuildpathEntry.BPE_LIBRARY
				|| buildpathEntry.getEntryKind() == IBuildpathEntry.BPE_CONTAINER
				|| buildpathEntry.getEntryKind() == IBuildpathEntry.BPE_PROJECT)) {
			BuildPathUtils.removeEntryFromBuildPath(scriptProject, buildpathEntry);
		}
	}

