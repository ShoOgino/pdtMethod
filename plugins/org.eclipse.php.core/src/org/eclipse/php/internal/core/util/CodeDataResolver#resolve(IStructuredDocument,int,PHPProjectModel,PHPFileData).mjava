	/**
	 * This method resolved PHP code data which is under the specified offset in the document.
	 *
	 * @param sDoc Document instance
	 * @param offset Absolute offset in the document
	 * @param phpModel Instance of PHP DOM Model
	 * @return Array of resolved code datas, or empty array if offset doesn't point to PHP element (or in case of
	 *         error).
	 */
	public CodeData[] resolve(IStructuredDocument sDoc, int offset, PHPProjectModel projectModel, PHPFileData fileData) {
		try {
			IStructuredDocumentRegion sRegion = sDoc.getRegionAtCharacterOffset(offset);
			if (sRegion != null) {
				ITextRegion tRegion = sRegion.getRegionAtCharacterOffset(offset);

				ITextRegionCollection container = sRegion;
				if (tRegion instanceof ITextRegionContainer) {
					container = (ITextRegionContainer) tRegion;
					tRegion = container.getRegionAtCharacterOffset(offset);
				}

				if (tRegion.getType() == PHPRegionContext.PHP_CONTENT) {
					PhpScriptRegion phpScriptRegion = (PhpScriptRegion) tRegion;
					tRegion = phpScriptRegion.getPhpToken(offset - container.getStartOffset() - phpScriptRegion.getStart());
					
					// Determine element name:
					int elementStart = container.getStartOffset() + phpScriptRegion.getStart() + tRegion.getStart();
					TextSequence statement = PHPTextSequenceUtilities.getStatment(elementStart + tRegion.getLength(), sRegion, true);
					int endPosition = PHPTextSequenceUtilities.readBackwardSpaces(statement, statement.length());
					int startPosition = PHPTextSequenceUtilities.readIdentifiarStartIndex(statement, endPosition, true);
					String elementName = statement.subSequence(startPosition, endPosition).toString();

					// Determine previous word:
					int prevWordEnd = PHPTextSequenceUtilities.readBackwardSpaces(statement, startPosition);
					int prevWordStart = PHPTextSequenceUtilities.readIdentifiarStartIndex(statement, prevWordEnd, false);
					String prevWord = statement.subSequence(prevWordStart, prevWordEnd).toString();

					// Determine next word:
					ITextRegion nextRegion = tRegion;
					do {
						nextRegion = phpScriptRegion.getPhpToken(nextRegion.getEnd());

						if (!PHPPartitionTypes.isPHPCommentState(nextRegion.getType()) && nextRegion.getType() != PHPRegionTypes.WHITESPACE) {
							break;
						}
					} while (nextRegion.getEnd() < phpScriptRegion.getLength());
					String nextWord = sDoc.get(container.getStartOffset() + phpScriptRegion.getStart() + nextRegion.getStart(), nextRegion.getTextLength());

					if (elementName.length() > 0) {
						String fileName = fileData != null ? fileData.getName() : null;

						PHPClassData classData = fileData != null ? PHPFileDataUtilities.getContainerClassDada(fileData, offset) : null;

						// If we are in function declaration:
						if ("function".equalsIgnoreCase(prevWord)) {
							if (classData != null) {
								return toArray(projectModel.getClassFunctionData(fileName, classData.getName(), elementName));
							}
							return toArray(projectModel.getFunction(fileName, elementName));
						}

						// If we are in class declaration:
						if ("class".equalsIgnoreCase(prevWord) || "interface".equalsIgnoreCase(prevWord)) {
							return toArray(projectModel.getClass(fileName, elementName));
						}

						CodeData[] matchingClasses = getMatchingClasses(elementName, projectModel, fileName);

						// Class instantiation:
						if ("new".equalsIgnoreCase(prevWord)) {
							return matchingClasses;
						}

						// Handle extends and implements:
						// Check that the statement suites the condition. If class or interface keywords don't appear in the beginning of the statement or they are alone there.
						if (statement.length() > 6 && ("class".equals(statement.subSequence(0, 5).toString()) || statement.length() > 10 && "interface".equals(statement.subSequence(0, 9).toString()))) {

							if ("extends".equalsIgnoreCase(prevWord) || "implements".equalsIgnoreCase(prevWord)) {
								return matchingClasses;
							}

							// Multiple extensions and implementations:

							final int listStartPosition = PHPTextSequenceUtilities.readIdentifierListStartIndex(statement, endPosition);

							// Determine pre-list word:
							final int preListWordEnd = PHPTextSequenceUtilities.readBackwardSpaces(statement, listStartPosition);
							final int preListWordStart = PHPTextSequenceUtilities.readIdentifiarStartIndex(statement, preListWordEnd, false);
							final String preListWord = statement.subSequence(preListWordStart, preListWordEnd).toString();

							if ("extends".equalsIgnoreCase(preListWord) || "implements".equalsIgnoreCase(preListWord)) {
								return matchingClasses;
							}
						}

						// Previous trigger:
						String trigger = null;
						if (startPosition > 2) {
							trigger = statement.subSequence(startPosition - 2, startPosition).toString();
						}

						// If this is variable:
						if (elementName.charAt(0) == '$' && !"::".equals(trigger)) {
							// Don't show escaped variables within PHP string:
							if (PHPPartitionTypes.isPHPQuotesState(tRegion.getType())) {
								try {
									char charBefore = sDoc.get(elementStart - 2, 1).charAt(0);
									if (charBefore == '\\') {
										return EMPTY;
									}
								} catch (BadLocationException e) {
									PHPCorePlugin.log(e);
								}
							}

							elementName = elementName.substring(1);

							// If we are in var definition:
							if (classData != null) {
								if ("var".equalsIgnoreCase(prevWord) || "private".equalsIgnoreCase(prevWord) || "static".equalsIgnoreCase(prevWord) || "public".equalsIgnoreCase(prevWord) || "protected".equalsIgnoreCase(prevWord)) {
									return filterExact(classData.getVars(), elementName);
								}
								if ("this".equalsIgnoreCase(elementName)) {
									return toArray(classData);
								}
							}

							PHPCodeContext context = ModelSupport.createContext(fileData, elementStart);
							CodeData[] res = filterExact(projectModel.getVariables(fileName, context, elementName, true), elementName);
							
							// Update variable position by assigning UserData:
							if (res.length == 1 && res[0].getUserData() == null && res[0] instanceof PHPVariableData) {
								PHPVariableData v = (PHPVariableData) res[0];
								Object variableContext = VariableContextBuilder.createVariableContext(elementName, context);
								
								// Find last assignment of variable:
								List instantiations = (List) fileData.getVariableTypeManager().getVariablesInstansiation().get(variableContext);
								if (instantiations != null && instantiations.size() > 0) {
									PHPVariableTypeData typeData = (PHPVariableTypeData) instantiations.get(instantiations.size() - 1);
									int varStartPosition = typeData.getPosition();
									
									// Search backwards for the variable itself:
									sRegion = sDoc.getRegionAtCharacterOffset(varStartPosition);
									if (sRegion != null) {
										tRegion = sRegion.getRegionAtCharacterOffset(varStartPosition);
										container = sRegion;
										if (tRegion instanceof ITextRegionContainer) {
											container = (ITextRegionContainer) tRegion;
											tRegion = container.getRegionAtCharacterOffset(varStartPosition);
										}
										if (tRegion != null && tRegion.getType() == PHPRegionContext.PHP_CONTENT) {
											phpScriptRegion = (PhpScriptRegion) tRegion;
											tRegion = phpScriptRegion.getPhpToken(varStartPosition - container.getStartOffset() - phpScriptRegion.getStart());
											ITextRegion prevRegion = tRegion;
											do {
												prevRegion = phpScriptRegion.getPhpToken(prevRegion.getStart()-1);
												if (prevRegion.getType() == PHPRegionTypes.PHP_VARIABLE) {
													break;
												}
											} while (prevRegion.getStart() > 0);
											
											if (prevRegion.getType() == PHPRegionTypes.PHP_VARIABLE) {
												varStartPosition = container.getStartOffset() + phpScriptRegion.getStart() + prevRegion.getStart();
												int varEndPosition = varStartPosition + elementName.length();
												UserData userData = PHPCodeDataFactory.createUserData(fileName, varStartPosition, varEndPosition, varEndPosition, typeData.getLine());
												res[0] = PHPCodeDataFactory.createPHPVariableData(v.getName(), v.getDocBlock(), userData);
											}
										}
									}
								}
							}
							return res;
						}

						// If we are at class constant definition:
						if (classData != null) {
							if ("const".equalsIgnoreCase(prevWord)) {
								return filterExact(classData.getConsts(), elementName);
							}
						}

						// We are at class trigger:
						if ("::".equals(nextWord)) {
							return matchingClasses;
						}

						String className = getClassName(projectModel, fileData, statement, startPosition, offset, sDoc.getLineOfOffset(offset));
						CodeData[] classDatas = getMatchingClasses(className, projectModel, fileName);

						// Is it function or method:
						if ("(".equals(nextWord) || PHPPartitionTypes.isPHPDocState(tRegion.getType())) {
							CodeData[] result = null;
							if (classDatas.length > 0) {
								for (int i = 0; i < classDatas.length; ++i) {
									result = ModelSupport.merge(result, toArray(projectModel.getClassFunctionData(fileName, className, elementName)));
								}
							} else {
								result = projectModel.getFilteredFunctions(fileName, elementName);
								if (result == null || result.length == 0)
									result = projectModel.getFunction(elementName);
							}
							return result == null ? EMPTY : result;
						}

						if (classDatas.length > 0) {
							// Check whether this is a class constant:
							if (startPosition > 0) {
								if ("::".equals(trigger) && elementName.charAt(0) != '$') {
									CodeData[] result = null;
									for (int i = 0; i < classDatas.length; ++i) {
										result = ModelSupport.merge(result, toArray(projectModel.getClassConstsData(fileName, className, elementName)));
									}
									return result == null ? EMPTY : result;
								}
							}

							// What can it be? Only class variables:
							CodeData[] result = null;
							if (elementName.charAt(0) == '$')
								elementName = elementName.substring(1);
							for (int i = 0; i < classDatas.length; ++i) {
								// String fileName = classDatas[i].isUserCode() ?
								// classDatas[i].getUserData().getFileName() : "";
								result = ModelSupport.merge(result, toArray(projectModel.getClassVariablesData(fileName, className, elementName)));
							}
							return result == null ? EMPTY : result;
						}

						// This can be only global constant, if we've reached here:
						CodeData[] result = projectModel.getFilteredConstants(fileName, elementName);
						if (result == null || result.length == 0) {
							result = projectModel.getConstant(elementName);
						}

						// Return class if nothing else found.
						if(result == null || result.length == 0) {
							result = matchingClasses;
						}

						return result == null ? EMPTY : result;
					}
				}
			}
		} catch (Exception e) {
			PHPCorePlugin.log(e);
		}
		return EMPTY;
	}

