  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

      // first: make room (if you can)
      if (yy_startRead > 0) {
          char temp[] = yy_buffer;
          //only if the new buffer will be changed then
          //we have to keep the old copy
          if (yy_endRead - yy_startRead > 0 || yy_startRead == yy_old_buffer.length) {
              temp = yy_old_buffer;
              yy_old_buffer = yy_buffer;
              yy_old_pushbackPos = yy_pushbackPos;
              duplicated_string_length = yy_endRead - yy_startRead;
          }
          System.arraycopy(yy_buffer, yy_startRead,
                  temp, 0,
                  yy_endRead - yy_startRead);
          yy_buffer = temp;

          // translate stored positions
          yy_endRead -= yy_startRead;
          yy_currentPos -= yy_startRead;
          yy_markedPos -= yy_startRead;
          yy_pushbackPos -= yy_startRead;
          yy_startRead = 0;
      }

      // is the buffer big enough?
      if (yy_currentPos >= yy_buffer.length) {
          // if not: blow it up
          char newBuffer[] = new char[yy_currentPos * 2];
          System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
          yy_buffer = newBuffer;
          newBuffer = new char[yy_currentPos * 2];
          System.arraycopy(yy_old_buffer, 0, newBuffer, 0, yy_old_buffer.length);
          System.arraycopy(yy_buffer, duplicated_string_length, newBuffer, yy_old_buffer.length, newBuffer.length - yy_old_buffer.length);
          duplicated_string_length += newBuffer.length - yy_old_buffer.length;
          yy_old_buffer = newBuffer;
      }

      // finally: fill the buffer with new input
      int numRead = yy_reader.read(yy_buffer, yy_endRead,
              yy_buffer.length - yy_endRead);

      if (numRead < 0) {
          return true;
      } else {
          yy_endRead += numRead;
          return false;
      }
  }

