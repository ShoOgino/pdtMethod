	public void apply(ICompletionReporter reporter) throws BadLocationException {
		ICompletionContext context = getContext();

		AbstractCompletionContext abstractContext = (AbstractCompletionContext) context;
		CompletionRequestor requestor = abstractContext
				.getCompletionRequestor();

		String prefix = abstractContext.getPrefix();
		if (prefix.startsWith("$")) {
			return;
		}

		MatchRule matchRule = MatchRule.PREFIX;
		if (requestor.isContextInformationMode()) {
			matchRule = MatchRule.EXACT;
		}

		ISourceModule sourceModule = abstractContext.getSourceModule();

		// find all constants in current class and global scope
		IType enclosingType = null;

		// check whether enclosing element is a method
		try {
			IModelElement enclosingElement = sourceModule
					.getElementAt(abstractContext.getOffset());

			// find the most outer enclosing type if exists
			while (enclosingElement != null
					&& !((enclosingElement instanceof IType) && (enclosingElement
							.getParent() instanceof ISourceModule))) {
				enclosingElement = enclosingElement.getParent();
			}
			if (enclosingElement instanceof IType)
				enclosingType = (IType) enclosingElement;

		} catch (ModelException e) {
			PHPCorePlugin.log(e);
		}

		IDLTKSearchScope scope = null;
		IModelElement[] enclosingTypeConstants = null;
		if (enclosingType != null) {
			scope = BasicSearchEngine.createSearchScope(new IModelElement[] {
					enclosingType.getScriptProject(), enclosingType },
					DLTKLanguageManager.getLanguageToolkit(enclosingType));
		} else {
			scope = getSearchScope(abstractContext);
		}
		enclosingTypeConstants = PhpModelAccess.getDefault().findFields(prefix,
				matchRule, Modifiers.AccConstant, 0, scope, null);

		if (isCaseSensitive()) {
			enclosingTypeConstants = filterByCase(enclosingTypeConstants,
					prefix);
		}
		// workaround for https://bugs.eclipse.org/bugs/show_bug.cgi?id=310383
		enclosingTypeConstants = filterClassConstants(enclosingTypeConstants);
		// workaround end
		SourceRange replaceRange = getReplacementRange(abstractContext);
		for (IModelElement constant : enclosingTypeConstants) {
			reporter.reportField((IField) constant, "", replaceRange, false);
		}

	}

