	private void completeSimpleRef(org.eclipse.dltk.core.ISourceModule module, ModuleDeclaration moduleDeclaration, String prefix, int position) {
		this.setSourceRange(position - prefix.length(), position);
		
		if (prefix.startsWith("$")) { // globals //$NON-NLS-1$
			completeGlobalVar(module, moduleDeclaration, prefix, position);
		} else {
			try {
				SearchEngine engine = new SearchEngine();
				IDLTKSearchScope scope = SearchEngine.createSearchScope(new IModelElement[] { module.getScriptProject() });
				SearchPattern pattern = SearchPattern.createPattern(prefix + "*", IDLTKSearchConstants.DECLARATIONS, IDLTKSearchConstants.DECLARATIONS, SearchPattern.R_PATTERN_MATCH | SearchPattern.R_CAMELCASE_MATCH); //$NON-NLS-1$
	
				engine.search(pattern, new SearchParticipant[] { SearchEngine.getDefaultSearchParticipant() }, scope, new SearchRequestor() {
					
					int relevance = 424242;
	
					public void acceptSearchMatch(SearchMatch match) throws CoreException {
						Object element = match.getElement();
						if (element instanceof IMethod) {
							reportMethod((IMethod) element, RELEVANCE_METHODS);
						} else if (element instanceof IField) {
							reportField((IField) element, relevance--);
						} else if (element instanceof IType) {
							reportType((IType) element, relevance--);
						}
					}
				}, new NullProgressMonitor());
	
			} catch (Exception e) {
				Logger.logException(e);
			}
		}
	}

