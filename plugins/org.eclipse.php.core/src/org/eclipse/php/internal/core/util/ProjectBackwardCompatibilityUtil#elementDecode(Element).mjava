	/*
	 * constructs a build entry from an element
	 */
	private IBuildpathEntry elementDecode(Element element) {

		String entryKindAttr = element.getAttribute(TAG_ENTRY_KIND);
		String pathAttr = element.getAttribute(TAG_PATH);
		String resourceAttr = element.getAttribute(TAG_RESOURCE);

		// exported flag (optional)
		boolean isExported = element.getAttribute(TAG_EXPORTED).equals("true"); //$NON-NLS-1$
		IBuildpathEntry entry = null;
		IPath path = null;
		String variableName = null;

		int entryKind = entryKindFromString(entryKindAttr);
		switch (entryKind) {
		case IBuildpathEntry.BPE_PROJECT:
			path = ResourcesPlugin.getWorkspace().getRoot().getProject(
					resourceAttr).getFullPath();
			if (path != null) {
				entry = DLTKCore.newProjectEntry(path, isExported);
			}
			break;
		case IBuildpathEntry.BPE_LIBRARY:
			if ("var".equalsIgnoreCase(entryKindAttr)) { //$NON-NLS-1$
				variableName = pathAttr;
				if (variableName != null && variableName.length() > 0) {
					String resolvedPath = ""; //$NON-NLS-1$
					Preferences pluginPreferences = PHPCorePlugin.getDefault()
							.getPluginPreferences();
					String pathString = pluginPreferences
							.getString(variableName);
					// try to read from default values
					if (pathString != null) {
						path = IncludePathVariableManager.instance()
								.getIncludePathVariable(pathString);
						// second chance, try to read from old workspace
						// configuration
						if (path == null) {
							path = IncludePathVariableManager.instance()
									.resolveVariablePath(variableName);
						}
					}

					if (path != null) {
						entry = DLTKCore
								.newExtLibraryEntry(EnvironmentPathUtils
										.getFullPath(LocalEnvironment
												.getInstance(), path));
					} else {
						notImportedIncludePathVariableNames.add(variableName);
					}
				}
			} else {
				entry = DLTKCore.newLibraryEntry(new Path(pathAttr)
						.makeAbsolute());
			}
		case IBuildpathEntry.BPE_CONTAINER:
			break;
		case IBuildpathEntry.BPE_SOURCE:
			entry = DLTKCore.newSourceEntry(path);
			break;
		}

		return entry;
	}

