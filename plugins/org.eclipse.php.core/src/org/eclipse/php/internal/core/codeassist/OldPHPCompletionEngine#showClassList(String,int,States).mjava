	protected void showClassList(String prefix, int offset, States state) {
		
		this.setSourceRange(offset - prefix.length(), offset);
		
		int relevanceClass = RELEVANCE_CLASS;

		switch (state) {
			case NEW:
				int mask = CodeAssistUtils.EXCLUDE_INTERFACES;
				if (requestor.isContextInformationMode()) {
					mask |= CodeAssistUtils.EXACT_NAME;
				}
				IType[] types = CodeAssistUtils.getGlobalTypes(sourceModule, prefix, mask);
				IType enclosingClass = null;
				try {
					IModelElement enclosingElement = sourceModule.getElementAt(offset);
					while (enclosingElement instanceof IField) {
						enclosingElement = enclosingElement.getParent();
					}
					if (enclosingElement instanceof IMethod) {
						IModelElement parent = ((IMethod) enclosingElement).getParent();
						if (parent instanceof IType) {
							enclosingClass = (IType) parent;
						}
					}
				} catch (ModelException e) {
					if (DEBUG) {
						e.printStackTrace();
					}
				}

				for (IType type : types) {
					IMethod ctor = null;
					if (requestor.isContextInformationMode()) {
						try {
							for (IMethod method : type.getMethods()) {
								if (method.isConstructor()) {
									ctor = method;
									break;
								}
							}
						} catch (ModelException e) {
							if (DLTKCore.DEBUG_COMPLETION) {
								e.printStackTrace();
							}
						}
					}
					try {
						if (ctor != null) {
							if (!PHPFlags.isPrivate(ctor.getFlags()) || type.equals(enclosingClass)) {
								FakeMethod ctorMethod = new FakeMethod((ModelElement) type, type.getElementName()) {
									public boolean isConstructor() throws ModelException {
										return true;
									}
								};
								ctorMethod.setParameters(ctor.getParameters());
								reportMethod(ctorMethod, relevanceClass--);
							}
						} else {
							int flags = type.getFlags();
							if (!PHPFlags.isInternal(flags)) {
								if (PHPFlags.isNamespace(flags)) {
									reportType(type, relevanceClass--, hasNSSeparatorAtEnd ? EMPTY : NS_SEPARATOR);	
								} else {
									reportType(type, relevanceClass--, hasOpenBraceAtEnd ? EMPTY : BRACKETS_SUFFIX);
								}
							}
						}
					} catch (ModelException e) {
						if (DLTKCore.DEBUG_COMPLETION) {
							e.printStackTrace();
						}
					}
				}
				if (CodeAssistUtils.startsWithIgnoreCase(SELF, prefix)) {
					if (!requestor.isContextInformationMode() || prefix.length() == SELF.length()) {
						// get the class data for "self". In case of null, the self function will not be added
						IType selfClassData = CodeAssistUtils.getSelfClassData(sourceModule, offset);
						if (selfClassData != null) {
							addSelfFunctionToProposals(selfClassData);
						}
					}
				}
				break;
			case INSTANCEOF:
				mask = 0;
				if (requestor.isContextInformationMode()) {
					mask |= CodeAssistUtils.EXACT_NAME;
				}
				IType[] typeElements = CodeAssistUtils.getGlobalTypes(sourceModule, prefix, mask);
				for (IType typeElement : typeElements) {
					try {
						if (!PHPFlags.isInternal(typeElement.getFlags())) {
							reportType(typeElement, relevanceClass--, EMPTY);
						}
					} catch (ModelException e) {
						if (DLTKCore.DEBUG_COMPLETION) {
							e.printStackTrace();
						}
					}
				}
				if (CodeAssistUtils.startsWithIgnoreCase(SELF, prefix)) {
					if (!requestor.isContextInformationMode() || prefix.length() == SELF.length()) {
						// get the class data for "self". In case of null, the self function will not be added
						IType selfClassData = CodeAssistUtils.getSelfClassData(sourceModule, offset);
						if (selfClassData != null) {
							addSelfFunctionToProposals(selfClassData);
						}
					}
				}
				break;
			case CATCH:
				mask = 0;
				if (requestor.isContextInformationMode()) {
					mask |= CodeAssistUtils.EXACT_NAME;
				}
				typeElements = CodeAssistUtils.getGlobalTypes(sourceModule, prefix, mask);
				for (IType typeElement : typeElements) {
					try {
						if (!PHPFlags.isInternal(typeElement.getFlags())) {
							reportType(typeElement, relevanceClass--, EMPTY);
						}
					} catch (ModelException e) {
						if (DLTKCore.DEBUG_COMPLETION) {
							e.printStackTrace();
						}
					}
				}
				break;
			default:
				break;
		}
	}

