	private String internalAddImport(NamespaceDeclaration namespace, String fullTypeName, String alias,
			ImportRewriteContext context) {
		int idx = fullTypeName.lastIndexOf(NamespaceReference.NAMESPACE_SEPARATOR);
		String typeContainerName, typeName;
		if (idx != -1) {
			typeContainerName = fullTypeName.substring(0, idx);
			if (typeContainerName.length() == 0) {
				typeContainerName = ENCLOSING_TYPE_SEPARATOR;
			}
			typeName = fullTypeName.substring(idx + 1);
		} else {
			typeContainerName = ENCLOSING_TYPE_SEPARATOR;
			typeName = fullTypeName;
		}

		if (typeContainerName.length() == 0) {
			if (alias != null) {
				return alias;
			}
			if (fullTypeName.charAt(0) != NamespaceReference.NAMESPACE_SEPARATOR) {
				fullTypeName = NamespaceReference.NAMESPACE_SEPARATOR + fullTypeName;
			}
			return fullTypeName;
		}

		if (context == null)
			context = this.defaultContext;

		if (alias != null) {
			typeName = alias;
			fullTypeName += " as " + alias; //$NON-NLS-1$
		}
		int res = context.findInContext(namespace, typeContainerName, typeName, ImportRewriteContext.KIND_TYPE);
		if (res == ImportRewriteContext.RES_NAME_CONFLICT) {
			if (alias != null) {
				return alias;
			}
			if (fullTypeName.charAt(0) != NamespaceReference.NAMESPACE_SEPARATOR) {
				fullTypeName = NamespaceReference.NAMESPACE_SEPARATOR + fullTypeName;
			}
			return fullTypeName;
		}
		if (res == ImportRewriteContext.RES_NAME_UNKNOWN) {
			addEntry(namespace, NORMAL_PREFIX + fullTypeName);
		}
		return typeName;
	}

