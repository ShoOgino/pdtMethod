	/*
	 * Returns whether the given file name equals to the given string ignoring
	 * the java like extension of the file name. Returns false if it is not a
	 * java like file name.
	 */
	/*
	 * public static boolean equalsIgnoreJavaLikeExtension(String fileName,
	 * String string) { int fileNameLength = fileName.length(); int stringLength
	 * = string.length(); if (fileNameLength < stringLength) return false; for
	 * (int i = 0; i < stringLength; i ++) { if (fileName.charAt(i) !=
	 * string.charAt(i)) { return false; } } char[][] javaLikeExtensions =
	 * getJavaLikeExtensions(); suffixes: for (int i = 0, length =
	 * javaLikeExtensions.length; i < length; i++) { char[] suffix =
	 * javaLikeExtensions[i]; int extensionStart = stringLength+1; if
	 * (extensionStart + suffix.length != fileNameLength) continue; if
	 * (fileName.charAt(stringLength) != '.') continue; for (int j =
	 * extensionStart; j < fileNameLength; j++) { if (fileName.charAt(j) !=
	 * suffix[j-extensionStart]) continue suffixes; } return true; } return
	 * false; }
	 */
	/**
	 * Given a qualified name, extract the last component. If the input is not
	 * qualified, the same string is answered.
	 */
	public static String extractLastName(String qualifiedName) {
		int i = qualifiedName.lastIndexOf('.');
		if (i == -1)
			return qualifiedName;
		return qualifiedName.substring(i + 1);
	}

