	/**
	 * getting an instance and finding its type.
	 */
	private String innerGetClassName(PHPProjectModel projectModel, PHPFileData fileData, TextSequence statementText, int propertyEndPosition, boolean isClassTriger, int offset, int line) {
		if (fileData == null) {
			return null;
		}
		int classNameStart = PHPTextSequenceUtilities.readIdentifierStartIndex(statementText, propertyEndPosition, true);
		String className = statementText.subSequence(classNameStart, propertyEndPosition).toString();
		if (isClassTriger) {
			if (className.equals("self")) { //$NON-NLS-1$
				PHPClassData classData = PHPFileDataUtilities.getContainerClassDada(fileData, offset - 6); // the
				// offset
				// before
				// self::
				if (classData != null) {
					return classData.getName();
				}
			} else if (className.equals("parent")) { //$NON-NLS-1$
				PHPClassData classData = PHPFileDataUtilities.getContainerClassDada(fileData, offset - 8); // the
				// offset
				// before
				// parent::
				if (classData != null) {
					return projectModel.getSuperClassName(fileData.getName(), classData.getName());
				}
			}
			return className;
		}
		// if its object call calc the object type.
		if (className.length() > 0 && className.charAt(0) == '$') {
			// set the new statement start location as the original (absolute) one
			int statementStart = statementText.getOriginalOffset(0);
			return PHPFileDataUtilities.getVariableType(fileData, className, statementStart, line, projectModel, true);
		}
		// if its function call calc the return type.
		if (statementText.charAt(propertyEndPosition - 1) == ')') {
			int functionNameEnd = getFunctionNameEndOffset(statementText, propertyEndPosition - 1);
			int functionNameStart = PHPTextSequenceUtilities.readIdentifierStartIndex(statementText, functionNameEnd, false);

			String functionName = statementText.subSequence(functionNameStart, functionNameEnd).toString();
			PHPClassData classData = PHPFileDataUtilities.getContainerClassDada(fileData, offset);
			if (classData != null) { // if its a clss function
				return getFunctionReturnType(projectModel, fileData, classData.getName(), functionName);
			}
			// if its a non class function
			PHPFunctionData[] functions = fileData.getFunctions();
			for (PHPFunctionData function : functions) {
				if (function.getName().equals(functionName)) {
					return function.getReturnType();
				}
			}
		}
		return null;
	}

