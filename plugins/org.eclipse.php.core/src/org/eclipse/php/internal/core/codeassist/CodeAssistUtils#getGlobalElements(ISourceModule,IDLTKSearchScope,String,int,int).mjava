	/**
	 * This method searches in the project scope for all elements of specified type that match the given prefix.
	 * If the project doesn't exist, workspace scope is used.
	 * 
	 * @param sourceModule Current file
	 * @param scope Search scope
	 * @param prefix Element name or prefix
	 * @param elementType Element type from {@link IDLTKSearchConstants}
	 * @return
	 */
	private static IModelElement[] getGlobalElements(final ISourceModule sourceModule, final IDLTKSearchScope scope, String prefix, final int elementType, final int mask) {

		IDLTKLanguageToolkit toolkit = PHPLanguageToolkit.getDefault();
		SearchEngine searchEngine = new SearchEngine();

		boolean exactName = (mask & EXACT_NAME) != 0;
		boolean caseSensitive = (mask & CASE_SENSITIVE) != 0;
		boolean currentFileOnly = (mask & ONLY_CURRENT_FILE) != 0;

		int matchRule;
		if (prefix.length() == 0 && !exactName) {
			prefix = WILDCARD;
			matchRule = SearchPattern.R_PATTERN_MATCH;
			if (caseSensitive) {
				matchRule |= SearchPattern.R_CASE_SENSITIVE;
			}
		} else {
			if (caseSensitive) {
				matchRule = exactName ? SearchPattern.R_EXACT_MATCH : SearchPattern.R_PREFIX_MATCH;
				matchRule |= SearchPattern.R_CASE_SENSITIVE;
			} else {
				matchRule = exactName ? SearchPattern.R_EXACT_MATCH : SearchPattern.R_CAMELCASE_MATCH | SearchPattern.R_PREFIX_MATCH;
			}
		}

		boolean showGroupOptions = Platform.getPreferencesService().getBoolean(PHPCorePlugin.ID, PHPCoreConstants.CODEASSIST_GROUP_OPTIONS, false, null);
		if (!exactName && !currentFileOnly && showGroupOptions && !prefix.startsWith("$") && (elementType == IDLTKSearchConstants.TYPE || elementType == IDLTKSearchConstants.METHOD)) {
			return getGroupOptions(sourceModule, prefix, elementType, mask, matchRule, scope);
		}

		SearchPattern pattern = SearchPattern.createPattern(prefix, elementType, IDLTKSearchConstants.DECLARATIONS, matchRule, toolkit);

		final Set<IModelElement> elements = new TreeSet<IModelElement>(new AlphabeticComparator(sourceModule));
		if (pattern != null) {
			try {
				if (elementType == IDLTKSearchConstants.TYPE) {
					elements.addAll(Arrays.asList(PHPTypeInferenceUtils.getTypes(prefix, pattern.getMatchRule(), scope)));
				} else if (elementType == IDLTKSearchConstants.METHOD) {
					elements.addAll(Arrays.asList(PHPTypeInferenceUtils.getFunctions(prefix, pattern.getMatchRule(), scope)));
				} else {
					if ((mask & EXCLUDE_CONSTANTS) == 0 && (mask & ONLY_CURRENT_FILE) == 0 && !prefix.startsWith(DOLLAR)) {
						// workaround for fast searching global constants:
						MixinModel mixinModel = PHPMixinModel.getInstance(sourceModule.getScriptProject()).getRawModel();
						if (!prefix.endsWith(WILDCARD)) {
							prefix += WILDCARD;
						}
						String[] keys = mixinModel.findKeys(MixinModel.SEPARATOR + prefix + PHPMixinParser.CONSTANT_SUFFIX);
						for (String key : keys) {
							String name = key.substring(1, key.indexOf(PHPMixinParser.CONSTANT_SUFFIX));
							elements.add(new FakeField((ModelElement) sourceModule, name, Modifiers.AccConstant));
						}
					} else {
						searchEngine.search(pattern, new SearchParticipant[] { SearchEngine.getDefaultSearchParticipant() }, scope, new SearchRequestor() {
							public void acceptSearchMatch(SearchMatch match) throws CoreException {

								IModelElement element = (IModelElement) match.getElement();
								// sometimes method reference is found instead of declaration (seems to be a bug in search engine):
								if (!(element instanceof IField)) {
									return;
								}
								try {
									int flags = ((IField) element).getFlags();
									if (((mask & EXCLUDE_CONSTANTS) != 0 && PHPFlags.isConstant(flags)) || ((mask & EXCLUDE_VARIABLES) != 0 && !PHPFlags.isConstant(flags))) {
										return;
									}
								} catch (ModelException e) {
									if (DLTKCore.DEBUG_COMPLETION) {
										e.printStackTrace();
									}
								}

								IModelElement parent = element.getParent();
								if (parent instanceof IType && !PHPFlags.isNamespace(((IType) parent).getFlags())) {
									return; // The element is a class/interface member
								}
								if (parent instanceof IMethod) {
									return; // The element is a local function variable
								}
								elements.add(element);
							}
						}, null);
					}
				}
			} catch (CoreException e) {
				if (DLTKCore.DEBUG_COMPLETION) {
					e.printStackTrace();
				}
			}
		}

		if (!currentFileOnly) {
			Collection<IModelElement> result = PHPModelUtils.filterElements(sourceModule, elements);
			return (IModelElement[]) result.toArray(new IModelElement[result.size()]);
		}
		return elements.toArray(new IModelElement[elements.size()]);
	}

