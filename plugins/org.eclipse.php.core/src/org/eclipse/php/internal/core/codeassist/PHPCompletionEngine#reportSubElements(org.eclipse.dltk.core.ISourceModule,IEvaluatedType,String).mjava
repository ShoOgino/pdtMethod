	private void reportSubElements(org.eclipse.dltk.core.ISourceModule module, IEvaluatedType type, String prefix) {
		int relevance = 424242;

		List<IType> types = new LinkedList<IType>();
		List<IMethod> methods = new LinkedList<IMethod>();
		List<IField> fields = new LinkedList<IField>();

		if (type instanceof PHPClassType) {
			PHPClassType rubyClassType = (PHPClassType) type;
			IMixinElement mixinElement = model.get(rubyClassType.getModelKey());
			if (mixinElement != null) {
				IMixinElement[] children = mixinElement.getChildren();
				for (int i = 0; i < children.length; i++) {
					Object[] infos = children[i].getAllObjects();
					for (int j = 0; j < infos.length; j++) {
						PHPMixinElementInfo obj = (PHPMixinElementInfo) infos[j];
						if (obj.getObject() == null) {
							continue;
						}
						if (obj.getKind() == PHPMixinElementInfo.K_CLASS) {
							IType type2 = (IType) obj.getObject();
							if (type2 != null && type2.getElementName().startsWith(prefix)) {
								// reportType(type2, relevance--);
								types.add(type2);
							}
						} else if (obj.getKind() == PHPMixinElementInfo.K_METHOD) {
							IMethod method2 = (IMethod) obj.getObject();
							if (method2 != null && method2.getElementName().startsWith(prefix)) {
								// reportMethod(method2, relevance--);
								methods.add(method2);
							}
						} else if (obj.getKind() == PHPMixinElementInfo.K_VARIABLE || obj.getKind() == PHPMixinElementInfo.K_CONSTANT) {
							IField fff = (IField) obj.getObject();
							if (fff != null && fff.getElementName().startsWith(prefix)) {
								// reportField(fff, relevance--);
								fields.add(fff);
							}
						}
						break;
					}
				}
			}
		} else {
			// never should be here
		}

		Collections.sort(fields, modelElementComparator);
		for (IField t : fields) {
			reportField(t, relevance--);
		}

		Collections.sort(types, modelElementComparator);
		for (IType t : types) {
			reportType(t, relevance--);
		}

		Collections.sort(methods, modelElementComparator);
		for (IMethod t : methods) {
			reportMethod(t, relevance--);
		}

	}

