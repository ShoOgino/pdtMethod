	/**
	 * Leaves most 'suitable' for current source module elements
	 * @param sourceModule
	 * @param elements
	 * @return
	 */
	public static IModelElement[] filterElements(ISourceModule sourceModule, IModelElement[] elements) {
		if (elements == null) {
			return null;
		}
		
		// Determine whether givent elements represent the same type and name,
		// but declared in different files (determine filtering purpose):
		int elementType = 0;
		String elementName = null;
		boolean fileNetworkFilter = true;
		for (IModelElement element : elements) {
			if (elementName == null) {
				elementType = element.getElementType();
				elementName = element.getElementName();
				continue;
			}
			if (!elementName.equals(element.getElementName()) || elementType != element.getElementType()) {
				fileNetworkFilter = false;
				break;
			}
		}
		
		if (fileNetworkFilter) {
			return fileNetworkFilter(sourceModule, elements);
		}
		// prefer elements from current module:
		List<IModelElement> fromThisModule = new LinkedList<IModelElement>();
		for (IModelElement element : elements) {
			if (((ModelElement) element).getSourceModule().equals(sourceModule)) {
				fromThisModule.add(element);
			}
		}
		if (fromThisModule.size() > 0) {
			return fromThisModule.toArray(new IModelElement[fromThisModule.size()]);
		}
		return elements;
	}

