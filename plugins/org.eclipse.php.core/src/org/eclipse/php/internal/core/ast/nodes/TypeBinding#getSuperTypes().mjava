	protected IType[] getSuperTypes() {
		if (superTypes == null) {
			if (elements != null && elements.length > 0) {
				IDLTKSearchScope scope = SearchEngine
						.createSearchScope(elements[0].getScriptProject());

				Set<String> superTypeNames = new HashSet<String>();
				for (IModelElement element : elements) {
					IType type = (IType) element;
					try {
						String[] superClassNames = type.getSuperClasses();
						if (superClassNames != null) {
							for (String name : superClassNames) {
								if (!superTypeNames.contains(name)) {
									superTypeNames.add(name);
								}
							}
						}
					} catch (CoreException e) {
						if (DLTKCore.DEBUG) {
							e.printStackTrace();
						}
					}
				}
				List<IType> typeList = new ArrayList<IType>();
				List<IModelElement> elementList = Arrays.asList(elements);
				for (String superTypeName : superTypeNames) {
					try {
						ISourceModule sourceModule = (ISourceModule) elements[0]
								.getAncestor(IModelElement.SOURCE_MODULE);

						String typeName = PHPModelUtils
								.extractElementName(superTypeName);
						String nameSpace = PHPModelUtils
								.extractNameSpaceName(superTypeName);
						Collection<IType> types = resolver
								.getModelAccessCache()
								.getClassesOrInterfaces(sourceModule, typeName,
										nameSpace, null);
						if (types != null) {
							for (IType type : types) {
								if (!elementList.contains(type)) {
									typeList.add(type);
								}
							}
						}
					} catch (ModelException e) {
						if (DLTKCore.DEBUG) {
							e.printStackTrace();
						}
					}
				}
				if (typeList.size() > 0) {
					superTypes = typeList.toArray(new IType[typeList.size()]);
				} else {
					superTypes = new IType[0];
				}
			} else {
				superTypes = new IType[0];
			}
		}
		return superTypes;
	}

