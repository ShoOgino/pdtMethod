	@Override
	public void apply(ICompletionReporter reporter) throws BadLocationException {
		ICompletionContext context = getContext();
		if (!(context instanceof IClassMemberContext) || !(context instanceof AbstractCompletionContext)) {
			return;
		}

		IClassMemberContext concreteContext = (IClassMemberContext) context;
		AbstractCompletionContext abstractContext = (AbstractCompletionContext) context;

		CompletionRequestor requestor = abstractContext.getCompletionRequestor();

		String prefix = abstractContext.getPrefix().isEmpty() ? abstractContext.getPreviousWord()
				: abstractContext.getPrefix();
		boolean isParentCall = isParentCall(concreteContext);
		String suffix = getSuffix(abstractContext);

		ISourceRange replaceRange = null;
		if (suffix.equals("")) { //$NON-NLS-1$
			replaceRange = getReplacementRange(concreteContext);
		} else {
			replaceRange = getReplacementRangeWithBraces(concreteContext);
		}

		PHPVersion phpVersion = getCompanion().getPHPVersion();
		Set<String> magicMethods = new HashSet<>();
		magicMethods.addAll(Arrays.asList(PHPMagicMethods.getMethods(phpVersion)));

		boolean exactName = requestor.isContextInformationMode();
		// for methodName(|),we need set exactName to true
		if (!exactName && getCompanion().getOffset() - 1 >= 0
				&& getCompanion().getDocument().getChar(getCompanion().getOffset() - 1) == '(') {
			exactName = true;
		}
		for (IType type : concreteContext.getLhsTypes()) {
			try {
				ITypeHierarchy hierarchy = getCompanion().getSuperTypeHierarchy(type, null);

				IMethod[] methods = isParentCall
						? PHPModelUtils.getSuperTypeHierarchyMethod(type, hierarchy, prefix, exactName, null)
						: PHPModelUtils.getTypeHierarchyMethod(type, hierarchy, prefix, exactName, null);

				boolean inConstructor = isInConstructor(type, type.getMethods(), concreteContext);
				for (IMethod method : removeOverriddenElements(Arrays.asList(methods))) {
					reportMethod(method, type, concreteContext, inConstructor, magicMethods, suffix, replaceRange,
							reporter);
				}
			} catch (CoreException e) {
				PHPCorePlugin.log(e);
			}
		}

	}

