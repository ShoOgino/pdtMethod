	public void apply(ICompletionReporter reporter) throws BadLocationException {
		ICompletionContext context = getContext();
		if (!(context instanceof ClassMemberContext)) {
			return;
		}

		ClassMemberContext concreteContext = (ClassMemberContext) context;
		CompletionRequestor requestor = concreteContext
				.getCompletionRequestor();

		String prefix = concreteContext.getPrefix().isEmpty() ? concreteContext
				.getPreviousWord() : concreteContext.getPrefix();
		boolean isParentCall = isParentCall(concreteContext);
		String suffix = getSuffix(concreteContext);

		ISourceRange replaceRange = null;
		if (suffix.equals("")) { //$NON-NLS-1$
			replaceRange = getReplacementRange(concreteContext);
		} else {
			replaceRange = getReplacementRangeWithBraces(concreteContext);
		}

		PHPVersion phpVersion = concreteContext.getPhpVersion();
		Set<String> magicMethods = new HashSet<String>();
		magicMethods.addAll(Arrays.asList(PHPMagicMethods
				.getMethods(phpVersion)));

		boolean exactName = requestor.isContextInformationMode();
		// for methodName(|),we need set exactName to true
		if (!exactName
				&& concreteContext.getOffset() - 1 >= 0
				&& concreteContext.getDocument().getChar(
						concreteContext.getOffset() - 1) == '(') {
			exactName = true;
		}
		List<IMethod> result = new LinkedList<IMethod>();
		for (IType type : concreteContext.getLhsTypes()) {
			try {
				ITypeHierarchy hierarchy = getCompanion()
						.getSuperTypeHierarchy(type, null);

				IMethod[] methods = isParentCall ? PHPModelUtils
						.getSuperTypeHierarchyMethod(type, hierarchy, prefix,
								exactName, null) : PHPModelUtils
						.getTypeHierarchyMethod(type, hierarchy, prefix,
								exactName, null);

				boolean inConstructor = isInConstructor(type,
						type.getMethods(), concreteContext);
				for (IMethod method : removeOverriddenElements(Arrays
						.asList(methods))) {

					if (concreteContext.isInUseTraitStatement()) {
						// result.add(method);
						reporter.reportMethod((IMethod) method, "", //$NON-NLS-1$
								replaceRange, ProposalExtraInfo.METHOD_ONLY);
					} else if ((!PHPModelUtils.isConstructor(method) || inConstructor
							&& isSuperConstructor(method, type, concreteContext))
							&& !isFiltered(method, type, concreteContext)) {
						if (magicMethods.contains(method.getElementName())) {
							reporter.reportMethod(method, suffix, replaceRange,
									ProposalExtraInfo.MAGIC_METHOD);
						} else {
							result.add(method);
						}
					}
				}
			} catch (CoreException e) {
				PHPCorePlugin.log(e);
			}
		}
		for (IMethod method : result) {
			reporter.reportMethod((IMethod) method, suffix, replaceRange);
		}
	}

