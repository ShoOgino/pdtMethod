	private int getMultilineInsideBraceless(int checkedOffset) {
		try {
			PHPHeuristicScanner scanner = PHPHeuristicScanner
					.createHeuristicScanner(document, checkedOffset - 1, true);
			int start = scanner.previousToken(checkedOffset - 1,
					PHPHeuristicScanner.UNBOUND);
			if (!(start == PHPHeuristicScanner.TokenRBRACE))
				return -1;

			int openingPeer = scanner.findOpeningPeer(scanner.getPosition(),
					PHPHeuristicScanner.UNBOUND, PHPHeuristicScanner.LBRACE,
					PHPHeuristicScanner.RBRACE);
			if (openingPeer == PHPHeuristicScanner.NOT_FOUND) {
				return -1;
			}
			int prev = scanner.previousToken(openingPeer - 1,
					PHPHeuristicScanner.UNBOUND);
			if (prev == PHPHeuristicScanner.TokenRPAREN) {
				int openParent = scanner.findOpeningPeer(scanner.getPosition(),
						PHPHeuristicScanner.UNBOUND,
						PHPHeuristicScanner.LPAREN, PHPHeuristicScanner.RPAREN);
				if (openParent == PHPHeuristicScanner.NOT_FOUND) {
					return -1;
				}
				prev = scanner.previousToken(openParent - 1,
						PHPHeuristicScanner.UNBOUND);
			}
			if (!IndentationUtils.inBracelessBlock(scanner, document,
					scanner.getPosition() - 1)) {
				return -1;
			}

			// move to first from braceless
			prev = scanner.previousToken(scanner.getPosition() - 1,
					PHPHeuristicScanner.UNBOUND);

			// we inside braceless block. Now we have to move before it
			if (prev == PHPHeuristicScanner.TokenRPAREN) {
				// if, for, while or similar
				int openParent = scanner.findOpeningPeer(scanner.getPosition(),
						PHPHeuristicScanner.UNBOUND,
						PHPHeuristicScanner.LPAREN, PHPHeuristicScanner.RPAREN);
				if (openParent == PHPHeuristicScanner.NOT_FOUND) {
					return -1;
				}
			}
			prev = scanner.previousToken(scanner.getPosition() - 1,
					PHPHeuristicScanner.UNBOUND);
			int result = scanner.getPosition();
			if (prev == PHPHeuristicScanner.TokenIF) {
				prev = scanner
						.previousToken(start, PHPHeuristicScanner.UNBOUND);
				if (prev == PHPHeuristicScanner.TokenELSE) {
					result = scanner.getPosition();
				}
			}

			return result;

		} catch (BadLocationException e) {
		}

		return -1;
	}

