	/**
	 * Returns cached result of a namespace search, or invokes a new search query
	 * 
	 * @param sourceModule
	 *            Current source module
	 * @param namespaceName
	 *            namespace name
	 * @param monitor
	 *            Progress monitor
	 * @return namespaces collection if found, otherwise <code>null</code>
	 */
	@Override
	public Collection<IType> getNamespaces(ISourceModule sourceModule, String namespaceName, IProgressMonitor monitor) {

		Collection<IType> namespaces;

		if (!this.sourceModule.equals(sourceModule)) {
			// Invoke a new search, since we only cache for the original file in
			// this class:
			IScriptProject scriptProject = sourceModule.getScriptProject();
			IDLTKSearchScope scope = SearchEngine.createSearchScope(scriptProject);
			namespaces = Arrays.asList(PHPModelAccess.getDefault().findNamespaces(null, namespaceName, MatchRule.EXACT,
					0, 0, scope, null));

		} else {
			final String searchFor = namespaceName.toLowerCase();
			if (!allNamespacesCache.containsKey(searchFor)) {
				IScriptProject scriptProject = sourceModule.getScriptProject();
				IDLTKSearchScope scope = SearchEngine.createSearchScope(scriptProject);

				allNamespacesCache.put(searchFor, Arrays.asList(PHPModelAccess.getDefault().findNamespaces(null,
						namespaceName, MatchRule.EXACT, 0, 0, scope, null)));
			}

			namespaces = allNamespacesCache.get(searchFor);
		}
		return namespaces;
	}

