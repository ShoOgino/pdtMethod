	/**
	 * Returns cached result of a type search, or invokes a new search query
	 * 
	 * @param sourceModule
	 *            Current source module
	 * @param typeName
	 *            The name of the type (class, interface or namespace)
	 * @param namespaceName
	 *            namespace name
	 * @param monitor
	 *            Progress monitor
	 * @return a collection of types according to a given name, or <code>null</code>
	 *         if not found
	 */
	@Override
	public Collection<IType> getTypes(ISourceModule sourceModule, String typeName, String namespaceName,
			IProgressMonitor monitor) {

		Collection<IType> types;

		if (!this.sourceModule.equals(sourceModule)) {
			// Invoke a new search, since we only cache for the original file in
			// this class:
			IScriptProject scriptProject = sourceModule.getScriptProject();
			IDLTKSearchScope scope = SearchEngine.createSearchScope(scriptProject);
			types = Arrays.asList(
					PHPModelAccess.getDefault().findTypes(namespaceName, typeName, MatchRule.EXACT, 0, 0, scope, null));

		} else {
			typeName = typeName.toLowerCase();

			// if the namespace is not blank, append it to the key.
			final StringBuilder key = new StringBuilder();

			if (namespaceName != null && StringUtils.isNotBlank(namespaceName)) {
				String nameSpace = namespaceName;
				if (namespaceName.startsWith("\\") //$NON-NLS-1$
						|| namespaceName.startsWith("/")) { //$NON-NLS-1$
					nameSpace = namespaceName.substring(1);
				}
				if (nameSpace.length() > 0) {
					key.append(nameSpace.toLowerCase()).append("$"); //$NON-NLS-1$
				}
			}
			key.append(typeName);
			final String searchFor = key.toString();
			if (!allTypesCache.containsKey(searchFor)) {
				IScriptProject scriptProject = sourceModule.getScriptProject();
				IDLTKSearchScope scope = SearchEngine.createSearchScope(scriptProject);

				allTypesCache.put(searchFor, Arrays.asList(PHPModelAccess.getDefault().findTypes(namespaceName,
						typeName, MatchRule.EXACT, 0, 0, scope, null)));
			}

			types = allTypesCache.get(searchFor);
		}
		return filterSameModelElements(sourceModule, types, monitor);
	}

