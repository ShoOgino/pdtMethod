	/**
	 * Returns cached result of a type search, or invokes a new search query
	 * 
	 * @param sourceModule
	 *            Current source module
	 * @param typeName
	 *            The name of the type (class, interface or namespace)
	 * @param monitor
	 *            Progress monitor
	 * @return a collection of types according to a given name, or
	 *         <code>null</code> if not found
	 */
	public Collection<IType> getTypes(ISourceModule sourceModule,
			String typeName, String namespaceName, IProgressMonitor monitor) {

		Collection<IType> types;

		if (!this.sourceModule.equals(sourceModule)) {
			// Invoke a new search, since we only cache for the original file in
			// this class:
			IScriptProject scriptProject = sourceModule.getScriptProject();
			IDLTKSearchScope scope = SearchEngine
					.createSearchScope(scriptProject);
			types = Arrays.asList(PhpModelAccess.getDefault()
					.findTypes(namespaceName, typeName, MatchRule.EXACT, 0, 0,
							scope, null));

		} else {
			typeName = typeName.toLowerCase();

			if (allTypesCache == null) {
				allTypesCache = Collections
						.synchronizedMap(new HashMap<String, Collection<IType>>());

				IScriptProject scriptProject = sourceModule.getScriptProject();
				IDLTKSearchScope scope = SearchEngine
						.createSearchScope(scriptProject);

				IType[] allTypes = PhpModelAccess.getDefault().findTypes(null,
						MatchRule.PREFIX, 0, 0, scope, null);
				for (IType type : allTypes) {
					String elementName = type.getTypeQualifiedName()
							.toLowerCase();
					Collection<IType> typesList;
					typesList = allTypesCache.get(elementName);
					if (typesList == null) {
						typesList = new LinkedList<IType>();
						allTypesCache.put(elementName, typesList);
					}
					typesList.add(type);
				}
			}

			// if the namespace is not blank, append it to the key.
			StringBuffer key = new StringBuffer();
			if (namespaceName != null && !"".equals(namespaceName.trim())) {
				String nameSpace = namespaceName;
				if (namespaceName.startsWith("\\")
						|| namespaceName.startsWith("/")) {
					nameSpace = namespaceName.substring(1);
				}
				if (nameSpace.length() > 0) {
					key.append(nameSpace.toLowerCase()).append("$");
				}
			}
			key.append(typeName);

			types = allTypesCache.get(key.toString());
		}
		return filterElements(sourceModule, types, monitor);
	}

