	/**
	 * Creates evaluated type according name and namespace.
	 * 
	 * @param typeName
	 * @param currentNamespace
	 * @return evaluated type
	 */
	@NonNull
	public static IEvaluatedType getEvaluatedType(@NonNull String typeName, @Nullable IType currentNamespace) {
		if (typeName.indexOf(NamespaceReference.NAMESPACE_SEPARATOR) > 0 && currentNamespace != null) {
			typeName = NamespaceReference.NAMESPACE_SEPARATOR + currentNamespace.getElementName()
					+ NamespaceReference.NAMESPACE_SEPARATOR + typeName;
		}
		if (typeName.indexOf(NamespaceReference.NAMESPACE_SEPARATOR) != -1 || currentNamespace == null) {
			return new PHPClassType(typeName);
		} else {
			return new PHPClassType(currentNamespace.getElementName(), typeName);
		}
	}

