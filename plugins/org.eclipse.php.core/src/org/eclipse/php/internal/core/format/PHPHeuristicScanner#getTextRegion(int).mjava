	public ITextRegion getTextRegion(int position) {
		Assert.isTrue(position >= 0);
		Assert.isTrue(position <= fDocument.getLength());
		try {
			// If we have a structured document - extract the text region from
			// the document and classify it
			if (fDocument instanceof BasicStructuredDocument) {
				IStructuredDocumentRegion sdRegion = ((BasicStructuredDocument) fDocument)
						.getRegionAtCharacterOffset(position);
				if (sdRegion != null) {
					ITextRegion textRegion = sdRegion.getRegionAtCharacterOffset(position);
					int startRegion = sdRegion.getStartOffset();
					// in case of container we have to extract the
					// PhpScriptRegion
					if (textRegion instanceof ITextRegionContainer) {
						ITextRegionContainer container = (ITextRegionContainer) textRegion;
						startRegion += container.getStart();
						textRegion = container.getRegionAtCharacterOffset(position);
					}
					if (textRegion instanceof IPHPScriptRegion) {
						IPHPScriptRegion phpScriptRegion = (IPHPScriptRegion) textRegion;
						startRegion += phpScriptRegion.getStart();
						textRegion = phpScriptRegion.getPHPToken(position - startRegion);
						return textRegion;
					}
				}
			}

			return null;
		} catch (BadLocationException e) {
			return null; // $NON-NLS-1$
		}

	}

