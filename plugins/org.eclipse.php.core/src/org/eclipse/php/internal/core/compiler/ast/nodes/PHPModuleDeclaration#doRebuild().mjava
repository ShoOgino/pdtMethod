	/**
	 * This method goes over the AST and builds a list of types and methods declared in this file
	 */
	@SuppressWarnings("unchecked")
	public void doRebuild() {
		List statements = getStatements();
		if (statements != null) {
			Iterator i = statements.iterator();
			while (i.hasNext()) {
				final ASTNode node = (ASTNode) i.next();
				try {
					node.traverse(new ASTVisitor() {
						private Stack<ASTNode> parentStack = new Stack<ASTNode>();
						
						public boolean visit(MethodDeclaration s) throws Exception {
							if (s != node && (parentStack.isEmpty() || !(parentStack.peek() instanceof TypeDeclaration))) {
								getFunctionList().add(s);
							}
							return super.visit(s);
						}

						public boolean visit(TypeDeclaration s) throws Exception {
							parentStack.add(s);
							if (s != node) {
								getTypeList().add(s);
							}
							return super.visit(s);
						}
						
						public boolean endvisit(TypeDeclaration s) throws Exception {
							parentStack.pop();
							return super.endvisit(s);
						}
					});
				} catch (Exception e) {
					if (DLTKCore.DEBUG) {
						e.printStackTrace();
					}
				}
			}
		}
	}

