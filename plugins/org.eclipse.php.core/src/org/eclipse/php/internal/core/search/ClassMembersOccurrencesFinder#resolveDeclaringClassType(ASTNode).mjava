	/*
	 * Resolve the class declaration type for the given node. This method
	 * traverse upward to find a defining ClassDeclaration and then resolves its
	 * IType.
	 */
	protected ITypeBinding resolveDeclaringClassType(ASTNode node) {
		IType[] types = new IType[2];
		ASTNode parent = node.getParent();
		TypeDeclaration typeDeclaration = null;
		NamespaceDeclaration namespaceDeclaration = null;
		while (typeDeclaration == null && parent != null) {
			if (parent.getType() == ASTNode.CLASS_DECLARATION
					|| parent.getType() == ASTNode.INTERFACE_DECLARATION) {
				typeDeclaration = (TypeDeclaration) parent;
			}
			parent = parent.getParent();
		}
		while (namespaceDeclaration == null && parent != null) {
			if (parent.getType() == ASTNode.NAMESPACE) {
				namespaceDeclaration = (NamespaceDeclaration) parent;
			}
			parent = parent.getParent();
		}
		if (typeDeclaration != null) {
			if (namespaceDeclaration != null
					&& namespaceDeclaration.getName() != null) {
				final ISourceModule source = namespaceDeclaration
						.getProgramRoot().getSourceModule();
				types[0] = source != null ? source.getType(namespaceDeclaration
						.getName().getName()) : null;
			}
			ITypeBinding typeBinding = typeDeclaration.resolveTypeBinding();
			if (typeBinding != null) {
				return typeBinding;
			}
		}
		return null;
	}

