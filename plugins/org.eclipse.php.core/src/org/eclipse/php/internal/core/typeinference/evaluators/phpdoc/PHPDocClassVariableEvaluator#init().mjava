	public IGoal[] init() {
		PHPDocClassVariableGoal typedGoal = (PHPDocClassVariableGoal) goal;
		TypeContext context = (TypeContext) typedGoal.getContext();
		String variableName = typedGoal.getVariableName();
		int offset = typedGoal.getOffset();

		IModelAccessCache cache = context.getCache();
		IType[] types = PHPTypeInferenceUtils.getModelElements(
				context.getInstanceType(), context, offset, cache);
		Map<PHPDocBlock, IField> docs = new HashMap<PHPDocBlock, IField>();
		boolean lookOnlyForArrayTypes = false;
		if (types != null) {
			// remove array index from field name
			if (variableName.endsWith("]")) { //$NON-NLS-1$
				int index = variableName.indexOf("["); //$NON-NLS-1$
				if (index != -1) {
					variableName = variableName.substring(0, index);
					lookOnlyForArrayTypes = true;
				}
			}
			for (IType type : types) {
				try {
					// we look in whole hiearchy
					ITypeHierarchy superHierarchy;
					if (cache != null) {
						superHierarchy = cache
								.getSuperTypeHierarchy(type, null);
					} else {
						superHierarchy = type.newSupertypeHierarchy(null);
					}
					IType[] superTypes = superHierarchy.getAllTypes();
					for (IType superType : superTypes) {
						IField[] typeField = PHPModelUtils.getTypeField(
								superType, variableName, true);
						if (typeField.length > 0) {
							PHPDocBlock docBlock = PHPModelUtils
									.getDocBlock(typeField[0]);
							if (docBlock != null) {
								docs.put(docBlock, typeField[0]);
							}
						}
					}
				} catch (ModelException e) {
					if (DLTKCore.DEBUG) {
						e.printStackTrace();
					}
				}
			}
		}

		// check if is in ForEach statement
		if (!lookOnlyForArrayTypes) {
			int start = offset + variableName.length();
			int end = offset + variableName.length() + 1;
			ASTNode node = ASTUtils.findMinimalNode(context.getRootNode(),
					start, end);
			if (node instanceof ForEachStatement) {
				lookOnlyForArrayTypes = true;
			}
		}

		List<IEvaluatedType> arrayEvaluated = new LinkedList<IEvaluatedType>();

		for (Entry<PHPDocBlock, IField> entry : docs.entrySet()) {
			PHPDocBlock doc = entry.getKey();
			IField typeField = entry.getValue();
			IType currentNamespace = PHPModelUtils
					.getCurrentNamespace(typeField);

			for (PHPDocTag tag : doc.getTags()) {
				if (tag.getTagKind() == PHPDocTag.VAR) {
					SimpleReference[] references = tag.getReferences();
					for (SimpleReference ref : references) {
						String typeName = ref.getName();

						IEvaluatedType evaluatedType = PHPEvaluationUtils
								.extractArrayType(typeName, currentNamespace,
										tag.sourceStart());
						if (evaluatedType != null) {
							arrayEvaluated.add(evaluatedType);
						} else {
							if (currentNamespace != null) {
								if (typeName.indexOf(SPLASH) > 0) {
									// check if the first part is an
									// alias,then get the full name
									String prefix = typeName.substring(0,
											typeName.indexOf(SPLASH));
									final Map<String, UsePart> result = PHPModelUtils
											.getAliasToNSMap(prefix,
													context.getRootNode(),
													doc.sourceStart(),
													currentNamespace, true);
									if (result.containsKey(prefix)) {
										String fullName = result.get(prefix)
												.getNamespace()
												.getFullyQualifiedName();
										typeName = typeName.replace(prefix,
												fullName);
										if (typeName.charAt(0) != NamespaceReference.NAMESPACE_SEPARATOR) {
											typeName = NamespaceReference.NAMESPACE_SEPARATOR
													+ typeName;
										}
									}
								} else if (typeName.indexOf(SPLASH) < 0) {
									String prefix = typeName;
									final Map<String, UsePart> result = PHPModelUtils
											.getAliasToNSMap(prefix,
													context.getRootNode(),
													doc.sourceStart(),
													currentNamespace, true);
									if (result.containsKey(prefix)) {
										String fullName = result.get(prefix)
												.getNamespace()
												.getFullyQualifiedName();
										typeName = fullName;
										if (typeName.charAt(0) != NamespaceReference.NAMESPACE_SEPARATOR) {
											typeName = NamespaceReference.NAMESPACE_SEPARATOR
													+ typeName;
										}
									}
								}
							}
							IEvaluatedType type = PHPEvaluationUtils
									.getEvaluatedType(typeName,
											currentNamespace);
							if (type != null) {
								evaluated.add(type);
							}
						}
					}
				}
			}
		}

		if (variableName.startsWith("$")) { //$NON-NLS-1$
			if (lookOnlyForArrayTypes) {
				evaluated = arrayEvaluated;
			}
		} else {
			evaluated.addAll(arrayEvaluated);
		}

		return IGoal.NO_GOALS;
	}

