	/**
	 * Prelude portion of the "3 step program" for replacing the old child of
	 * this node with another node. Here is the code pattern found in all AST
	 * node subclasses:
	 * 
	 * <pre>
	 * ASTNode oldChild = this.foo;
	 * preReplaceChild(oldChild, newFoo, FOO_PROPERTY);
	 * this.foo = newFoo;
	 * postReplaceChild(oldChild, newFoo, FOO_PROPERTY);
	 * </pre>
	 * 
	 * The first part (preReplaceChild) does all the precondition checks,
	 * reports pre-delete events, and changes parent links. The old child is
	 * delinked from its parent (making it a root node), and the new child node
	 * is linked to its parent. The new child node must be a root node in the
	 * same AST as its new parent, and must not be an ancestor of this node. All
	 * three nodes must be modifiable (not PROTECTED). The replace operation
	 * must fail atomically; so it is crucial that all precondition checks be
	 * done before any linking and delinking happens. The final part
	 * (postReplaceChild )reports post-add events.
	 * <p>
	 * This method calls <code>ast.modifying()</code> for the nodes affected.
	 * </p>
	 * 
	 * @param oldChild
	 *            the old child of this node, or <code>null</code> if there was
	 *            no old child to replace
	 * @param newChild
	 *            the new child of this node, or <code>null</code> if there is
	 *            no replacement child
	 * @param property
	 *            the property descriptor of this node describing the
	 *            relationship between node and child
	 * @exception RuntimeException
	 *                if:
	 *                <ul>
	 *                <li>the node belongs to a different AST</li>
	 *                <li>the node already has a parent</li>
	 *                <li>a cycle in would be created</li>
	 *                <li>any of the nodes involved are unmodifiable</li>
	 *                </ul>
	 */
	final void preReplaceChild(ASTNode oldChild, ASTNode newChild, ChildPropertyDescriptor property) {
		if ((this.flags & PROTECT) != 0) {
			// this node is protected => cannot gain or lose children
			throw new IllegalArgumentException("AST node cannot be modified"); //$NON-NLS-1$
		}
		if (newChild != null) {
			checkNewChild(this, newChild, property.cycleRisk, null);
		}
		// delink old child from parent
		if (oldChild != null) {
			if ((oldChild.flags & PROTECT) != 0) {
				// old child node is protected => cannot be unparented
				throw new IllegalArgumentException("AST node cannot be modified"); //$NON-NLS-1$
			}
			if (newChild != null) {
				this.ast.preReplaceChildEvent(this, oldChild, newChild, property);
			} else {
				this.ast.preRemoveChildEvent(this, oldChild, property);
			}
			oldChild.setParent(null, null);
		} else {
			if (newChild != null) {
				this.ast.preAddChildEvent(this, newChild, property);
			}
		}
		// link new child to parent
		if (newChild != null) {
			newChild.setParent(this, property);
			// cannot notify postAddChildEvent until parent is linked to child
			// too
		}
	}

