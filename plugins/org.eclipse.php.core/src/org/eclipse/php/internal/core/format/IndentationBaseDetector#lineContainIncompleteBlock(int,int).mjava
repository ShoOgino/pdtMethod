	// NB: lineStartOffset can be greater than checkedOffset
	private boolean lineContainIncompleteBlock(int checkedOffset, int lineStartOffset) throws BadLocationException {
		if (checkedOffset == document.getLength() && checkedOffset > 0) {
			checkedOffset--;
		}
		if (textSequenceRegion.getLength() != 0 && IndentationUtils
				.isRegionTypeAllowedMultiline(FormatterUtils.getRegionType(document, textSequenceRegion.getOffset()))) {
			PHPHeuristicScanner scanner = PHPHeuristicScanner.createHeuristicScanner(document, lineStartOffset, true);
			// search for opening pear only in this line
			int statementStart = document.getLineInformationOfOffset(checkedOffset).getOffset();

			int openParenPeer = scanner.findOpeningPeer(checkedOffset - 1, statementStart, PHPHeuristicScanner.LPAREN,
					PHPHeuristicScanner.RPAREN);

			int bound = openParenPeer != -1 ? Math.max(statementStart, openParenPeer) : statementStart;
			int openBracePeer = scanner.findOpeningPeer(checkedOffset - 1, bound, PHPHeuristicScanner.LBRACE,
					PHPHeuristicScanner.RBRACE);

			bound = openBracePeer != -1 || openParenPeer != -1
					? Math.max(statementStart, Math.max(openParenPeer, openBracePeer)) : statementStart;
			int openBracketPeer = scanner.findOpeningPeer(checkedOffset - 1, bound, PHPHeuristicScanner.LBRACKET,
					PHPHeuristicScanner.RBRACKET);

			int biggest = Math.max(openParenPeer, openBracePeer);
			biggest = Math.max(biggest, openBracketPeer);
			if (biggest != PHPHeuristicScanner.NOT_FOUND && biggest >= lineStartOffset) {
				// the whole document
				final IStructuredDocumentRegion sdRegion = document.getRegionAtCharacterOffset(lineStartOffset);
				// the whole PHP script
				ITextRegion phpScriptRegion = sdRegion.getRegionAtCharacterOffset(lineStartOffset);

				if (phpScriptRegion instanceof ITextRegionContainer) {
					ITextRegionContainer container = (ITextRegionContainer) phpScriptRegion;
					phpScriptRegion = container.getRegionAtCharacterOffset(lineStartOffset);
				}

				if (phpScriptRegion instanceof IPhpScriptRegion && lineStartOffset <= phpScriptRegion.getEnd()) {
					IPhpScriptRegion scriptRegion = (IPhpScriptRegion) phpScriptRegion;
					ITextRegion[] tokens = null;
					try {
						tokens = scriptRegion.getPhpTokens(Math.min(lineStartOffset - 1, scriptRegion.getEnd()),
								biggest - lineStartOffset + 1);
					} catch (BadLocationException e) {
						// ignore it, scriptRegion.getEnd() is greater than last
						// phpToken
					}

					if (tokens != null && tokens.length > 0) {
						Set<String> tokenTypeSet = new HashSet<String>();
						for (int i = 0; i < tokens.length; i++) {
							tokenTypeSet.add(tokens[i].getType());
						}
						if (biggest == openParenPeer) {
							if (tokenTypeSet.contains(PHPRegionTypes.PHP_NEW)
									|| tokenTypeSet.contains(PHPRegionTypes.PHP_FUNCTION)
									|| tokenTypeSet.contains(PHPRegionTypes.PHP_ARRAY)) {
								return true;
							}
						} else if (biggest == openBracePeer) {
							if (tokenTypeSet.contains(PHPRegionTypes.PHP_NEW)
									|| tokenTypeSet.contains(PHPRegionTypes.PHP_FUNCTION)) {
								return true;
							}
						} else if (biggest == openBracketPeer && scanner.previousToken(biggest - 1,
								PHPHeuristicScanner.UNBOUND) < PHPHeuristicScanner.TokenIDENT) {
							return true;
						} else {
							if (tokenTypeSet.contains(PHPRegionTypes.PHP_ARRAY)) {
								return true;
							}
						}
					}
				}
			}
		}
		return false;
	}

