	/**
	 * This function returns the line in which the corresponding '{' of the '}' found
	 * 
	 *  TODO this function has a bug in it: if there is a '{' inside inner state then it will not ignore it 
	 *  as it should.
	 */
	protected IRegion getCurlyOpenLineInformation(IStructuredDocument document, int forOffset) throws BadLocationException {
		int offset = forOffset;
		int curlyCount = 0;

		IStructuredDocumentRegion sdRegion = document.getRegionAtCharacterOffset(offset);
		if (sdRegion == null) {
			return null;
		}
		ITextRegion tRegion = sdRegion.getRegionAtCharacterOffset(offset);
		int regionStart = sdRegion.getStartOffset(tRegion);

		// in case of container we have the extract the PhpScriptRegion
		if (tRegion instanceof ITextRegionContainer) {
			ITextRegionContainer container = (ITextRegionContainer) tRegion;
			tRegion = container.getRegionAtCharacterOffset(offset);
			regionStart += tRegion.getStart();
		}

		if (tRegion instanceof PhpScriptRegion) {
			PhpScriptRegion scriptRegion = (PhpScriptRegion) tRegion;
			tRegion = scriptRegion.getPhpToken(offset - regionStart - 1);

			// go backward over the region to find a 'case' or 'default' region
			// in this case is the same indentation
			// other case if look for the '{' of the 'switch' region
			while (tRegion != null) {
				String token = tRegion.getType();
				if (token == PHPRegionTypes.PHP_CURLY_OPEN) {
					curlyCount--;
					if (curlyCount < 0) {
						return document.getLineInformationOfOffset(tRegion.getStart() + regionStart);
					}
				} else if (token == PHPRegionTypes.PHP_CURLY_CLOSE) {
					curlyCount++;
				}
				tRegion = scriptRegion.getPhpToken(tRegion.getStart() - 1);
			}
		}

		return null;

	}

