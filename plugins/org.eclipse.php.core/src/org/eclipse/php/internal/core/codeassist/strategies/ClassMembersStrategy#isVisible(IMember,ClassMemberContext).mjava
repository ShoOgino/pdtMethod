	/**
	 * Returns whether the specified member is visible in current context
	 * @param member
	 * @param context
	 * @return
	 * @throws ModelException
	 */
	protected boolean isVisible(IMember member, ClassMemberContext context) throws ModelException {
		if (isThisCall(context)) {
			return true;
		}
		int flags = member.getFlags();
		if (isParentCall(context)) {
			return !PHPFlags.isInternal(flags) && !PHPFlags.isPrivate(flags);
		}
		return !PHPFlags.isInternal(flags) && !PHPFlags.isPrivate(flags) && !PHPFlags.isProtected(flags);
	}

