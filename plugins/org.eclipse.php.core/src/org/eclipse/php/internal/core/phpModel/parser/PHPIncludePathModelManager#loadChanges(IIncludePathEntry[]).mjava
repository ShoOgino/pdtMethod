	public void loadChanges(IIncludePathEntry[] entries) {
		List<IIncludePathEntry> liberaries = new ArrayList<IIncludePathEntry>();
		List<IIncludePathEntry> containersList = new ArrayList<IIncludePathEntry>();
		List<IIncludePathEntry> variablesList = new ArrayList<IIncludePathEntry>();

		for (IIncludePathEntry element : entries) {
			if (element.getEntryKind() == IIncludePathEntry.IPE_LIBRARY) {
				if (element.getContentKind() == IIncludePathEntry.K_BINARY) {
					// do nothing, support for archives was removed
				} else {
					liberaries.add(element);
				}
			} else if (element.getEntryKind() == IIncludePathEntry.IPE_PROJECT) {
				if (element.getResource() != null) { // if project exists
					containersList.add(element);
				}
			} else if (element.getEntryKind() == IIncludePathEntry.IPE_VARIABLE) {
				variablesList.add(element);
			}
		}
		IPath[] paths = new IPath[liberaries.size()];
		for (int i = 0; i < liberaries.size(); i++) {
			paths[i] = liberaries.get(i).getPath();
		}

		includePathChanged(paths);

		IContainer[] containers = new IContainer[containersList.size()];
		for (int i = 0; i < containersList.size(); i++) {
			containers[i] = (IContainer) containersList.get(i).getResource();
		}

		containersListChanged(containers);

		IPath[] variablespaths = new IPath[variablesList.size()];
		for (int i = 0; i < variablesList.size(); i++) {
			variablespaths[i] = variablesList.get(i).getPath();
		}

		variablesListChanged(variablespaths);

		updateOrder(entries);
	}

