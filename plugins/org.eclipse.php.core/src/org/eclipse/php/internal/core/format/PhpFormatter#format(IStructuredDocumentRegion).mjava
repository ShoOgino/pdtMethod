	public void format(IStructuredDocumentRegion sdRegion) {
		assert sdRegion != null;

		// resolce formatter range
		int regionStart = sdRegion.getStartOffset();
		int regionEnd = sdRegion.getEnd();

		int formatRequestStart = getStart();
		int formatRequestEnd = formatRequestStart + getLength();

		int startFormat = Math.max(formatRequestStart, regionStart);
		int endFormat = Math.min(formatRequestEnd, regionEnd);

		// calculate lines
		IStructuredDocument document = sdRegion.getParentDocument();
		int lineIndex = document.getLineOfOffset(startFormat);
		int endLineIndex = document.getLineOfOffset(endFormat);
		ITextRegionList textRegions = sdRegion.getRegions();
		String newline = document.getLineDelimiter();
		for (int i = 0; i < textRegions.size(); i++) {
			ITextRegion textRegion = textRegions.get(i);
			if (textRegion instanceof PhpScriptRegion) {
				int startOffset = sdRegion.getStartOffset(textRegion);
				PhpScriptRegion scriptRegion = (PhpScriptRegion) textRegion;
				ITextRegion[] phpTokens;
				try {
					phpTokens = scriptRegion.getPhpTokens(0,
							textRegion.getLength());
					for (int j = phpTokens.length - 1; j >= 0; j--) {
						ITextRegion phpToken = phpTokens[j];
						int start = startOffset + phpToken.getStart();
						int end = start + phpToken.getLength();
						if (/* endFormat >= end || */startFormat <= start
								&& endFormat >= end) {
							if (phpToken.getType().equals(
									PHPRegionTypes.PHP_CURLY_OPEN)) {
								if (j < phpTokens.length - 1 && j > 0) {
									if (phpTokens[j - 1].getType().equals(
											PHPRegionTypes.PHP_TOKEN)
											&& !isComment(phpTokens[j + 1])
											&& document
													.getLineOfOffset(startOffset
															+ phpToken
																	.getStart()) == document
													.getLineOfOffset(startOffset
															+ phpTokens[j + 1]
																	.getStart())) {
										document.replace(
												startOffset + phpToken.getEnd(),
												0, newline);
										endLineIndex++;
									}
								}
							} else if (phpToken.getType().equals(
									PHPRegionTypes.PHP_CURLY_CLOSE)) {
								if (j > 0
										&& (phpTokens[j - 1].getType().equals(
												PHPRegionTypes.PHP_SEMICOLON)
												|| phpTokens[j - 1]
														.getType()
														.equals(PHPRegionTypes.PHP_CURLY_CLOSE) || phpTokens[j - 1]
												.getType()
												.equals(PHPRegionTypes.PHP_COMMENT_END))) {
									if (document.getLineOfOffset(startOffset
											+ phpToken.getStart()) == document
											.getLineOfOffset(startOffset
													+ phpTokens[j - 1]
															.getStart())) {
										document.replace(startOffset
												+ phpTokens[j - 1].getEnd(), 0,
												newline);
										endLineIndex++;
									}
								}
							}
						}

					}
				} catch (BadLocationException e) {
				}
			}
		}
		sdRegion.getRegionAtCharacterOffset(startFormat);
		// TODO get token of each line then insert line seporator after { and
		// after } if there is no line seporator
		// format each line
		for (; lineIndex <= endLineIndex; lineIndex++) {
			formatLine(document, lineIndex);
		}

	}

