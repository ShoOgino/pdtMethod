	/**
	 * Returns a new InputStream for the given file in the tar archive.
	 * 
	 * @param entry
	 * @return an input stream for the given file
	 * @throws TarException
	 * @throws IOException
	 */
	public InputStream getInputStream(TarEntry entry) throws TarException, IOException {
		if (entryStream == null || !entryStream.skipToEntry(entry)) {
			if (internalEntryStream != null) {
				internalEntryStream.close();
			}
			internalEntryStream = new FileInputStream(file);
			// First, check if it's a GZIPInputStream.
			try {
				internalEntryStream = new GZIPInputStream(internalEntryStream);
			} catch (IOException e) {
				// If it is not compressed we close
				// the old one and recreate
				internalEntryStream.close();
				internalEntryStream = new FileInputStream(file);
				try {
					internalEntryStream = new CBZip2InputStream(internalEntryStream);
				} catch (IOException e1) {
					// If it is not compressed we close
					// the old one and recreate
					internalEntryStream.close();
					internalEntryStream = new FileInputStream(file);
					try {
						internalEntryStream.read();
						internalEntryStream.read();
						internalEntryStream = new CBZip2InputStream(internalEntryStream);
					} catch (IOException e2) {
						// If it is not compressed we close
						// the old one and recreate
						internalEntryStream.close();
						internalEntryStream = new FileInputStream(file);
					}
				}
			}
			entryStream = new TarInputStream(internalEntryStream, entry) {
				public void close() {
					// Ignore close() since we want to reuse the stream.
				}
			};
		}
		return entryStream;
	}

