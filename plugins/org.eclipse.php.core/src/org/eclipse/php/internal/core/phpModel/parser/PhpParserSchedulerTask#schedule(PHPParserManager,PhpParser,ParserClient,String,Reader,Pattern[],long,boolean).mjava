	/**
	 * PRODUCER - Schedules a new operation for the parser stack
	 * @param phpParser
	 * @param client
	 * @param reader
	 * @param lastModified
	 */
	public synchronized void schedule(PHPParserManager parserManager, PhpParser phpParser, ParserClient client, String filename, Reader reader, Pattern[] tasksPatterns, long lastModified, boolean useAspTagsAsPhp) {

		// check the top of the stack, if it is the file is already
		// on stack just ignore the last one
		if (buffer.size() > 0) {
			final ParserExecuter top = buffer.getFirst();
			if (top.filename.equals(filename)) {
				buffer.removeFirst();
			}
		}

		// add it (safely)
		// if the stack is full - wait() for an empty place
		while (buffer.size() >= BUFFER_MAX_SIZE) {
			try {
				wait();
			} catch (InterruptedException e) {
				// process of scheduling was canceled
				// ignore operation
			}
		}

		// creates the new task properties
		final ParserExecuter parserProperties = new ParserExecuter(parserManager, client, filename, reader, tasksPatterns, lastModified, useAspTagsAsPhp);

		// adds  the task to the head of the list
		buffer.addFirst(parserProperties);

		// now you can notify that the stack is not empty
		notifyAll();
	}

