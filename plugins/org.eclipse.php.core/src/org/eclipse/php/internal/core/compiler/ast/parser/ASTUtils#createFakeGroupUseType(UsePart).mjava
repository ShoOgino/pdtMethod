	/**
	 * Used to create a fake FullyQualifiedReference object that combines use
	 * statement namespace and use part namespace of a group use statement. For
	 * example, this method will return an object for type
	 * <code>"A\B\C\D\E"</code> from statement
	 * <code>"use A\B\ { \C\D\E };"</code>. <b>Note that this type will have its
	 * source start and end range limited to the source start and end range of
	 * <code>"\C\D\E"</code>. Also note that UsePart aliases are not handled by
	 * this method.</b>
	 * 
	 * @param usePart
	 * @return fake type, null if usePart is not part of a group use statement
	 *         (i.e. when usePart.getGroupNamespace() is null)
	 * @see PHPModelUtils.concatFullyQualifiedNames(currentUseStatement,
	 *      usePart)
	 */
	@Nullable
	public static FullyQualifiedReference createFakeGroupUseType(UsePart usePart) {
		FullyQualifiedReference groupNamespace = usePart.getGroupNamespace();
		if (groupNamespace == null) {
			return null;
		}
		FullyQualifiedReference usePartNamespace = usePart.getNamespace();
		// can be null:
		NamespaceReference usePartNamespaceNamespace = usePartNamespace.getNamespace();
		// can be null:
		NamespaceReference groupNamespaceNamespace = groupNamespace.getNamespace();

		String usePartNamespaceFQN = usePartNamespace.getFullyQualifiedName();
		String fakeName = PHPModelUtils.extractElementName(usePartNamespaceFQN);
		String fakeNamespaceName = PHPModelUtils.concatFullyQualifiedNames(groupNamespace.getFullyQualifiedName(),
				PHPModelUtils.extractNameSpaceName(usePartNamespaceFQN));

		return new FullyQualifiedReference(usePartNamespace.sourceStart(), usePartNamespace.sourceEnd(), fakeName,
				new NamespaceReference(
						usePartNamespaceNamespace != null ? usePartNamespaceNamespace.sourceStart()
								: usePartNamespace.sourceStart(),
						usePartNamespaceNamespace != null ? usePartNamespaceNamespace.sourceEnd() :
						/* empty fake namespace */
								usePartNamespace.sourceStart(),
						fakeNamespaceName, groupNamespaceNamespace != null ? groupNamespaceNamespace.isGlobal() : false,
						groupNamespaceNamespace != null ? groupNamespaceNamespace.isLocal() : false),
				usePartNamespace.getElementType());
	}

