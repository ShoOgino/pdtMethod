	public static void updateProjectReferences(IIncludePathEntry[] newEntries, IIncludePathEntry[] oldEntries, final IProject project, SubProgressMonitor monitor) {
		try {
			boolean changedReferences = false;
			final IProjectDescription projectDescription = project.getDescription();
			ArrayList referenced = new ArrayList();
			ArrayList referencedNames = new ArrayList();
			IProject[] referencedProjects = projectDescription.getReferencedProjects();
			for (int i = 0; i < referencedProjects.length; i++) {
				referenced.add(referencedProjects[i]);
				referencedNames.add(referencedProjects[i].getName());
			}

			for (int i = 0; i < oldEntries.length; i++) {
				if (oldEntries[i].getEntryKind() == IIncludePathEntry.IPE_PROJECT) {
					String projectName = oldEntries[i].getPath().lastSegment();
					if (!containsProject(newEntries, projectName)) {
						if (((IncludePathEntry) oldEntries[i]).createdReference) {
							int index = referencedNames.indexOf(projectName);
							if (index >= 0) {
								changedReferences = true;
								referencedNames.remove(index);
								referenced.remove(index);
							}
						}
					}
				}
			}

			for (int i = 0; i < newEntries.length; i++) {
				if (newEntries[i].getEntryKind() == IIncludePathEntry.IPE_PROJECT) {
					String projectName = newEntries[i].getPath().lastSegment();
					if (!containsProject(oldEntries, projectName)) {
						if (!referencedNames.contains(projectName)) {
							changedReferences = true;
							((IncludePathEntry) newEntries[i]).createdReference = true;
							referenced.add(ResourcesPlugin.getWorkspace().getRoot().getProject(projectName));
							referencedNames.add(projectName);
						}
					}
				}
			}
			if (changedReferences) {
				IProject[] referenceProjects = (IProject[]) referenced.toArray(new IProject[referenced.size()]);
				projectDescription.setReferencedProjects(referenceProjects);
				WorkspaceJob job = new WorkspaceJob("updating project description") {
					public IStatus runInWorkspace(IProgressMonitor monitor) throws CoreException {
						project.setDescription(projectDescription, monitor);
						return Status.OK_STATUS;
					}
				};
				job.setRule(project.getParent());
				job.schedule();
			}
		} catch (CoreException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

