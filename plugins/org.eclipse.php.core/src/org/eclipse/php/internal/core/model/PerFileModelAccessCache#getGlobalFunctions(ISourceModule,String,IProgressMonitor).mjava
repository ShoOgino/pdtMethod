	/**
	 * Returns cached result of a function search, or invokes a new search query
	 * 
	 * @param sourceModule
	 *            Current source module
	 * @param functionName
	 *            The name of the global function
	 * @param monitor
	 *            Progress monitor
	 * @return a collection of functions according to a given name, or
	 *         <code>null</code> if not found
	 */
	public Collection<IMethod> getGlobalFunctions(ISourceModule sourceModule,
			String functionName, IProgressMonitor monitor) {

		Collection<IMethod> functions;

		if (!this.sourceModule.equals(sourceModule)) {
			// Invoke a new search, since we only cache for the original file in
			// this class:
			IScriptProject scriptProject = sourceModule.getScriptProject();
			IDLTKSearchScope scope = SearchEngine
					.createSearchScope(scriptProject);
			functions = Arrays.asList(PhpModelAccess.getDefault().findMethods(
					functionName, MatchRule.EXACT, Modifiers.AccGlobal, 0,
					scope, monitor));

		} else {
			functionName = functionName.toLowerCase();

			if (globalFunctionsCache == null) {
				globalFunctionsCache = new HashMap<String, Collection<IMethod>>();

				IScriptProject scriptProject = sourceModule.getScriptProject();
				IDLTKSearchScope scope = SearchEngine
						.createSearchScope(scriptProject);

				IMethod[] allFunctions = PhpModelAccess.getDefault()
						.findMethods(null, MatchRule.PREFIX,
								Modifiers.AccGlobal, 0, scope, monitor);
				for (IMethod function : allFunctions) {
					String elementName = function.getElementName()
							.toLowerCase();
					Collection<IMethod> funcList = globalFunctionsCache
							.get(elementName);
					if (funcList == null) {
						funcList = new LinkedList<IMethod>();
						globalFunctionsCache.put(elementName, funcList);
					}
					funcList.add(function);
				}
			}
			functions = globalFunctionsCache.get(functionName);
		}
		return filterElements(sourceModule, functions, monitor);
	}

