	/**
	 * Returns cached result of a function search, or invokes a new search query
	 * 
	 * @param sourceModule
	 *            Current source module
	 * @param functionName
	 *            The name of the global function
	 * @param monitor
	 *            Progress monitor
	 * @return a collection of functions according to a given name, or
	 *         <code>null</code> if not found
	 */
	public Collection<IMethod> getGlobalFunctions(ISourceModule sourceModule, String functionName,
			IProgressMonitor monitor) {

		// https://bugs.eclipse.org/bugs/show_bug.cgi?id=342465
		if (functionName == null) {
			return new ArrayList<IMethod>();
		}
		Collection<IMethod> functions;

		if (!this.sourceModule.equals(sourceModule)) {
			// Invoke a new search, since we only cache for the original file in
			// this class:
			IScriptProject scriptProject = sourceModule.getScriptProject();
			IDLTKSearchScope scope = SearchEngine.createSearchScope(scriptProject);
			functions = Arrays.asList(
					PHPModelAccess.getDefault().findFunctions(functionName, MatchRule.EXACT, 0, 0, scope, monitor));

		} else {
			functionName = functionName.toLowerCase();

			if (globalFunctionsCache == null) {
				globalFunctionsCache = Collections.synchronizedMap(new HashMap<String, Collection<IMethod>>());

				if (!globalFunctionsCache.containsKey(functionName)) {
					IScriptProject scriptProject = sourceModule.getScriptProject();
					IDLTKSearchScope scope = SearchEngine.createSearchScope(scriptProject);

					IMethod[] allFunctions = PHPModelAccess.getDefault().findFunctions(functionName, MatchRule.EXACT, 0,
							0, scope, monitor);
					Collection<IMethod> funcList = new ArrayList<IMethod>(allFunctions.length);
					for (IMethod function : allFunctions) {
						funcList.add(function);
					}
					globalFunctionsCache.put(functionName, funcList);
				}
			}
			functions = globalFunctionsCache.get(functionName);
		}
		return filterModelElements(sourceModule, functions, monitor);
	}

