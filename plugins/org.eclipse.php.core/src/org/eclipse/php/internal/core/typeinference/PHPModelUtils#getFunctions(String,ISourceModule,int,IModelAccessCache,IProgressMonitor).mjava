	/**
	 * This method returns function corresponding to its name and the file where
	 * it was referenced. The function name may contain also the namespace part,
	 * like: A\B\foo() or \A\B\foo()
	 * 
	 * @param functionName
	 *            The fully qualified function name
	 * @param sourceModule
	 *            The file where the element is referenced
	 * @param offset
	 *            The offset where the element is referenced
	 * @param cache
	 *            Temporary model cache instance
	 * @param monitor
	 *            Progress monitor
	 * @return a list of relevant IMethod elements, or <code>null</code> in case
	 *         there's no IMethod found
	 * @throws ModelException
	 */
	public static IMethod[] getFunctions(String functionName,
			ISourceModule sourceModule, int offset, IModelAccessCache cache,
			IProgressMonitor monitor) throws ModelException {

		if (functionName == null || functionName.length() == 0) {
			return PhpModelAccess.NULL_METHODS;
		}
		String namespace = extractNamespaceName(functionName, sourceModule,
				offset);
		functionName = extractElementName(functionName);
		if (namespace != null) {
			if (namespace.length() > 0) {
				IMethod[] functions = getNamespaceFunction(namespace,
						functionName, true, sourceModule, cache, monitor);
				if (functions.length > 0) {
					return functions;
				}
				return PhpModelAccess.NULL_METHODS;
			}
			// it's a global reference: \foo()
		} else {
			// look for the element in current namespace:
			IType currentNamespace = getCurrentNamespace(sourceModule, offset);
			if (currentNamespace != null) {
				namespace = currentNamespace.getElementName();
				IMethod[] functions = getNamespaceFunction(namespace,
						functionName, true, sourceModule, cache, monitor);
				if (functions.length > 0) {
					return functions;
				}
				// For functions and constants, PHP will fall back to global
				// functions or constants if a namespaced function or constant
				// does not exist:
				return getGlobalFunctions(sourceModule, functionName, cache,
						monitor);
			}
		}
		return getGlobalFunctions(sourceModule, functionName, cache, monitor);
	}
