	private void runBuild() {
		IProject[] projects = ResourcesPlugin.getWorkspace().getRoot().getProjects();
		final ArrayList<IProject> phpProjects = new ArrayList<IProject>();
		for (IProject project : projects) {
			if (!project.isOpen()) {
				continue;
			}
			try {
				if (project.hasNature(PHPNature.ID)) {
					phpProjects.add(project);
				}
			} catch (CoreException e) {
				PHPCorePlugin.log(e);
			}
		}
		if (phpProjects.isEmpty()) {
			return;
		}
		WorkspaceJob cleanJob = new WorkspaceJob(CoreMessages.getString("PHPWorkspaceModelManager_5")) {
			@Override
			public IStatus runInWorkspace(IProgressMonitor monitor) throws CoreException {
				try {
					monitor.beginTask(CoreMessages.getString("PHPWorkspaceModelManager_5"), phpProjects.size());

					for (IProject project : phpProjects) {
						if (project.isOpen()) {
							PHPWorkspaceModelManager.getInstance().getModelForProject(project, true);
							if (monitor.isCanceled()) {
								break;
							}
						}
						monitor.worked(1);
					}
				} finally {
					monitor.done();
				}
				return Status.OK_STATUS;
			}
		};
		cleanJob.setRule(ResourcesPlugin.getWorkspace().getRuleFactory().buildRule());
		cleanJob.setPriority(Job.BUILD);
		cleanJob.setUser(false);
		cleanJob.schedule();
	}

