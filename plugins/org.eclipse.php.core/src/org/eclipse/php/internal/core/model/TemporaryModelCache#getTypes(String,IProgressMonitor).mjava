	/**
	 * Returns cached result of a type search, or invokes a new search query
	 * 
	 * @param typeName
	 *            The name of the type (class, interface or namespace)
	 * @param monitor
	 *            Progress monitor
	 * @return a collection of types according to a given name, or
	 *         <code>null</code> if not found
	 */
	public Collection<IType> getTypes(String typeName, IProgressMonitor monitor) {

		typeName = typeName.toLowerCase();

		if (allTypesCache == null) {
			allTypesCache = new HashMap<String, Collection<IType>>();

			IScriptProject scriptProject = sourceModule.getScriptProject();
			IDLTKSearchScope scope = SearchEngine
					.createSearchScope(scriptProject);

			IType[] allTypes = PhpModelAccess.getDefault().findTypes(null,
					MatchRule.PREFIX, 0, 0, scope, null);
			for (IType type : allTypes) {
				String elementName = type.getElementName().toLowerCase();
				Collection<IType> typesList = allTypesCache.get(elementName);
				if (typesList == null) {
					typesList = new LinkedList<IType>();
					allTypesCache.put(elementName, typesList);
				}
				typesList.add(type);
			}
		}
		return filterElements(allTypesCache.get(typeName), monitor);
	}

