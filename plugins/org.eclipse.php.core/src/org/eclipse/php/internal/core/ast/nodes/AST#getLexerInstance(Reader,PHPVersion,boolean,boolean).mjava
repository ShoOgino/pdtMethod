	/**
	 * Constructs a scanner from a given reader
	 * 
	 * @param reader
	 * @param phpVersion
	 * @param aspTagsAsPhp
	 * @return
	 * @throws IOException
	 */
	private AstLexer getLexerInstance(Reader reader, PHPVersion phpVersion,
			boolean aspTagsAsPhp, boolean useShortTags) throws IOException {
		if (PHPVersion.PHP4 == phpVersion) {
			final AstLexer lexer4 = getLexer4(reader);
			lexer4.setUseAspTagsAsPhp(aspTagsAsPhp);
			lexer4.setUseShortTags(useShortTags);
			return lexer4;
		} else if (PHPVersion.PHP5 == phpVersion) {
			final AstLexer lexer5 = getLexer5(reader);
			lexer5.setUseAspTagsAsPhp(aspTagsAsPhp);
			lexer5.setUseShortTags(useShortTags);
			return lexer5;
		} else if (PHPVersion.PHP5_3 == phpVersion) {
			final AstLexer lexer53 = getLexer53(reader);
			lexer53.setUseAspTagsAsPhp(aspTagsAsPhp);
			lexer53.setUseShortTags(useShortTags);
			return lexer53;
		} else {
			throw new IllegalArgumentException(CoreMessages
					.getString("ASTParser_1")
					+ phpVersion);
		}
	}

