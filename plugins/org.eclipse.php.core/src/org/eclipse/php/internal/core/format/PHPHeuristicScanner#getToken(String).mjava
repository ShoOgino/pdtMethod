	/**
	 * Returns one of the keyword constants or <code>TokenIDENT</code> for a scanned
	 * identifier.
	 * 
	 * @param s
	 *            a scanned identifier
	 * @return one of the constants defined in {@link Symbols}
	 */
	private int getToken(String s) {
		Assert.isNotNull(s);

		switch (s.length()) {
		case 2:
			if ("if".equalsIgnoreCase(s)) { //$NON-NLS-1$
				return TokenIF;
			}
			if ("do".equalsIgnoreCase(s)) { //$NON-NLS-1$
				return TokenDO;
			}
			break;
		case 3:
			if ("for".equalsIgnoreCase(s)) { //$NON-NLS-1$
				return TokenFOR;
			}
			if ("try".equalsIgnoreCase(s)) { //$NON-NLS-1$
				return TokenTRY;
			}
			if ("new".equalsIgnoreCase(s)) { //$NON-NLS-1$
				return TokenNEW;
			}
			break;
		case 4:
			if ("case".equalsIgnoreCase(s)) { //$NON-NLS-1$
				return TokenCASE;
			}
			if ("else".equalsIgnoreCase(s)) { //$NON-NLS-1$
				return TokenELSE;
			}
			if ("goto".equalsIgnoreCase(s)) { //$NON-NLS-1$
				return TokenGOTO;
			}
			break;
		case 5:

			if ("break".equalsIgnoreCase(s)) { //$NON-NLS-1$
				return TokenBREAK;
			}
			if ("catch".equalsIgnoreCase(s)) {//$NON-NLS-1$
				return TokenCATCH;
			}
			if ("class".equalsIgnoreCase(s)) {//$NON-NLS-1$
				return TokenCLASS;
			}
			if ("while".equalsIgnoreCase(s)) {//$NON-NLS-1$
				return TokenWHILE;
			}
			if ("array".equalsIgnoreCase(s)) {//$NON-NLS-1$
				return TokenARRAY;
			}
			if ("trait".equalsIgnoreCase(s)) {// $NON-NLS-1$
				return TokenTRAIT;
			}
			if ("endif".equalsIgnoreCase(s)) {// $NON-NLS-1$
				return TokenENDIF;
			}
			break;
		case 6:
			if ("return".equalsIgnoreCase(s)) {//$NON-NLS-1$
				return TokenRETURN;
			}
			if ("static".equalsIgnoreCase(s)) {//$NON-NLS-1$
				return TokenSTATIC;
			}
			if ("switch".equalsIgnoreCase(s)) {//$NON-NLS-1$
				return TokenSWITCH;
			}
			if ("elseif".equalsIgnoreCase(s)) {//$NON-NLS-1$
				return TokenELSEIF;
			}
			break;
		case 7:
			if ("default".equalsIgnoreCase(s)) {//$NON-NLS-1$
				return TokenDEFAULT;
			}
			if ("finally".equalsIgnoreCase(s)) {//$NON-NLS-1$
				return TokenFINALLY;
			}
			if ("foreach".equalsIgnoreCase(s)) {//$NON-NLS-1$
				return TokenFOR;
			}
			if ("endfor".equals(s)) { // $NON-NLS-1$
				return TokenENDFOR;
			}
			break;
		case 8:
			if ("endwhile".equalsIgnoreCase(s)) {//$NON-NLS-1$
				return TokenENDWHILE;
			}
			break;
		case 9:
			if ("interface".equalsIgnoreCase(s)) {//$NON-NLS-1$
				return TokenINTERFACE;
			}
			if ("endswitch".equalsIgnoreCase(s)) {//$NON-NLS-1$
				return TokenENDWITCH;
			}
			break;

		}
		return TokenIDENT;
	}

