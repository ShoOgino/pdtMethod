	/**
	 * Creates a placeholder node of the given type. <code>null</code> if the
	 * type is not supported
	 * 
	 * @param nodeType
	 *            Type of the node to create. Use the type constants in
	 *            {@link NodeInfoStore}.
	 * @return Returns a place holder node.
	 */
	public final ASTNode newPlaceholderNode(int nodeType) {
		try {
			ASTNode node = this.ast.createInstance(nodeType);

			switch (node.getType()) {
			case ASTNode.ASSIGNMENT:
				Assignment assignment = (Assignment) node;
				assignment.setLeftHandSide(this.ast.newVariable("a")); //$NON-NLS-1$
				assignment.setOperator(Assignment.OP_EQUAL);
				assignment.setRightHandSide(this.ast.newVariable("a")); //$NON-NLS-1$
				break;
			case ASTNode.INFIX_EXPRESSION:
				InfixExpression expression = (InfixExpression) node;
				expression.setLeft(this.ast.newScalar("a")); //$NON-NLS-1$
				expression.setOperator(InfixExpression.OP_MINUS);
				expression.setRight(this.ast.newVariable("a")); //$NON-NLS-1$
				break;
			case ASTNode.VARIABLE:
				Variable variable = (Variable) node;
				variable.setName(this.ast.newIdentifier("")); //$NON-NLS-1$
				break;
			case ASTNode.FOR_STATEMENT:
				ForStatement forStatement = (ForStatement) node;
				Assignment assignment1 = this.ast.newAssignment();
				assignment1.setLeftHandSide(this.ast.newVariable("a")); //$NON-NLS-1$
				assignment1.setOperator(Assignment.OP_EQUAL);
				assignment1.setRightHandSide(this.ast.newVariable("a")); //$NON-NLS-1$
				forStatement.initializers().add(assignment1);

				InfixExpression expression1 = this.ast.newInfixExpression();
				expression1.setLeft(this.ast.newScalar("a")); //$NON-NLS-1$
				expression1.setOperator(InfixExpression.OP_IS_NOT_EQUAL);
				expression1.setRight(this.ast.newVariable("a")); //$NON-NLS-1$

				forStatement.conditions().add(expression1);

				PostfixExpression pexp = this.ast.newPostfixExpression();
				pexp.setOperator(PostfixExpression.OP_INC);
				pexp.setVariable(this.ast.newVariable("a")); //$NON-NLS-1$

				forStatement.updaters().add(pexp);
				forStatement.setBody(this.ast.newBlock());

				break;
			case ASTNode.FUNCTION_INVOCATION: {
				FunctionInvocation functionInvocation = (FunctionInvocation) node;
				FunctionName functionName = this.ast.newFunctionName();
				functionName.setName(this.ast.newIdentifier("a")); //$NON-NLS-1$
				functionInvocation.setFunctionName(functionName);
				break;
			}
			case ASTNode.METHOD_INVOCATION:
				MethodInvocation methodInvocation = (MethodInvocation) node;
				methodInvocation.setDispatcher(this.ast.newVariable("a")); //$NON-NLS-1$
				FunctionName fName = this.ast.newFunctionName(this.ast.newIdentifier("a")); //$NON-NLS-1$
				FunctionInvocation mInvocation = this.ast.newFunctionInvocation();
				mInvocation.setFunctionName(fName);
				methodInvocation.setMethod(mInvocation);
				break;
			case ASTNode.STATIC_METHOD_INVOCATION: {
				StaticMethodInvocation sMethod = (StaticMethodInvocation) node;
				FunctionInvocation functionInvocation = this.ast.newFunctionInvocation();
				FunctionName functionName = this.ast.newFunctionName();
				functionName.setName(this.ast.newIdentifier("")); //$NON-NLS-1$
				functionInvocation.setFunctionName(functionName);
				sMethod.setMethod(functionInvocation);
				sMethod.setClassName(this.ast.newIdentifier("")); //$NON-NLS-1$
				break;
			}
			case ASTNode.CLASS_INSTANCE_CREATION:
				ClassInstanceCreation inst = (ClassInstanceCreation) node;
				inst.setClassName(this.ast.newClassName(this.ast.newIdentifier("a"))); //$NON-NLS-1$
				break;
			}
			return node;
		} catch (IllegalArgumentException e) {
			return null;
		}
	}

