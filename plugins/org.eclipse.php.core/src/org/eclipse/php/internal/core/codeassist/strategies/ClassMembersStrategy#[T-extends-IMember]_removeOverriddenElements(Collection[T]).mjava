	/**
	 * Removes overridden members from the completion list
	 * 
	 * @param members
	 *            Class/Interface members in type hierarchy order (from bottom to
	 *            up)
	 */
	protected <T extends IMember> Collection<T> removeOverriddenElements(Collection<T> members) {
		List<T> result = new LinkedList<>();
		List<T> newMembers = new ArrayList<>();
		newMembers.addAll(members);
		Collections.sort(newMembers, new Comparator<T>() {

			@Override
			public int compare(T o1, T o2) {
				try {
					int flag1 = getFlag(o1.getFlags());
					int flag2 = getFlag(o2.getFlags());
					return flag2 - flag1;
				} catch (ModelException e) {
				}
				return 0;
			}

			private int getFlag(int flags) {
				if (Flags.isPublic(flags)) {
					return Modifiers.AccPublic;
				}
				if (Flags.isProtected(flags)) {
					return Modifiers.AccProtected;
				}
				if (Flags.isPrivate(flags)) {
					return Modifiers.AccPrivate;
				}
				return Modifiers.AccPrivate;
			}
		});
		Set<String> processed = new HashSet<>();
		for (IMember member : newMembers) {
			if (processed.add(member.getElementName())) {
				result.add((T) member);
			}
		}
		return result;
	}

