	public void apply(ICompletionReporter reporter) throws BadLocationException {

		ICompletionContext context = getContext();
		AbstractCompletionContext concreteContext = (AbstractCompletionContext) context;

		IType enclosingClass = null;
		try {
			IModelElement enclosingElement = concreteContext.getSourceModule()
					.getElementAt(concreteContext.getOffset());
			while (enclosingElement instanceof IField) {
				enclosingElement = enclosingElement.getParent();
			}
			if (enclosingElement instanceof IMethod) {
				IModelElement parent = ((IMethod) enclosingElement).getParent();
				if (parent instanceof IType) {
					enclosingClass = (IType) parent;
				}
			}
		} catch (ModelException e) {
			PHPCorePlugin.log(e);
		}

		SourceRange replaceRange = getReplacementRange(context);
		String suffix = getSuffix(concreteContext);

		IType[] types = getTypes(concreteContext);
		for (IType type : types) {

			IMethod ctor = null;
			try {
				IMethod[] methods = type.getMethods();
				if (methods != null && methods.length > 0) {
					for (IMethod method : methods) {
						if (method.isConstructor()
								&& method.getParameters() != null
								&& method.getParameters().length > 0) {
							ctor = method;
							if (!PHPFlags.isPrivate(ctor.getFlags())
									|| type.equals(enclosingClass)) {
								IMethod ctorMethod = createFakeMethod(ctor,
										type);
								reporter.reportMethod(ctorMethod, suffix,
										replaceRange);
								break;
							}
						}
					}
				}

				// try to find constructor in super classes
				if (ctor == null) {
					ITypeHierarchy newSupertypeHierarchy = type
							.newSupertypeHierarchy(null);
					IType[] allSuperclasses = newSupertypeHierarchy
							.getAllSuperclasses(type);
					if (allSuperclasses != null && allSuperclasses.length > 0) {
						for (IType superClass : allSuperclasses) {
							methods = superClass.getMethods();
							// find first constructor and exit
							if (methods != null && methods.length > 0) {
								for (IMethod method : methods) {
									if (method.isConstructor()
											&& method.getParameters() != null
											&& method.getParameters().length > 0) {
										ctor = method;
										if (!PHPFlags
												.isPrivate(ctor.getFlags())
												|| type.equals(enclosingClass)) {
											IMethod ctorMethod = createFakeMethod(
													ctor, type);
											reporter.reportMethod(ctorMethod,
													suffix, replaceRange);
											break;
										}
									}
								}
							}
						}
					}
				}

			} catch (ModelException e) {
				PHPCorePlugin.log(e);
			}
			if (ctor == null) {
				reporter.reportType(type, suffix, replaceRange);
			}
		}

		// addSelf(concreteContext, reporter);
	}

