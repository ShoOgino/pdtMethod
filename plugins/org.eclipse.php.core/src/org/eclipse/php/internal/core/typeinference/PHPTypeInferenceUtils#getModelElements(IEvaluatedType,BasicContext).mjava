	/**
	 * Converts IEvaluatedType to IModelElement, if found
	 * @param evaluatedType Evaluated type
	 * @return model elements
	 */
	public static IModelElement[] getModelElements(IEvaluatedType type, BasicContext context) {
		IModelElement[] elements = null;

		if (type instanceof ModelClassType) {
			return new IModelElement[] { ((ModelClassType)type).getTypeDeclaration() };
		}
		if (type instanceof PHPClassType) {
			elements = PHPMixinModel.getInstance().getClass(((PHPClassType)type).getModelKey());
		}

		// Filter model elements using file network:
		if (elements != null && elements.length > 0) {
			ISourceModule sourceModule = context.getSourceModule();
			ReferenceTree referenceTree = FileNetworkUtility.buildReferencedFilesTree(sourceModule, null);
			List<IModelElement> filteredElements = new LinkedList<IModelElement>();
			for (IModelElement element : elements) {
				if (referenceTree.find(((ModelElement)element).getSourceModule())) {
					filteredElements.add(element);
				}
			}
			elements = filteredElements.toArray(new IModelElement[filteredElements.size()]);
		}

		return elements;
	}

