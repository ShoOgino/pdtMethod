	public IGoal[] init() {
		VariableReference variableReference = (VariableReference) ((ExpressionTypeGoal) goal)
				.getExpression();
		IContext context = goal.getContext();

		// Handle $this variable reference
		if (variableReference.getName().equals("$this")) {
			if (context instanceof MethodContext) {
				MethodContext methodContext = (MethodContext) context;
				IEvaluatedType instanceType = methodContext.getInstanceType();
				if (instanceType != null) {
					if (instanceType instanceof PHPClassType
							&& methodContext.getType() != null) {
						PHPClassType phpClassType = (PHPClassType) instanceType;
						if (phpClassType.getNamespace() != null) {
							this.results.add(new PHPThisClassType(phpClassType
									.getNamespace(),
									phpClassType.getTypeName(), methodContext
											.getType()));
						} else {

							this.results.add(new PHPThisClassType(phpClassType
									.getTypeName(), methodContext.getType()));
						}
					} else {
						this.results.add(instanceType);
					}
				} else {
					this.results.add(new SimpleType(SimpleType.TYPE_NULL));
				}
				return IGoal.NO_GOALS;
			}
		}

		try {
			if (context instanceof ISourceModuleContext) {
				ISourceModuleContext typedContext = (ISourceModuleContext) context;
				ASTNode rootNode = typedContext.getRootNode();
				ASTNode localScopeNode = rootNode;
				if (context instanceof MethodContext) {
					localScopeNode = ((MethodContext) context).getMethodNode();
				}
				LocalReferenceDeclSearcher varDecSearcher = new LocalReferenceDeclSearcher(
						typedContext.getSourceModule(), variableReference,
						localScopeNode);
				rootNode.traverse(varDecSearcher);

				List<IGoal> subGoals = new LinkedList<IGoal>();

				List<VarComment> varComments = ((PHPModuleDeclaration) rootNode)
						.getVarComments();
				List<VarComment> newList = new ArrayList<VarComment>();
				newList.addAll(varComments);
				Collections.sort(newList, new Comparator<VarComment>() {

					public int compare(VarComment o1, VarComment o2) {
						return o2.sourceStart() - o1.sourceStart();
					}
				});
				for (VarComment varComment : newList) {
					if (varComment.sourceStart() > variableReference
							.sourceStart()) {
						break;
					}
					if (varComment.getVariableReference().getName()
							.equals(variableReference.getName())) {
						List<IGoal> goals = new LinkedList<IGoal>();
						for (TypeReference ref : varComment.getTypeReferences()) {
							goals.add(new ExpressionTypeGoal(context, ref));
						}
						return (IGoal[]) goals.toArray(new IGoal[goals.size()]);
					}
				}

				Declaration[] decls = varDecSearcher.getDeclarations();
				boolean mergeWithGlobalScope = false;
				for (int i = 0; i < decls.length; ++i) {
					Declaration decl = decls[i];
					// TODO check ArrayCreation and its element type
					if (decl instanceof ArrayDeclaration) {
						ArrayDeclaration arrayDeclaration = (ArrayDeclaration) decl;
						subGoals.add(new ArrayDeclarationGoal(context,
								arrayDeclaration));
					} else if (decl.getNode() instanceof GlobalStatement) {
						mergeWithGlobalScope = true;
					} else {
						ASTNode declNode = decl.getNode();
						if (declNode instanceof ForEachStatement) {
							subGoals.add(new ForeachStatementGoal(context,
									((ForEachStatement) declNode)
											.getExpression()));
						} else {
							subGoals.add(new ExpressionTypeGoal(context,
									declNode));
						}
					}
				}
				if (mergeWithGlobalScope
						|| (decls.length == 0 && context.getClass() == FileContext.class)) {
					// collect all global variables, and merge results with
					// existing declarations
					subGoals.add(new GlobalVariableReferencesGoal(context,
							variableReference.getName()));
				}
				return subGoals.toArray(new IGoal[subGoals.size()]);
			}
		} catch (Exception e) {
			if (DLTKCore.DEBUG) {
				e.printStackTrace();
			}
		}

		return IGoal.NO_GOALS;
	}

