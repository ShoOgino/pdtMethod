	public IGoal[] init() {
		VariableReference variableReference = (VariableReference) ((ExpressionTypeGoal) goal).getExpression();
		IContext context = goal.getContext();

		// Handle $this variable reference
		if (variableReference.getName().equals("$this")) {
			if (context instanceof MethodContext) {
				MethodContext methodContext = (MethodContext) context;
				IEvaluatedType instanceType = methodContext.getInstanceType();
				if (instanceType != null) {
					this.results.add(instanceType);
				} else {
					this.results.add(new SimpleType(SimpleType.TYPE_NULL));
				}
				return IGoal.NO_GOALS;
			}
		}

		try {
			if (context instanceof ISourceModuleContext) {
				ISourceModuleContext typedContext = (ISourceModuleContext) context;
				ASTNode node = (context instanceof MethodContext) ? ((MethodContext)context).getMethodNode() : typedContext.getRootNode();
				VariableDeclarationSearcher varDecSearcher = new VariableDeclarationSearcher(variableReference);
				node.traverse(varDecSearcher);

				List<IGoal> subGoals = new LinkedList<IGoal>();

				LinkedList<ASTNode> declarations = varDecSearcher.getDeclarations();
				if (varDecSearcher.needsMergingWithGlobalScope() || (declarations.isEmpty() && context.getClass() == FileContext.class)) {
					// collect all global variables, and merge results with existing declarations
					subGoals.add(new GlobalVariableReferencesGoal(context, variableReference.getName()));
				}
				for (ASTNode declaration : declarations) {
					if (declaration instanceof ForEachStatement) {
						subGoals.add(new ForeachStatementGoal(context, ((ForEachStatement) declaration).getExpression()));
					} else {
						subGoals.add(new VariableDeclarationGoal(context, declaration));
					}
				}
				return subGoals.toArray(new IGoal[subGoals.size()]);
			}
		} catch (Exception e) {
			if (DLTKCore.DEBUG) {
				e.printStackTrace();
			}
		}

		return IGoal.NO_GOALS;
	}

