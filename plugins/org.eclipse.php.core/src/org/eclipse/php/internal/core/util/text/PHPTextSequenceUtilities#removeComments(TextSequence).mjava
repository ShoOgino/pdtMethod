	private static TextSequence removeComments(TextSequence textSequence) {
		FIND_COMMENT_START: while (true) {
			int commentStartPosition = getCommentStartIndex(textSequence);
			if (commentStartPosition > -1) {
				String startCommentString = textSequence.subSequence(commentStartPosition, commentStartPosition + 2).toString();
				if (startCommentString.equals(START_COMMENT)) {
					// we are inside comment.
					Matcher commentEndMatcher = COMMENT_END_PATTERN.matcher(textSequence);
					boolean foundEnd = commentEndMatcher.find(commentStartPosition);
					if (foundEnd) {
						int commentEndPosition = commentEndMatcher.end();
						textSequence = textSequence.cutTextSequence(commentStartPosition, commentEndPosition);
						continue;
					}
				} else {
					// we are inside line comment.
					int commentEndPosition = commentStartPosition + 2;
					for (; commentEndPosition < textSequence.length(); commentEndPosition++) {
						if (textSequence.charAt(commentEndPosition) == END_LINE) {
							textSequence = textSequence.cutTextSequence(commentStartPosition, commentEndPosition);
							continue FIND_COMMENT_START;
						}
					}
				}
			}
			return textSequence;
		}
	}

