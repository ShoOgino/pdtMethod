	protected void modifyMethodInfo(MethodDeclaration methodDeclaration, ISourceElementRequestor.MethodInfo mi) {
		ASTNode parentDeclaration = null;

		// find declaration that was before this method:
		declarations.pop();
		if (!declarations.empty()) {
			parentDeclaration = declarations.peek();
		}
		declarations.push(methodDeclaration);

		mi.isConstructor = mi.name.equalsIgnoreCase(CONSTRUCTOR_NAME) || (parentDeclaration instanceof ClassDeclaration
				&& mi.name.equalsIgnoreCase(((ClassDeclaration) parentDeclaration).getName()));

		if (fCurrentClass == null || fCurrentClass == fLastNamespace) {
			mi.modifiers |= Modifiers.AccGlobal;
		}
		if (!Flags.isPrivate(mi.modifiers) && !Flags.isProtected(mi.modifiers) && !Flags.isPublic(mi.modifiers)) {
			mi.modifiers |= Modifiers.AccPublic;
		}

		mi.parameterTypes = processParameterTypes(methodDeclaration);
		mi.returnType = processReturnType(methodDeclaration);

		// modify method info if needed by extensions
		for (PHPSourceElementRequestorExtension extension : extensions) {
			extension.modifyMethodInfo(methodDeclaration, mi);
		}
		if (mi.returnType != null) {
			mi.modifiers |= IPHPModifiers.AccReturn;
		} else if (methodDeclaration.getBody() != null) {
			// check
			ReturnDetector detector = new ReturnDetector();
			try {
				methodDeclaration.getBody().traverse(detector);
				if (detector.hasReturn()) {
					mi.modifiers |= IPHPModifiers.AccReturn;
				}
			} catch (Exception e) {
				Logger.logException(e);
			}
		}
	}

