	/**
	 * Validate the given compilation unit name. A compilation unit name must
	 * obey the following rules:
	 * <ul>
	 * <li>it must not be null
	 * <li>it must include the <code>".java"</code> suffix
	 * <li>its prefix must be a valid identifier
	 * </ul>
	 * </p>
	 * 
	 * @param name
	 *            the name of a compilation unit
	 * @param sourceLevel
	 *            the source level
	 * @param complianceLevel
	 *            the compliance level
	 * @return a status object with code <code>IStatus.OK</code> if the given
	 *         name is valid as a compilation unit name, otherwise a status
	 *         object indicating what is wrong with the name
	 */
	/*
	 * public static boolean isValidCompilationUnitName(String name, String
	 * sourceLevel, String complianceLevel) { return
	 * JavaConventions.validateCompilationUnitName(name, sourceLevel,
	 * complianceLevel).getSeverity() != IStatus.ERROR; }
	 */
	/**
	 * Returns true if the given folder name is valid for a package, false if it
	 * is not.
	 * 
	 * @param folderName
	 *            the name of the folder
	 * @param sourceLevel
	 *            the source level
	 * @param complianceLevel
	 *            the compliance level
	 */
	/*
	 * public static boolean isValidFolderNameForPackage(String folderName,
	 * String sourceLevel, String complianceLevel) { return
	 * JavaConventions.validateIdentifier(folderName, sourceLevel,
	 * complianceLevel).getSeverity() != IStatus.ERROR; }
	 */
	/**
	 * Returns true if the given method signature is valid, false if it is not.
	 */
	public static boolean isValidMethodSignature(String sig) {
		int len = sig.length();
		if (len == 0)
			return false;
		int i = 0;
		char c = sig.charAt(i++);
		if (c != '(')
			return false;
		if (i >= len)
			return false;
		while (sig.charAt(i) != ')') {
			// Void is not allowed as a parameter type.
			i = checkTypeSignature(sig, i, len, false);
			if (i == -1)
				return false;
			if (i >= len)
				return false;
		}
		++i;
		i = checkTypeSignature(sig, i, len, true);
		return i == len;
	}

