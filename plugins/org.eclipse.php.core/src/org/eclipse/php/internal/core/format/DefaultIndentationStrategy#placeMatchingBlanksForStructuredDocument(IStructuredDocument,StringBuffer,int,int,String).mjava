	public static void placeMatchingBlanksForStructuredDocument(
			final IStructuredDocument document, final StringBuffer result,
			final int lineNumber, final int forOffset, String commandText)
			throws BadLocationException {
		int indentationWrappedLineSize = FormatterUtils
				.getFormatterCommonPrferences().getIndentationWrappedLineSize(
						document);
		int indentationArrayInitSize = FormatterUtils
				.getFormatterCommonPrferences().getIndentationArrayInitSize(
						document);
		int indentationSize = FormatterUtils.getFormatterCommonPrferences()
				.getIndentationSize(document);
		char indentationChar = FormatterUtils.getFormatterCommonPrferences()
				.getIndentationChar(document);
		IndentationObject indentationObject = new IndentationObject();
		indentationObject.indentationWrappedLineSize = indentationWrappedLineSize;
		indentationObject.indentationArrayInitSize = indentationArrayInitSize;
		indentationObject.indentationSize = indentationSize;
		indentationObject.indentationChar = indentationChar;

		boolean enterKeyPressed = document.getLineDelimiter().equals(
				result.toString());
		int lastNonEmptyLineIndex = getIndentationBaseLine(document,
				lineNumber, forOffset, false);
		final int indentationBaseLineIndex = getIndentationBaseLine(document,
				lineNumber, forOffset, true);
		final IRegion lastNonEmptyLine = document
				.getLineInformation(lastNonEmptyLineIndex);
		final IRegion indentationBaseLine = document
				.getLineInformation(indentationBaseLineIndex);
		final String blanks = FormatterUtils.getLineBlanks(document,
				indentationBaseLine);
		result.append(blanks);
		final int lastLineEndOffset = lastNonEmptyLine.getOffset()
				+ lastNonEmptyLine.getLength();
		int offset;
		int line;
		if (forOffset < lastLineEndOffset) {
			offset = forOffset;
			line = lineNumber;
		} else {
			offset = lastLineEndOffset;
			line = lastNonEmptyLineIndex;
		}
		if (shouldIndent(document, offset, line)) {
			indent(document, result, indentationChar, indentationSize);
		} else {
			boolean intended = indentMultiLineCase(document, lineNumber,
					forOffset, enterKeyPressed, result, blanks, commandText,
					indentationObject);
			if (!intended) {
				lastNonEmptyLineIndex = lineNumber;
				if (!enterKeyPressed && lastNonEmptyLineIndex > 0) {
					lastNonEmptyLineIndex--;
				}
				while (lastNonEmptyLineIndex >= 0) {
					IRegion lineInfo = document
							.getLineInformation(lastNonEmptyLineIndex);
					String content = document.get(lineInfo.getOffset(),
							lineInfo.getLength());
					if (content.trim().length() > 0) {
						break;
					}
					lastNonEmptyLineIndex--;
				}
				if (!isEndOfStatement(document, offset, lastNonEmptyLineIndex)) {
					if (indentationBaseLineIndex == lastNonEmptyLineIndex) {
						// this only deal with "$a = 'aaa'.|","|" is the
						// cursor
						// position when we press enter key
						placeStringIndentation(document, lastNonEmptyLineIndex,
								result, indentationObject);
					}
					// if (enterKeyPressed) {
					// this line is one of multi line statement
					// in multi line statement,when user press enter
					// key,
					// we use the same indentation of the last non-empty
					// line.
					result.setLength(result.length() - blanks.length());
					IRegion lineInfo = document
							.getLineInformation(lastNonEmptyLineIndex);
					result.append(FormatterUtils.getLineBlanks(document,
							lineInfo));
					// }
				}
			}

		}
	}

