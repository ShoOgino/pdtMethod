	public static void placeMatchingBlanksForStructuredDocument(
			final IStructuredDocument document, final StringBuffer result,
			final int lineNumber, final int forOffset, String commandText)
			throws BadLocationException {

		IFormatterCommonPrferences formatterCommonPrferences = FormatterUtils
				.getFormatterCommonPrferences();
		int indentationWrappedLineSize = FormatterUtils
				.getFormatterCommonPrferences().getIndentationWrappedLineSize(
						document);
		int indentationArrayInitSize = FormatterUtils
				.getFormatterCommonPrferences().getIndentationArrayInitSize(
						document);
		int indentationSize = FormatterUtils.getFormatterCommonPrferences()
				.getIndentationSize(document);
		char indentationChar = FormatterUtils.getFormatterCommonPrferences()
				.getIndentationChar(document);
		IndentationObject indentationObject = new IndentationObject();
		indentationObject.indentationWrappedLineSize = indentationWrappedLineSize;
		indentationObject.indentationArrayInitSize = indentationArrayInitSize;
		indentationObject.indentationSize = indentationSize;
		indentationObject.indentationChar = indentationChar;

		boolean enterKeyPressed = document.getLineDelimiter().equals(
				result.toString());
		if (forOffset == 0) {
			return;
		}

		int lineOfOffset = document.getLineOfOffset(forOffset);
		IRegion lineInformationOfOffset = document
				.getLineInformation(lineOfOffset);
		final String lineText = document.get(
				lineInformationOfOffset.getOffset(),
				lineInformationOfOffset.getLength());

		int lastNonEmptyLineIndex;
		final int indentationBaseLineIndex;
		final int newForOffset;

		// code for not formatting comments
		if (lineText.trim().startsWith("//") && enterKeyPressed) { //$NON-NLS-1$
			lastNonEmptyLineIndex = lineOfOffset;
			indentationBaseLineIndex = lineOfOffset;
			int i = lineInformationOfOffset.getOffset();
			for (; i < lineInformationOfOffset.getOffset()
					+ lineInformationOfOffset.getLength()
					&& document.getChar(i) != '/'; i++)
				;
			newForOffset = (forOffset < i) ? i : forOffset;

		}
		// end
		else {
			newForOffset = forOffset;
			lastNonEmptyLineIndex = getIndentationBaseLine(document,
					lineNumber, newForOffset, false);
			indentationBaseLineIndex = getIndentationBaseLine(document,
					lineNumber, newForOffset, true);
		}

		final IRegion lastNonEmptyLine = document
				.getLineInformation(lastNonEmptyLineIndex);
		final IRegion indentationBaseLine = document
				.getLineInformation(indentationBaseLineIndex);
		final String blanks = FormatterUtils.getLineBlanks(document,
				indentationBaseLine);
		result.append(blanks);
		final int lastLineEndOffset = lastNonEmptyLine.getOffset()
				+ lastNonEmptyLine.getLength();
		int offset;
		int line;
		if (newForOffset < lastLineEndOffset) {
			offset = newForOffset;
			line = lineNumber;
		} else {
			offset = lastLineEndOffset;
			line = lastNonEmptyLineIndex;
		}
		if (shouldIndent(document, offset, line)) {
			indent(document, result, indentationChar, indentationSize);
		} else {
			boolean intended = indentMultiLineCase(document, lineNumber,
					newForOffset, enterKeyPressed, result, blanks, commandText,
					indentationObject);
			if (!intended) {
				lastNonEmptyLineIndex = lineNumber;
				if (!enterKeyPressed && lastNonEmptyLineIndex > 0) {
					lastNonEmptyLineIndex--;
				}
				while (lastNonEmptyLineIndex >= 0) {
					IRegion lineInfo = document
							.getLineInformation(lastNonEmptyLineIndex);
					String content = document.get(lineInfo.getOffset(),
							lineInfo.getLength());
					if (content.trim().length() > 0) {
						break;
					}
					lastNonEmptyLineIndex--;
				}
				if (!isEndOfStatement(document, offset, lastNonEmptyLineIndex)) {
					if (indentationBaseLineIndex == lastNonEmptyLineIndex) {
						// this only deal with "$a = 'aaa'.|","|" is the
						// cursor
						// position when we press enter key
						placeStringIndentation(document, lastNonEmptyLineIndex,
								result, indentationObject);
					}
					// if (enterKeyPressed) {
					// this line is one of multi line statement
					// in multi line statement,when user press enter
					// key,
					// we use the same indentation of the last non-empty
					// line.
					boolean shouldNotChangeIndent = false;
					if (newForOffset != document.getLength()) {
						final IRegion lineInfo = document
								.getLineInformation(lineNumber);
						int nonEmptyOffset = newForOffset;
						if (!enterKeyPressed) {
							if (nonEmptyOffset == lineInfo.getOffset()) {
								nonEmptyOffset = moveLineStartToNonBlankChar(
										document, nonEmptyOffset, lineNumber) - 1;
							}
						}
						char lineStartChar = document.getChar(nonEmptyOffset);
						if (lineStartChar == PHPHeuristicScanner.RBRACE
						// || lineStartChar == PHPHeuristicScanner.RBRACKET
								|| lineStartChar == PHPHeuristicScanner.RPAREN) {

							PHPHeuristicScanner scanner = PHPHeuristicScanner
									.createHeuristicScanner(document,
											nonEmptyOffset, true);
							if (lineStartChar == PHPHeuristicScanner.RBRACE) {
								int peer = scanner.findOpeningPeer(
										nonEmptyOffset - 1,
										PHPHeuristicScanner.UNBOUND,
										PHPHeuristicScanner.LBRACE,
										PHPHeuristicScanner.RBRACE);
								if (peer != PHPHeuristicScanner.NOT_FOUND) {
									shouldNotChangeIndent = true;
								}
							} else if (lineStartChar == PHPHeuristicScanner.RBRACKET) {
								int peer = scanner.findOpeningPeer(
										nonEmptyOffset - 1,
										PHPHeuristicScanner.UNBOUND,
										PHPHeuristicScanner.LBRACKET,
										PHPHeuristicScanner.RBRACKET);
								if (peer != PHPHeuristicScanner.NOT_FOUND) {
									shouldNotChangeIndent = true;
								}
							} else {
								int peer = scanner.findOpeningPeer(
										nonEmptyOffset - 1,
										PHPHeuristicScanner.UNBOUND,
										PHPHeuristicScanner.LPAREN,
										PHPHeuristicScanner.RPAREN);
								if (peer != PHPHeuristicScanner.NOT_FOUND) {
									shouldNotChangeIndent = true;
								}
							}
						}
					}

					if (!shouldNotChangeIndent) {
						result.setLength(result.length() - blanks.length());
						IRegion lineInfo = document
								.getLineInformation(lastNonEmptyLineIndex);
						result.append(FormatterUtils.getLineBlanks(document,
								lineInfo));
					}

					// }
				} else {// current is a new statement,check if we should indent
						// it based on indentationBaseLine
					if (result.length() == blanks.length()) {

						final int baseLineEndOffset = indentationBaseLine
								.getOffset() + indentationBaseLine.getLength();
						offset = baseLineEndOffset;
						line = indentationBaseLineIndex;
						if (shouldIndent(document, offset, line)) {
							indent(document, result, indentationChar,
									indentationSize);
						}
					}
				}
			}

		}
	}

