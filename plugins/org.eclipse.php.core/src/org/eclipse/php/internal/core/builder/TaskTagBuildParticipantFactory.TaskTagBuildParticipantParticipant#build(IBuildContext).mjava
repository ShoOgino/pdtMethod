		@Override
		public void build(IBuildContext context) throws CoreException {
			if (Boolean.TRUE.equals(context.get(ParserBuildParticipantFactory.IN_LIBRARY_FOLDER))) {
				// skip syntax check for code inside library folders
				return;
			}

			if (context.getFile() == null) {
				// skip when building external module
				return;
			}

			if (context.getFile().getType() != IResource.FILE || !(PHPToolkitUtil.isPHPFile(context.getFile()))) {
				// process only PHP files
				return;
			}

			final ModuleDeclaration moduleDeclaration = (ModuleDeclaration) context
					.get(IBuildContext.ATTR_MODULE_DECLARATION);

			if (moduleDeclaration instanceof PHPModuleDeclaration) {
				try {
					Pattern[] todos;
					TaskTag[] taskTags;
					if (project != null && project.getProject() != null) {
						todos = TaskPatternsProvider.getInstance().getPatternsForProject(project.getProject());
						taskTags = TaskTagsProvider.getInstance().getProjectTaskTags(project.getProject());
					} else {
						todos = TaskPatternsProvider.getInstance().getPatternsForWorkspace();
						taskTags = TaskTagsProvider.getInstance().getWorkspaceTaskTags();
					}
					if (taskTags == null) {
						taskTags = TaskTagsProvider.getInstance().getWorkspaceTaskTags();
					}

					IDocument document = new Document(new String(context.getContents()));
					for (Comment comment : ((PHPModuleDeclaration) moduleDeclaration).getCommentList()) {
						List<Scalar> foundTaskTags = new ArrayList<>();
						String commentContent = document.get(comment.start(), comment.end() - comment.start());
						// https://bugs.eclipse.org/bugs/show_bug.cgi?id=517510
						if (comment.getCommentType() == Comment.TYPE_MULTILINE
								|| comment.getCommentType() == Comment.TYPE_PHPDOC) {
							if (commentContent.endsWith("*/")) { //$NON-NLS-1$
								commentContent = commentContent.substring(0, commentContent.length() - 2);
							}
						}
						checkForTodo(todos, foundTaskTags, comment.start(), commentContent);
						if (foundTaskTags.isEmpty()) {
							comment.setTaskTags(null);
						} else {
							comment.setTaskTags(foundTaskTags);
							for (int i = 0; i < foundTaskTags.size(); i++) {
								Scalar foundTaskTag = foundTaskTags.get(i);
								String taskKeyword = document.get(foundTaskTag.start(),
										foundTaskTag.end() - foundTaskTag.start());
								int priority = getTaskPriority(taskTags, taskKeyword);
								reportTask(document, context.getTaskReporter(), foundTaskTag.start(),
										comment.start() + commentContent.length(),
										i + 1 < foundTaskTags.size() ? foundTaskTags.get(i + 1) : null, priority);
							}
						}
					}
				} catch (Exception e) {
					Logger.logException(e);
				}
			}
		}

