	/**
	 * Returns the target source range of the given node. Unlike
	 * {@link ASTNode#getStartPosition()} and {@link ASTNode#getLength()}, the
	 * extended source range may include comments and whitespace immediately before
	 * or after the normal source range for the node.
	 * <p>
	 * The returned source ranges must satisfy the following conditions:
	 * <dl>
	 * <li>no two source ranges in an AST may be overlapping</li>
	 * <li>a source range of a parent node must fully cover the source ranges of its
	 * children</li>
	 * </dl>
	 * </p>
	 * <p>
	 * The default implementation uses
	 * {@link CompilationUnit#getExtendedStartPosition(ASTNode)} and
	 * {@link CompilationUnit#getExtendedLength(ASTNode)} to compute the target
	 * source range. Clients may override or extend this method to expand or
	 * contract the source range of the given node. The resulting source range must
	 * cover at least the original source range of the node.
	 * </p>
	 * 
	 * @param node
	 *            the node with a known source range in the compilation unit being
	 *            rewritten
	 * @return the exact source range in the compilation unit being rewritten that
	 *         should be replaced (or deleted)
	 */
	public SourceRange computeSourceRange(ASTNode node) {
		ASTNode root = node.getProgramRoot();
		if (root instanceof Program) {
			Program cu = (Program) root;
			return new SourceRange(cu.getExtendedStartPosition(node), cu.getExtendedLength(node));
		}
		return new SourceRange(node.getStart(), node.getLength());
	}

