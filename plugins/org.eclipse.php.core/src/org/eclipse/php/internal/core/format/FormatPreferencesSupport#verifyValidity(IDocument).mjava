	private void verifyValidity(IDocument document) {
		if (fLastDocument != document) {
			DOMModelForPHP editorModel = null;
			try {
				editorModel = (DOMModelForPHP) StructuredModelManager.getModelManager().getExistingModelForRead(document);
				
				String baseLocation = editorModel.getBaseLocation();
				// The baseLocation may be a path on disk or relative to the
				// workspace root. Don't translate on-disk paths to
				// in-workspace resources.
				IPath basePath = new Path(baseLocation);
				IFile file = null;
				if (basePath.segmentCount() > 1) {
					file = ResourcesPlugin.getWorkspace().getRoot().getFile(basePath);
					if (!file.exists()) {
						file = null;
					}
				}
				if (file == null) {
					return;
				}

				IProject project = file.getProject();
				if (fLastProject != project) {
					fLastProject = project;
					verifyListening();
				}
			} finally {
				if (editorModel != null)
					editorModel.releaseFromRead();
			}
		}

		if (fLastDocument != document || preferencesChanged) {
			String useTab = preferencesSupport.getPreferencesValue(PHPCoreConstants.FORMATTER_USE_TABS, null, fLastProject);
			String indentSize = preferencesSupport.getPreferencesValue(PHPCoreConstants.FORMATTER_INDENTATION_SIZE, null, fLastProject);

			indentationChar = (Boolean.valueOf(useTab).booleanValue()) ? '\t' : ' ';
			indentationSize = Integer.valueOf(indentSize).intValue();

			preferencesChanged = false;
			fLastDocument = document;
		}
	}

