	/**
	 * Converts IEvaluatedType to IModelElement, if found
	 * @param evaluatedType Evaluated type
	 * @param filter Whether to filter result using file network dependencies.
	 * @return model elements
	 */
	public static IModelElement[] getModelElements(IEvaluatedType type, ISourceModuleContext context, boolean filter) {
		IModelElement[] elements = null;

		if (type instanceof ModelClassType) {
			return new IModelElement[] { ((ModelClassType)type).getTypeDeclaration() };
		}
		if (type instanceof PHPClassType) {
			elements = PHPMixinModel.getInstance().getClass(((PHPClassType)type).getTypeName());
		}
		else if (type instanceof AmbiguousType) {
			List<IModelElement> tmpList = new LinkedList<IModelElement>();
			IEvaluatedType[] possibleTypes = ((AmbiguousType)type).getPossibleTypes();
			for (IEvaluatedType possibleType : possibleTypes) {
				IModelElement[] tmpArray = getModelElements(possibleType, context, false);
				if (tmpArray != null) {
					tmpList.addAll(Arrays.asList(tmpArray));
				}
			}
			elements = tmpList.toArray(new IModelElement[tmpList.size()]);
		}

		// Filter model elements using file network:
		if (filter) {
			elements = PHPModelUtils.fileNetworkFilter(context.getSourceModule(), elements);
		}

		return elements;
	}

