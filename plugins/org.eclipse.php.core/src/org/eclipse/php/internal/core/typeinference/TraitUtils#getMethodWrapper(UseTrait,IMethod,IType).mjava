	private static List<IMethod> getMethodWrapper(UseTrait useTrait, IMethod method, IType type) {

		List<IMethod> result = new ArrayList<>();
		String methodName = method.getElementName();
		TraitPrecedenceObject tpo = useTrait.getPrecedenceMap().get(methodName);
		boolean shouldAddSelf = true;
		boolean changeVisibility = false;
		if (tpo != null) {
			shouldAddSelf = false;
		}
		List<TraitAliasObject> aliasList = useTrait.getAliasMap().get(methodName);
		String fullName = PHPModelUtils.getFullName(method.getDeclaringType());
		if (aliasList != null) {
			for (TraitAliasObject tao : aliasList) {
				if ((tao.traitName == null || fullName.equals(tao.traitName))) {
					IMethod alias = new MethodWrapper(method, tao.newMethodVisibility, tao.newMethodName, type);
					result.add(alias);
					if (methodName.equals(tao.newMethodName) || tao.newMethodName == null) {
						changeVisibility = true;
					}
				}
				if (tpo != null) {
					if (!fullName.equals(tpo.traitName)) {
						continue;
					} else {
						shouldAddSelf = true;
					}
				}
			}
		} else {
			if (tpo != null) {
				if (fullName.equals(tpo.traitName)) {
					shouldAddSelf = true;
				}
			}
		}
		if (shouldAddSelf && !changeVisibility) {
			result.add(method);
		}
		// TraitAliasObject tao = useTrait.getAliasMap().get(fieldName);
		return result;

	}

