	private IModelElement[] lookForMatchingElements(PHPDocTag[] tags, ISourceModule sourceModule,
			ModuleDeclaration parsedUnit, int offset, int end, boolean isMethodOrFunction, IModelAccessCache cache)
			throws ModelException {
		if (tags == null) {
			return null;
		}
		for (PHPDocTag phpDocTag : tags) {
			if (phpDocTag.sourceStart() <= offset && phpDocTag.sourceEnd() >= end) {
				if (phpDocTag.getTagKind() == TagKind.INHERITDOC) {
					Declaration declaration = ASTUtils.findDeclarationAfterPHPdoc(parsedUnit, offset);
					if (declaration != null) {
						IModelElement element = sourceModule.getElementAt(declaration.sourceStart());
						if (element != null) {
							try {
								if (element.getElementType() == IModelElement.METHOD) {
									IType type = (IType) element.getParent();
									return PHPModelUtils.getSuperTypeHierarchyMethod(type, null,
											element.getElementName(), true, null);
								} else if (element.getElementType() == IModelElement.FIELD) {
									IType type = (IType) element.getParent();
									return PHPModelUtils.getSuperTypeHierarchyField(type, null,
											element.getElementName(), true, null);
								} else if (element.getElementType() == IModelElement.TYPE) {
									return PHPModelUtils.getSuperClasses((IType) element, null);
								}
							} catch (CoreException e) {
								Logger.logException(e);
							}
						}
					}
					return null;
				} else {
					List<TypeReference> typeReferences = phpDocTag.getTypeReferences();
					return lookForMatchingElements(typeReferences.toArray(new TypeReference[typeReferences.size()]),
							sourceModule, offset, end, isMethodOrFunction, cache);
				}
			}
		}
		return null;
	}

