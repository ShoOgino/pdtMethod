	private void reportField(IField field, int relevance, boolean removeDollar) {
		if (processedElements.contains(field)) {
			return;
		}
		processedElements.add(field);

		if (relevance < 1) {
			relevance = 1;
		}

		String elementName = field.getElementName();
		char[] name = elementName.toCharArray();

		// accept result
		noProposal = false;
		if (!requestor.isIgnored(CompletionProposal.FIELD_REF)) {
			CompletionProposal proposal = createProposal(CompletionProposal.FIELD_REF, actualCompletionPosition);

			proposal.setModelElement(field);
			proposal.setName(name);

			String completion = elementName;
			if (removeDollar && completion.startsWith(DOLLAR)) {
				completion = completion.substring(1);
			}

			proposal.setCompletion(completion.toCharArray());
			try {
				proposal.setFlags(field.getFlags());
			} catch (ModelException e) {
			}

			int replaceStart = this.startPosition - this.offset;
			int replaceEnd = this.endPosition - this.offset;
			if (replaceEnd < wordEndOffset) {
				replaceEnd = wordEndOffset;
			}
			proposal.setReplaceRange(replaceStart, replaceEnd);

			proposal.setRelevance(relevance);
			this.requestor.accept(proposal);
			if (DEBUG) {
				this.printDebug(proposal);
			}
		}

	}

