	private IModelElement[] processPHPCallExpression(PHPCallExpression callExpression, ISourceModule sourceModule,
			ModuleDeclaration parsedUnit, int offset, IContext context, IModelAccessCache cache) throws ModelException {
		IDLTKSearchScope scope = SearchEngine.createSearchScope(sourceModule.getScriptProject());
		if (callExpression.getReceiver() != null) {
			IEvaluatedType receiverType = PHPTypeInferenceUtils.resolveExpression(sourceModule, parsedUnit, context,
					callExpression.getReceiver());
			// (new class1())->avc2()[1][1]->avc1()

			if (receiverType != null) {
				IModelElement[] elements = null;
				if ((receiverType instanceof PHPClassType) && ((PHPClassType) receiverType).isGlobal()) {
					elements = PHPModelAccess.getDefault().findTypes(receiverType.getTypeName(), MatchRule.EXACT, 0, 0,
							scope, null);
					LinkedList<IModelElement> result = new LinkedList<>();
					for (IModelElement element : elements) {
						IModelElement parent = element.getParent();
						while (parent.getParent() instanceof IType) {
							parent = parent.getParent();
						}
						if ((parent instanceof IType) && PHPFlags.isNamespace(((IType) parent).getFlags())) {
							// Do nothing
						} else {
							result.add(element);
						}
					}
					elements = result.toArray(new IType[result.size()]);
				} else {
					elements = PHPTypeInferenceUtils.getModelElements(receiverType, (ISourceModuleContext) context,
							offset);
				}
				if (elements == null) {
					return EMPTY;
				}

				List<IModelElement> methods = new LinkedList<>();
				for (IModelElement element : elements) {
					if (element instanceof IType) {
						IType type = (IType) element;
						try {
							ITypeHierarchy hierarchy = cache.getSuperTypeHierarchy(type, null);
							IMethod[] method = PHPModelUtils.getFirstTypeHierarchyMethod(type, hierarchy,
									callExpression.getName(), true, null);
							methods.addAll(Arrays.asList(method));
						} catch (CoreException e) {
							PHPCorePlugin.log(e);
						}
					}
				}
				return methods.toArray(new IModelElement[methods.size()]);
			}
		} else {
			SimpleReference callName = callExpression.getCallName();
			String methodName = callName instanceof FullyQualifiedReference
					? ((FullyQualifiedReference) callName).getFullyQualifiedName() : callName.getName();
			IMember[] members = PHPModelUtils.getFunctions(methodName, sourceModule, offset, cache, null);
			if (members.length == 0) {
				final IType currentNamespace = PHPModelUtils.getCurrentNamespace(sourceModule,
						callExpression.sourceStart());

				Map<String, UsePart> useParts = PHPModelUtils.getAliasToNSMap(methodName, parsedUnit, offset,
						currentNamespace, true);
				if (useParts.containsKey(methodName)) {
					String fullName = useParts.get(methodName).getFullUseStatementName();
					if (fullName.length() > 0 && fullName.charAt(0) != NamespaceReference.NAMESPACE_SEPARATOR) {
						fullName = NamespaceReference.NAMESPACE_SEPARATOR + fullName;
					}
					members = PHPModelUtils.getFunctions(fullName, sourceModule, offset, null, null);
				}
			}

			return members;
		}
		return EMPTY;
	}

