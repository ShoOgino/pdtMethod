	/**
	 * Adds a new import to the rewriter's record and returns a type reference that
	 * can be used in the code. The type binding can only be an array or non-generic
	 * type.
	 * <p>
	 * No imports are added for types that are already known. If a import for a type
	 * is recorded to be removed, this record is discarded instead.
	 * </p>
	 * <p>
	 * The content of the compilation unit itself is actually not modified in any
	 * way by this method; rather, the rewriter just records that a new import has
	 * been added.
	 * </p>
	 * 
	 * @param qualifiedTypeName
	 *            the qualified type name of the type to be added
	 * @param context
	 *            an optional context that knows about types visible in the current
	 *            scope or <code>null</code> to use the default context only using
	 *            the available imports.
	 * @return returns a type to which the type binding can be assigned to. The
	 *         returned type contains is unqualified when an import could be added
	 *         or was already known. It is fully qualified, if an import conflict
	 *         prevented the import.
	 */
	public String addImport(NamespaceDeclaration namespace, String qualifiedTypeName, ImportRewriteContext context) {
		return internalAddImport(namespace, qualifiedTypeName, null, ImportRewriteContext.KIND_TYPE, context);
	}

