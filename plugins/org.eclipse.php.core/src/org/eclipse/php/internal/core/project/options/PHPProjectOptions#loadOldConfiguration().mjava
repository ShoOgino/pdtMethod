	private void loadOldConfiguration() {
		final IFile optionsFile = project.getFile(OLD_FILE_NAME);
		if (!optionsFile.exists()) {
			return;
		}

		final List<IIncludePathEntry> paths = new ArrayList<IIncludePathEntry>();
		includePathEntries = EMPTY_INCLUDEPATH;
		try {
			Element cpElement;
			final Reader reader = new InputStreamReader(optionsFile.getContents());

			try {
				final DocumentBuilder parser = DocumentBuilderFactory.newInstance().newDocumentBuilder();
				cpElement = parser.parse(new InputSource(reader)).getDocumentElement();
			} catch (final Exception e) {
				throw new IOException(CoreMessages.getString("PHPProjectOptions_1"));
			} finally {
				reader.close();
			}

			if (!cpElement.getNodeName().equalsIgnoreCase(TAG_OPTIONS))
				throw new IOException(CoreMessages.getString("PHPProjectOptions_1"));
			NodeList list = cpElement.getElementsByTagName(TAG_OPTION);
			int length = list.getLength();
			for (int i = 0; i < length; ++i) {
				final Element element = (Element) list.item(i);
				final String key = element.getAttribute("name"); //$NON-NLS-1$
				final String value = element.getFirstChild().getNodeValue().trim();
				preferences.put(key, value);
			}

			list = cpElement.getElementsByTagName(IncludePathEntry.TAG_INCLUDEPATH);
			if (list.getLength() > 0) {
				final Element includePathElement = (Element) list.item(0);
				list = includePathElement.getElementsByTagName(IncludePathEntry.TAG_INCLUDEPATHENTRY);
				length = list.getLength();

				for (int i = 0; i < length; ++i) {
					final Node node = list.item(i);
					if (node.getNodeType() == Node.ELEMENT_NODE) {
						final IIncludePathEntry entry = IncludePathEntry.elementDecode((Element) node, this);
						paths.add(entry);
					}
				}

				final int pathSize = paths.size();
				includePathEntries = new IIncludePathEntry[pathSize];
				paths.toArray(includePathEntries);
			}

			saveIncludePath();

			optionsFile.delete(true, new NullProgressMonitor());
		} catch (final IOException e) {
			PHPCorePlugin.log(e);
		} catch (final CoreException e) {
			PHPCorePlugin.log(e);
		}
	}

