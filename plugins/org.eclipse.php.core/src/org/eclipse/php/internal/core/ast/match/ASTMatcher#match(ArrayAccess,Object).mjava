	/**
	 * Returns whether the given node and the other object match.
	 * <p>
	 * The default implementation provided by this class tests whether the other
	 * object is a node of the same type with structurally isomorphic child
	 * subtrees. Subclasses may override this method as needed.
	 * </p>
	 * 
	 * @param node
	 *            the node
	 * @param other
	 *            the other object, or <code>null</code>
	 * @return <code>true</code> if the subtree matches, or <code>false</code>
	 *         if they do not match or the other object has a different node
	 *         type or is <code>null</code>
	 * @since 3.1
	 */

	public boolean match(ArrayAccess node, Object other) {
		if (!(other instanceof ArrayAccess)) {
			return false;
		}
		ArrayAccess o = (ArrayAccess) other;

		return (safeSubtreeMatch(node.getName(), o.getName())
				&& safeSubtreeMatch(node.getIndex(), o.getIndex()) && safeEquals(
				node.getArrayType(), o.getArrayType()));
	}

