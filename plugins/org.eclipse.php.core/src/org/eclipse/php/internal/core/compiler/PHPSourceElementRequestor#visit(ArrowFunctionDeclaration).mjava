	public boolean visit(ArrowFunctionDeclaration arrowMethod) throws Exception {
		fNodes.push(arrowMethod);
		methodGlobalVars.add(new HashSet<String>());

		Collection<FormalParameter> arguments = arrowMethod.getArguments();
		StringBuilder metadata = new StringBuilder();
		String[] parameters;
		ISourceElementRequestor.MethodInfo mi = new ISourceElementRequestor.MethodInfo();
		mi.modifiers = Modifiers.AccPublic;
		if (arguments != null) {
			parameters = new String[arguments.size()];
			Iterator<FormalParameter> i = arguments.iterator();
			int indx = 0;
			while (i.hasNext()) {
				FormalParameter arg = i.next();
				metadata.append(arg.getName());
				parameters[indx] = arg.getName();
				if (arg.isVariadic()) {
					mi.modifiers |= IPHPModifiers.AccVariadic;
				}
				indx++;
				if (i.hasNext()) {
					metadata.append(","); //$NON-NLS-1$
				}
			}
		} else {
			parameters = new String[0];
		}

		mi.parameterNames = parameters;
		mi.name = PHPCoreConstants.ANONYMOUS;

		if (arrowMethod.isStatic()) {
			mi.modifiers |= Modifiers.AccStatic;
		}
		mi.nameSourceStart = arrowMethod.sourceStart();
		mi.nameSourceEnd = arrowMethod.sourceEnd();
		mi.declarationStart = mi.nameSourceStart;
		mi.isConstructor = false;

		fInfoStack.push(mi);
		this.fRequestor.enterMethod(mi);
		this.fInMethod = true;

		if (arguments != null) {
			for (Argument arg : arguments) {
				ISourceElementRequestor.FieldInfo info = new ISourceElementRequestor.FieldInfo();
				info.name = arg.getName();
				info.modifiers = Modifiers.AccPublic;
				info.nameSourceStart = arg.getNameStart();
				info.nameSourceEnd = arg.getNameEnd() - 1;
				info.declarationStart = arg.sourceStart();
				fRequestor.enterField(info);
				fRequestor.exitField(arg.sourceEnd() - 1);
			}
		}
		return true;
	}

