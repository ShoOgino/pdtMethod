	/**
	 * Resolve magic methods defined by the @method tag
	 */
	private void resolveMagicMethodDeclaration(IMethod method, String methodName) {
		final IModelElement parent = method.getParent();
		if (parent.getElementType() != IModelElement.TYPE) {
			return;
		}

		IType type = (IType) parent;
		final PHPDocBlock docBlock = PHPModelUtils.getDocBlock(type);
		if (docBlock != null) {
			IType currentNamespace = PHPModelUtils.getCurrentNamespace(type);
			for (PHPDocTag tag : docBlock.getTags()) {
				final int tagKind = tag.getTagKind();
				if (tagKind == PHPDocTag.METHOD) {
					final String typeName = getTypeBinding(methodName, tag);
					if (typeName != null) {
						Matcher m = PHPDocClassVariableEvaluator.ARRAY_TYPE_PATTERN
								.matcher(typeName);
						if (m.find()) {
							evaluated.add(PHPDocClassVariableEvaluator
									.getArrayType(m.group(), currentNamespace,
											tag.sourceStart()));
						} else if (typeName
								.endsWith(PHPDocClassVariableEvaluator.BRACKETS)
								&& typeName.length() > 2) {
							int offset = tag.sourceStart();
							evaluated.add(PHPDocClassVariableEvaluator
									.getArrayType(
											typeName.substring(0,
													typeName.length() - 2),
											currentNamespace, offset));
						} else {
							IEvaluatedType resolved = PHPSimpleTypes
									.fromString(typeName);
							if (resolved == null) {
								resolved = new PHPClassType(typeName);
							}
							evaluated.add(resolved);
						}
					}
				}
			}
		}
	}

