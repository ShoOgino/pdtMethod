	/**
	 * Finds the method that is overridden by the given method. The search is bottom-up, so this
	 * returns the nearest defining/declaring method.
	 * @param overriding overriding method
	 * @param testVisibility If true the result is tested on visibility. Null is returned if the method is not visible.
	 * @return the method binding representing the method
	 */
	public static IMethodBinding findOverriddenMethod(IMethodBinding overriding, boolean testVisibility) {
		int modifiers = overriding.getModifiers();
		if (testVisibility && (PHPFlags.isPrivate(modifiers) || PHPFlags.isStatic(modifiers)/* || overriding.isConstructor()*/)) {
			return null;
		}

		ITypeBinding type = overriding.getDeclaringClass();
		if (type == null) {
			return null;
		}
		if (type.getSuperclass() != null) {
			IMethodBinding res = findOverriddenMethodInHierarchy(type.getSuperclass(), overriding);
			if (res != null && !PHPFlags.isPrivate(res.getModifiers())) {
				if (!testVisibility || isVisibleInHierarchy(res/*, overriding.getDeclaringClass().getPackage()*/)) {
					return res;
				}
			}
		}
		ITypeBinding[] interfaces = type.getInterfaces();
		for (int i = 0; i < interfaces.length; i++) {
			IMethodBinding res = findOverriddenMethodInHierarchy(interfaces[i], overriding);
			if (res != null) {
				return res; // methods from interfaces are always public and therefore visible
			}
		}
		return null;
	}

