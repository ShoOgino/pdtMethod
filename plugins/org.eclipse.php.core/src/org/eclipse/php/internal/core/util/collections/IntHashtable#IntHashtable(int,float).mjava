	/**
	 * Constructs a new, empty hashtable with the specified initial capacity and the
	 * specified load factor.
	 * 
	 * @param initialCapacity
	 *                            the initial capacity of the hashtable.
	 * @param loadFactor
	 *                            the load factor of the hashtable.
	 * @exception IllegalArgumentException
	 *                                         if the initial capacity is less than
	 *                                         zero, or if the load factor is
	 *                                         nonpositive.
	 */
	public IntHashtable(int initialCapacity, float loadFactor) {
		if (initialCapacity < 0) {
			throw new IllegalArgumentException("Illegal Capacity: " + initialCapacity); //$NON-NLS-1$
		}
		if (loadFactor <= 0 || Float.isNaN(loadFactor)) {
			throw new IllegalArgumentException("Illegal Load: " + loadFactor); //$NON-NLS-1$
		}

		if (initialCapacity == 0) {
			initialCapacity = 1;
		}
		this.loadFactor = loadFactor;
		table = new Entry[initialCapacity];
		threshold = (int) (initialCapacity * loadFactor);
	}

