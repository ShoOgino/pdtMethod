	/**
	 * This function returns statement text depending on the current offset. It
	 * searches backwards (starting from offset - 1) until it finds delimiter
	 * ';', '{' or '}'.
	 * 
	 * @param offset
	 *            The absolute offset in the document
	 * @param sdRegion
	 *            Structured document region of the offset
	 * @param removeComments
	 *            Flag determining whether to remove comments in the resulted
	 *            text sequence
	 * @param ignoreDelimiters
	 *            Delimiter types that will be ignored while searching backwards
	 *            (ignoreDelimiters can be null). Supported delimiter types are
	 *            PHPRegionTypes.PHP_CURLY_OPEN, PHPRegionTypes.PHP_CURLY_CLOSE
	 *            and PHPRegionTypes.PHP_SEMICOLON
	 * @param limit
	 *            Controls how many times a delimiter (from ignoreDelimiters)
	 *            should be ignored. 0 or less means no limit.
	 * @param foundDelimiter
	 *            If foundDelimiter is not null and foundDelimiter length is
	 *            greater than 0 then foundDelimiter[0] will contain the
	 *            delimiter region found while searching backwards (or null if
	 *            no delimiter was found, typically when the backward search
	 *            reached the beginning of sdRegion). Note that the
	 *            foundDelimiter[0] offset will be <b>relative to the beginning
	 *            of the document</b>.
	 * 
	 * @return text sequence of the statement, cannot be null
	 */
	public static @NonNull TextSequence getStatement(int offset, @NonNull IStructuredDocumentRegion sdRegion,
			boolean removeComments, @Nullable String[] ignoreDelimiters, int limit,
			@Nullable ContextRegion[] foundDelimiter) {
		if (foundDelimiter != null && foundDelimiter.length != 0) {
			foundDelimiter[0] = null;
		}
		int documentOffset = offset;
		if (documentOffset == sdRegion.getEndOffset()) {
			documentOffset -= 1;
		}
		ITextRegion tRegion = sdRegion.getRegionAtCharacterOffset(documentOffset);

		ITextRegionCollection container = sdRegion;

		if (tRegion instanceof ITextRegionContainer) {
			container = (ITextRegionContainer) tRegion;
			tRegion = container.getRegionAtCharacterOffset(offset);
		}
		if (tRegion != null && tRegion.getType() == PHPRegionContext.PHP_CLOSE) {
			tRegion = container.getRegionAtCharacterOffset(container.getStartOffset() + tRegion.getStart() - 1);
		}

		// This text region must be of type PhpScriptRegion:
		if (tRegion != null && tRegion.getType() == PHPRegionContext.PHP_CONTENT) {
			IPHPScriptRegion phpScriptRegion = (IPHPScriptRegion) tRegion;

			try {
				// Set default starting position to the beginning of the
				// PhpScriptRegion:
				int startOffset = container.getStartOffset() + phpScriptRegion.getStart();

				// Now, search backwards for the statement start (in this
				// PhpScriptRegion):
				ITextRegion startTokenRegion;
				if (documentOffset == startOffset) {
					startTokenRegion = phpScriptRegion.getPHPToken(0);
				} else {
					startTokenRegion = phpScriptRegion.getPHPToken(offset - startOffset - 1);
				}

				List<IRegion> comments = new ArrayList<>();
				int nbIgnoredDelimiters = 0;
				while (true) {
					// If statement start is at the beginning of the PHP script
					// region:
					if (startTokenRegion.getStart() == 0) {
						break;
					}

					String type = startTokenRegion.getType();
					if (removeComments && PHPPartitionTypes.isPHPCommentState(type)) {
						comments.add(new Region(phpScriptRegion.getStart() + startTokenRegion.getStart(),
								startTokenRegion.getLength()));
					}

					if ((type == PHPRegionTypes.PHP_CURLY_CLOSE || type == PHPRegionTypes.PHP_CURLY_OPEN
							|| type == PHPRegionTypes.PHP_SEMICOLON
					/* || startTokenRegion.getType() == PHPRegionTypes.PHP_IF */)
							&& !(ArrayUtils.contains(ignoreDelimiters, type)
									&& (limit <= 0 || nbIgnoredDelimiters++ < limit))) {
						if (foundDelimiter != null && foundDelimiter.length != 0) {
							foundDelimiter[0] = new ContextRegion(type, startOffset + startTokenRegion.getStart(),
									startTokenRegion.getTextLength(), startTokenRegion.getLength());
						}
						// Calculate starting position of the statement (it
						// should go right after this startTokenRegion):
						startOffset += startTokenRegion.getEnd();
						break;
					}
					startTokenRegion = phpScriptRegion.getPHPToken(startTokenRegion.getStart() - 1);
				}
				TextSequence textSequence = TextSequenceUtilities.createTextSequence(sdRegion, startOffset,
						offset - startOffset);

				// remove comments
				if (removeComments) {
					textSequence = removeComments(textSequence, comments);
				}

				// remove spaces from start.
				return textSequence.subTextSequence(readForwardSpaces(textSequence, 0), textSequence.length());
			} catch (BadLocationException e) {
			}
		}

		return TextSequenceUtilities.createTextSequence(sdRegion, 0, 0);
	}

