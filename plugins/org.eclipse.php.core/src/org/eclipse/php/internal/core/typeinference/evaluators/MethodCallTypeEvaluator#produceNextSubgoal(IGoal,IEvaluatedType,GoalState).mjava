	private IGoal produceNextSubgoal(IGoal previousGoal, IEvaluatedType previousResult, GoalState goalState) {

		ExpressionTypeGoal typedGoal = (ExpressionTypeGoal) goal;
		CallExpression expression = (CallExpression) typedGoal.getExpression();

		// just starting to evaluate method, evaluate method receiver first:
		if (state == STATE_INIT) {
			ASTNode receiver = expression.getReceiver();
			if (receiver == null) {
				state = STATE_GOT_RECEIVER;
			} else {
				state = STATE_WAITING_RECEIVER;
				return new ExpressionTypeGoal(goal.getContext(), receiver);
			}
		}

		// receiver must been evaluated now, lets evaluate method return type:
		if (state == STATE_WAITING_RECEIVER) {
			receiverType = previousResult;
			previousResult = null;
			if (receiverType == null) {
				return null;
			}
			state = STATE_GOT_RECEIVER;
		}

		// we've evaluated receiver, lets evaluate the method return type now
		// (using PHP Doc first):
		if (state == STATE_GOT_RECEIVER) {
			state = STATE_WAITING_METHOD_PHPDOC;
			IContext context = typedGoal.getContext();
			return new PHPDocMethodReturnTypeGoal(context, receiverType, expression.getName(),
					getFunctionCallArgs(context, expression), expression.sourceStart());
		}

		// PHPDoc logic is done, start evaluating 'return' statements here:
		if (state == STATE_WAITING_METHOD_PHPDOC) {
			if (goalState != GoalState.PRUNED && previousResult != null && previousResult != UnknownType.INSTANCE) {
				result = previousResult;
				previousResult = null;
				// BUGS 404031 & 525480, stop when it's not a "generic"
				// simple element
				if (!PHPTypeInferenceUtils.isGenericSimple(result)) {
					return null;
				}
			}
			state = STATE_WAITING_METHOD;
			IContext context = typedGoal.getContext();
			return new MethodElementReturnTypeGoal(context, receiverType, expression.getName(),
					getFunctionCallArgs(context, expression), expression.sourceStart());
		}

		if (state == STATE_WAITING_METHOD) {
			if (goalState != GoalState.PRUNED && previousResult != null && previousResult != UnknownType.INSTANCE) {
				if (result != null) {
					result = PHPTypeInferenceUtils
							.combineTypes(Arrays.asList(new IEvaluatedType[] { result, previousResult }));
				} else {
					result = previousResult;
					previousResult = null;
				}
			}
		}
		return null;
	}

