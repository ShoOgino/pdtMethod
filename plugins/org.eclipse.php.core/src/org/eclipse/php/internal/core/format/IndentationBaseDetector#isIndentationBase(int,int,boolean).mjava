	private boolean isIndentationBase(int offset, int currLineIndex, boolean checkMultiLineStatement)
			throws BadLocationException {
		final IRegion lineInfo = document.getLineInformation(currLineIndex);

		if (lineInfo.getLength() == 0) {
			return false;
		}

		final int checkedOffset = Math.min(lineInfo.getOffset() + lineInfo.getLength(), offset);

		int lineStartOffset = lineInfo.getOffset();

		if (IndentationUtils.isBlanks(document, lineStartOffset, checkedOffset)) {
			return false;
		}

		PHPHeuristicScanner scanner = PHPHeuristicScanner.createHeuristicScanner(document, checkedOffset, true);
		if (IndentationUtils.inBracelessBlock(scanner, document, checkedOffset)) {
			return true;
		}

		// NB: lineStartOffset could be greater than checkedOffset after this
		// loop
		while (Character.isWhitespace(document.getChar(lineStartOffset))) {
			lineStartOffset++;
		}

		// need to get to the first tRegion - so that we wont get the state of
		// the tRegion in the previous line

		// checked line beginning offset (after incrementing spaces in beginning
		final String checkedLineBeginState = FormatterUtils.getPartitionType(document, lineStartOffset, true);

		// checked line end
		final String checkedLineEndState = FormatterUtils.getPartitionType(document, checkedOffset, true);

		// the current potential line for formatting begin offset
		final String forLineEndState = FormatterUtils.getPartitionType(document, offset);
		if (isMultilineAfterBraceless(checkedOffset)) {
			// braceless block end go up
			return false;
		}

		boolean shouldNotConsiderAsIndentationBase = shouldNotConsiderAsIndentationBase(checkedLineBeginState,
				forLineEndState);

		if ((shouldNotConsiderAsIndentationBase || (checkMultiLineStatement && isInMultiLineStatement(currLineIndex)
				&& !isMultilineContentInsideBraceless(checkedOffset)))
				&& !lineContainIncompleteBlock(checkedOffset, lineStartOffset)) {
			return false;
		}

		// Fix bug #201688
		if (((checkedLineBeginState == PHPPartitionTypes.PHP_MULTI_LINE_COMMENT)
				|| (checkedLineBeginState == PHPPartitionTypes.PHP_DOC))
				&& (checkedLineBeginState == forLineEndState)) {
			// the whole document
			final IStructuredDocumentRegion sdRegion = document.getRegionAtCharacterOffset(lineStartOffset);
			// the whole PHP script
			ITextRegion phpScriptRegion = sdRegion.getRegionAtCharacterOffset(lineStartOffset);
			int phpContentStartOffset = sdRegion.getStartOffset(phpScriptRegion);

			if (phpScriptRegion instanceof ITextRegionContainer) {
				ITextRegionContainer container = (ITextRegionContainer) phpScriptRegion;
				phpScriptRegion = container.getRegionAtCharacterOffset(lineStartOffset);
				phpContentStartOffset += phpScriptRegion.getStart();
			}

			if (phpScriptRegion instanceof IPhpScriptRegion) {
				IPhpScriptRegion scriptRegion = (IPhpScriptRegion) phpScriptRegion;
				// the region we are trying to check if it is the indent base
				// for the line we need to format
				ContextRegion checkedRegion = (ContextRegion) scriptRegion
						.getPhpToken(lineStartOffset - phpContentStartOffset);
				// the current region we need to format
				ContextRegion currentRegion = (ContextRegion) scriptRegion.getPhpToken(offset - phpContentStartOffset);
				String checkedType = checkedRegion.getType();
				String currentType = currentRegion.getType();
				// if we are in the beginning of a comment (DOC or Multi
				// comment) and we have before another
				// Doc comment or Multi comment, the base line we'll be the
				// beginning of the previous multi comment
				if (PHPPartitionTypes.isPHPDocStartRegion(currentType)
						|| PHPPartitionTypes.isPHPMultiLineCommentStartRegion(currentType)) {
					return PHPPartitionTypes.isPHPDocStartRegion(checkedType)
							|| PHPPartitionTypes.isPHPMultiLineCommentStartRegion(checkedType);
				}
			}
		}
		return lineShouldIndent(checkedLineBeginState, checkedLineEndState) || forLineEndState == checkedLineBeginState;
	}

