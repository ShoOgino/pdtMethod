	private static IType[] getTypes(int position, IContext context, IEvaluatedType evaluatedType) {
		List<IType> tmpList = new LinkedList<>();
		List<IEvaluatedType> possibleTypes = new LinkedList<>();
		if (evaluatedType instanceof MultiTypeType) {
			possibleTypes = ((MultiTypeType) evaluatedType).getTypes();
		} else if (evaluatedType instanceof AmbiguousType) {
			possibleTypes.addAll(Arrays.asList(((AmbiguousType) evaluatedType).getPossibleTypes()));
		} else {
			possibleTypes.add(evaluatedType);
		}
		for (IEvaluatedType possibleType : possibleTypes) {
			IType[] tmpArray;
			if (possibleType instanceof MultiTypeType || possibleType instanceof AmbiguousType) {
				tmpArray = getTypes(position, context, possibleType);
			} else {
				tmpArray = PHPTypeInferenceUtils.getModelElements(possibleType, (ISourceModuleContext) context,
						position, (IModelAccessCache) null);
			}
			if (tmpArray != null) {
				tmpList.addAll(Arrays.asList(tmpArray));
			}
		}
		// the elements are filtered already
		return tmpList.toArray(new IType[tmpList.size()]);
	}

