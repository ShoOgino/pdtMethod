	protected IMethod[] getMethods() {
		AbstractMethodReturnTypeGoal typedGoal = (AbstractMethodReturnTypeGoal) goal;
		ISourceModule sourceModule = ((ISourceModuleContext) goal.getContext())
				.getSourceModule();
		IType[] types = typedGoal.getTypes();
		String methodName = typedGoal.getMethodName();

		List<IMethod> methods = new LinkedList<IMethod>();
		if (types == null) {
			try {
				methods.addAll(Arrays.asList(PHPModelUtils.getFunctions(
						methodName, sourceModule, 0, null, null)));
			} catch (ModelException e) {
				if (DLTKCore.DEBUG) {
					e.printStackTrace();
				}
			}
		} else {
			try {
				for (IType type : types) {
					IMethod[] typeMethods = PHPModelUtils.getTypeMethod(type,
							methodName, true);
					if (typeMethods.length == 0) {
						typeMethods = PHPModelUtils
								.getSuperTypeHierarchyMethod(type, methodName,
										true, null);
					}
					if (typeMethods.length > 0) {
						methods.add(typeMethods[0]);
					}
				}
			} catch (CoreException e) {
				if (DLTKCore.DEBUG) {
					e.printStackTrace();
				}
			}
		}

		return (IMethod[]) methods.toArray(new IMethod[methods.size()]);
	}

