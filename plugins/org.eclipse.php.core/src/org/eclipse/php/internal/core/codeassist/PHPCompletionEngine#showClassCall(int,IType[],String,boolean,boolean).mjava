	protected void showClassCall(int offset, IType[] className, String prefix, boolean isThisVar, boolean addVariableDollar) {
		if (className == null) {
			return;
		}

		this.setSourceRange(offset - prefix.length(), offset);

		int relevanceMethod = RELEVANCE_METHOD;

		boolean showNonStrictOptions = showNonStrictOptions();

		int mask = 0;
		if (requestor.isContextInformationMode()) {
			mask |= CodeAssistUtils.EXACT_NAME;
		}
		for (IType type : className) {
			if (!prefix.startsWith(DOLLAR)) {
				IMethod[] methods = CodeAssistUtils.getClassMethods(type, prefix, mask);
				for (IModelElement method : methods) {
					try {
						if ((((IMethod) method).getFlags() & IPHPModifiers.Internal) == 0 && (showNonStrictOptions || isThisVar || (((IMethod) method).getFlags() & Modifiers.AccPrivate) == 0)) {
							reportMethod((IMethod) method, relevanceMethod--);
						}
					} catch (ModelException e) {
						if (DLTKCore.DEBUG_COMPLETION) {
							e.printStackTrace();
						}
					}
				}
			}

			IModelElement[] fields = CodeAssistUtils.getClassFields(type, prefix, mask);
			int relevanceVar = RELEVANCE_VAR;
			int relevanceConst = RELEVANCE_CONST;
			for (IModelElement element : fields) {
				IField field = (IField) element;
				try {
					if ((field.getFlags() & Modifiers.AccStatic) == 0) {
						if ((field.getFlags() & Modifiers.AccConstant) != 0) {
							reportField(field, relevanceConst--, true);
						} else if (showNonStrictOptions || isThisVar || (field.getFlags() & Modifiers.AccPrivate) == 0) {
							reportField(field, relevanceVar--, true);
						}
					}
				} catch (ModelException e) {
					if (DLTKCore.DEBUG_COMPLETION) {
						e.printStackTrace();
					}
				}
			}
		}
	}

