	/**
	 * Returns whether this type is subtype compatible with the given type.
	 * 
	 * @param type
	 *            the type to check compatibility against
	 * @return <code>true</code> if this type is subtype compatible with the
	 *         given type, and <code>false</code> otherwise
	 * 
	 *         NOTE: if one of the resolved types are not compatible with this
	 *         type <code>false</code> is returned
	 */
	public boolean isSubTypeCompatible(ITypeBinding otherType) {

		if (otherType == null || elements == null || elements.length == 0) {
			return false;
		}

		boolean isSubTypeCompatible = false;
		for (IModelElement element : elements) {
			IType type = (IType) element;
			try {
				if (type.getSuperClasses() == null
						|| type.getSuperClasses().length == 0) {
					return false;
				}

				ITypeHierarchy supertypeHierarchy = hierarchy.get(type);
				if (supertypeHierarchy == null) {
					supertypeHierarchy = type
							.newSupertypeHierarchy(new NullProgressMonitor());
					hierarchy.put(type, supertypeHierarchy);
				}
				IModelElement[] otherElements = ((TypeBinding) otherType).elements;
				if (otherElements != null) {
					for (IModelElement modelElement : otherElements) {
						if (modelElement instanceof IType
								&& supertypeHierarchy
										.contains((IType) modelElement)) {
							isSubTypeCompatible = true;
							break;
						}
					}
				}
			} catch (ModelException e) {
				if (DLTKCore.DEBUG) {
					e.printStackTrace();
				}
			}
		}
		return isSubTypeCompatible;
	}

