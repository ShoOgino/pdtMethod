	private void updateReferences(int start, int end) {
		// (re)set references
		variableReference = null;
		singleTypeReference = null;
		typeReferences = new ArrayList<TypeReference>();
		allReferencesWithOrigOrder = new ArrayList<SimpleReference>();
		descTexts = new ArrayList<String>();

		int valueStart = start + matchedTag.length();
		// For all unsupported tags
		int wordsToSkip = 0;

		if (tagKind == RETURN || tagKind == VAR || tagKind == THROWS
				|| tagKind == SEE) {

			// Read first word
			int wordStart = PHPTextSequenceUtilities
					.readForwardSpaces(value, 0);
			int wordEnd = PHPTextSequenceUtilities.readForwardUntilSpaces(
					value, wordStart);

			if (tagKind == VAR && wordStart < wordEnd) {

				String word = value.substring(wordStart, wordEnd);
				if (word.charAt(0) == '$') {
					variableReference = new VariableReference(valueStart
							+ wordStart, valueStart + wordEnd, word);
					allReferencesWithOrigOrder.add(variableReference);
					wordsToSkip++;
					// Read next word
					wordStart = PHPTextSequenceUtilities.readForwardSpaces(
							value, wordEnd);
					wordEnd = PHPTextSequenceUtilities.readForwardUntilSpaces(
							value, wordStart);
				}
			}
			if (wordStart < wordEnd) {

				String word = value.substring(wordStart, wordEnd);
				singleTypeReference = new TypeReference(valueStart + wordStart,
						valueStart + wordEnd, word);
				splitSingleTypeReference(singleTypeReference, typeReferences);
				allReferencesWithOrigOrder.addAll(typeReferences);
				wordsToSkip++;
				// Read next word
				wordStart = PHPTextSequenceUtilities.readForwardSpaces(value,
						wordEnd);
				wordEnd = PHPTextSequenceUtilities.readForwardUntilSpaces(
						value, wordStart);
			}
			if (tagKind == VAR && variableReference == null
					&& wordStart < wordEnd) {

				String word = value.substring(wordStart, wordEnd);
				if (word.charAt(0) == '$') {
					variableReference = new VariableReference(valueStart
							+ wordStart, valueStart + wordEnd, word);
					allReferencesWithOrigOrder.add(variableReference);
					wordsToSkip++;
				}
			}
		} else if (tagKind == PARAM || tagKind == PROPERTY
				|| tagKind == PROPERTY_READ || tagKind == PROPERTY_WRITE) {

			int firstWordStart = PHPTextSequenceUtilities.readForwardSpaces(
					value, 0);
			int firstWordEnd = PHPTextSequenceUtilities.readForwardUntilSpaces(
					value, firstWordStart);
			if (firstWordStart < firstWordEnd) {

				int secondWordStart = PHPTextSequenceUtilities
						.readForwardSpaces(value, firstWordEnd);
				int secondWordEnd = PHPTextSequenceUtilities
						.readForwardUntilSpaces(value, secondWordStart);
				if (secondWordStart < secondWordEnd) {

					String firstWord = value.substring(firstWordStart,
							firstWordEnd);
					String secondWord = value.substring(secondWordStart,
							secondWordEnd);
					if (firstWord.charAt(0) == '$'
							|| firstWord.startsWith("...$")) { //$NON-NLS-1$
						variableReference = new VariableReference(valueStart
								+ firstWordStart, valueStart + firstWordEnd,
								firstWord);
						singleTypeReference = new TypeReference(valueStart
								+ secondWordStart, valueStart + secondWordEnd,
								secondWord);
						splitSingleTypeReference(singleTypeReference,
								typeReferences);
						allReferencesWithOrigOrder.add(variableReference);
						allReferencesWithOrigOrder.addAll(typeReferences);
						// The two words following the tag name were splitted
						// into two references
						wordsToSkip = 2;
					} else if (secondWord.charAt(0) == '$'
							|| secondWord.startsWith("...$")) { //$NON-NLS-1$
						variableReference = new VariableReference(valueStart
								+ secondWordStart, valueStart + secondWordEnd,
								secondWord);
						singleTypeReference = new TypeReference(valueStart
								+ firstWordStart, valueStart + firstWordEnd,
								firstWord);
						splitSingleTypeReference(singleTypeReference,
								typeReferences);
						allReferencesWithOrigOrder.addAll(typeReferences);
						allReferencesWithOrigOrder.add(variableReference);
						// The two words following the tag name were splitted
						// into two references
						wordsToSkip = 2;
					}
				}
			}
		}

		descTexts = getDescTexts(wordsToSkip);
		trimmedDescText = getTrimmedDescText(wordsToSkip);
	}

