	/**
	 * Finds USE statement by the alias name
	 * @param moduleDeclaration The AST root node
	 * @param aliasName The alias name.
	 * @param offset Current position in the file (this is needed since we don't want to take USE statements placed below
	 * 		current position into account)
	 * @return USE statement part node, or <code>null</code> in case relevant statement couldn't be found
	 */
	public static UsePart findUseStatementByAlias(ModuleDeclaration moduleDeclaration, final String aliasName, final int offset) {
		final UsePart[] result = new UsePart[1];
		try {
			moduleDeclaration.traverse(new ASTVisitor() {
				boolean found;

				public boolean visit(Statement s) throws Exception {
					if (s instanceof UseStatement) {
						UseStatement useStatement = (UseStatement) s;
						for (UsePart usePart : useStatement.getParts()) {
							String alias;
							if (usePart.getAlias() != null) {
								alias = usePart.getAlias().getName();
							} else {
								// In case there's no alias - the alias is the last segment of the namespace name:
								alias = usePart.getNamespace().getName();
							}
							if (aliasName.equalsIgnoreCase(alias)) {
								found = true;
								result[0] = usePart;
								break;
							}
						}
					}
					return visitGeneral(s);
				}

				public boolean visitGeneral(ASTNode node) throws Exception {
					if (found || node.sourceStart() > offset) {
						return false;
					}
					return super.visitGeneral(node);
				}
			});
		} catch (Exception e) {
			Logger.logException(e);
		}
		
		return result[0];
	}

