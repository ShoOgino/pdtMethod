	public void complete(org.eclipse.dltk.compiler.env.ISourceModule module, int position, int i) {

		if (requestor instanceof IPHPCompletionRequestor) {
			IPHPCompletionRequestor phpCompletionRequestor = (IPHPCompletionRequestor) requestor;

			IDocument d = phpCompletionRequestor.getDocument();
			if (d instanceof IStructuredDocument) {
				document = (IStructuredDocument) d;
			}

			explicit = phpCompletionRequestor.isExplicit();
		}

		if (document == null) {
			IStructuredModel structuredModel = null;
			try {
				IFile file = (IFile) module.getModelElement().getResource();
				if (file != null) {
					if (file.exists()) {
						structuredModel = StructuredModelManager.getModelManager().getExistingModelForRead(file);
						if (structuredModel != null) {
							document = structuredModel.getStructuredDocument();
						} else {
							document = StructuredModelManager.getModelManager().createStructuredDocumentFor(file);
						}
					} else {
						document = StructuredModelManager.getModelManager().createNewStructuredDocumentFor(file);
						document.set(module.getSourceContents());
					}
				}
			} catch (Exception e) {
				if (DLTKCore.DEBUG_COMPLETION) {
					e.printStackTrace();
				}
			} finally {
				if (structuredModel != null) {
					structuredModel.releaseFromRead();
				}
			}
		}

		if (document != null) {
			try {
				calcCompletionOption(document, position, (ISourceModule)module.getModelElement());
			} catch (BadLocationException e) {
				if (DLTKCore.DEBUG_COMPLETION) {
					e.printStackTrace();
				}
			}
		}
	}

