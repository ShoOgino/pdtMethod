	/**
	 * Reads uncompressed data into an array of bytes. If <code>len</code> is not
	 * zero, the method will block until some input can be decompressed; otherwise,
	 * no bytes are read and <code>0</code> is returned.
	 * 
	 * @param buf
	 *            the buffer into which the data is read
	 * @param off
	 *            the start offset in the destination array <code>b</code>
	 * @param len
	 *            the maximum number of bytes read
	 * @return the actual number of bytes read, or -1 if the end of the compressed
	 *         input stream is reached
	 * @exception NullPointerException
	 *                If <code>buf</code> is <code>null</code>.
	 * @exception IndexOutOfBoundsException
	 *                If <code>off</code> is negative, <code>len</code> is negative,
	 *                or <code>len</code> is greater than
	 *                <code>buf.length - off</code>
	 * @exception IOException
	 *                if an I/O error has occurred or the compressed input data is
	 *                corrupt
	 */
	@Override
	public int read(byte[] buf, int off, int len) throws IOException {
		ensureOpen();
		if (eos) {
			return -1;
		}
		// if reach the end and still read here will throw an exception
		// nomally this will not happen,but it happens when run unit tests
		// so add an isEnd method to class PharEntryBufferedRandomInputStream
		if (in instanceof PharEntryBufferedRandomInputStream && ((PharEntryBufferedRandomInputStream) in).isEnd()) {
			len = -1;
		} else {
			len = super.read(buf, off, len);
		}
		if (len == -1) {
			// readTrailer();
			eos = true;
		} else {
			crc.update(buf, off, len);
		}
		return len;
	}

