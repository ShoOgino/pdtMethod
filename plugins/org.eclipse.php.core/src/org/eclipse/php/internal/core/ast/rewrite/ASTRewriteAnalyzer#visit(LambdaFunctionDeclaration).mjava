	@Override
	public boolean visit(LambdaFunctionDeclaration lambdaFunctionDeclaration) {
		if (!hasChildrenChanges(lambdaFunctionDeclaration)) {
			return doVisitUnchangedChildren(lambdaFunctionDeclaration);
		}

		// Is static
		RewriteEvent eventStatic = getEvent(lambdaFunctionDeclaration, LambdaFunctionDeclaration.IS_STATIC);
		if (eventStatic != null && eventStatic.getChangeKind() == RewriteEvent.REPLACED) {
			boolean isStatic = (Boolean) eventStatic.getNewValue();

			try {
				TextEditGroup editGroup = getEditGroup(eventStatic);
				// we need to remove everything before the word 'function'.
				int startDeletionFrom = lambdaFunctionDeclaration.getStart();
				int startOffset = getFunctionStartPosition(startDeletionFrom);
				doTextRemove(startDeletionFrom, startOffset - startDeletionFrom, editGroup);

				if (isStatic) {
					// we need to insert the 'static' keyword
					doTextInsert(startDeletionFrom, "static ", editGroup); //$NON-NLS-1$
				}
			} catch (CoreException e) {
				handleException(e);
			}
		}

		// Reference
		RewriteEvent eventReference = getEvent(lambdaFunctionDeclaration,
				LambdaFunctionDeclaration.IS_REFERENCE_PROPERTY);
		if (eventReference != null && eventReference.getChangeKind() == RewriteEvent.REPLACED) {
			boolean isReference = (Boolean) eventReference.getNewValue();

			try {
				TextEditGroup editGroup = getEditGroup(eventReference);
				// we need to remove everything between the word 'function' to
				// the start of the function's
				// name and then place a blank or an &.
				int startDeletionFrom = getFunctionStartPosition(lambdaFunctionDeclaration.getStart()) + 8; // 8
				// is the 'function' keyword length
				int startOffset = getLeftParenthesesStartPosition(startDeletionFrom);
				doTextRemove(startDeletionFrom, startOffset - startDeletionFrom, editGroup);
				if (isReference) {
					// we need to insert the &
					doTextInsert(startDeletionFrom, " & ", editGroup); //$NON-NLS-1$
				} else {
					doTextInsert(startDeletionFrom, " ", editGroup); //$NON-NLS-1$
				}
			} catch (CoreException e) {
				handleException(e);
			}
		}

		// Parameters
		if (isChanged(lambdaFunctionDeclaration, LambdaFunctionDeclaration.FORMAL_PARAMETERS_PROPERTY)) {
			try {
				int startDeletionFrom = getFunctionStartPosition(lambdaFunctionDeclaration.getStart()) + 8; // 8
				// is the 'function' keyword length
				int startOffset = getLeftParenthesesStartPosition(startDeletionFrom);
				rewriteNodeList(lambdaFunctionDeclaration, LambdaFunctionDeclaration.FORMAL_PARAMETERS_PROPERTY,
						startOffset, "", ", "); //$NON-NLS-1$ //$NON-NLS-2$
			} catch (CoreException e) {
				handleException(e);
			}
		} else {
			voidVisit(lambdaFunctionDeclaration, LambdaFunctionDeclaration.FORMAL_PARAMETERS_PROPERTY);
		}

		// Lexical vars
		if (isChanged(lambdaFunctionDeclaration, LambdaFunctionDeclaration.LEXICAL_VARIABLES_PROPERTY)) {
			try {
				int startDeletionFrom = getFunctionStartPosition(lambdaFunctionDeclaration.getStart()) + 8; // 8
				// is the 'function' keyword length
				int startOffset = getRightBraceStartPosition(startDeletionFrom) + 1;
				rewriteNodeList(lambdaFunctionDeclaration, LambdaFunctionDeclaration.LEXICAL_VARIABLES_PROPERTY,
						startOffset, " as ", ", "); //$NON-NLS-1$ //$NON-NLS-2$
			} catch (CoreException e) {
				handleException(e);
			}
		} else {
			voidVisit(lambdaFunctionDeclaration, LambdaFunctionDeclaration.LEXICAL_VARIABLES_PROPERTY);
		}

		// Body
		rewriteRequiredNode(lambdaFunctionDeclaration, LambdaFunctionDeclaration.BODY_PROPERTY);

		return false;
	}

