	private void reportOnContainer(IncludePath includePath, String prefix, ICompletionReporter reporter, String suffix, SourceRange replaceRange, IScriptProject project) {

		final boolean buildpath = includePath.isBuildpath();
		final Object entry = includePath.getEntry();

		IPath prefixPath = new Path(prefix);
		if (!buildpath && entry instanceof IContainer) {
			IContainer container = (IContainer) entry;
			IResource[] members;
			try {
				IPath removeLastSegments = prefixPath;
				IPath lastSegmant = new Path("");
				if (prefixPath.segmentCount() != 0 && !prefix.endsWith("\\") && !prefix.endsWith("/")) {
					removeLastSegments = prefixPath.removeLastSegments(1);
					lastSegmant = new Path(prefixPath.lastSegment());
				}
				if (removeLastSegments.segmentCount() > 0) {
					container = container.getFolder(removeLastSegments);
				}

				members = container.members();
				for (IResource resource : members) {
					final IPath relative = resource.getFullPath().makeRelativeTo(container.getFullPath());
					if (isPrefix(lastSegmant, relative)) {
						final IPath rel = resource.getFullPath().makeRelativeTo(((IContainer) entry).getFullPath());
						final IModelElement modelElement = DLTKCore.create(resource);
						if (resource.getType() == IResource.FILE) {
							if (PHPToolkitUtil.isPhpFile((IFile) resource)) {
								reporter.reportResource(modelElement, rel, suffix, replaceRange);
							}
						} else {
							reporter.reportResource(modelElement, rel, suffix, replaceRange);
						}
					}
				}
			} catch (CoreException e) {
				if (DLTKCore.DEBUG_COMPLETION) {
					e.printStackTrace();
				}
			}
		} else if (buildpath) {
			IBuildpathEntry buildpathEntry = (IBuildpathEntry) entry;
			final int entryKind = buildpathEntry.getEntryKind();

			switch (entryKind) {
				case IBuildpathEntry.BPE_CONTAINER:
					try {
						IProjectFragment[] findProjectFragments = project.findProjectFragments((IBuildpathEntry) entry);
						if (findProjectFragments == null) {
							return;
						}
						for (IProjectFragment projectFragment : findProjectFragments) {
							final IModelElement[] children = projectFragment.getChildren();
							for (IModelElement element : children) {
								final IPath path = element.getPath();
							}
						}
					} catch (ModelException e) {
						Logger.logException(e);
					}
					break;
				default:

			}
		}
	}

