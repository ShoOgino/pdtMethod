	/**
	 * Runs the query to retrieve all global types
	 * 
	 * @param context
	 * @return
	 * @throws BadLocationException
	 */
	protected IType[] getTypes(AbstractCompletionContext context) throws BadLocationException {

		String prefix = context.getPrefix();
		if (prefix.startsWith("$")) { //$NON-NLS-1$
			return EMPTY;
		}

		IDLTKSearchScope scope = createSearchScope();
		if (context.getCompletionRequestor().isContextInformationMode()) {
			return PHPModelAccess.getDefault().findTypes(prefix, MatchRule.EXACT, trueFlag, falseFlag, scope, null);
		}

		List<IType> result = new LinkedList<IType>();
		if (prefix.length() > 1 && prefix.toUpperCase().equals(prefix)) {
			// Search by camel-case
			IType[] types = PHPModelAccess.getDefault().findTypes(prefix, MatchRule.CAMEL_CASE, trueFlag, falseFlag,
					scope, null);

			IType[] namespaces = PHPModelAccess.getDefault().findNamespaces(null, prefix, MatchRule.CAMEL_CASE,
					trueFlag, falseFlag, scope, null);

			result.addAll(Arrays.asList(types));
			result.addAll(CodeAssistUtils.removeDuplicatedElements(namespaces));
		}
		IType[] types = PHPModelAccess.getDefault().findTypes(null, prefix, MatchRule.PREFIX, trueFlag, falseFlag,
				scope, null);
		IType[] namespaces = PHPModelAccess.getDefault().findNamespaces(null, prefix, MatchRule.PREFIX, trueFlag,
				falseFlag, scope, null);

		if (context instanceof NamespaceMemberContext) {
			for (IType type : types) {
				if (PHPModelUtils.getFullName(type).startsWith(prefix)) {
					result.add(type);
				}
			}
			for (IType type : namespaces) {
				if (PHPModelUtils.getFullName(type).startsWith(prefix)) {
					result.add(type);
				}
			}
		} else {
			result.addAll(Arrays.asList(types));
			result.addAll(CodeAssistUtils.removeDuplicatedElements(namespaces));
		}

		return result.toArray(new IType[result.size()]);
	}

