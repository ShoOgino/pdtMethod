	/**
	 * Runs the query to retrieve all global types
	 * 
	 * @param context
	 * @return
	 * @throws BadLocationException
	 */
	protected IType[] getTypes(AbstractCompletionContext context) throws BadLocationException {

		String prefix = context.getPrefix();
		if (prefix.startsWith("$")) { //$NON-NLS-1$
			return EMPTY;
		}

		IDLTKSearchScope scope = createSearchScope();
		if (context.getCompletionRequestor().isContextInformationMode()) {
			return PHPModelAccess.getDefault().findTypes(prefix, MatchRule.EXACT, trueFlag, falseFlag, scope, null);
		}

		List<IType> result = new LinkedList<IType>();
		if (prefix.contains(NamespaceReference.NAMESPACE_DELIMITER)) {
			if ((Modifiers.AccNameSpace & falseFlag) == 0) {
				result.addAll(CodeAssistUtils.removeDuplicatedElements(PHPModelAccess.getDefault().findNamespaces(null,
						prefix, MatchRule.PREFIX, trueFlag, falseFlag, scope, null)));
			}
			result.addAll(Arrays.asList(
					PHPModelAccess.getDefault().findTypes(prefix, MatchRule.PREFIX, trueFlag, falseFlag, scope, null)));
			result.addAll(Arrays.asList(
					PHPModelAccess.getDefault().findTypes(prefix, "", MatchRule.PREFIX, trueFlag, falseFlag, scope, //$NON-NLS-1$
							null)));
		} else {
			result.addAll(Arrays.asList(PHPModelAccess.getDefault().findTypes(null, prefix, MatchRule.PREFIX, trueFlag,
					falseFlag, scope, null)));
			if ((Modifiers.AccNameSpace & falseFlag) == 0) {
				result.addAll(CodeAssistUtils.removeDuplicatedElements(PHPModelAccess.getDefault().findNamespaces(null,
						prefix, MatchRule.PREFIX, trueFlag, falseFlag, scope, null)));
			}

		}

		return result.toArray(new IType[result.size()]);
	}

