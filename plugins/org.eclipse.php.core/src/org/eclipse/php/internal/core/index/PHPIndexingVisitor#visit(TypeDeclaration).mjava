	@Override
	public boolean visit(TypeDeclaration type) throws Exception {
		if (type instanceof NamespaceDeclaration) {
			NamespaceDeclaration namespaceDecl = (NamespaceDeclaration) type;
			fCurrentNamespace = namespaceDecl;
			fLastUseParts.clear();
			if (namespaceDecl.isGlobal()) {
				return visitGeneral(type);
			}
			declarations.push(type);

			int modifiers = type.getModifiers() | Modifiers.AccNameSpace;
			fCurrentQualifier = type.getName();
			Integer count = fCurrentQualifierCounts.get(fCurrentQualifier);
			count = count != null ? count + 1 : 1;
			fCurrentQualifierCounts.put(fCurrentQualifier, count);

			modifiers = markAsDeprecated(modifiers, type);
			StringBuilder metadata = new StringBuilder();
			metadata.append(fCurrentQualifier != null ? fCurrentQualifierCounts.get(fCurrentQualifier) : 1);
			metadata.append(QUALIFIER_SEPERATOR);
			modifyDeclaration(type,
					new DeclarationInfo(IModelElement.PACKAGE_DECLARATION, modifiers, type.sourceStart(),
							type.sourceEnd() - type.sourceStart(), type.getNameStart(),
							type.getNameEnd() - type.getNameStart(), type.getName(), metadata.toString(),
							encodeDocInfo(type), null, null));
		} else {
			Declaration parentDeclaration = null;
			if (!declarations.empty()) {
				parentDeclaration = declarations.peek();
			}
			declarations.push(type);

			if (!(parentDeclaration instanceof NamespaceDeclaration)) {
				type.setModifier(Modifiers.AccGlobal);
			}

			// In case we are entering a nested element
			if (parentDeclaration instanceof MethodDeclaration) {
				if (fCurrentNamespace == null) {
					deferredDeclarations.add(type);
				} else {
					deferredNamespacedDeclarations.add(type);
				}
				return visitGeneral(type);
			}

			int modifiers = type.getModifiers();
			fCurrentParent = type.getName();

			String[] superClasses = processSuperClasses(type);
			StringBuilder metadata = new StringBuilder();
			// https://bugs.eclipse.org/bugs/show_bug.cgi?id=448895
			// See also PHPElementResolver#resolve().
			// A type name can first be used inside a global namespace and after
			// that can be used again as a namespace name,
			// *OR* a name can first be used as a namespace name and after that
			// can be used again as a type name inside a global namespace,
			// we must adjust the qualifier counts otherwise
			// PHPElementResolver#resolve() could generate identical
			// "new IndexType(..., occurenceCount)" model elements for
			// IModelElement.PACKAGE_DECLARATION and IModelElement.TYPE
			// -typed elements sharing same element name. Other IModelElement.*
			// types should be OK, because separate model classes will be used
			// in PHPElementResolver#resolve().
			if (fCurrentQualifier == null
					&& (!fCurrentQualifierCounts.containsKey(type.getName()) || fPreviousQualifier != null)) {
				// Do increment counts for a specific type name only one time
				// per global namespace (or per multiple successive global
				// namespaces).
				if (!fglobalNSQualifiers.contains(type.getName())) {
					Integer count = fCurrentQualifierCounts.get(type.getName());
					count = count != null ? count + 1 : 1;
					fCurrentQualifierCounts.put(type.getName(), count);
					fglobalNSQualifiers.add(type.getName());
				}
			}
			metadata.append(fCurrentQualifier != null ? fCurrentQualifierCounts.get(fCurrentQualifier) : 1);
			metadata.append(QUALIFIER_SEPERATOR);
			for (int i = 0; i < superClasses.length; ++i) {
				metadata.append(superClasses[i]);
				if (i < superClasses.length - 1) {
					metadata.append(","); //$NON-NLS-1$
				}
			}
			modifiers = markAsDeprecated(modifiers, type);
			modifyDeclaration(type, new DeclarationInfo(IModelElement.TYPE, modifiers, type.sourceStart(),
					type.sourceEnd() - type.sourceStart(), type.getNameStart(), type.getNameEnd() - type.getNameStart(),
					type.getName(), metadata.toString(), encodeDocInfo(type), fCurrentQualifier, null));
		}

		for (PHPIndexingVisitorExtension visitor : extensions) {
			visitor.visit(type);
		}

		return visitGeneral(type);
	}

