	@Override
	public void complete(IModuleSource module, int position, int i) {
		if (!PHPCorePlugin.toolkitInitialized) {
			return;
		}
		if (requestor instanceof IPHPCompletionRequestor) {
			((IPHPCompletionRequestor) requestor).setOffset(offset);
		}

		this.module = module;
		relevanceKeyword = RELEVANCE_KEYWORD;
		relevanceMethod = RELEVANCE_METHOD;
		relevanceClass = RELEVANCE_CLASS;
		relevanceVar = RELEVANCE_VAR;
		relevanceConst = RELEVANCE_CONST;

		try {
			ICompletionContextResolver[] contextResolvers;
			ICompletionStrategyFactory[] strategyFactories;
			if (requestor instanceof IPHPCompletionRequestorExtension) {
				contextResolvers = ((IPHPCompletionRequestorExtension) requestor).getContextResolvers();
				strategyFactories = ((IPHPCompletionRequestorExtension) requestor).getStrategyFactories();
			} else {
				contextResolvers = CompletionContextResolver.getActive();
				strategyFactories = CompletionStrategyFactory.getActive();
			}

			CompletionCompanion companion = new CompletionCompanion(requestor, module, position);

			org.eclipse.dltk.core.ISourceModule sourceModule = (org.eclipse.dltk.core.ISourceModule) module
					.getModelElement();

			for (ICompletionContextResolver resolver : contextResolvers) {
				ICompletionContext[] contexts = resolver.resolve(sourceModule, position, requestor, companion);

				if (ArrayUtils.isNotEmpty(contexts)) {
					for (ICompletionStrategyFactory factory : strategyFactories) {
						ICompletionStrategy[] strategies = factory.create(contexts);

						if (ArrayUtils.isNotEmpty(strategies)) {
							for (ICompletionStrategy strategy : strategies) {
								strategy.init(companion);
								try {
									strategy.apply(this);
								} catch (Exception e) {
									PHPCorePlugin.log(e);
								}
							}
						}
					}
				}
			}
		} finally {
			processedElements.clear();
			processedPaths.clear();
		}
	}

