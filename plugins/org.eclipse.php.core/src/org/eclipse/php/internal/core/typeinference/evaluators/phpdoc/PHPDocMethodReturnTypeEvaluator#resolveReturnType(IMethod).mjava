	private void resolveReturnType(IMethod method) throws ModelException {
		Program program = null;
		ISourceModule source = method.getSourceModule();
		ASTParser parserForExpected = ASTParser.newParser(ProjectOptions
				.getPhpVersion(source.getScriptProject().getProject()), source);
		try {
			parserForExpected.setSource(source);
			program = parserForExpected.createAST(new NullProgressMonitor());
			program.setSourceModule(source);
		} catch (Exception e) {
		}
		if (program == null) {
			return;
		}

		ASTNode elementAt = program.getElementAt(method.getSourceRange()
				.getOffset());

		if (elementAt.getParent() instanceof MethodDeclaration) {
			elementAt = elementAt.getParent();
		}

		ITypeBinding[] returnTypes = null;
		IFunctionBinding resolvedBinding = null;

		if (elementAt instanceof MethodDeclaration) {
			MethodDeclaration methodDeclaration = (MethodDeclaration) elementAt;
			resolvedBinding = methodDeclaration.resolveMethodBinding();
		} else if (elementAt instanceof FunctionDeclaration) {
			FunctionDeclaration functionDeclaration = (FunctionDeclaration) elementAt;
			resolvedBinding = functionDeclaration.resolveFunctionBinding();
		}
		if (null != resolvedBinding) {
			returnTypes = resolvedBinding.getReturnType();
			IType currentNamespace = PHPModelUtils.getCurrentNamespace(method);
			if (null != returnTypes && returnTypes.length > 0) {
				for (ITypeBinding returnType : returnTypes) {
					if (!returnType.isUnknown() && !returnType.isAmbiguous()) {
						addType(currentNamespace, returnType.getName());
					}
				}
			}

		}
	}

