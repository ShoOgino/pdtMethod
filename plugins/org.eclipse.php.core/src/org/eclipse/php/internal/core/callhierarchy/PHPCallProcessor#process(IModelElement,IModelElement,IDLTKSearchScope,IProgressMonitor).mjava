	public Map<SimpleReference, IModelElement> process(final IModelElement parent, final IModelElement element, IDLTKSearchScope scope, IProgressMonitor monitor) {
		
		final Map<SimpleReference, IModelElement> elements = new HashMap<SimpleReference, IModelElement>();
		
		SearchRequestor requestor = new SearchRequestor() {
			public void acceptSearchMatch(SearchMatch match) {
				if ((match.getAccuracy() != SearchMatch.A_ACCURATE)) {
					return;
				}
				if (match.isInsideDocComment()) {
					return;
				}
				if (match instanceof MethodReferenceMatch) {
					MethodReferenceMatch methodRefMatch = (MethodReferenceMatch) match; 
					IMethod method = (IMethod) match.getElement();
					PHPCallExpression callExpression = (PHPCallExpression) methodRefMatch.getNode();
					ASTNode receiver = callExpression.getReceiver();
					
					// check that the method call receiver has the same type as original element class:
					if (element.getParent() instanceof IType && receiver != null) {
						IType declaringType = (IType) element.getParent();
						IEvaluatedType resolvedType = PHPTypeInferenceUtils.resolveExpression(method.getSourceModule(), receiver);
						if (resolvedType.getTypeName().equalsIgnoreCase(declaringType.getElementName())) {
							SimpleReference ref = new SimpleReference(match.getOffset(), match.getOffset() + match.getLength(), ""); //$NON-NLS-1$
							elements.put(ref, method);
						}
					} else if (receiver == null) { // if this the original element is function, receiver must be null
						SimpleReference ref = new SimpleReference(match.getOffset(), match.getOffset() + match.getLength(), ""); //$NON-NLS-1$
						elements.put(ref, method);
					}
				}
			}
		};

		SearchPattern pattern = SearchPattern.createPattern(element, IDLTKSearchConstants.REFERENCES, GENERICS_AGNOSTIC_MATCH_RULE, scope.getLanguageToolkit());
		try {
			searchEngine.search(pattern, new SearchParticipant[] { SearchEngine.getDefaultSearchParticipant() }, scope, requestor, monitor);
		} catch (CoreException e) {
			Logger.logException(e);
		}
		return elements;
	}

