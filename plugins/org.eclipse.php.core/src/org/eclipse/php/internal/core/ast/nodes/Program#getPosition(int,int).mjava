	/**
	 * Given a line number and column number, returns the corresponding position
	 * in the original source string. Returns -2 if no line number information
	 * is available for this compilation unit. Returns the total size of the
	 * source string if <code>line</code> is greater than the actual number
	 * lines in the unit. Returns -1 if <code>column</code> is less than 0, or
	 * the position of the last character of the line if <code>column</code> is
	 * beyond the legal range, or the given line number is less than one.
	 * 
	 * @param line
	 *            the one-based line number
	 * @param column
	 *            the zero-based column number
	 * @return the 0-based character position in the source string;
	 *         <code>-2</code> if line/column number information is not known
	 *         for this compilation unit or <code>-1</code> the inputs are not
	 *         valid
	 * @since 3.2
	 */
	public int getPosition(int line, int column) {
		if (this.lineEndTable == null)
			return -2;
		if (line < 1 || column < 0)
			return -1;
		int length;
		if ((length = this.lineEndTable.length) == 0) {
			if (line != 1)
				return -1;
			return column >= getStart() + getLength() ? -1 : column;
		}
		if (line == 1) {
			final int endOfLine = this.lineEndTable[0];
			return column > endOfLine ? -1 : column;
		} else if (line > length + 1) {
			// greater than the number of lines in the source string.
			return -1;
		}
		// -1 to for one-based to zero-based conversion.
		// -1, again, to get previous line.
		final int previousLineOffset = this.lineEndTable[line - 2];
		// previousLineOffset + 1 is the first character of the current line
		final int offsetForLine = previousLineOffset + 1;
		final int currentLineEnd = line == length + 1 ? getStart()
				+ getLength() - 1 : this.lineEndTable[line - 1];
		if ((offsetForLine + column) > currentLineEnd) {
			return -1;
		} else {
			return offsetForLine + column;
		}
	}

