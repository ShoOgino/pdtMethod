	private void loadIncludePath() {
		try {
			String includePathXml = preferences.get(PHPCoreConstants.PHPOPTION_INCLUDE_PATH, null);

			if (includePathXml == null) {
				return;
			}

			Element cpElement;
			final Reader reader = new StringReader(includePathXml);

			try {
				final DocumentBuilder parser = DocumentBuilderFactory.newInstance().newDocumentBuilder();
				cpElement = parser.parse(new InputSource(reader)).getDocumentElement();
			} catch (final Exception e) {
				throw new IOException(CoreMessages.getString("PHPProjectOptions_1"));
			} finally {
				reader.close();
			}

			final List<IIncludePathEntry> paths = new ArrayList<IIncludePathEntry>();
			NodeList list = cpElement.getElementsByTagName(IncludePathEntry.TAG_INCLUDEPATHENTRY);
			for (int i = 0; i < list.getLength(); ++i) {
				final Node node = list.item(i);
				if (node.getNodeType() == Node.ELEMENT_NODE) {
					final IIncludePathEntry entry = IncludePathEntry.elementDecode((Element) node, this);
					paths.add(entry);
				}
			}
			final int pathSize = paths.size();
			includePathEntries = new IIncludePathEntry[pathSize];
			paths.toArray(includePathEntries);
		} catch (IOException e) {
			PHPCorePlugin.log(e);
		} finally {

		}
	}

