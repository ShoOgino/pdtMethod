	/**
	 * Report variable declaration in the given scope
	 * @param var Variable declaration. Can either contain dollar or not (in case of field access declaration)
	 * @param scope Scope that this variable is declared in
	 * @return new model key
	 * @throws Exception
	 */
	protected String reportVariableDeclaration(SimpleReference var, Scope scope) throws Exception {
		if (scope == null) {
			throw new NullPointerException("Scope must not be null");
		}

		// Check whether this variable is global (that means it was previously declared as global):
		if (var instanceof VariableReference) {
			Set<String> globalVars = globalVariables.peek();
			if (globalVars.contains(var.getName())) {
				// Replace given scope with the global scope:
				scope = sourceModuleScope;
			}
		}

		IField obj = null;
		String name = var.getName();
		if (moduleAvailable) {
			IModelElement element = findModelElementFor(var);
			if (element instanceof IField) {
				obj = (IField) element;
			}
		}
		if (obj == null && sourceModule != null) {
			obj = new FakeField((ModelElement) sourceModule, name, var.sourceStart(), var.sourceEnd() - var.sourceStart());
		}
		return scope.reportVariable(name, obj);
	}

