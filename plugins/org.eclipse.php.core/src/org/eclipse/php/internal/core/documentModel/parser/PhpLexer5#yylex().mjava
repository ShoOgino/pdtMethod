  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public String yylex() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 104: 
          { popState();return WHITESPACE; }
        case 709: break;
        case 409: 
          { return PHPDOC_SEE; }
        case 710: break;
        case 421: 
          { return PHPDOC_VAR; }
        case 711: break;
        case 487: 
          { return PHPDOC_NAME; }
        case 712: break;
        case 488: 
          { return PHPDOC_DESC; }
        case 713: break;
        case 492: 
          { return PHPDOC_TODO; }
        case 714: break;
        case 497: 
          { return PHPDOC_USES; }
        case 715: break;
        case 503: 
          { return PHPDOC_LINK; }
        case 716: break;
        case 678: 
          { return PHPDOC_PROPERTY; }
        case 717: break;
        case 675: 
          { return PHPDOC_CATEGORY; }
        case 718: break;
        case 672: 
          { return PHPDOC_TUTORIAL; }
        case 719: break;
        case 671: 
          { return PHPDOC_INTERNAL; }
        case 720: break;
        case 94: 
        case 95: 
        case 96: 
          { return PHPDOC_COMMENT; }
        case 721: break;
        case 640: 
          { return PHPDOC_EXAMPLE; }
        case 722: break;
        case 651: 
          { return PHPDOC_LICENSE; }
        case 723: break;
        case 653: 
          { return PHPDOC_PACKAGE; }
        case 724: break;
        case 654: 
          { return PHPDOC_VERSION; }
        case 725: break;
        case 669: 
          { return PHPDOC_ABSTRACT; }
        case 726: break;
        case 103: 
          { return UNKNOWN_TOKEN; }
        case 727: break;
        case 558: 
          { return PHPDOC_FINAL; }
        case 728: break;
        case 562: 
          { return PHPDOC_SINCE; }
        case 729: break;
        case 567: 
          { return PHPDOC_PARAM; }
        case 730: break;
        case 570: 
          { return PHPDOC_MAGIC; }
        case 731: break;
        case 601: 
          { return PHPDOC_RETURN; }
        case 732: break;
        case 603: 
          { return PHPDOC_AUTHOR; }
        case 733: break;
        case 604: 
          { return PHPDOC_ACCESS; }
        case 734: break;
        case 607: 
          { return PHPDOC_IGNORE; }
        case 735: break;
        case 609: 
          { return PHPDOC_THROWS; }
        case 736: break;
        case 613: 
          { return PHPDOC_STATIC; }
        case 737: break;
        case 618: 
          { return PHPDOC_METHOD; }
        case 738: break;
        case 620: 
          { return PHPDOC_GLOBAL; }
        case 739: break;
        case 700: 
          { return PHPDOC_SUBPACKAGE; }
        case 740: break;
        case 699: 
          { return PHPDOC_FILESOURCE; }
        case 741: break;
        case 698: 
          { return PHPDOC_DEPRECATED; }
        case 742: break;
        case 692: 
          { return PHPDOC_STATICVAR; }
        case 743: break;
        case 691: 
          { return PHPDOC_COPYRIGHT; }
        case 744: break;
        case 688: 
          { return PHPDOC_EXCEPTION; }
        case 745: break;
        case 87: 
        case 90: 
          { //the difference from the original rules comes from the fact that we took ';' out out of tokens 
	return UNKNOWN_TOKEN;
 }
        case 746: break;
        case 207: 
          { 
    popState();
    return PHPDOC_COMMENT_END;
 }
        case 747: break;
        case 59: 
          { 
    if (!phpStack.isEmpty()) {
        popState();
    }
    return  PHP_CURLY_CLOSE;
 }
        case 748: break;
        case 202: 
          { 
    int label_len = yylength() - 1;

    if (yytext().charAt(label_len-1)==';') {
	    label_len--;
    }

    if (label_len==heredoc_len && yytext().substring(0,label_len).equals(heredoc)) {
        heredoc=null;
        heredoc_len=0;
        yybegin(ST_PHP_IN_SCRIPTING);
        return PHP_HEREDOC_TAG;
    } else {
        return PHP_CONSTANT_ENCAPSED_STRING;
    }
 }
        case 749: break;
        case 276: 
          { 
    return PHP_VAR;
 }
        case 750: break;
        case 261: 
          { 
    return PHP_USE;
 }
        case 751: break;
        case 255: 
          { 
    return PHP_FOR;
 }
        case 752: break;
        case 253: 
          { 
    return PHP_TRY;
 }
        case 753: break;
        case 246: 
          { 
    return PHP_DIE;
 }
        case 754: break;
        case 243: 
          { 
    return PHP_NEW;
 }
        case 755: break;
        case 199: 
        case 200: 
          { 
    yypushback(1);
    return PHP_ENCAPSED_AND_WHITESPACE;
 }
        case 756: break;
        case 183: 
        case 184: 
        case 187: 
          { 
    yypushback(1);
    return PHP_ENCAPSED_AND_WHITESPACE;
 }
        case 757: break;
        case 140: 
          { 
    return PHP_IF;
 }
        case 758: break;
        case 137: 
          { 
    return PHP_DO;
 }
        case 759: break;
        case 134: 
          { 
    return PHP_AS;
 }
        case 760: break;
        case 225: 
          { 
	if (asp_tags) {
	    return PHP_CLOSETAG;
	}
	String text = yytext();
	if(text.indexOf('\r') != -1 || text.indexOf('\n') != -1 ){
		popState();
	}
	return PHP_LINE_COMMENT;
 }
        case 761: break;
        case 224: 
          { 
    popState();
    return PHP_LINE_COMMENT;
 }
        case 762: break;
        case 206: 
          { 
    popState();
    return PHP_COMMENT_END;
 }
        case 763: break;
        case 80: 
        case 81: 
          { 
	yypushback(1);
	yybegin(ST_PHP_HEREDOC);
 }
        case 764: break;
        case 89: 
          { 
	yypushback(1);
	popState();
	return PHP_ENCAPSED_AND_WHITESPACE;
 }
        case 765: break;
        case 91: 
          { 
	popState();
	return PHP_TOKEN;
 }
        case 766: break;
        case 432: 
        case 433: 
          { 
    int bprefix = (yytext().charAt(0) != '<') ? 1 : 0;
    int startString=3+bprefix;
    heredoc_len = yylength()-bprefix-3-1-(yytext().charAt(yylength()-2)=='\r'?1:0);
    while ((yytext().charAt(startString) == ' ') || (yytext().charAt(startString) == '\t')) {
        startString++;
        heredoc_len--;
    }
    heredoc = yytext().substring(startString,heredoc_len+startString);
    yybegin(ST_PHP_START_HEREDOC);
    return PHP_HEREDOC_TAG;
 }
        case 767: break;
        case 294: 
          { 
    int label_len = yylength() - 1;

    if (yytext().charAt(label_len-1)==';') {
	   label_len--;
    }
    if (label_len > heredoc_len && yytext().substring(label_len - heredoc_len,label_len).equals(heredoc)) {
    	   yypushback(1);
        yybegin(ST_PHP_END_HEREDOC);
    }
        return PHP_CONSTANT_ENCAPSED_STRING;
 }
        case 768: break;
        case 14: 
        case 60: 
        case 77: 
        case 78: 
        case 79: 
          { 
    yypushback(1);
    pushState(ST_PHP_HIGHLIGHTING_ERROR);
 }
        case 769: break;
        case 702: 
          { 
    return PHP_INCLUDE_ONCE;
 }
        case 770: break;
        case 701: 
          { 
    return PHP_REQUIRE_ONCE;
 }
        case 771: break;
        case 82: 
          { 
    heredoc=null;
    heredoc_len=0;
    yybegin(ST_PHP_IN_SCRIPTING);
    return PHP_CONSTANT_ENCAPSED_STRING;
 }
        case 772: break;
        case 100: 
        case 101: 
        case 102: 
          { 
    return PHP_LINE_COMMENT;
 }
        case 773: break;
        case 293: 
          { 
	yypushback(1);
	pushState(ST_PHP_VAR_OFFSET);
	return PHP_VARIABLE;
 }
        case 774: break;
        case 185: 
          { 
    pushState(ST_PHP_IN_SCRIPTING);
    return PHP_TOKEN;
 }
        case 775: break;
        case 61: 
          { 
    pushState(ST_PHP_LINE_COMMENT);
    return PHP_LINE_COMMENT;
 }
        case 776: break;
        case 194: 
          { 
    popState();
    pushState(ST_PHP_LOOKING_FOR_PROPERTY);
    return PHP_OBJECT_OPERATOR;
     }
        case 777: break;
        case 114: 
          { 
    pushState(ST_PHP_LOOKING_FOR_PROPERTY);
    return PHP_OBJECT_OPERATOR;
 }
        case 778: break;
        case 703: 
          { 
    return PHP__FUNCTION__;
 }
        case 779: break;
        case 684: 
          { 
    return PHP_IMPLEMENTS;
 }
        case 780: break;
        case 683: 
          { 
    return PHP_INSTANCEOF;
 }
        case 781: break;
        case 680: 
          { 
    return PHP_ENDFOREACH;
 }
        case 782: break;
        case 679: 
          { 
    return PHP_ENDDECLARE;
 }
        case 783: break;
        case 234: 
          { 
    return PHP_NUMBER;
 }
        case 784: break;
        case 178: 
          { 
	return PHP_CLOSETAG;
 }
        case 785: break;
        case 68: 
          { 
    return PHP_ENCAPSED_AND_WHITESPACE;
 }
        case 786: break;
        case 65: 
          { 
    popState();
    return PHP_CONSTANT_ENCAPSED_STRING;
 }
        case 787: break;
        case 29: 
          { 
    return PHP_CURLY_OPEN;
 }
        case 788: break;
        case 15: 
        case 19: 
          { 
    return PHP_NUMBER;
 }
        case 789: break;
        case 92: 
          { 
    return PHP_COMMENT;
 }
        case 790: break;
        case 93: 
          { 
    return PHP_COMMENT;
 }
        case 791: break;
        case 105: 
          { 
    return PHP_NUMBER;
 }
        case 792: break;
        case 471: 
          { 
    return PHP_CASTING;
 }
        case 793: break;
        case 514: 
          { 
    return PHP_ENDFOR;
 }
        case 794: break;
        case 517: 
          { 
    return PHP_ELSEIF;
 }
        case 795: break;
        case 518: 
          { 
    return PHP_RETURN;
 }
        case 796: break;
        case 530: 
          { 
    return PHP_STATIC;
 }
        case 797: break;
        case 531: 
          { 
    return PHP_SWITCH;
 }
        case 798: break;
        case 534: 
          { 
    return PHP_PARENT;
 }
        case 799: break;
        case 535: 
          { 
    return PHP_PUBLIC;
 }
        case 800: break;
        case 540: 
          { 
    return PHP_GLOBAL;
 }
        case 801: break;
        case 573: 
          { 
    return PHP_EXTENDS;
 }
        case 802: break;
        case 578: 
          { 
    return PHP_REQUIRE;
 }
        case 803: break;
        case 580: 
          { 
    return PHP_DEFAULT;
 }
        case 804: break;
        case 581: 
          { 
    return PHP_DECLARE;
 }
        case 805: break;
        case 583: 
          { 
    return PHP_INCLUDE;
 }
        case 806: break;
        case 586: 
          { 
    return PHP_FOREACH;
 }
        case 807: break;
        case 590: 
          { 
    return PHP_PRIVATE;
 }
        case 808: break;
        case 634: 
          { 
    return PHP__FILE__;
 }
        case 809: break;
        case 638: 
          { 
    return PHP__LINE__;
 }
        case 810: break;
        case 163: 
          { 
    return PHP_PAAMAYIM_NEKUDOTAYIM;
 }
        case 811: break;
        case 128: 
          { 
	if (asp_tags) {
	    return PHP_CLOSETAG;
	}
	return UNKNOWN_TOKEN;
 }
        case 812: break;
        case 204: 
          { 
	return PHP_OBJECT_OPERATOR;
 }
        case 813: break;
        case 186: 
          { 
    yypushback(1);
    pushState(ST_PHP_IN_SCRIPTING);
    return PHP_CURLY_OPEN;
 }
        case 814: break;
        case 687: 
          { 
    return PHP__METHOD__;
 }
        case 815: break;
        case 191: 
        case 192: 
        case 193: 
          { 
	yypushback(1);
	return PHP_ENCAPSED_AND_WHITESPACE;
 }
        case 816: break;
        case 119: 
          { 
    return PHP_VARIABLE;
 }
        case 817: break;
        case 25: 
          { 
    return PHP_SEMICOLON;
 }
        case 818: break;
        case 86: 
        case 88: 
          { 
	return PHP_NUMBER;
 }
        case 819: break;
        case 107: 
        case 125: 
        case 126: 
        case 129: 
          { 
    return PHP_OPERATOR;
 }
        case 820: break;
        case 624: 
          { 
    return PHP_ENDWHILE;
 }
        case 821: break;
        case 626: 
          { 
    return PHP_ABSTRACT;
 }
        case 822: break;
        case 631: 
          { 
    return PHP_FUNCTION;
 }
        case 823: break;
        case 632: 
          { 
    return PHP_CONTINUE;
 }
        case 824: break;
        case 657: 
          { 
    return PHP_ENDSWITCH;
 }
        case 825: break;
        case 659: 
          { 
    return PHP_INTERFACE;
 }
        case 826: break;
        case 663: 
          { 
    return PHP_PROTECTED;
 }
        case 827: break;
        case 665: 
          { 
    return PHP__CLASS__;
 }
        case 828: break;
        case 63: 
          { 
	return PHP_ENCAPSED_AND_WHITESPACE;
 }
        case 829: break;
        case 5: 
        case 75: 
        case 76: 
        case 198: 
        case 295: 
          { 
	return PHP_ENCAPSED_AND_WHITESPACE;
 }
        case 830: break;
        case 707: 
          { 
	return PHP_HALT_COMPILER;
 }
        case 831: break;
        case 182: 
        case 205: 
          { 
    pushState(ST_PHP_QUOTES_AFTER_VARIABLE);
    return PHP_VARIABLE;
 }
        case 832: break;
        case 122: 
          { 
    return PHP_CONSTANT_ENCAPSED_STRING;
 }
        case 833: break;
        case 69: 
        case 70: 
        case 71: 
          { 
    return PHP_CONSTANT_ENCAPSED_STRING;
 }
        case 834: break;
        case 64: 
        case 66: 
        case 67: 
          { 
    return PHP_CONSTANT_ENCAPSED_STRING;
 }
        case 835: break;
        case 83: 
        case 85: 
          { 
    yypushback(1);
    popState();
 }
        case 836: break;
        case 334: 
          { 
    return PHP_EVAL;
 }
        case 837: break;
        case 332: 
          { 
    return PHP_ELSE;
 }
        case 838: break;
        case 331: 
          { 
    return PHP_ECHO;
 }
        case 839: break;
        case 324: 
          { 
    return PHP_EXIT;
 }
        case 840: break;
        case 28: 
          { 
    pushState(ST_PHP_BACKQUOTE);
    return PHP_CONSTANT_ENCAPSED_STRING;
 }
        case 841: break;
        case 16: 
        case 18: 
        case 24: 
        case 26: 
        case 30: 
        case 31: 
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
        case 54: 
        case 56: 
        case 62: 
          { 
    return PHP_TOKEN;
 }
        case 842: break;
        case 17: 
        case 20: 
        case 21: 
        case 22: 
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 55: 
        case 57: 
        case 58: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
        case 112: 
        case 113: 
        case 117: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 135: 
        case 136: 
        case 138: 
        case 139: 
        case 141: 
        case 142: 
        case 143: 
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
        case 160: 
        case 161: 
        case 162: 
        case 164: 
        case 175: 
        case 176: 
        case 227: 
        case 228: 
        case 229: 
        case 230: 
        case 231: 
        case 232: 
        case 233: 
        case 236: 
        case 239: 
        case 240: 
        case 241: 
        case 242: 
        case 244: 
        case 245: 
        case 247: 
        case 248: 
        case 249: 
        case 250: 
        case 251: 
        case 252: 
        case 254: 
        case 256: 
        case 257: 
        case 258: 
        case 259: 
        case 260: 
        case 262: 
        case 263: 
        case 264: 
        case 265: 
        case 266: 
        case 267: 
        case 268: 
        case 269: 
        case 270: 
        case 271: 
        case 272: 
        case 273: 
        case 274: 
        case 275: 
        case 287: 
        case 288: 
        case 289: 
        case 290: 
        case 291: 
        case 292: 
        case 325: 
        case 326: 
        case 327: 
        case 328: 
        case 329: 
        case 330: 
        case 333: 
        case 335: 
        case 338: 
        case 339: 
        case 340: 
        case 341: 
        case 342: 
        case 343: 
        case 344: 
        case 345: 
        case 346: 
        case 347: 
        case 348: 
        case 350: 
        case 351: 
        case 353: 
        case 354: 
        case 355: 
        case 356: 
        case 357: 
        case 358: 
        case 359: 
        case 361: 
        case 362: 
        case 364: 
        case 365: 
        case 366: 
        case 368: 
        case 369: 
        case 370: 
        case 371: 
        case 372: 
        case 383: 
        case 384: 
        case 385: 
        case 386: 
        case 387: 
        case 388: 
        case 389: 
        case 423: 
        case 424: 
        case 426: 
        case 427: 
        case 428: 
        case 429: 
        case 434: 
        case 435: 
        case 436: 
        case 438: 
        case 439: 
        case 440: 
        case 441: 
        case 442: 
        case 444: 
        case 446: 
        case 449: 
        case 451: 
        case 456: 
        case 457: 
        case 459: 
        case 461: 
        case 462: 
        case 463: 
        case 474: 
        case 475: 
        case 476: 
        case 477: 
        case 478: 
        case 479: 
        case 480: 
        case 512: 
        case 513: 
        case 515: 
        case 516: 
        case 519: 
        case 520: 
        case 521: 
        case 522: 
        case 523: 
        case 524: 
        case 525: 
        case 526: 
        case 527: 
        case 528: 
        case 529: 
        case 532: 
        case 533: 
        case 541: 
        case 542: 
        case 543: 
        case 544: 
        case 545: 
        case 546: 
        case 574: 
        case 575: 
        case 576: 
        case 577: 
        case 579: 
        case 582: 
        case 584: 
        case 585: 
        case 587: 
        case 588: 
        case 589: 
        case 593: 
        case 594: 
        case 595: 
        case 596: 
        case 597: 
        case 598: 
        case 621: 
        case 622: 
        case 623: 
        case 625: 
        case 627: 
        case 628: 
        case 629: 
        case 630: 
        case 633: 
        case 635: 
        case 636: 
        case 637: 
        case 639: 
        case 655: 
        case 656: 
        case 658: 
        case 660: 
        case 661: 
        case 662: 
        case 664: 
        case 666: 
        case 667: 
        case 681: 
        case 682: 
        case 685: 
        case 686: 
        case 694: 
        case 695: 
        case 696: 
        case 697: 
        case 704: 
        case 705: 
        case 706: 
          { 
    return  PHP_STRING;
 }
        case 843: break;
        case 23: 
          { 
    return  WHITESPACE;
 }
        case 844: break;
        case 27: 
          { 
    pushState(ST_PHP_DOUBLE_QUOTES);
    return PHP_CONSTANT_ENCAPSED_STRING;
 }
        case 845: break;
        case 84: 
          { 
    popState();
    return PHP_STRING;
 }
        case 846: break;
        case 349: 
          { 
    return PHP_TRUE;
 }
        case 847: break;
        case 352: 
          { 
    return PHP_FROM;
 }
        case 848: break;
        case 360: 
          { 
    return PHP_CASE;
 }
        case 849: break;
        case 363: 
          { 
    return PHP_SELF;
 }
        case 850: break;
        case 367: 
          { 
    return PHP_LIST;
 }
        case 851: break;
        case 425: 
          { 
    return PHP_ENDIF;
 }
        case 852: break;
        case 430: 
          { 
    return PHP_EMPTY;
 }
        case 853: break;
        case 431: 
          { 
    return PHP_BREAK;
 }
        case 854: break;
        case 437: 
          { 
    return PHP_ARRAY;
 }
        case 855: break;
        case 443: 
          { 
    return PHP_ISSET;
 }
        case 856: break;
        case 445: 
          { 
    return PHP_THROW;
 }
        case 857: break;
        case 447: 
          { 
    return PHP_FALSE;
 }
        case 858: break;
        case 448: 
          { 
    return PHP_FINAL;
 }
        case 859: break;
        case 450: 
          { 
    return PHP_UNSET;
 }
        case 860: break;
        case 452: 
          { 
    return PHP_CONST;
 }
        case 861: break;
        case 453: 
          { 
    return PHP_CATCH;
 }
        case 862: break;
        case 454: 
          { 
    return PHP_CLONE;
 }
        case 863: break;
        case 455: 
          { 
    return PHP_CLASS;
 }
        case 864: break;
        case 458: 
          { 
    return PHP_WHILE;
 }
        case 865: break;
        case 460: 
          { 
    return PHP_PRINT;
 }
        case 866: break;
        case 127: 
          { 
    pushState(ST_PHP_COMMENT);
    return PHP_COMMENT_START;
 }
        case 867: break;
        case 337: 
          { 
    pushState(ST_PHP_DOC_COMMENT);
    return PHPDOC_COMMENT_START;
 }
        case 868: break;
        case 72: 
        case 73: 
        case 74: 
          { 
        yypushback(1);
        popState();
     }
        case 869: break;
        case 97: 
        case 98: 
        case 99: 
          { 
	String yytext = yytext();
	switch (yytext.charAt(yytext.length() - 1)) {
		case '?':
		case '%':
		case '>':
			yypushback(1);
			break;
		default:
			popState();
	}
	 return PHP_LINE_COMMENT;
 }
        case 870: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            return null;
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }

