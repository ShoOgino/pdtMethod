	public void reportMethod(IMethod method, String suffix, SourceRange replaceRange) {
		if (processedElements.contains(method)) {
			return;
		}
		processedElements.add(method);

		noProposal = false;
		
		if (!requestor.isIgnored(CompletionProposal.METHOD_DECLARATION)) {
			
			CompletionProposal proposal = createProposal(CompletionProposal.METHOD_DECLARATION, actualCompletionPosition);

			// show method parameter names:
			String[] params = null;
			try {
				params = method.getParameters();
			} catch (ModelException e) {
				if (DLTKCore.DEBUG_COMPLETION) {
					e.printStackTrace();
				}
			}
			if (params != null && params.length > 0) {
				char[][] args = new char[params.length][];
				for (int i = 0; i < params.length; ++i) {
					args[i] = params[i].toCharArray();
				}
				proposal.setParameterNames(args);
			}
			
			String elementName = method.getElementName();
			String completionName = elementName;

			proposal.setModelElement(method);
			proposal.setName(elementName.toCharArray());
			
			int relevance = nextMethodRelevance();

			if (method instanceof FakeGroupMethod) {
				// remove the trailing '*' from the group name
				completionName = elementName.substring(0, elementName.length() - 1);
				
				// put the group to the top of list
				relevance = RELEVANCE_KEYWORD + 1;
			}
			proposal.setCompletion((completionName + suffix).toCharArray());

			try {
				proposal.setIsConstructor(elementName.equals("__construct") || method.isConstructor());
				proposal.setFlags(method.getFlags());
			} catch (ModelException e) {
				if (DEBUG) {
					e.printStackTrace();
				}
			}

			proposal.setReplaceRange(replaceRange.getOffset(), replaceRange.getOffset() + replaceRange.getLength());
			proposal.setRelevance(relevance);
			
			this.requestor.accept(proposal);
			
			if (DEBUG) {
				this.printDebug(proposal);
			}
		}

	}

