	/**
	 * This function is an internal function developers should use the innerGetPropertyType version without the Map.
	 * @param subClasses uses as a stopping condition in case there's a loop in the inheritance tree.
	 */
	private String innerGetPropertyType(String className, String propertyName, CodeData[] classes, CodeData[] functions, Map<String, String> subClasses) {
		for (CodeData element : classes) {
			PHPClassData currClass = (PHPClassData) element;
			if (currClass.getName().equals(className)) {
				String rv;
				if (propertyName.charAt(0) == '*') {
					// meaning this is a class variable and not a function.
					// this * sign was added by the parser and not by the user
					PHPClassVarData[] classVars = currClass.getVars();
					rv = getVariableType(propertyName.substring(1), classVars);
				} else {
					// meaning its a function
					PHPFunctionData[] classFunctions = currClass.getFunctions();
					rv = getFunctionReturnType(propertyName, classFunctions);
				}
				if (rv == null && currClass.getSuperClassData() != null) {
					// trying to find in the ancestor
					String superClassName = currClass.getSuperClassData().getName();
					if(subClasses.containsKey(superClassName)){
						return null;
					}
					subClasses.put(className, className);
					rv = innerGetPropertyType(superClassName, propertyName, classes, functions, subClasses);
				}
				return rv;
			}
		}
		return null;
	}

