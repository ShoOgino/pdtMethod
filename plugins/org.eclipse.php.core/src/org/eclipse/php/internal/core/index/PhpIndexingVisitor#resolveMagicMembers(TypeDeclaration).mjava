	/**
	 * Resolve class members that were defined using the @property tag
	 * 
	 * @param type
	 *            declaration for wich we add the magic variables
	 */
	private void resolveMagicMembers(TypeDeclaration type) {
		if (type instanceof IPHPDocAwareDeclaration) {
			IPHPDocAwareDeclaration declaration = (IPHPDocAwareDeclaration) type;
			final PHPDocBlock doc = declaration.getPHPDoc();
			if (doc != null) {
				for (PHPDocTag docTag : doc.getTags()) {
					final TagKind tagKind = docTag.getTagKind();
					if (tagKind == TagKind.PROPERTY || tagKind == TagKind.PROPERTY_READ
							|| tagKind == TagKind.PROPERTY_WRITE) {
						// http://manual.phpdoc.org/HTMLSmartyConverter/HandS/phpDocumentor/tutorial_tags.property.pkg.html
						final String[] split = WHITESPACE_SEPERATOR.split(docTag.getValue().trim());
						if (split.length < 2) {
							break;
						}

						String name = removeParenthesis(split);
						int offset = docTag.sourceStart();
						int length = docTag.sourceStart() + 9;

						Map<String, String> info = new HashMap<String, String>();
						info.put("v", split[0]); //$NON-NLS-1$

						StringBuilder metadata = new StringBuilder();
						metadata.append(fCurrentQualifier != null ? fCurrentQualifierCounts.get(fCurrentQualifier) : 1);
						metadata.append(";"); //$NON-NLS-1$

						modifyDeclaration(null,
								new DeclarationInfo(IModelElement.FIELD, Modifiers.AccPublic, offset, length, offset,
										length, name, metadata.toString(), encodeDocInfo(info), fCurrentQualifier,
										fCurrentParent));

					} else if (tagKind == TagKind.METHOD) {
						// http://manual.phpdoc.org/HTMLSmartyConverter/HandS/phpDocumentor/tutorial_tags.method.pkg.html
						String[] split = WHITESPACE_SEPERATOR.split(docTag.getValue().trim());
						if (split.length < 2) {
							break;
						}
						int methodModifiers = Modifiers.AccPublic;
						if (Constants.STATIC.equals(split[0].trim())) {
							if (split.length < 3) {
								break;
							}
							methodModifiers |= Modifiers.AccStatic;
							split = Arrays.copyOfRange(split, 1, split.length);
						}

						String name = removeParenthesis(split);
						int index = name.indexOf('(');
						if (index > 0) {
							name = name.substring(0, index);
						}
						int offset = docTag.sourceStart();
						int length = docTag.sourceStart() + 6;
						Map<String, String> info = new HashMap<String, String>();
						info.put("r", split[0]); //$NON-NLS-1$

						StringBuilder metadata = new StringBuilder();
						metadata.append(fCurrentQualifier != null ? fCurrentQualifierCounts.get(fCurrentQualifier) : 1);
						metadata.append(";"); //$NON-NLS-1$

						modifyDeclaration(null,
								new DeclarationInfo(IModelElement.METHOD, methodModifiers, offset, length, offset,
										length, name, metadata.toString(), encodeDocInfo(info), fCurrentQualifier,
										fCurrentParent));
					}
				}
			}
		}
	}

