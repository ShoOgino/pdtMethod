	/**
	 * Reparse the PHP editor model
	 * @param newText
	 * @param offset
	 * @param length
	 * @param deletedText
	 * @return true - if short reparse is done, else return false
	 * @throws BadLocationException 
	 */
	public boolean reparse(String change, String newText, final int offset, String deletedText) throws BadLocationException {
		assert newText.length() > offset - 1;

		final int length = change.length();
		if (startQuoted(deletedText) || startQuoted(change)) {
			return false;
		}

		// get the region to re-parse
		final int deletedLength = deletedText.length();
		final ITextRegion tokenStart = tokensContaier.getToken(offset == 0 ? 0 : offset - 1);
		final int oldEndOffset = offset + deletedLength;
		final ITextRegion tokenEnd = tokensContaier.getToken(oldEndOffset);
		int newTokenOffset = tokenStart.getStart();

		// get start and end states
		final LexerState startState = tokensContaier.getState(newTokenOffset);
		final LexerState endState = tokensContaier.getState(tokenEnd.getEnd());

		final PhpTokenContainer newContainer = new PhpTokenContainer();
		final PhpLexer phpLexer = getPhpLexer(project, getStream(newText, newTokenOffset), startState);

		Object state = startState;
		try {
			String yylex = phpLexer.getNextToken();
			int yylength;
			final int toOffset = offset + length;
			while (yylex != null && (newTokenOffset <= toOffset || yylex == PHPRegionTypes.WHITESPACE)) {
				yylength = phpLexer.getLength();
				newContainer.addLast(yylex, newTokenOffset, yylength, yylength, state);
				newTokenOffset += yylength;
				state = phpLexer.createLexicalStateMemento();
				yylex = phpLexer.getNextToken();
			}
		} catch (IOException e) {
			Logger.logException(e);
		}

		// if the two streams end with the same lexer sate - 
		// 1. replace the regions
		// 2. adjust next regions start location
		// 3. update state changes
		final int size = length - deletedLength;
		if (state.equals(endState)) {
			// 1. replace the regions
			final ListIterator oldIterator = tokensContaier.removeSubList(tokenStart, tokenEnd);
			ITextRegion[] newTokens = newContainer.getPhpTokens(); // now, add the new ones
			for (int i = 0; i < newTokens.length; i++) {
				oldIterator.add(newTokens[i]);
			}

			// 2. adjust next regions start location
			while (oldIterator.hasNext()) {
				ITextRegion adjust = (ITextRegion) oldIterator.next();
				adjust.adjustStart(size);
			}

			// 3. update state changes
			tokensContaier.updateStateChanges(newContainer, tokenStart.getStart(), oldEndOffset);
			return true;
		}
		return false;
	}

