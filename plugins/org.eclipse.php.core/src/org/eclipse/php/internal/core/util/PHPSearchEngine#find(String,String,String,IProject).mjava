	/**
	 * Searches for the given path using internal PHP mechanism
	 * 
	 * @param path File path to resolve
	 * @param currentWorkingDir Current working directory (usually: CWD of PHP process)
	 * @param currentScriptDir Directory of current script (which is interpreted by the PHP at this time)
	 * @param currentProject Current project to which current script belongs
	 * @return resolved path, or <code>null</code> in case of failure
	 */
	public static Result find (String path, String currentWorkingDir, String currentScriptDir, IProject currentProject) {
		if (path == null || currentWorkingDir == null || currentScriptDir == null || currentProject == null) {
			throw new NullPointerException();
		}
		
		// check whether the path is absolute (not depending on current OS)
		if (path.startsWith("/") || path.startsWith("\\") || path.matches("[A-Za-z]:[/\\\\].*")) {
			File file = new File(path);
			if (file.exists()) {
				return new Result(file.getParentFile(), file);
			}
		}
		else if (path.matches("\\.\\.?[/\\].*")) { // check whether the path starts with ./ or ../
			File file = new File(currentWorkingDir, path);
			if (file.exists()) {
				return new Result(file.getParentFile(), file);
			}
		} else {
			Object[] includePath = buildIncludePath(currentProject);
			for (int i = 0; i < includePath.length; ++i) {
				if (includePath[i] instanceof IContainer) {
					IContainer container = (IContainer) includePath[i];
					IResource resource = container.findMember(path);
					if (resource != null) {
						return new Result(container, resource);
					}
				}
				else if (includePath[i] instanceof IIncludePathEntry) {
					IIncludePathEntry entry = (IIncludePathEntry) includePath[i];
					IPath entryPath = entry.getPath();
					if (entry.getEntryKind() == IIncludePathEntry.IPE_LIBRARY) {
						if (entry.getContentKind() != IIncludePathEntry.K_BINARY) { // We don't support lookup in archive
							File entryDir = entryPath.toFile();
							File file = new File(entryDir, path);
							if (file.exists()) {
								return new Result(includePath[i], file);
							}
						}
					} else if (entry.getEntryKind() == IIncludePathEntry.IPE_PROJECT) {
						IProject project = (IProject) entry.getResource();
						IResource resource = project.findMember(path);
						if (resource != null) {
							return new Result(includePath[i], resource);
						}
					} else if (entry.getEntryKind() == IIncludePathEntry.IPE_VARIABLE) {
						entryPath = IncludePathVariableManager.instance().resolveVariablePath(entryPath.toString());
						File entryDir = entryPath.toFile();
						File file = new File(entryDir, path);
						if (file.exists()) {
							return new Result(includePath[i], file);
						}
					}
				}
			}
		}
		
		return null;
	}

