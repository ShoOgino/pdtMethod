	public void reportResource(IResource resource, IResource relative, String suffix, SourceRange replaceRange) {
		if (processedElements.contains(resource)) {
			return;
		}
		processedElements.add(resource);
		noProposal = false;

		final String elementName = resource.getProjectRelativePath().makeRelativeTo(relative.getProjectRelativePath()).toString();
		CompletionProposal proposal = null;
		if (resource.getType() == IResource.FOLDER && !requestor.isIgnored(CompletionProposal.PACKAGE_REF)) {
			proposal = createProposal(CompletionProposal.PACKAGE_REF, actualCompletionPosition);
		} else if (!requestor.isIgnored(CompletionProposal.KEYWORD)) {
			proposal = createProposal(CompletionProposal.KEYWORD, actualCompletionPosition);
		}
		proposal.setName(resource.getName().toCharArray());
		proposal.setCompletion((elementName + suffix).toCharArray());
		proposal.setRelevance(nextKeywordRelevance());
		proposal.setReplaceRange(replaceRange.getOffset(), replaceRange.getOffset() + replaceRange.getLength());
		proposal.setModelElement(DLTKCore.create(resource));

		this.requestor.accept(proposal);
		if (DEBUG) {
			this.printDebug(proposal);
		}
	}

