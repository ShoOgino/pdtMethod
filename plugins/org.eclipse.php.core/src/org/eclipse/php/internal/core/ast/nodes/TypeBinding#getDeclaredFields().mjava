	/**
	 * Returns a list of bindings representing all the fields declared
	 * as members of this class or interface type.
	 * 
	 * <p>These include public, protected, default (package-private) access,
	 * and private fields declared by the class, but excludes inherited fields.
	 * Fields from binary types that reference unresolvable types may not be included.</p>
	 *
	 * <p>Returns an empty list if the class or interface declares no fields,
	 * and for other kinds of type bindings that do not directly have members.</p>
	 *
	 * <p>The resulting bindings are in no particular order.</p>
	 *
	 * @return the list of bindings for the field members of this type,
	 *   or the empty list if this type does not have field members
	 */
	public IVariableBinding[] getDeclaredFields() {
		if (element == null) {
			return new IVariableBinding[0];
		}
		if (isClass()) {
			IType type = (IType) element;
			try {
				IField[] fields = type.getFields();
				IVariableBinding[] variableBindings = new IVariableBinding[fields.length];
				for (int i = 0; i < fields.length; i++) {
					variableBindings[i] = resolver.getVariableBinding(fields[i]);
				}
				return variableBindings;
			} catch (ModelException e) {
				Logger.logException(e);
			}
		}
		return new IVariableBinding[0]; // TODO - Implement IVariableBinding
	}

