	/**
	 * This method searches in the project scope for all elements of specified type that match the given prefix.
	 * If the project doesn't exist, workspace scope is used.
	 * 
	 * @param sourceModule Current source module
	 * @param prefix Element name or prefix
	 * @param exactName Whether the prefix is an exact name of the element
	 * @param elementType Element type from {@link IDLTKSearchConstants}
	 * @return
	 */
	private static IModelElement[] getGlobalElements(ISourceModule sourceModule, String prefix, boolean exactName, int elementType) {
		SearchEngine searchEngine = new SearchEngine();
		IDLTKLanguageToolkit toolkit = PHPLanguageToolkit.getDefault();
		
		IScriptProject scriptProject = sourceModule.getScriptProject();
		IDLTKSearchScope scope = scriptProject != null ? SearchEngine.createSearchScope(scriptProject) : SearchEngine.createWorkspaceScope(toolkit);

		int matchRule;
		if (prefix.length() == 0 && !exactName) {
			prefix = WILDCARD;
			matchRule = SearchPattern.R_PATTERN_MATCH;
		} else {
			matchRule = exactName ? SearchPattern.R_EXACT_MATCH : SearchPattern.R_CAMELCASE_MATCH | SearchPattern.R_PREFIX_MATCH;
		}

		SearchPattern pattern = SearchPattern.createPattern(prefix, elementType, IDLTKSearchConstants.DECLARATIONS, matchRule, toolkit);

		final List<IModelElement> elements = new LinkedList<IModelElement>();
		try {
			searchEngine.search(pattern, new SearchParticipant[] { SearchEngine.getDefaultSearchParticipant() }, scope, new SearchRequestor() {
				public void acceptSearchMatch(SearchMatch match) throws CoreException {
					IModelElement element = (IModelElement) match.getElement();
					IModelElement parent = element.getParent();
					
					// Global scope elements in PHP are those, which are not defined in class body,
					// or it is a variable, and its parent - source module
					if ((element instanceof IField && parent instanceof org.eclipse.dltk.core.ISourceModule)
							|| (!(element instanceof IField) && !(parent instanceof IType))) {
						elements.add(element);
					}
				}
			}, null);
		} catch (CoreException e) {
			Logger.logException(e);
		}
		return elements.toArray(new IModelElement[elements.size()]);
	}

