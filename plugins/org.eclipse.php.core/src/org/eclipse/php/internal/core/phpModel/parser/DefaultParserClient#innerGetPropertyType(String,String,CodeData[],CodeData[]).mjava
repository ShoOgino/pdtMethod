	private String innerGetPropertyType(String className, String propertyName, CodeData[] classes, CodeData[] functions) {
		for (int i = 0; i < classes.length; i++) {
			PHPClassData currClass = (PHPClassData) classes[i];
			if (currClass.getName().equals(className)) {
				String rv;
				if (propertyName.charAt(0) == '*') {
					// meaning this is a class variable and not a function.
					// this * sign was added by the parser and not by the user
					PHPClassVarData[] classVars = currClass.getVars();
					rv = getVariableType(propertyName.substring(1), classVars);
				} else {
					// meaning its a function
					PHPFunctionData[] classFunctions = currClass.getFunctions();
					rv = getFunctionReturnType(propertyName, classFunctions);
				}
				if (rv == null && currClass.getSuperClassData() != null) {
					// trying to find in the ancestor
					String superClassName = currClass.getSuperClassData().getName();
					rv = innerGetPropertyType(superClassName, propertyName, classes, functions);
				}
				return rv;
			}
		}
		return null;
	}

