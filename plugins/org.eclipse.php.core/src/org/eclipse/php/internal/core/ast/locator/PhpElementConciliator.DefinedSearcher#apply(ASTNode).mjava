		public void apply(ASTNode node) {
			// stops when found - that's the reason to use ApplyAll
			if (exists)
				return;

			if (node.getType() == ASTNode.SCALAR) {
				final Scalar scalar = (Scalar) node;

				final String stringValue = scalar.getStringValue();
				if (scalar.getScalarType() != Scalar.TYPE_STRING || stringValue == null) {
					return;
				}

				final int length = stringValue.length() - 1;
				if (stringValue.charAt(0) != '"' && stringValue.charAt(length) != '"' && stringValue.equals(name)) {
					exists = true;
				}
			} else if (node.getType() == ASTNode.FUNCTION_INVOCATION) {
				FunctionInvocation functionInvocation = (FunctionInvocation) node;
				final Expression functionName = functionInvocation.getFunctionName().getFunctionName();
				if (functionName.getType() != ASTNode.IDENTIFIER) {
					return;
				}

				final Identifier identifier = (Identifier) functionName;
				final Expression[] parameters = functionInvocation.getParameters();
				if (!"define".equalsIgnoreCase(identifier.getName()) || parameters == null || parameters.length == 0) {
					return;
				}

				final Expression expression = parameters[0];
				if (expression.getType() != ASTNode.SCALAR) {
					return;
				}

				Scalar scalar = (Scalar) expression;
				final String stringValue = scalar.getStringValue();
				if (stringValue.length() < 2 || stringValue.charAt(0) != '"') {
					return;
				}
				exists = name.equals(stringValue.substring(1, stringValue.length() - 1));
			} else {
				node.childrenAccept(this);
			}
		}

