	private static boolean inMultiLine(PHPHeuristicScanner scanner,
			IStructuredDocument document, int lineNumber, int offset) {
		int lineStartOffset = offset;
		try {
			IRegion region = document.getLineInformation(lineNumber);
			int start = lineStartOffset;
			int end = region.getOffset() + region.getLength() - lineStartOffset;
			for (int i = start; i < end; i++) {
				if (Character.isWhitespace(document.getChar(i))) {
				} else {
					// move line start to first non blank char
					// and do + 1 to adjust offset of
					// PHPTextSequenceUtilities.getStatement(...)
					lineStartOffset += i + 1;
					break;
				}
			}
		} catch (BadLocationException e) {
		}

		Region textSequenceRegion = PHPTextSequenceUtilities
				.getStatementRegion(lineStartOffset,
						document.getRegionAtCharacterOffset(lineStartOffset),
						true);
		if (textSequenceRegion.getLength() == 0) {
			return false;
		}
		String regionType = FormatterUtils.getRegionType(document,
				textSequenceRegion.getOffset());
		if (IndentationUtils.isRegionTypeAllowedMultiline(regionType)) {
			int statementStart = textSequenceRegion.getOffset();
			// we only search for opening pear in textSequence
			int bound = statementStart;
			int parenPeer = scanner.findOpeningPeer(offset - 1, bound,
					PHPHeuristicScanner.LPAREN, PHPHeuristicScanner.RPAREN);
			bound = parenPeer != -1 ? Math.max(parenPeer, bound) : bound;
			int bracketPeer = scanner.findOpeningPeer(offset - 1, bound,
					PHPHeuristicScanner.LBRACKET, PHPHeuristicScanner.RBRACKET);
			int peer = Math.max(parenPeer, bracketPeer);
			if (peer == PHPHeuristicScanner.NOT_FOUND) {
				return false;
			}
			if (statementStart < peer) {
				return true;
			}
		}
		return false;
	}

