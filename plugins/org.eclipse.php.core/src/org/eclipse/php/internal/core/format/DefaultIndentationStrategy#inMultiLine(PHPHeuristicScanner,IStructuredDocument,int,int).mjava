	private static boolean inMultiLine(PHPHeuristicScanner scanner,
			IStructuredDocument document, int lineNumber, int offset) {
		int lineStart = offset;
		try {
			IRegion region = document.getLineInformation(lineNumber);
			char[] line = document.get(lineStart,
					region.getOffset() + region.getLength() - lineStart)
					.toCharArray();
			for (int i = 0; i < line.length; i++) {
				char c = line[i];
				if (Character.isWhitespace(c)) {
				} else {
					// move line start to first non blank char
					lineStart += i + 1;
					break;
				}
			}
		} catch (BadLocationException e) {
		}
		TextSequence textSequence = PHPTextSequenceUtilities
				.getStatement(lineStart,
						document.getRegionAtCharacterOffset(lineStart), true);
		if (textSequence == null) {
			return false;
		}
		String regionType = FormatterUtils.getRegionType(document,
				textSequence.getOriginalOffset(0));
		if (textSequence != null && isRegionTypeAllowedMultiline(regionType)) {
			int statementStart = textSequence.getOriginalOffset(0);
			// we only search for opening pear in textSequence
			int peer = scanner.findOpeningPeer(offset - 1,
					textSequence.getOriginalOffset(0),
					PHPHeuristicScanner.LPAREN, PHPHeuristicScanner.RPAREN);
			if (peer == PHPHeuristicScanner.NOT_FOUND) {
				return false;
			}
			if (statementStart < peer) {
				return true;
			}
		}
		return false;
	}

