	/**
	 * @param root
	 *            the AST root
	 * @param node
	 *            the selected node (must be an {@link Identifier} instance)
	 * @return returns a message if there is a problem
	 */
	public String initialize(Program root, ASTNode node) {
		fASTRoot = root;
		fProblems = getProblems(root);
		typeDeclarationName = null;
		isMethod = false;

		PHPVersion phpVersion = PHPVersion.PHP5_4;
		if (root.getSourceModule().getScriptProject() != null
				&& root.getSourceModule().getScriptProject().getProject() != null) {
			phpVersion = ProjectOptions.getPhpVersion(root.getSourceModule()
					.getScriptProject().getProject());
		}

		if (node.getType() == ASTNode.IDENTIFIER) {
			Identifier identifier = (Identifier) node;

			dispatcherType = resolveDispatcherType(identifier);
			classMemberName = identifier.getName();

			ASTNode parent = identifier.getParent();
			int type = parent.getType();
			isMethod = type == ASTNode.FUNCTION_DECLARATION
					|| parent.getLocationInParent() == FunctionName.NAME_PROPERTY
					|| parent.getLocationInParent() == FunctionInvocation.FUNCTION_PROPERTY;

			if (dispatcherType != null
					&& phpVersion.isGreaterThan(PHPVersion.PHP5_3)) {
				traitList = dispatcherType.getTraitList(isMethod,
						classMemberName);
			}

			while (typeDeclarationName == null && parent != fASTRoot) {
				if (type == ASTNode.CLASS_DECLARATION
						|| type == ASTNode.INTERFACE_DECLARATION) {
					typeDeclarationName = ((TypeDeclaration) parent).getName()
							.getName();
					break;
				}
				parent = parent.getParent();
				type = parent.getType();
			}
			if (hasProblems(node.getStart(), node.getEnd())) {
				erroneousNode = node;
			}
			return null;
		}

		fDescription = "OccurrencesFinder_occurrence_description"; //$NON-NLS-1$
		return fDescription;
	}

