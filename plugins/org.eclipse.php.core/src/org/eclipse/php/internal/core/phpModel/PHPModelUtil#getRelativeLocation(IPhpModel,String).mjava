	public static String getRelativeLocation(IPhpModel model, String location) {
		PHPFileData fileData = model.getFileData(location);
		
		if (fileData != null) {
			// deterministic
			IResource resource = getResource(fileData);
			if (resource != null && resource.exists()) { // file is in a project
				IProject fileProject = resource.getProject();
				if (fileProject.isAccessible()) {
					return new Path(location).removeFirstSegments(1).toString();
				}
			} else if (model instanceof CompositePhpModel) { // file is in an include file
				IPhpModel[] models = ((CompositePhpModel) model).getModels();
				for (int i = 0; i < models.length; ++i) {
					if (models[i].getFileData(location) == fileData) {
						if (models[i] instanceof PHPIncludePathModelManager) {
							PHPIncludePathModelManager manager = (PHPIncludePathModelManager) models[i];
							IPhpModel[] includeModels = manager.listModels();
							for (int j = 0; j < includeModels.length; ++j) {
								IPath path = getIncludeModelLocation(includeModels[j]);
								if (includeModels[j].getFileData(location) == fileData) {
									return new Path(location).setDevice("").removeFirstSegments(path.segmentCount()).toString();
								}
							}
						}
					}
				}
			}
		} else {
			// heuristic
			IPath pathLocation = new Path(location);
			if(model instanceof PHPProjectModel) {
				String projectName = pathLocation.segment(0);
				if(projectName.equals(((PHPProjectModel)model).getProject().getName()))
					return pathLocation.removeFirstSegments(1).makeRelative().toString();
				PHPIncludePathModelManager includeManager = (PHPIncludePathModelManager) ((PHPProjectModel)model).getModel(PHPIncludePathModelManager.COMPOSITE_INCLUDE_PATH_MODEL_ID);
				if(includeManager.getModel(projectName) != null)
					return pathLocation.removeFirstSegments(1).makeRelative().toString();
				
				// TODO include variables/directories
			}
		}
		return location;

	}

