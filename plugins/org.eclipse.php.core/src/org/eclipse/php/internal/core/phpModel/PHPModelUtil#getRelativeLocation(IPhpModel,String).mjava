	public static String getRelativeLocation(IPhpModel model, String location) {
		PHPFileData fileData = model.getFileData(location);

		if (fileData != null) {
			// deterministic
			IResource resource = getResource(fileData);
			// Seva: now include paths gathered higher priority.
			if (model instanceof PHPProjectModel) { // file is in an include file
				IPhpModel includeModel = getIncludeModelForFile((PHPProjectModel) model, fileData);
				if (includeModel != null) {
					IPath path = getIncludeModelLocation(includeModel);
					if (includeModel.getFileData(location) == fileData) {
						return new Path(location).setDevice("").removeFirstSegments(path.segmentCount()).toString(); //$NON-NLS-1$
					}
				}
			}
			if (resource != null && resource.exists()) { // file is in a project
				// Seva: if the file is just on project, it means it's not accessible
				// TODO: we should add worning in this case
				IProject fileProject = resource.getProject();
				if (fileProject.isAccessible()) {
					return new Path(location).removeFirstSegments(1).toString();
				}
			}
		} else {
			// heuristic
			IPath pathLocation = new Path(location);
			if (model instanceof PHPProjectModel) {
				PHPIncludePathModelManager includeManager = (PHPIncludePathModelManager) ((PHPProjectModel) model).getModel(PHPIncludePathModelManager.COMPOSITE_INCLUDE_PATH_MODEL_ID);
				for (IPhpModel includeModel : includeManager.listModels()) {
					IPath path = getIncludeModelLocation(includeModel);
					if (path.isPrefixOf(pathLocation)) {
						return pathLocation.removeFirstSegments(path.segmentCount()).toString();
					}
				}
				// Seva: this is done latest, since project is not automatically on include path:
				String projectName = pathLocation.segment(0);
				if (ResourcesPlugin.getWorkspace().getRoot().getProject(projectName) != null)
					return pathLocation.removeFirstSegments(1).makeRelative().toString();
				if (projectName.equals(((PHPProjectModel) model).getProject().getName()))
					return pathLocation.removeFirstSegments(1).makeRelative().toString();
			}
		}
		return location;

	}

