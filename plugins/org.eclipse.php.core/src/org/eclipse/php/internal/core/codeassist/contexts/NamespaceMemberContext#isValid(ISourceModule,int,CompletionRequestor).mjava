	public boolean isValid(ISourceModule sourceModule, int offset, CompletionRequestor requestor) {
		if (!super.isValid(sourceModule, offset, requestor)) {
			return false;
		}
		if (getPhpVersion().isLessThan(PHPVersion.PHP5_3)) {
			return false;
		}

		TextSequence statementText = getStatementText();
		int totalLength = statementText.length();
		int endPosition = PHPTextSequenceUtilities.readBackwardSpaces(statementText, totalLength); // read whitespace
		elementStart = PHPTextSequenceUtilities.readIdentifierStartIndex(statementText, endPosition, true);

		elementStart = PHPTextSequenceUtilities.readBackwardSpaces(statementText, elementStart);
		if (elementStart < 1) { // there's no trigger of length less than 1 characters
			return false;
		}

		String triggerText = statementText.subSequence(elementStart - 1, elementStart).toString();
		if (!triggerText.equals("\\")) {
			return false;
		}
		
		isGlobal = false;
		if (elementStart == 1) {
			isGlobal = true;
			return true;
		}
		
		int endNamespace = PHPTextSequenceUtilities.readBackwardSpaces(statementText, elementStart - 1);
		int nsNameStart = PHPTextSequenceUtilities.readNamespaceStartIndex(statementText, endNamespace, false);
		String nsName = statementText.subSequence(nsNameStart, endNamespace).toString();
		
		namespaces = CodeAssistUtils.getGlobalTypes(sourceModule, nsName, CodeAssistUtils.EXACT_NAME | CodeAssistUtils.EXCLUDE_CLASSES | CodeAssistUtils.EXCLUDE_INTERFACES);
		if (namespaces == null || namespaces.length == 0) {
			return false;
		}

		return true;
	}

