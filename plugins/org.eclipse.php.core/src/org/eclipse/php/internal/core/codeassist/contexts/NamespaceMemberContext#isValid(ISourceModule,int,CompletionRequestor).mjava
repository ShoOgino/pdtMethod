	public boolean isValid(ISourceModule sourceModule, int offset, CompletionRequestor requestor) {
		if (!super.isValid(sourceModule, offset, requestor)) {
			return false;
		}
		if (getPHPVersion().isLessThan(PHPVersion.PHP5_3)) {
			return false;
		}

		TextSequence statementText = getStatementText();
		// disable this context for use statement
		if (statementText.length() >= 4) {
			if ("use".equals(statementText.subSequence(0, 3).toString()) //$NON-NLS-1$
					&& Character.isWhitespace(statementText.subSequence(3, 4).charAt(0))) {
				return false;
			}
		}

		int totalLength = statementText.length();
		int endPosition = PHPTextSequenceUtilities.readBackwardSpaces(statementText, totalLength); // read
																									// whitespace
		elementStart = PHPTextSequenceUtilities.readIdentifierStartIndex(statementText, endPosition, true);

		elementStart = PHPTextSequenceUtilities.readBackwardSpaces(statementText, elementStart);
		if (elementStart < 1) { // there's no trigger of length less than 1
								// characters
			return false;
		}

		String triggerText = statementText.subSequence(elementStart - 1, elementStart).toString();
		if (!triggerText.equals(NamespaceReference.NAMESPACE_DELIMITER)) {
			return false;
		}

		isGlobal = false;
		if (elementStart == 1) {
			isGlobal = true;
			return true;
		}

		int endNamespace = PHPTextSequenceUtilities.readBackwardSpaces(statementText, elementStart);
		int nsNameStart = PHPTextSequenceUtilities.readNamespaceStartIndex(statementText, endNamespace, false);
		String nsName = nsNameStart < 0 ? "" //$NON-NLS-1$
				: statementText.subSequence(nsNameStart, elementStart).toString();
		if (nsName.equals(NamespaceReference.NAMESPACE_DELIMITER)) {
			isGlobal = true;
			return true;
		}

		try {
			namespaces = PHPModelUtils.getNamespaceOf(nsName, sourceModule, offset, null, null);
		} catch (ModelException e) {
			if (DLTKCore.DEBUG) {
				e.printStackTrace();
			}
		}
		return true;
	}

