	protected boolean isNamespaceElementCompletion(TextSequence statementText, int offset, int line, String prefix, int prefixStart) {
		if (phpVersion.isLessThan(PHPVersion.PHP5_3)) {
			return false;
		}
		prefixStart = PHPTextSequenceUtilities.readBackwardSpaces(statementText, prefixStart);
		if (prefixStart < 1) {
			return false;
		}

		String triggerText = statementText.subSequence(prefixStart - 1, prefixStart).toString();
		if (NS_SEPARATOR.equals(triggerText)) {

			if (internalPHPRegion.getType() == PHPRegionTypes.PHP_NS_SEPARATOR) {
				try {
					ITextRegion nextRegion = phpScriptRegion.getPhpToken(internalPHPRegion.getEnd());
					wordEndOffset = regionContainer.getStartOffset() + phpScriptRegion.getStart() + nextRegion.getTextEnd();
				} catch (BadLocationException e) {
				}
			}

			if (prefixStart == 1) { // global namespace - only the '\' is present
				getRegularCompletion(prefix, offset, false);
				return true;
			}

			int endNamespace = PHPTextSequenceUtilities.readBackwardSpaces(statementText, prefixStart - 1);
			int nsNameStart = PHPTextSequenceUtilities.readNamespaceStartIndex(statementText, endNamespace, false);
			String nsName = statementText.subSequence(nsNameStart, endNamespace).toString();

			int relevanceConst = RELEVANCE_CONST;
			int relevanceClass = RELEVANCE_CLASS;
			int relevanceMethod = RELEVANCE_METHOD;

			this.setSourceRange(offset - prefix.length(), offset);

			IType[] namespaces = CodeAssistUtils.getGlobalTypes(sourceModule, nsName, CodeAssistUtils.EXACT_NAME | CodeAssistUtils.EXCLUDE_CLASSES | CodeAssistUtils.EXCLUDE_INTERFACES);
			for (IType ns : namespaces) {
				try {
					for (IModelElement child : ns.getChildren()) {
						if (CodeAssistUtils.startsWithIgnoreCase(child.getElementName(), prefix)) {
							if (child.getElementType() == IModelElement.TYPE) {
								reportType((IType) child, relevanceClass--, PAAMAYIM_NEKUDOTAIM);
							} else if (child.getElementType() == IModelElement.METHOD) {
								reportMethod((IMethod) child, relevanceMethod--);
							} else if (child.getElementType() == IModelElement.FIELD) {
								IField field = (IField) child;
								if ((field.getFlags() & Modifiers.AccConstant) != 0) {
									reportField(field, relevanceConst--, false);
								}
							}
						}
					}
				} catch (ModelException e) {
					if (DLTKCore.DEBUG_COMPLETION) {
						e.printStackTrace();
					}
				}
			}
			return true;
		}
		return false;
	}

