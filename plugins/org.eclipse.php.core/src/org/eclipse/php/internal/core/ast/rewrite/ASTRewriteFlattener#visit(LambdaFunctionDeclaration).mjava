	@Override
	public boolean visit(LambdaFunctionDeclaration functionDeclaration) {
		if (functionDeclaration.isStatic()) {
			result.append(" static"); //$NON-NLS-1$
		}
		result.append(" function "); //$NON-NLS-1$
		if (functionDeclaration.isReference()) {
			result.append('&');
		}
		result.append('(');
		List<FormalParameter> formalParametersList = functionDeclaration.formalParameters();
		Iterator<FormalParameter> paramIt = formalParametersList.iterator();
		while (paramIt.hasNext()) {
			paramIt.next().accept(this);
			if (paramIt.hasNext()) {
				result.append(", "); //$NON-NLS-1$
			}
		}
		result.append(')');

		List<Expression> lexicalVariables = functionDeclaration.lexicalVariables();
		if (lexicalVariables.size() > 0) {
			result.append(" use ("); //$NON-NLS-1$
			Iterator<Expression> it = lexicalVariables.iterator();
			while (it.hasNext()) {
				it.next().accept(this);
				if (it.hasNext()) {
					result.append(", "); //$NON-NLS-1$
				}
			}
			result.append(')');
		}

		if (functionDeclaration.getReturnType() != null) {
			result.append(':');
			functionDeclaration.getReturnType().accept(this);
		}

		if (functionDeclaration.getBody() != null) {
			functionDeclaration.getBody().accept(this);
		}
		return false;
	}

