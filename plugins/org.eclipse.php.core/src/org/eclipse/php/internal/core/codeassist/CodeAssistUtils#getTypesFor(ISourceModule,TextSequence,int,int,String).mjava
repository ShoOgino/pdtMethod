	protected static IType[] getTypesFor(ISourceModule sourceModule, @NonNull TextSequence statementText,
			int endPosition, int offset, String triggerText) {
		endPosition = PHPTextSequenceUtilities.readBackwardSpaces(statementText, endPosition); // read
																								// whitespace

		boolean isClassTrigger = false;

		if (endPosition < 2) {
			return EMPTY_TYPES;
		}
		int propertyEndPosition = endPosition;
		if (triggerText == null) {
			triggerText = statementText.subSequence(endPosition - 2, endPosition).toString();
			propertyEndPosition = PHPTextSequenceUtilities.readBackwardSpaces(statementText,
					endPosition - triggerText.length());
		}
		if (triggerText.equals(OBJECT_FUNCTIONS_TRIGGER)) {
		} else if (triggerText.equals(PAAMAYIM_NEKUDOTAIM)) {
			isClassTrigger = true;
		} else {
			return EMPTY_TYPES;
		}

		int lastObjectOperator = PHPTextSequenceUtilities.getPreviousTriggerIndex(statementText, propertyEndPosition);
		String text = statementText.subSequence(0, propertyEndPosition).toString();
		if (lastObjectOperator == -1
				|| (text.indexOf('>') >= 0 && text.indexOf("=>") != text.indexOf('>') - 1 && text.indexOf("->") < 0)) { //$NON-NLS-1$ //$NON-NLS-2$
			// if there is no "->" or "::" in the left sequence then we need to
			// calc the object type
			return innerGetClassName(sourceModule, statementText, propertyEndPosition, isClassTrigger, offset);
		}

		int propertyStartPosition = PHPTextSequenceUtilities.readForwardSpaces(statementText,
				lastObjectOperator + triggerText.length());
		String propertyName = statementText.subSequence(propertyStartPosition, propertyEndPosition).toString();
		IType[] types = getTypesFor(sourceModule, statementText, propertyStartPosition, offset);

		int bracketIndex = propertyName.indexOf('(');

		if (bracketIndex == -1) {
			// meaning its a class variable and not a function
			return getVariableType(types, propertyName, offset);
		}

		boolean arrayReference = false;
		PHPVersion version = ProjectOptions.getPHPVersion(sourceModule.getScriptProject().getProject());
		if (propertyName.endsWith("]") //$NON-NLS-1$
				&& version.isGreaterThan(PHPVersion.PHP5_3)) {
			int closeBracketIndex = propertyName.lastIndexOf(')');
			if (closeBracketIndex >= 0) {
				if (propertyName.indexOf('[', closeBracketIndex) > closeBracketIndex) {
					arrayReference = true;
				}
			}
		}
		String functionName = propertyName.substring(0, bracketIndex).trim();

		String[] argNames = PHPTextSequenceUtilities.getArgNames(version, propertyName.substring(bracketIndex),
				sourceModule, offset);
		Set<IType> result = new LinkedHashSet<>();
		IType[] returnTypes = null;
		if (arrayReference) {
			returnTypes = getFunctionArrayReturnType(types, functionName, USE_FACTORYMETHOD | USE_PHPDOC, sourceModule,
					offset, argNames);
		} else {
			returnTypes = getFunctionReturnType(types, functionName, USE_FACTORYMETHOD | USE_PHPDOC, sourceModule,
					offset, argNames);
		}
		if (returnTypes != null) {
			result.addAll(Arrays.asList(returnTypes));
		}
		return result.toArray(new IType[result.size()]);
	}

