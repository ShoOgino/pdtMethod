	private void addExternalEntries(ICompletionReporter reporter, ISourceRange replaceRange, IScriptProject project,
			final Object entry, IPath prefixPathFolder, IPath lastSegmant) throws ModelException {
		switch (((IBuildpathEntry) entry).getEntryKind()) {
		case IBuildpathEntry.BPE_CONTAINER:
			final IProjectFragment[] findProjectFragments = project.findProjectFragments((IBuildpathEntry) entry);
			for (IProjectFragment projectFragment : findProjectFragments) {

				// add folders
				IModelElement[] children = projectFragment.getChildren();
				for (IModelElement element : children) {
					if (element instanceof ScriptFolder) {
						final IPath relative = ((ScriptFolder) element).getRelativePath();
						if (relative.segmentCount() != 0 && isLastSegmantPrefix(lastSegmant, relative)
								&& isPathPrefix(prefixPathFolder, relative)) {
							reporter.reportResource(element, relative, getSuffix(element), replaceRange);
						}
					}
				}

				// add files
				final IScriptFolder scriptFolder = projectFragment.getScriptFolder(prefixPathFolder);
				children = scriptFolder.getChildren();
				for (IModelElement element : children) {
					final IPath relative = element.getPath().makeRelativeTo(projectFragment.getPath());
					if (isLastSegmantPrefix(lastSegmant, relative)) {
						reporter.reportResource(element, relative, getSuffix(element), replaceRange);
					}
				}
			}
			break;
		case IBuildpathEntry.BPE_PROJECT:
			IWorkspace workspace = ResourcesPlugin.getWorkspace();
			IProject refProject = (IProject) workspace.getRoot().findMember(((IBuildpathEntry) entry).getPath());
			// if(refProject.isAccessible()){
			try {
				addInternalEntries(reporter, replaceRange, refProject, prefixPathFolder, lastSegmant);
			} catch (CoreException e) {
				e.printStackTrace();
			}
			// }

			break;
		case IBuildpathEntry.BPE_LIBRARY:
			final IProjectFragment[] findProjectFragments1 = project.findProjectFragments((IBuildpathEntry) entry);
			for (IProjectFragment projectFragment : findProjectFragments1) {
				if (projectFragment instanceof ArchiveProjectFragment) {
					ArchiveProjectFragment apf = (ArchiveProjectFragment) projectFragment;
					IPath path = apf.getPath();
					boolean external = false;
					if (EnvironmentPathUtils.isFull(path)) {
						path = EnvironmentPathUtils.getLocalPath(path);
						external = true;
					}

					IPath pharPath = null;
					if (external) {
						pharPath = new Path(PharConstants.PHAR_PREFIX + PharConstants.DOUBLE_SPLASH + path.toString());
					} else {
						pharPath = new Path(PharConstants.PHAR_PREFIX + PharConstants.SPLASH + path.toString());
					}

					// pharPath = transferToRelativePath(pharPath);
					if (prefixPathFolder.segmentCount() == 0) {
						// if a phar is not external(in workspace)
						// it will not shown in the code assist
						// if want to show it remove the if condition below
						if (external) {
							reporter.reportResource(apf, pharPath, PharConstants.EMPTY_STRING, replaceRange);
						}

					} else {
						if (!PharConstants.PHAR_PREFIX.equals(prefixPathFolder.getDevice())) {
							continue;
						}
						if (external) {
							if (!pharPath.isPrefixOf(prefixPathFolder.append(lastSegmant))) {
								continue;
							}
						} else {
							PharPath pp = PharPath.getPharPath(prefixPathFolder.append(lastSegmant));
							if (pp == null
									|| !new Path(pp.getPharName()).lastSegment().equals(pharPath.lastSegment())) {
								continue;
							} else {
								// if the current phar's name equals to the
								// phar's name in the
								// prefix(equals to
								// prefixPathFolder+lastSegmant)
								int index = prefixPathFolder.append(lastSegmant).toString()
										.indexOf(pharPath.lastSegment());
								// adjust pharPath to right path according to
								// prefix(equals to
								// prefixPathFolder+lastSegmant)
								pharPath = new Path(prefixPathFolder.append(lastSegmant).toString().substring(0,
										index + pharPath.lastSegment().length()));
							}
						}

						// add folders
						IModelElement[] children = projectFragment.getChildren();
						for (IModelElement element : children) {
							if (element instanceof ArchiveFolder) {
								final IPath relative = ((ArchiveFolder) element).getRelativePath();
								IPath tempPrefixPathFolder = prefixPathFolder;
								boolean isLastSegmantPrefix = isLastSegmantPrefix(lastSegmant, relative);
								if (lastSegmant.toString().endsWith(PharConstants.PHAR_EXTENSION_WITH_DOT)) {
									isLastSegmantPrefix = true;
									tempPrefixPathFolder = prefixPathFolder.append(lastSegmant);
								}
								IPath fullPath = pharPath.append(relative);
								if (relative.segmentCount() != 0
										&& !relative.toString().equals(PharConstants.PHAR_EXTENSION_WITH_DOT)
										&& isLastSegmantPrefix && isPathPrefix(tempPrefixPathFolder, fullPath)) {
									reporter.reportResource(element, fullPath, PharConstants.SPLASH, replaceRange);
								}
							}
						}
						IPath tempPrefixPathFolder = prefixPathFolder.append(lastSegmant);
						// }
						// add files
						final IScriptFolder scriptFolder = projectFragment.getScriptFolder(
								tempPrefixPathFolder.removeFirstSegments(pharPath.segmentCount()).setDevice(null));
						children = scriptFolder.getChildren();
						for (IModelElement element : children) {
							final IPath relative = tempPrefixPathFolder.append(element.getElementName());
							reporter.reportResource(element, relative, getSuffix(element), replaceRange);
						}
					}
				}

			}
			break;
		default:

		}

	}

