	/**
	 * Creates evaluated type for the given class name. If class name contains
	 * namespace parts, the fully qualified name is resolved.
	 * 
	 * @param typeName
	 *            Type name
	 * @param sourceModule
	 *            Source module where the type was referenced
	 * @param offset
	 *            Offset in file here the type was referenced
	 * @return
	 */
	public static PHPClassType fromTypeName(String typeName, ISourceModule sourceModule, int offset) {
		String namespace = PHPModelUtils.extractNamespaceName(typeName, sourceModule, offset);
		final ModuleDeclaration moduleDeclaration = SourceParserUtil.getModuleDeclaration(sourceModule);
		if (PHPModelUtils.isInUseTraitStatement(moduleDeclaration, offset)) {

			if (namespace != null) {
				return new PHPTraitType(namespace, PHPModelUtils.extractElementName(typeName));
			}
			return new PHPTraitType(typeName);
		} else {

			if (namespace != null) {
				return new PHPClassType(namespace, PHPModelUtils.extractElementName(typeName));
			}
			return new PHPClassType(typeName);
		}
	}

