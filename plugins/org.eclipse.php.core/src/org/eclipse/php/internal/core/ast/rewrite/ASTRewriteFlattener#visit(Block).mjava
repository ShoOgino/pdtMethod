	@Override
	public boolean visit(Block block) {
		// Handle non-bracketed NamespaceDeclaration body (see also
		// CodeFormatterVisitor#visit(Block block)):
		if (!block.isCurly() && block.getParent() != null && block.getParent().getType() == ASTNode.NAMESPACE) {
			visitList(block, Block.STATEMENTS_PROPERTY, null);
			return false;
		}

		if (block.isBracketed()) {
			result.append("{\n"); //$NON-NLS-1$
		} else if (block.isColon()) {
			result.append(":\n"); //$NON-NLS-1$
		}

		visitList(block, Block.STATEMENTS_PROPERTY, null);

		if (block.isBracketed()) {
			result.append("}\n"); //$NON-NLS-1$
		} else if (block.isColon()) {
			StructuralPropertyDescriptor locationInParent = block.getLocationInParent();
			if (locationInParent == IfStatement.TRUE_STATEMENT_PROPERTY) {
				if (((IfStatement) block.getParent()).getFalseStatement() == null) {
					// End the if statement
					result.append("endif;\n"); //$NON-NLS-1$
				} else {
					// Just add a new line char
					result.append("\n"); //$NON-NLS-1$
				}
			} else if (locationInParent == IfStatement.FALSE_STATEMENT_PROPERTY) {
				result.append("endif;\n"); //$NON-NLS-1$
			} else if (locationInParent == WhileStatement.BODY_PROPERTY) {
				result.append("endwhile;\n"); //$NON-NLS-1$
			} else if (locationInParent == ForStatement.BODY_PROPERTY) {
				result.append("endfor;\n"); //$NON-NLS-1$
			} else if (locationInParent == ForEachStatement.STATEMENT_PROPERTY) {
				result.append("endforeach;\n"); //$NON-NLS-1$
			} else if (locationInParent == SwitchStatement.BODY_PROPERTY) {
				result.append("endswitch;\n"); //$NON-NLS-1$
			}
		}
		return false;
	}

