	/**
	 * Returns the common library folder names by consulting the library folder
	 * name providers registered in the extension point.
	 * 
	 * @param project
	 *            a project
	 * 
	 * @return an array of folder names
	 */
	private String[] getCommonLibraryFolderNames(IProject project) {
		Collection<String> result = new HashSet<>();

		IConfigurationElement[] elements = Platform.getExtensionRegistry()
				.getConfigurationElementsFor(EXTENSION_POINT_ID);

		for (IConfigurationElement element : elements) {
			try {
				Object o = element.createExecutableExtension(CLASS_ATTR);
				if (o instanceof ILibraryFolderNameProvider) {
					ILibraryFolderNameProvider extension = (ILibraryFolderNameProvider) o;
					String[] names = extension.getLibraryFolderNames(project);
					if (names != null) {
						result.addAll(Arrays.asList(names));
					}
				}
			} catch (Exception e) {
				PHPCorePlugin.log(e);
			}
		}

		return result.toArray(new String[result.size()]);
	}

