	public static @Nullable String getPartitionType(IStructuredDocument document, int offset,
			boolean preferNonWhitespacePartitions) {
		try {
			IStructuredDocumentRegion sdRegion = document.getRegionAtCharacterOffset(offset);
			if (sdRegion == null) {
				return null;
			}

			ITextRegion tRegion = sdRegion.getRegionAtCharacterOffset(offset);
			if (tRegion == null && offset == document.getLength()) {
				offset -= 1;
				tRegion = sdRegion.getRegionAtCharacterOffset(offset);
			}
			// in case the cursor on the beginning of '?>' tag
			// we decrease the offset to get the PhpScriptRegion
			if (tRegion != null && tRegion.getType().equals(PHPRegionContext.PHP_CLOSE)) {
				tRegion = sdRegion.getRegionAtCharacterOffset(offset - 1);
			}
			if (tRegion != null) {
				int regionStart = sdRegion.getStartOffset(tRegion);

				// in case of container we have to extract the PhpScriptRegion
				if (tRegion instanceof ITextRegionContainer) {
					ITextRegionContainer container = (ITextRegionContainer) tRegion;
					tRegion = container.getRegionAtCharacterOffset(offset);
					regionStart += tRegion.getStart();
				}

				if (tRegion instanceof IPHPScriptRegion) {
					IPHPScriptRegion scriptRegion = (IPHPScriptRegion) tRegion;
					int regionOffset = offset - regionStart;
					if (preferNonWhitespacePartitions
							&& scriptRegion.getPHPToken(regionOffset).getTextEnd() <= regionOffset) {
						return scriptRegion.getPartition(scriptRegion.getPHPToken(regionOffset).getEnd());
					}
					return scriptRegion.getPartition(regionOffset);
				}
			}
		} catch (final BadLocationException e) {
		}

		partitioner.connect(document);
		return partitioner.getContentType(offset);
	}

