	public static @Nullable String getPartitionType(IStructuredDocument document, int offset,
			boolean preferNonWhitespacePartitions) {
		try {
			IStructuredDocumentRegion sdRegion = document.getRegionAtCharacterOffset(offset);
			if (sdRegion == null) {
				return null;
			}

			ITextRegion tRegion = sdRegion.getRegionAtCharacterOffset(offset);
			if (tRegion == null && offset == document.getLength()) {
				offset -= 1;
				tRegion = sdRegion.getRegionAtCharacterOffset(offset);
			}
			// in case the cursor on the beginning of '?>' tag
			// we decrease the offset to get the PhpScriptRegion
			if (tRegion != null && tRegion.getType().equals(PHPRegionContext.PHP_CLOSE)) {
				tRegion = sdRegion.getRegionAtCharacterOffset(offset - 1);
			}

			int regionStart = sdRegion.getStartOffset(tRegion);

			// in case of container we have to extract the PhpScriptRegion
			if (tRegion != null && tRegion instanceof ITextRegionContainer) {
				ITextRegionContainer container = (ITextRegionContainer) tRegion;
				tRegion = container.getRegionAtCharacterOffset(offset);
				regionStart += tRegion.getStart();
			}

			if (tRegion != null && tRegion instanceof IPhpScriptRegion) {
				IPhpScriptRegion scriptRegion = (IPhpScriptRegion) tRegion;
				if (preferNonWhitespacePartitions
						&& scriptRegion.getPhpToken(offset - regionStart).getTextEnd() <= offset - regionStart) {
					return scriptRegion.getPartition(scriptRegion.getPhpToken(offset - regionStart).getEnd());
				}
				return scriptRegion.getPartition(offset - regionStart);
			}
		} catch (final BadLocationException e) {
		}

		partitioner.connect(document);
		return partitioner.getContentType(offset);
	}

