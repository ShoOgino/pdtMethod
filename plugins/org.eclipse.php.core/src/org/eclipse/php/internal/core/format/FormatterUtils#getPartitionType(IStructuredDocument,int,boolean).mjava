	public static String getPartitionType(IStructuredDocument document, int offset, boolean perferOpenPartitions) {
		try {
			IStructuredDocumentRegion sdRegion = document.getRegionAtCharacterOffset(offset);
			if (sdRegion == null) {
				return null;
			}

			ITextRegion tRegion = sdRegion.getRegionAtCharacterOffset(offset);
			if (tRegion == null && offset == document.getLength()) {
				offset -= 1;
				tRegion = sdRegion.getRegionAtCharacterOffset(offset);
			}
			// in case the cursor on the beginning of '?>' tag
			// we decrease the offset to get the PhpScriptRegion 
			if (tRegion.getType().equals(PHPRegionContext.PHP_CLOSE)) {
				tRegion = sdRegion.getRegionAtCharacterOffset(offset - 1);
			}
			
			int regionStart = sdRegion.getStartOffset(tRegion);

			// in case of container we have the extract the PhpScriptRegion
			if (tRegion != null && tRegion instanceof ITextRegionContainer) {
				ITextRegionContainer container = (ITextRegionContainer) tRegion;
				tRegion = container.getRegionAtCharacterOffset(offset);
				regionStart += tRegion.getStart();
			}

			if (tRegion != null && tRegion instanceof PhpScriptRegion) {
				PhpScriptRegion scriptRegion = (PhpScriptRegion) tRegion;
				int regionOffset = offset - regionStart;
				if (PHPPartitionTypes.getPartitionStart(scriptRegion, regionOffset) == regionOffset && regionOffset > 0) {
					regionOffset = regionOffset - 1;
				}
				return scriptRegion.getPartition(regionOffset); 
			}
		} catch (final BadLocationException e) {
		}
		partitioner.connect(document);

		return partitioner.getContentType(offset, perferOpenPartitions);
	}

