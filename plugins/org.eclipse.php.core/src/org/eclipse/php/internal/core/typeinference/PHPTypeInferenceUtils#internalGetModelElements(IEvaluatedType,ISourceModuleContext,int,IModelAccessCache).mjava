	private static IType[] internalGetModelElements(IEvaluatedType evaluatedType, ISourceModuleContext context,
			int offset, IModelAccessCache cache) {
		ISourceModule sourceModule = context.getSourceModule();
		if (isSimple(evaluatedType)) {
			return null;
		}
		if (evaluatedType instanceof AnonymousClassInstanceType) {
			IType type = ((AnonymousClassInstanceType) evaluatedType).getType();
			if (type != null) {
				return new IType[] { type };
			}
			return null;
		}
		if (evaluatedType instanceof ModelClassType) {
			return new IType[] { ((ModelClassType) evaluatedType).getTypeDeclaration() };
		}
		if (evaluatedType instanceof PHPClassType) {
			IScriptProject scriptProject = sourceModule.getScriptProject();
			if (!ScriptProject.hasScriptNature(scriptProject.getProject())) {
				List<IType> result = new LinkedList<>();
				try {
					IType[] types = sourceModule.getTypes();
					for (IType t : types) {
						if (t.getElementName().equalsIgnoreCase(evaluatedType.getTypeName())) {
							Class<?> expressionClass = evaluatedType.getClass();
							if ((expressionClass == PHPTraitType.class) && PHPFlags.isTrait(t.getFlags())
									|| (expressionClass == PHPClassType.class) && PHPFlags.isClass(t.getFlags())) {
								result.add(t);
							}

							break;
						}
					}
				} catch (ModelException e) {
					if (DLTKCore.DEBUG) {
						e.printStackTrace();
					}
				}
				return result.toArray(new IType[result.size()]);
			} else {
				try {
					Class<?> expressionClass = evaluatedType.getClass();
					if (expressionClass == PHPTraitType.class) {
						PHPTraitType phpTraitType = (PHPTraitType) evaluatedType;
						return PHPModelUtils.getTypes(evaluatedType.getTypeName(), sourceModule, offset, cache, null,
								false, phpTraitType.isGlobal());
					} else {
						PHPClassType phpClassType = (PHPClassType) evaluatedType;
						return PHPModelUtils.getTypes(evaluatedType.getTypeName(), sourceModule, offset, cache, null,
								true, phpClassType.isGlobal());
					}
				} catch (ModelException e) {
					if (DLTKCore.DEBUG) {
						e.printStackTrace();
					}
				}
			}
		} else if (evaluatedType instanceof AmbiguousType) {
			List<IType> tmpList = new LinkedList<>();
			IEvaluatedType[] possibleTypes = ((AmbiguousType) evaluatedType).getPossibleTypes();
			for (IEvaluatedType possibleType : possibleTypes) {
				IType[] tmpArray = internalGetModelElements(possibleType, context, offset, cache);
				if (tmpArray != null) {
					tmpList.addAll(Arrays.asList(tmpArray));
				}
			}
			// the elements are filtered already
			return tmpList.toArray(new IType[tmpList.size()]);
		} else if (evaluatedType instanceof MultiTypeType) {
			MultiTypeType multiTypeType = (MultiTypeType) evaluatedType;
			List<IType> result = new ArrayList<>();
			for (IEvaluatedType tmpType : multiTypeType.getTypes()) {
				IType[] tmpTypes = internalGetModelElements(tmpType, context, offset, cache);
				if (tmpTypes != null) {
					result.addAll(Arrays.asList(tmpTypes));
				}
				return result.toArray(new IType[result.size()]);
			}
		}

		return null;
	}

