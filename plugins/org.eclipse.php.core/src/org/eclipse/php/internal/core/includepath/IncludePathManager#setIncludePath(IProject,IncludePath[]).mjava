	/**
	 * Sets project's include path
	 * 
	 * @param project
	 * @param includePathEntries
	 *            Ordered include path entries
	 */
	public void setIncludePath(final IProject project,
			IncludePath[] includePathEntries) {
		final StringBuilder buf = new StringBuilder();
		if (null == project || includePathEntries == null) {
			return;
		}
		for (int i = 0; i < includePathEntries.length; ++i) {
			IncludePath includePath = includePathEntries[i];
			if (includePath.isBuildpath()) {
				IBuildpathEntry entry = (IBuildpathEntry) includePath
						.getEntry();
				IPath localPath = EnvironmentPathUtils.getLocalPath(entry
						.getPath());
				buf.append(entry.getEntryKind()).append(';')
						.append(localPath.toString());
			} else {
				IResource entry = (IResource) includePath.getEntry();
				buf.append("0;").append(entry.getFullPath().toString()); //$NON-NLS-1$
			}
			if (i < includePathEntries.length - 1) {
				buf.append(PREF_SEP);
			}
		}
		modifyingIncludePath = true;
		WorkspaceJob job = new WorkspaceJob("Modifying Include Path") { //$NON-NLS-1$
			public IStatus runInWorkspace(IProgressMonitor monitor)
					throws CoreException {
				CorePreferencesSupport.getInstance()
						.setProjectSpecificPreferencesValue(PREF_KEY,
								buf.toString(), project);
				modifyingIncludePath = false;

				// TODO - should not be part of the current job
				refresh(project);
				return Status.OK_STATUS;
			}
		};
		job.setRule(project.getWorkspace().getRoot());
		job.setPriority(WorkspaceJob.INTERACTIVE);
		job.schedule();
	}

