	/**
	 * Returns type of a class field defined by name.
	 * @param types
	 * @param propertyName
	 * @param offset
	 * @param line
	 * @param determineObjectFromOtherFile
	 * @return
	 */
	public static IType[] getVariableType(IType[] types, String propertyName, int offset, int line, boolean determineObjectFromOtherFile) {
		for (IType type : types) {
			
			PHPClassType classType = new PHPClassType(type.getElementName());

			IField[] fields = getClassFields(type, propertyName, true, false);

			Set<String> processedFields = new HashSet<String>();
			for (IField field : fields) {
				
				String variableName = field.getElementName();
				if (processedFields.contains(variableName)) {
					continue;
				}
				processedFields.add(variableName);
				
				ModuleDeclaration moduleDeclaration = SourceParserUtil.getModuleDeclaration(field.getSourceModule(), null);
				BasicContext sourceModuleContext = new BasicContext(field.getSourceModule(), moduleDeclaration);
				InstanceContext instanceContext = new InstanceContext(sourceModuleContext, classType);
				PHPTypeInferencer typeInferencer = new PHPTypeInferencer();
				
				PHPDocClassVariableGoal phpDocGoal = new PHPDocClassVariableGoal(instanceContext, variableName);
				IEvaluatedType evaluatedType = typeInferencer.evaluateTypePHPDoc(phpDocGoal, 3000);
				
				IModelElement[] modelElements = PHPTypeInferenceUtils.getModelElements(evaluatedType, sourceModuleContext, !determineObjectFromOtherFile);
				if (modelElements != null) {
					return modelElementsToTypes(modelElements);
				}

				ClassVariableDeclarationGoal goal = new ClassVariableDeclarationGoal(sourceModuleContext, types, variableName);
				evaluatedType = typeInferencer.evaluateType(goal);

				modelElements = PHPTypeInferenceUtils.getModelElements(evaluatedType, sourceModuleContext, !determineObjectFromOtherFile);
				if (modelElements != null) {
					return modelElementsToTypes(modelElements);
				}
			}
		}
		return null;
	}

