	private void innerAddVariable(IPath variable) {
		updateExtentionList();
		String variableName = variable.toString();
		PHPIncludePathModel model = new PHPIncludePathModel(variableName, PHPIncludePathModel.TYPE_VARIABLE);
		PHPLanguageManager languageManager = PHPLanguageManagerProvider.instance().getPHPLanguageManager(phpVersion);
		ParserClient client = languageManager.createParserClient(model, project);

		File file = getVriableFile(variableName);

		if (file != null)
			if (file.isDirectory()) {
				PHPIncludePathModel cachedModel = new PHPIncludePathModel(variableName, PHPIncludePathModel.TYPE_VARIABLE);
				DefaultCacheManager.instance().load(project, cachedModel, true);
				recursiveParse(file, client, model, cachedModel);
			} else {
				String fileName = file.getName();
				if (fileName.toLowerCase().endsWith(".zip")) { //$NON-NLS-1$
					if (file.lastModified() < DefaultCacheManager.instance().getSharedCacheModificationTime(project, model)) {
						// The zip is valid.
						DefaultCacheManager.instance().load(project, model, true);
						return;
					}
					modelsToCache.put(model, model);
					parseZip(file, client);
				} else if (isPhpFile(fileName)) {
					PHPIncludePathModel cachedModel = new PHPIncludePathModel(variableName, PHPIncludePathModel.TYPE_VARIABLE);
					DefaultCacheManager.instance().load(project, cachedModel, true);
					PHPFileData fileData = cachedModel.getFileData(fileName);
					// If the file is cached, update the model with the cached version.
					if (isValid(fileData, file)) {
						model.insert(fileData);
						cachedModel.delete(fileName);
					} else {
						// add the model to the list of need-to-cache models
						modelsToCache.put(model, model);
						parse(file, client);
					}
				}
			}
		compositePhpModel.addModel(model);
	}

