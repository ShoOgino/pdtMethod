	/**
	 * Finds the method specified by <code>methodName</code> and </code>parameters</code> in
	 * the type hierarchy denoted by the given type. Returns <code>null</code> if no such method
	 * exists. If the method is defined in more than one super type only the first match is 
	 * returned. First the super class is examined and than the implemented interfaces.
	 * @param type The type to search the method in
	 * @param methodName The name of the method to find
	 * @return the method binding representing the method
	 */
	public static IMethodBinding findMethodInHierarchy(ITypeBinding type, String methodName) {
		IMethodBinding method = findMethodInType(type, methodName);
		if (method != null)
			return method;
		ITypeBinding superClass = type.getSuperclass();
		if (superClass != null) {
			method = findMethodInHierarchy(superClass, methodName);
			if (method != null)
				return method;
		}
		ITypeBinding[] interfaces = type.getInterfaces();
		for (int i = 0; i < interfaces.length; i++) {
			method = findMethodInHierarchy(interfaces[i], methodName);
			if (method != null)
				return method;
		}
		return null;
	}

