	public IGoal[] init() {
		MethodReturnTypeGoal typedGoal = getTypedGoal();
		TypeContext typedContext = getTypedContext();

		final Set<IMethod> methods = new HashSet<IMethod>();

		String methodName = typedGoal.getMethodName();
		IType[] types = getTypes(typedContext.getInstanceType(), typedContext);

		if (types.length == 0) {
			IScriptProject scriptProject = typedContext.getSourceModule().getScriptProject();
			IDLTKSearchScope scope = SearchEngine.createSearchScope(scriptProject);
			IMethod[] functions = PHPTypeInferenceUtils.getFunctions(methodName, scope);
			for (IMethod function : functions) {
				methods.add(function);
			}
		} else {
			for (IType type : types) {
				try {
					IMethod method = type.getMethod(methodName);
					if (method.exists()) {
						methods.add(method);
					} else {
						IMethod[] elements = PHPModelUtils.getTypeHierarchyMethod(type, methodName, null);
						for (IMethod m : elements) {
							methods.add(m);
						}
					}
				} catch (CoreException e) {
					if (DLTKCore.DEBUG) {
						e.printStackTrace();
					}
				}
			}
		}

		final List<IGoal> subGoals = new ArrayList<IGoal>(methods.size());
		for (IMethod method : methods) {
			subGoals.add(new MethodElementReturnTypeGoal(typedContext, method));
		}
		return subGoals.toArray(new IGoal[subGoals.size()]);
	}

