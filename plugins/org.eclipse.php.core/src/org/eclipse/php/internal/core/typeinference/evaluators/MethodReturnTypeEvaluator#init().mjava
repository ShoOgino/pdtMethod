	public IGoal[] init() {
		MethodReturnTypeGoal typedGoal = getTypedGoal();
		InstanceContext typedContext = getTypedContext();

		final Set<IMethod> methods = new HashSet<IMethod>();

		String methodName = typedGoal.getMethodName();
		IType[] types = getTypes(typedContext.getInstanceType(), typedContext.getSourceModule());

		if (types.length == 0) {
			IModelElement[] elements = PHPMixinModel.getInstance().getFunction(methodName);
			for (IModelElement e : elements) {
				methods.add((IMethod) e);
			}
		} else {
			for (IType type : types) {
				try {
					IModelElement[] elements = PHPMixinModel.getInstance().getMethod(type.getElementName(), methodName);
					if (elements.length == 0) {
						elements = PHPModelUtils.getClassMethod(type, methodName, null);
					}
					for (IModelElement e : elements) {
						methods.add((IMethod) e);
					}
				} catch (CoreException e) {
					if (DLTKCore.DEBUG) {
						e.printStackTrace();
					}
				}
			}
		}

		final List<IGoal> subGoals = new ArrayList<IGoal>(methods.size());
		for (IMethod method : methods) {
			subGoals.add(new MethodElementReturnTypeGoal(typedContext, method));
		}
		return subGoals.toArray(new IGoal[subGoals.size()]);
	}

