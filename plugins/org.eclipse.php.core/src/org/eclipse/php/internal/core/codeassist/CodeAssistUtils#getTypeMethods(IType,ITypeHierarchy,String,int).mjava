	/**
	 * This method finds all class methods that match the given prefix
	 * @param type Type to find methods within
	 * @param hierarchy Cached type hierarchy
	 * @param prefix Method prefix
	 * @param mask Search mask
	 * @return
	 */
	public static IMethod[] getTypeMethods(IType type, ITypeHierarchy hierarchy, String prefix, int mask) {
		final Set<IMethod> methods = new TreeSet<IMethod>(new AlphabeticComparator());
		final Set<String> methodNames = new HashSet<String>();
		boolean exactName = (mask & EXACT_NAME) != 0;
		try {
			IMethod[] typeMethods = type.getMethods();
			for (IMethod typeMethod : typeMethods) {
				String methodName = typeMethod.getElementName().toLowerCase();
				if (exactName) {
					if (methodName.equalsIgnoreCase(prefix)) {
						methods.add(typeMethod);
						methodNames.add(methodName);
						break;
					}
				} else if (startsWithIgnoreCase(methodName, prefix)) {
					methods.add(typeMethod);
					methodNames.add(methodName);
				}
			}

			IMethod[] superClassMethods = getSuperClassMethods(type, prefix, mask);
			// Filter overriden methods:
			for (IMethod superClassMethod : superClassMethods) {
				if (type.equals(superClassMethod.getDeclaringType())) {
					continue;
				}
				String methodName = superClassMethod.getElementName().toLowerCase();
				if (!methodNames.contains(methodName)) {
					methods.add(superClassMethod);
					methodNames.add(methodName);
				}
			}

		} catch (Exception e) {
			PHPCorePlugin.log(e);
		}
		return methods.toArray(new IMethod[methods.size()]);
	}

