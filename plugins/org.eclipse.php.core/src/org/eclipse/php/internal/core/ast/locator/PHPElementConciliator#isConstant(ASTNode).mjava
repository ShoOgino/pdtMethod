	/**
	 * Identifies a constant use
	 * 
	 * @param locateNode
	 * @return
	 */
	private static boolean isConstant(ASTNode locateNode) {
		assert locateNode != null;
		Scalar scalar = null;
		// check if it is an identifier
		if (locateNode.getType() != ASTNode.SCALAR) {
			ASTNode parent = locateNode.getParent();
			ASTNode node = null;
			// php 5.3, the parent is NamespaceName
			if (parent instanceof NamespaceName) {
				node = parent.getParent().getParent();
			} else { // non-php 5.3
				node = parent.getParent();
			}

			// check if the node is 'define'
			if ((locateNode instanceof Identifier) && "define".equals(((Identifier) locateNode).getName()) //$NON-NLS-1$
					&& node instanceof FunctionInvocation) {
				FunctionInvocation inv = (FunctionInvocation) node;
				List<Expression> parameters = inv.parameters();
				if (parameters != null && parameters.size() > 0) {
					Expression param = parameters.get(0);
					if (param instanceof Scalar) {
						scalar = (Scalar) param;
					} else {
						return false;
					}
				}
			} else {
				return false;
			}
		} else {
			scalar = (Scalar) locateNode;
		}

		// if it is not a dollared variable - it is not a global one
		if (scalar == null || scalar.getScalarType() != Scalar.TYPE_STRING || scalar.getStringValue() == null) {
			return false;
		}

		final int length = scalar.getStringValue().length() - 1;
		final char charAtBegining = scalar.getStringValue().charAt(0);
		final char charAtEnd = scalar.getStringValue().charAt(length);
		if (!detectString(charAtEnd) && !detectString(charAtBegining)) {
			return true;
		}

		// check if it is part of define
		ASTNode previous = locateNode.getParent();
		if (previous instanceof NamespaceName) {
			previous = previous.getParent();
		}
		if (previous.getType() == ASTNode.FUNCTION_NAME) {
			previous = previous.getParent();
		}

		if (previous.getType() != ASTNode.FUNCTION_INVOCATION) {
			return false;
		}

		final FunctionInvocation functionInvocation = (FunctionInvocation) previous;
		if (!(functionInvocation.getFunctionName().getName() instanceof Identifier)) {
			return false;
		}

		final Identifier identifier = (Identifier) functionInvocation.getFunctionName().getName();
		return "define".equalsIgnoreCase(identifier.getName()) || "constant".equalsIgnoreCase(identifier.getName()); //$NON-NLS-1$ //$NON-NLS-2$
	}

