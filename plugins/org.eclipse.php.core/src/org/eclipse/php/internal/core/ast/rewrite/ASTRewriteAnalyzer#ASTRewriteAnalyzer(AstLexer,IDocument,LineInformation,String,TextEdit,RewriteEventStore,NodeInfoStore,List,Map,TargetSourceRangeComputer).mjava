	/**
	 * Constructor for ASTRewriteAnalyzer.
	 * 
	 * @param scanner
	 *            An {@link AstLexer} scanner.
	 * @param document
	 *            The IDocument that contains the content of the compilation
	 *            unit to rewrite.
	 * @param lineInfo
	 *            line information for the content of the compilation unit to
	 *            rewrite.
	 * @param rootEdit
	 *            the edit to add all generated edits to
	 * @param eventStore
	 *            the event store containing the description of changes
	 * @param nodeInfos
	 *            annotations to nodes, such as if a node is a string
	 *            placeholder or a copy target
	 * @param comments
	 *            list of comments of the compilation unit to rewrite (elements
	 *            of type <code>Comment</code>) or <code>null</code>.
	 * @param options
	 *            the current options (formatting/compliance) or
	 *            <code>null</code>.
	 * @param extendedSourceRangeComputer
	 *            the source range computer to use
	 */
	public ASTRewriteAnalyzer(AstLexer scanner, IDocument document,
			LineInformation lineInfo, String lineDelim, TextEdit rootEdit,
			RewriteEventStore eventStore, NodeInfoStore nodeInfos,
			List comments, Map options,
			TargetSourceRangeComputer extendedSourceRangeComputer) {
		this.scanner = scanner;
		this.eventStore = eventStore;
		this.document = document;
		this.content = document.get().toCharArray();
		this.lineInfo = lineInfo;
		this.nodeInfos = nodeInfos;
		this.tokenScanner = null;
		this.currentEdit = rootEdit;
		this.sourceCopyInfoToEdit = new IdentityHashMap();
		this.sourceCopyEndNodes = new Stack();

		this.formatter = new ASTRewriteFormatter(document, nodeInfos,
				eventStore, options, lineDelim, scanner.getPHPVersion());

		this.extendedSourceRangeComputer = extendedSourceRangeComputer;
		this.lineCommentEndOffsets = new LineCommentEndOffsets(comments);
	}

