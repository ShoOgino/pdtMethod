	private CodeData[] getClassConsts(String fileName, String className, String startsWith, HashSet subClasses) {
		PHPClassData classData = getClass(fileName, className);
		if (classData == null) {
			return null;
		}

		CodeData[] variables = ModelSupport.getCodeDataStartingWith(classData.getConsts(), startsWith);

		Collection<CodeData> superConsts = new ArrayList();
		String superClass = classData.getSuperClassData().getName();
		if (superClass != null && !subClasses.contains(superClass)) {
			subClasses.add(className);
			fileName = (classData.isUserCode()) ? classData.getUserData().getFileName() : ""; //$NON-NLS-1$
			superConsts.addAll(Arrays.asList(getClassConsts(fileName, superClass, startsWith, subClasses)));
		}
		PHPInterfaceNameData[] interfacesNamesData = classData.getInterfacesNamesData();
		for (PHPInterfaceNameData interfaceNameData : interfacesNamesData) {
			String interfaceName = interfaceNameData.getName();
			fileName = (classData.isUserCode()) ? classData.getUserData().getFileName() : ""; //$NON-NLS-1$
			superConsts.addAll(Arrays.asList(getClassConsts(fileName, interfaceName, startsWith)));
		}
		return ModelSupport.merge(variables, superConsts.toArray(new CodeData[superConsts.size()]));
	}

