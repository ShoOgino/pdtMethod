	public boolean visit(TypeDeclaration type) throws Exception {
		boolean isNamespace = false;
		if (type instanceof NamespaceDeclaration) {
			NamespaceDeclaration namespaceDecl = (NamespaceDeclaration) type;
			fCurrentNamespace = namespaceDecl;
			if (namespaceDecl.isGlobal()) {
				return visitGeneral(type);
			}
			isNamespace = true;
		}

		Declaration parentDeclaration = null;
		if (!declarations.empty()) {
			parentDeclaration = declarations.peek();
		}
		declarations.push(type);

		if (!(parentDeclaration instanceof NamespaceDeclaration)) {
			type.setModifier(Modifiers.AccGlobal);
		}

		// In case we are entering a nested element
		if (parentDeclaration instanceof MethodDeclaration) {
			deferredDeclarations.add(type);
			return visitGeneral(type);
		}

		int modifiers = type.getModifiers();

		// Check whether this class is marked as @internal
		if (type instanceof IPHPDocAwareDeclaration) {
			IPHPDocAwareDeclaration phpDocAwareDeclaration = (IPHPDocAwareDeclaration) type;
			PHPDocBlock phpDoc = phpDocAwareDeclaration.getPHPDoc();
			if (phpDoc != null && phpDoc.getTags(PHPDocTag.INTERNAL).length > 0) {
				modifiers |= IPHPModifiers.Internal;
			}
		}

		// check whether this is a namespace
		if (isNamespace) {
			modifiers |= Modifiers.AccNameSpace;
			fCurrentQualifier = type.getName();
		} else {
			fCurrentParent = type.getName();
		}

		String[] superClasses = processSuperClasses(type);
		StringBuilder metadata = new StringBuilder();
		for (int i = 0; i < superClasses.length; ++i) {
			metadata.append(superClasses[i]);
			if (i < superClasses.length - 1) {
				metadata.append(",");
			}
		}

		modifyDeclaration(type, new DeclarationInfo(IModelElement.TYPE,
				modifiers, type.sourceStart(), type.sourceEnd()
						- type.sourceStart(), type.getNameStart(), type
						.getNameEnd()
						- type.getNameStart(), type.getName(), metadata
						.length() == 0 ? null : metadata.toString(),
				isNamespace ? null : fCurrentQualifier, null));

		for (PhpIndexingVisitorExtension visitor : extensions) {
			visitor.visit(type);
		}

		return visitGeneral(type);
	}

