	private void reportField(IField field, String prefix, String suffix, ISourceRange replaceRange,
			boolean removeDollar, int subRelevance, Object extraInfo) {
		if (processedFields.contains(field)) {
			return;
		}
		processedFields.add(field);

		assert !(removeDollar && StringUtils.isNotEmpty(prefix));

		int flags = 0;
		try {
			flags = field.getFlags();
		} catch (ModelException e) {
			PHPCorePlugin.log(e);
		}
		int relevance = PHPFlags.isConstant(flags) ? relevanceConst : relevanceVar;
		relevance += subRelevance;

		noProposal = false;

		if (!requestor.isIgnored(CompletionProposal.FIELD_REF)) {

			CompletionProposal proposal = createProposal(CompletionProposal.FIELD_REF, actualCompletionPosition);

			String fieldName = field.getElementName();

			proposal.setName(fieldName);

			String completionName = fieldName;
			if (StringUtils.isNotEmpty(prefix)) {
				String elementFullName = PHPModelUtils.getFullName(field);
				if (StringUtils.isNotEmpty(elementFullName)
						&& StringUtils.startsWithIgnoreCase(elementFullName, prefix)) {
					completionName = elementFullName.substring(prefix.length());
				}

			} else if (removeDollar && completionName.startsWith("$")) { //$NON-NLS-1$
				completionName = completionName.substring(1);
			}
			proposal.setCompletion(completionName + suffix);
			proposal.setExtraInfo(extraInfo);
			proposal.setModelElement(field);
			proposal.setFlags(flags);
			proposal.setRelevance(relevance);
			proposal.setReplaceRange(replaceRange.getOffset(), replaceRange.getOffset() + replaceRange.getLength());

			this.requestor.accept(proposal);

			if (DEBUG) {
				this.printDebug(proposal);
			}
		}
	}

