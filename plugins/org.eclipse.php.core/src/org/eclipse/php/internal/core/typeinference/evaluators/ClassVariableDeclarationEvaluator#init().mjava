	public IGoal[] init() {
		ClassVariableDeclarationGoal typedGoal = (ClassVariableDeclarationGoal) goal;
		InstanceContext context = (InstanceContext) typedGoal.getContext();
		String variableName = typedGoal.getVariableName();

		List<IGoal> subGoals = new LinkedList<IGoal>();

		IEvaluatedType instanceType = context.getInstanceType();

		Set<IType> types = new HashSet<IType>();

		if (instanceType instanceof PHPClassType) {
			PHPClassType classType = (PHPClassType) instanceType;
			IModelElement[] elements = PHPMixinModel.getInstance().getClass(classType.getTypeName());
			for (IModelElement e : elements) {
				types.add((IType) e);
			}
		} else if (instanceType instanceof AmbiguousType) {
			AmbiguousType ambiguousType = (AmbiguousType) instanceType;
			for (IEvaluatedType type : ambiguousType.getPossibleTypes()) {
				if (type instanceof PHPClassType) {
					PHPClassType classType = (PHPClassType) type;
					IModelElement[] elements = PHPMixinModel.getInstance().getClass(classType.getTypeName());
					for (IModelElement e : elements) {
						types.add((IType) e);
					}
				}
			}
		}

		IType typeFromSameFile = null;
		for (IType type : types) {
			if (type.getSourceModule().equals(context.getSourceModule())) {
				typeFromSameFile = type;
				break;
			}
		}
		// If type from the same file was found  - use it
		if (typeFromSameFile != null) {
			types.clear();
			types.add(typeFromSameFile);
		}

		for (IType type : types) {
			ISourceModule sourceModule = type.getSourceModule();
			ModuleDeclaration moduleDeclaration = SourceParserUtil.getModuleDeclaration(sourceModule, null);
			try {
				TypeDeclaration typeDeclaration = PHPModelUtils.getNodeByClass(moduleDeclaration, type);
				ClassVariableDeclarationSearcher searcher = new ClassVariableDeclarationSearcher(sourceModule, moduleDeclaration, variableName);
				typeDeclaration.traverse(searcher);

				Map<IContext, LinkedList<ASTNode>> contextToDeclarationMap = searcher.getContextToDeclarationMap();
				Iterator<IContext> contextIt = contextToDeclarationMap.keySet().iterator();
				while (contextIt.hasNext()) {
					IContext c = contextIt.next();
					for (ASTNode declaration : contextToDeclarationMap.get(c)) {
						subGoals.add(new ExpressionTypeGoal(c, declaration));
					}
				}
			} catch (Exception e) {
				Logger.logException(e);
			}
		}

		return subGoals.toArray(new IGoal[subGoals.size()]);
	}

