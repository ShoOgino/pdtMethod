	public IGoal[] init() {
		ClassVariableDeclarationGoal typedGoal = (ClassVariableDeclarationGoal) goal;
		IType[] types = typedGoal.getTypes();

		if (types == null) {
			TypeContext context = (TypeContext) typedGoal.getContext();
			types = PHPTypeInferenceUtils.getModelElements(context.getInstanceType(), context);
		}

		String variableName = typedGoal.getVariableName();
		SearchEngine searchEngine = new SearchEngine();
		SearchParticipant[] participants = new SearchParticipant[] { SearchEngine.getDefaultSearchParticipant() };

		final List<IGoal> subGoals = new LinkedList<IGoal>();
		for (final IType type : types) {
			try {
				SearchRequestor requestor = new SearchRequestor() {
					public void acceptSearchMatch(SearchMatch match) throws CoreException {
						Object element = match.getElement();
						if (element instanceof IMember) {

							IType declaringType = (IType) ((IMember) element).getAncestor(IModelElement.TYPE);
							if (declaringType != null) {

								ISourceModule sourceModule = declaringType.getSourceModule();
								ModuleDeclaration moduleDeclaration = SourceParserUtil.getModuleDeclaration(sourceModule);
								TypeDeclaration typeDeclaration = PHPModelUtils.getNodeByClass(moduleDeclaration, declaringType);

								if (typeDeclaration != null && element instanceof SourceRefElement) {
									SourceRefElement sourceRefElement = (SourceRefElement) element;
									ISourceRange sourceRange = sourceRefElement.getSourceRange();

									ClassDeclarationSearcher searcher = new ClassDeclarationSearcher(sourceModule, typeDeclaration, sourceRange.getOffset(), sourceRange.getLength(), null);
									try {
										moduleDeclaration.traverse(searcher);
										if (searcher.getResult() != null) {
											subGoals.add(new ExpressionTypeGoal(searcher.getContext(), searcher.getResult()));
										}
									} catch (Exception e) {
										if (DLTKCore.DEBUG) {
											e.printStackTrace();
										}
									}
								}
							}
						}
					}
				};
				IDLTKSearchScope scope;
				SearchPattern pattern = SearchPattern.createPattern(variableName, IDLTKSearchConstants.FIELD, IDLTKSearchConstants.DECLARATIONS, SearchPattern.R_EXACT_MATCH, PHPLanguageToolkit.getDefault());

				scope = SearchEngine.createSearchScope(type);
				searchEngine.search(pattern, participants, scope, requestor, null);

				if (type.getSuperClasses() != null) {
					scope = SearchEngine.createSuperHierarchyScope(type);
					searchEngine.search(pattern, participants, scope, requestor, null);
				}

				if (subGoals.size() == 0) {
					ISourceModule sourceModule = type.getSourceModule();
					ModuleDeclaration moduleDeclaration = SourceParserUtil.getModuleDeclaration(sourceModule);
					TypeDeclaration typeDeclaration = PHPModelUtils.getNodeByClass(moduleDeclaration, type);

					// try to search declarations of type "self::$var ="
					ClassDeclarationSearcher searcher = new ClassDeclarationSearcher(sourceModule, typeDeclaration, 0, 0, variableName);
					try {
						moduleDeclaration.traverse(searcher);
						Map<ASTNode, IContext> staticDeclarations = searcher.getStaticDeclarations();
						for (ASTNode node : staticDeclarations.keySet()) {
							subGoals.add(new ExpressionTypeGoal(staticDeclarations.get(node), node));
						}
					} catch (Exception e) {
						if (DLTKCore.DEBUG) {
							e.printStackTrace();
						}
					}
				}
			} catch (CoreException e) {
				if (DLTKCore.DEBUG) {
					e.printStackTrace();
				}
			}
		}

		resolveMagicClassVariableDeclaration(types, variableName);

		return subGoals.toArray(new IGoal[subGoals.size()]);
	}

