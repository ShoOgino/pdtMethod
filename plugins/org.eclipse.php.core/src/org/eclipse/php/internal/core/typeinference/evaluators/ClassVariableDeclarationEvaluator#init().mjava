	public IGoal[] init() {
		ClassVariableDeclarationGoal typedGoal = (ClassVariableDeclarationGoal) goal;
		InstanceContext context = (InstanceContext) typedGoal.getContext();

		final List<IGoal> subGoals = new LinkedList<IGoal>();

		IType[] types = getTypes(context.getInstanceType(), context.getSourceModule());

		String variableName = typedGoal.getVariableName();
		SearchEngine searchEngine = new SearchEngine();
		SearchParticipant[] participants = new SearchParticipant[] { SearchEngine.getDefaultSearchParticipant() };

		for (IType type : types) {
			final ISourceModule sourceModule = type.getSourceModule();
			final ModuleDeclaration moduleDeclaration = SourceParserUtil.getModuleDeclaration(sourceModule, null);

			SearchRequestor requestor = new SearchRequestor() {
				public void acceptSearchMatch(SearchMatch match) throws CoreException {
					Object element = match.getElement();
					if (element instanceof SourceRefElement) {
						SourceRefElement sourceRefElement = (SourceRefElement) element;
						ISourceRange sourceRange = sourceRefElement.getSourceRange();
						ClassDeclarationSearcher searcher = new ClassDeclarationSearcher(sourceModule, moduleDeclaration, sourceRange.getOffset(), sourceRange.getLength());
						try {
							moduleDeclaration.traverse(searcher);
							if (searcher.getResult() != null) {
								subGoals.add(new ExpressionTypeGoal(searcher.getContext(), searcher.getResult()));
							}
						} catch (Exception e) {
							Logger.logException(e);
						}
					}
				}
			};
			try {
				IDLTKSearchScope scope = SearchEngine.createHierarchyScope(type);
				SearchPattern pattern = SearchPattern.createPattern(variableName, IDLTKSearchConstants.FIELD, IDLTKSearchConstants.DECLARATIONS, SearchPattern.R_EXACT_MATCH, PHPLanguageToolkit.getDefault());
				searchEngine.search(pattern, participants, scope, requestor, null);
			} catch (CoreException e) {
				Logger.logException(e);
			}
		}

		return subGoals.toArray(new IGoal[subGoals.size()]);
	}

