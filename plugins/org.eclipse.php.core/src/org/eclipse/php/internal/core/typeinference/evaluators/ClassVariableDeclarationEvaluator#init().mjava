	public IGoal[] init() {
		ClassVariableDeclarationGoal typedGoal = (ClassVariableDeclarationGoal) goal;
		IType[] types = typedGoal.getTypes();

		if (types == null) {
			TypeContext context = (TypeContext) typedGoal.getContext();
			types = PHPTypeInferenceUtils.getModelElements(context
					.getInstanceType(), context);
		}
		if (types == null) {
			return null;
		}

		String variableName = typedGoal.getVariableName();

		final List<IGoal> subGoals = new LinkedList<IGoal>();
		for (final IType type : types) {
			try {
				IField[] fields = PHPModelUtils.getTypeHierarchyField(type,
						variableName, true, null);
				Set<IType> fieldDeclaringTypeSet = new HashSet<IType>();
				for (IField field : fields) {
					IType declaringType = field.getDeclaringType();
					if (declaringType != null) {
						fieldDeclaringTypeSet.add(declaringType);
						ISourceModule sourceModule = declaringType
								.getSourceModule();
						ModuleDeclaration moduleDeclaration = SourceParserUtil
								.getModuleDeclaration(sourceModule);
						TypeDeclaration typeDeclaration = PHPModelUtils
								.getNodeByClass(moduleDeclaration,
										declaringType);

						if (typeDeclaration != null
								&& field instanceof SourceRefElement) {
							SourceRefElement sourceRefElement = (SourceRefElement) field;
							ISourceRange sourceRange = sourceRefElement
									.getSourceRange();

							ClassDeclarationSearcher searcher = new ClassDeclarationSearcher(
									sourceModule, typeDeclaration, sourceRange
											.getOffset(), sourceRange
											.getLength(), null);
							try {
								moduleDeclaration.traverse(searcher);
								if (searcher.getResult() != null) {
									subGoals.add(new ExpressionTypeGoal(
											searcher.getContext(), searcher
													.getResult()));
								}
							} catch (Exception e) {
								if (DLTKCore.DEBUG) {
									e.printStackTrace();
								}
							}
						}
					}
				}

				if (subGoals.size() == 0) {
					getGoalFromStaticDeclaration(variableName, subGoals, type);
				}
				fieldDeclaringTypeSet.remove(type);
				if (subGoals.size() == 0 && !fieldDeclaringTypeSet.isEmpty()) {
					for (Iterator iterator = fieldDeclaringTypeSet.iterator(); iterator
							.hasNext();) {
						IType fieldDeclaringType = (IType) iterator.next();
						getGoalFromStaticDeclaration(variableName, subGoals,
								fieldDeclaringType);
					}
				}
			} catch (CoreException e) {
				if (DLTKCore.DEBUG) {
					e.printStackTrace();
				}
			}
		}

		resolveMagicClassVariableDeclaration(types, variableName);

		return subGoals.toArray(new IGoal[subGoals.size()]);
	}

