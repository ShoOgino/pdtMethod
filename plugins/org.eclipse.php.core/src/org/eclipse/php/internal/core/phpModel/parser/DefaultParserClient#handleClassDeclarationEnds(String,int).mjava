	public void handleClassDeclarationEnds(String className, int endPosition) {
		if (!classesStack.isEmpty()) {
			PHPCodeDataFactory.PHPClassDataImp classData = (PHPCodeDataFactory.PHPClassDataImp) classesStack.pop();
			if (classData.getName().equals(className)) {
				PHPClassVarData[] vars = new PHPClassVarData[classVars.size()];
				classVars.toArray(vars);
				Arrays.sort(vars);

				PHPClassConstData[] consts = new PHPClassConstData[classConsts.size()];
				classConsts.toArray(consts);
				Arrays.sort(consts);

				PHPFunctionData[] func = new PHPFunctionData[classFunctions.size()];
				classFunctions.toArray(func);
				Arrays.sort(func);

				for (int i = 0; i < vars.length; i++) {
					((PHPCodeDataFactory.PHPClassVarDataImp) vars[i]).setContainer(classData);
				}
				for (int i = 0; i < consts.length; i++) {
					((PHPCodeDataFactory.PHPClassConstDataImp) consts[i]).setContainer(classData);
				}
				for (int i = 0; i < func.length; i++) {
					((PHPCodeDataFactory.PHPFunctionDataImp) func[i]).setContainer(classData);
				}

				classData.setFunctions(func);
				classData.setVars(vars);
				classData.setConsts(consts);

				((PHPCodeDataFactory.UserDataImp) classData.getUserData()).setEndPosition(endPosition);
			}
		}
		if (!classVarsStack.isEmpty()) {
			classVars = (List) classVarsStack.pop();
			classConsts = (List) classConstsStack.pop();
			classFunctions = (List) classFunctionsStack.pop();
		} else {
			classVars.clear();
			classConsts.clear();
			classFunctions.clear();
		}
		super.handleClassDeclarationEnds(className, endPosition);
	}

