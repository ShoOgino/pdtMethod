	private IModelElement[] lookForMatchingElements(TypeReference[] references, ISourceModule sourceModule, int offset,
			int end, boolean isMethodOrFunction, IModelAccessCache cache) throws ModelException {
		for (TypeReference typeReference : references) {
			if (typeReference.sourceStart() <= offset && typeReference.sourceEnd() >= end) {
				boolean isNamespacePart = false;
				String name = typeReference.getName();
				// remove additional end elements like ']', '[]' or
				// '()'
				if (typeReference.sourceEnd() > end) {
					isNamespacePart = name
							.charAt(end - typeReference.sourceStart()) == NamespaceReference.NAMESPACE_SEPARATOR;
					name = name.substring(0, end - typeReference.sourceStart());
					// check if we're in an array
					int idx = name.lastIndexOf('[', offset - typeReference.sourceStart() - 1);
					if (idx != -1) {
						name = name.substring(idx + 1);
					}
				}
				String[] parts = name.split(Pattern.quote(PAAMAYIM_NEKUDOTAIM), 3);
				if (parts.length > 1) {
					if (parts.length == 2 && parts[0].length() > 0 && parts[1].length() > 0) {
						boolean isVariable = parts[1].charAt(0) == '$';
						// to determine if it was the part before
						// "::" that was selected
						boolean isClassOrNamespacePartSelected = offset <= typeReference.sourceStart()
								+ parts[0].length();
						IType[] types = filterNS(PHPModelUtils.getTypes(parts[0], sourceModule, offset, cache, null));
						if (isClassOrNamespacePartSelected) {
							// NB : no need to check for namespaces,
							// we cannot end here with variable
							// "isNamespacePart" set to true
							// and variable "name" containing "::"
							return types;
						} else {
							if (isMethodOrFunction && !isVariable) {
								// class method
								List<IMethod> methods = new LinkedList<>();
								for (IType type : types) {
									methods.addAll(Arrays.asList(PHPModelUtils.getTypeMethod(type, parts[1], true)));
								}
								return methods.toArray(new IMethod[methods.size()]);
							} else {
								// class field or class constant
								List<IField> fields = new LinkedList<>();
								for (IType type : types) {
									fields.addAll(Arrays.asList(PHPModelUtils.getTypeField(type, parts[1], true)));
								}
								return fields.toArray(new IField[fields.size()]);
							}
						}
					}
				} else if (name.length() > 0) {
					boolean isVariable = name.charAt(0) == '$';
					if (isVariable) {
						return PHPModelUtils.getFields(name, sourceModule, offset, cache, null);
					} else if (isMethodOrFunction) {
						return PHPModelUtils.getFunctions(name, sourceModule, offset, cache, null);
					} else {
						// it's either a
						// class/interface/namespace...
						if (isNamespacePart) {
							return PHPModelUtils.getNamespaceOf(name + NamespaceReference.NAMESPACE_SEPARATOR,
									sourceModule, offset, cache, null);
						}
						IType[] types = filterNS(PHPModelUtils.getTypes(name, sourceModule, offset, cache, null));
						if (types.length == 0) {
							// ... or a global constant
							return PHPModelUtils.getFields(name, sourceModule, offset, cache, null);
						}
						return types;
					}
				}
				return null;
			}
		}
		return null;
	}

