	protected ICompletionStrategy[] createStrategies(
			ICompletionContext context, ICompletionContext[] allContexts) {

		Class<? extends ICompletionContext> contextClass = context.getClass();

		if (contextClass == PHPDocTagStartContext.class) {
			return new ICompletionStrategy[] { new PHPDocTagStrategy(context) };
		}
		if (contextClass == PHPDocVarStartContext.class) {
			return new ICompletionStrategy[] { new GlobalClassesStrategy(
					context) {
				@Override
				protected Object getExtraInfo() {
					return ProposalExtraInfo.TYPE_ONLY;
				}
			} };
		}
		if (contextClass == PHPDocThrowsStartContext.class) {
			return new ICompletionStrategy[] { new ExceptionClassStrategy(
					context) };
		}
		if (contextClass == PHPDocParamTagContext.class) {
			return new ICompletionStrategy[] { new PHPDocParamVariableStrategy(
					context) };
		}
		if (contextClass == PHPDocReturnTagContext.class
				|| contextClass == PHPDocPropertyTagContext.class) {
			return new ICompletionStrategy[] { new PHPDocReturnTypeStrategy(
					context) };
		}
		if (contextClass == ArrayKeyContext.class) {
			// If array has quotes or double-quotes around the key - show only
			// builtin keys:
			if (((ArrayKeyContext) context).hasQuotes()) {
				return new ICompletionStrategy[] { new BuiltinArrayKeysStrategy(
						context) };
			}
			// Otherwise - show all global elements also:
			// Example: $array[foo()], $array[$otherVar]
			return new ICompletionStrategy[] {
					new BuiltinArrayKeysStrategy(context),
					new GlobalElementsCompositeStrategy(context, false),
					new LocalMethodVariablesStrategyForArray(context) };
		}
		if (contextClass == FunctionParameterTypeContext.class) {
			return new ICompletionStrategy[] {
					new FunctionParameterTypeStrategy(context),
					new FunctionParameterKeywordTypeStrategy(context) };
		}
		if (contextClass == FunctionParameterValueContext.class) {
			return new ICompletionStrategy[] {
					new GlobalConstantsStrategy(context),
					new MethodParameterKeywordStrategy(context) };
		}
		if (contextClass == MethodNameContext.class) {
			return new ICompletionStrategy[] { new MethodNameStrategy(context) };
		}
		if (contextClass == ClassStatementContext.class) {
			return new ICompletionStrategy[] {
					new ClassKeywordsStrategy(context),
					new GlobalConstantsStrategy(context),
			// new GlobalTypesStrategy(context)
			};
		}
		if (contextClass == GlobalStatementContext.class) {
			return new ICompletionStrategy[] { new GlobalElementsCompositeStrategy(
					context, true) };
		}
		if (contextClass == GlobalMethodStatementContext.class) {
			return new ICompletionStrategy[] { new LocalMethodElementsCompositeStrategy(
					context) };
		}
		if (contextClass == CatchTypeContext.class) {
			return new ICompletionStrategy[] { new CatchTypeStrategy(context) };
		}
		if (contextClass == ClassInstantiationContext.class) {
			return new ICompletionStrategy[] {
					new ClassInstantiationStrategy(context),
					new GlobalVariablesStrategy(context, false) };
		}
		if (contextClass == InstanceOfContext.class) {
			return new ICompletionStrategy[] { new InstanceOfStrategy(context) };
		}
		if (contextClass == ExceptionClassInstantiationContext.class) {
			return new ICompletionStrategy[] { new ExceptionClassInstantiationStrategy(
					context) };
		}
		if (contextClass == ClassStaticMemberContext.class
				|| contextClass == ClassObjMemberContext.class) {
			return new ICompletionStrategy[] {
					new ClassFieldsStrategy(context),
					new ClassMethodsStrategy(context) };
		}
		if (contextClass == ClassDeclarationKeywordContext.class) {
			return new ICompletionStrategy[] { new ClassDeclarationKeywordsStrategy(
					context) };
		}
		if (contextClass == InterfaceDeclarationKeywordContext.class) {
			return new ICompletionStrategy[] { new InterfaceDeclarationKeywordsStrategy(
					context) };
		}
		if (contextClass == ClassExtendsContext.class) {
			return new ICompletionStrategy[] {
					new NonFinalClassesStrategy(context),
					new NamespaceNonFinalClassesStrategy(context) };
		}
		if (contextClass == ClassImplementsContext.class
				|| contextClass == InterfaceExtendsContext.class) {
			return new ICompletionStrategy[] { new GlobalInterfacesStrategy(
					context) };
		}
		if (contextClass == NamespaceMemberContext.class) {
			return new ICompletionStrategy[] { new NamespaceElementsCompositeStrategy(
					context, allContexts,
					((NamespaceMemberContext) context).isGlobal()) };
		}
		if (contextClass == NamespaceNameContext.class
				|| contextClass == NamespaceDeclContext.class) {
			return new ICompletionStrategy[] { new NamespacesStrategy(context) };
		}
		if (contextClass == GotoStatementContext.class) {
			return new ICompletionStrategy[] { new GotoStatementStrategy(
					context) };
		}
		if (contextClass == TypeCastingContext.class) {
			return new ICompletionStrategy[] { new TypeCastingStrategy(context) };
		}
		if (contextClass == UseNameContext.class) {
			UseNameContext useNameContext = (UseNameContext) context;
			if (useNameContext.isUseTrait()) {
				return new ICompletionStrategy[] { new UseTraitNameStrategy(
						context) };
			} else {
				return new ICompletionStrategy[] { new UseNameStrategy(context) };
			}

		}
		if (contextClass == NamespaceUseNameContext.class) {
			NamespaceUseNameContext useNameContext = (NamespaceUseNameContext) context;
			if (useNameContext.isUseTrait()) {
				return new ICompletionStrategy[] { new NamespaceUseTraitNameStrategy(
						context) };
			} else {
				return new ICompletionStrategy[] { new NamespaceUseNameStrategy(
						context) };
			}
		}
		if (contextClass == IncludeStatementContext.class) {
			return new ICompletionStrategy[] { new IncludeStatementStrategy(
					context) };
		}
		// Context for template
		if (contextClass == GlobalStatementContextForTemplate.class) {
			return new ICompletionStrategy[] { new GlobalVariablesStrategy(
					context, true) };
		}
		if (contextClass == GlobalMethodStatementContextForTemplate.class) {
			return new ICompletionStrategy[] { new LocalMethodVariablesStrategyForTemplate(
					context) };
		}
		if (contextClass == NamespacePHPDocVarStartContext.class) {
			return new ICompletionStrategy[] { new NamespaceDocTypesCompositeStrategy(
					context) };
		}
		return new ICompletionStrategy[] {};
	}

