	protected ICompletionStrategy[] createStrategies(ICompletionContext context, ICompletionContext[] allContexts) {
		Class<? extends ICompletionContext> contextClass = context.getClass();
		if (contextClass == PHPDocTagStartContext.class) {
			return new ICompletionStrategy[] { new PHPDocTagStrategy(context) };
		}
		if (contextClass == PHPDocVarStartContext.class) {
			return new ICompletionStrategy[] { new PHPDocReturnTypeStrategy(context) };
		}
		if (contextClass == PHPDocThrowsStartContext.class) {
			return new ICompletionStrategy[] { new ExceptionClassStrategy(context) };
		}
		if (contextClass == PHPDocParamTagContext.class) {
			return new ICompletionStrategy[] { new PHPDocParamVariableStrategy(context) };
		}
		if (contextClass == PHPDocReturnTagContext.class || contextClass == PHPDocMagicTagsContext.class) {
			return new ICompletionStrategy[] { new PHPDocReturnTypeStrategy(context) };
		}
		if (contextClass == ArrayKeyContext.class) {
			// If array has quotes or double-quotes around the key - show only
			// builtin keys:
			if (((ArrayKeyContext) context).hasQuotes()) {
				return new ICompletionStrategy[] { new BuiltinArrayKeysStrategy(context),
						new ArrayStringKeysStrategy(context) };
			}
			// Otherwise - show all global elements also:
			// Example: $array[foo()], $array[$otherVar]
			return new ICompletionStrategy[] { new BuiltinArrayKeysStrategy(context),
					new ElementsCompositeStrategy(context, false), new LocalMethodVariablesStrategyForArray(context),
					new BuiltinArrayKeysStrategy(context), new ArrayStringKeysStrategy(context) };
		}
		if (contextClass == FunctionParameterTypeContext.class) {
			return new ICompletionStrategy[] { new FunctionParameterTypeStrategy(context),
					new FunctionParameterKeywordTypeStrategy(context) };
		}
		if (contextClass == FunctionReturnTypeContext.class) {
			return new ICompletionStrategy[] { new FunctionReturnTypeStrategy(context) };
		}
		if (contextClass == FunctionParameterValueContext.class) {
			return new ICompletionStrategy[] { new ConstantsStrategy(context), new TypesStrategy(context),
					new MethodParameterKeywordStrategy(context) };
		}
		if (contextClass == MethodNameContext.class) {
			return new ICompletionStrategy[] { new MethodNameStrategy(context) };
		}

		if (contextClass == ClassStatementContext.class) {
			if (((AbstractCompletionContext) context).isInUseTraitStatement()) {
				int type = ((AbstractCompletionContext) context).getUseTraitStatementContext();
				if (type == AbstractCompletionContext.TRAIT_NAME) {
					return new ICompletionStrategy[] { new InUseTraitStrategy(context) };
				} else if (type == AbstractCompletionContext.TRAIT_KEYWORD) {
					return new ICompletionStrategy[] { new InUseTraitKeywordStrategy(context) };
				} else {
					return new ICompletionStrategy[] {};
				}
			} else if (((ClassStatementContext) context).isAssignment()) {
				return new ICompletionStrategy[] { new ClassKeywordsStrategy(context), new ConstantsStrategy(context),
						new TypesStrategy(context) };
			} else {
				return new ICompletionStrategy[] { new ClassKeywordsStrategy(context),
						// new ConstantsStrategy(context),
						// new TypesStrategy(context)
				};
			}
		}
		if (contextClass == GlobalStatementContext.class) {
			return new ICompletionStrategy[] { new ElementsCompositeStrategy(context, true) };
		}
		if (contextClass == GlobalMethodStatementContext.class) {
			return new ICompletionStrategy[] { new LocalMethodElementsCompositeStrategy(context) };
		}
		if (contextClass == CatchTypeContext.class) {
			return new ICompletionStrategy[] { new CatchTypeStrategy(context) };
		}
		if (contextClass == ClassInstantiationContext.class) {
			return new ICompletionStrategy[] { new ClassInstantiationStrategy(context),
					new VariablesStrategy(context, false) };
		}
		if (contextClass == InstanceOfContext.class) {
			return new ICompletionStrategy[] { new InstanceOfStrategy(context) };
		}
		if (contextClass == ExceptionClassInstantiationContext.class) {
			return new ICompletionStrategy[] { new ExceptionClassInstantiationStrategy(context) };
		}
		// if (contextClass ==
		// ClassStaticMemberContext.class&&((ClassStaticMemberContext)context).isInUseTraitStatement())
		// {
		// return new ICompletionStrategy[] {
		// new ClassFieldsStrategy(context),
		// new ClassMethodsStrategy(context) };
		// }
		if (contextClass == ClassStaticMemberContext.class || contextClass == ClassObjMemberContext.class) {
			if (((AbstractCompletionContext) context).isInUseTraitStatement()) {
				int type = ((AbstractCompletionContext) context).getUseTraitStatementContext();
				if (type == AbstractCompletionContext.TRAIT_NAME) {
					return new ICompletionStrategy[] { new InUseTraitStrategy(context) };
				} else if (type == AbstractCompletionContext.TRAIT_KEYWORD) {
					return new ICompletionStrategy[] { new InUseTraitKeywordStrategy(context) };
				} else {
					return new ICompletionStrategy[] { new ClassFieldsStrategy(context),
							new ClassMethodsStrategy(context) };
				}
			} else {
				return new ICompletionStrategy[] { new ClassFieldsStrategy(context),
						new ClassMethodsStrategy(context) };
			}
		}
		if (contextClass == ClassDeclarationKeywordContext.class) {
			return new ICompletionStrategy[] { new ClassDeclarationKeywordsStrategy(context) };
		}
		if (contextClass == InterfaceDeclarationKeywordContext.class) {
			return new ICompletionStrategy[] { new InterfaceDeclarationKeywordsStrategy(context) };
		}
		if (contextClass == ClassExtendsContext.class) {
			return new ICompletionStrategy[] { new NonFinalClassesStrategy(context) };
		}
		if (contextClass == ClassImplementsContext.class || contextClass == InterfaceExtendsContext.class) {
			return new ICompletionStrategy[] { new NonFinalInterfacesStrategy(context) };
		}
		if (contextClass == NamespaceDeclContext.class) {
			return new ICompletionStrategy[] { new NamespacesStrategy(context) };
		}
		if (contextClass == QuotesContext.class) {
			return new ICompletionStrategy[] { new TypeInStringStrategy(context) };
		}
		if (contextClass == GotoStatementContext.class) {
			return new ICompletionStrategy[] { new GotoStatementStrategy(context) };
		}
		if (contextClass == TypeCastingContext.class) {
			return new ICompletionStrategy[] { new TypeCastingStrategy(context) };
		}
		if (contextClass == UseNameContext.class) {
			UseNameContext useNameContext = (UseNameContext) context;
			if (useNameContext.getType() == UseNameContext.TYPES.TRAIT) {
				return new ICompletionStrategy[] { new UseTraitNameStrategy(context) };
			} else {
				return new ICompletionStrategy[] { new UseNameStrategy(context) };
			}

		}
		if (contextClass == UseConstNameContext.class) {
			return new ICompletionStrategy[] { new ConstantsStrategy(context), new NamespacesStrategy(context) };
		}
		if (contextClass == UseFunctionNameContext.class) {
			return new ICompletionStrategy[] { new FunctionsStrategy(context), new NamespacesStrategy(context) };
		}

		if (contextClass == IncludeStatementContext.class) {
			return new ICompletionStrategy[] { new IncludeStatementStrategy(context) };
		}
		// Context for template
		if (contextClass == GlobalStatementContextForTemplate.class) {
			return new ICompletionStrategy[] { new VariablesStrategy(context, true) };
		}
		if (contextClass == GlobalMethodStatementContextForTemplate.class) {
			return new ICompletionStrategy[] { new LocalMethodVariablesStrategyForTemplate(context) };
		}
		return new ICompletionStrategy[] {};
	}

