	/**
	 * This method searches for all fields that where declared in the specified
	 * method (including global variables that where introduced to this method
	 * using 'global' keyword)
	 * 
	 * @param method
	 *            Method to look at
	 * @param prefix
	 *            Field name
	 * @param exactName
	 *            Whether the name is exact or it is prefix
	 * @param monitor
	 *            Progress monitor
	 */
	public static IModelElement[] getMethodFields(final IMethod method, final String prefix, final boolean exactName,
			IProgressMonitor monitor) {

		final List<IField> elements = new LinkedList<IField>();
		final Set<String> processedVars = new HashSet<String>();

		try {
			getMethodFields(method, prefix, exactName, elements, processedVars);

			// collect global variables
			ModuleDeclaration rootNode = SourceParserUtil.getModuleDeclaration(method.getSourceModule());
			MethodDeclaration methodDeclaration = PHPModelUtils.getNodeByMethod(rootNode, method);
			if (methodDeclaration != null) {
				methodDeclaration.traverse(new ASTVisitor() {
					public boolean visit(Statement s) throws Exception {
						if (s instanceof GlobalStatement) {
							GlobalStatement globalStatement = (GlobalStatement) s;
							for (Expression e : globalStatement.getVariables()) {
								if (e instanceof VariableReference) {
									VariableReference varReference = (VariableReference) e;
									String varName = varReference.getName();
									if (!processedVars.contains(varName)
											&& (exactName && varName.equalsIgnoreCase(prefix)
													|| !exactName && startsWithIgnoreCase(varName, prefix))) {
										elements.add(new FakeField((ModelElement) method, varName, e.sourceStart(),
												e.sourceEnd() - e.sourceStart()));
										processedVars.add(varName);
									}
								}
							}
						}
						return super.visit(s);
					}
				});
			}
		} catch (Exception e) {
			PHPCorePlugin.log(e);
		}

		return elements.toArray(new IModelElement[elements.size()]);
	}

