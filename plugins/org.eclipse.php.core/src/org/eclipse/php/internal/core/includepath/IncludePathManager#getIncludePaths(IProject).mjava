	/**
	 * Read project's include path
	 * 
	 * @param project
	 * @return ordered include path
	 */
	public IncludePath[] getIncludePaths(IProject project) {
		List<IncludePath> includePathEntries = new LinkedList<>();
		IBuildpathEntry[] buildpath = null;
		try {
			buildpath = DLTKCore.create(project).getRawBuildpath();
		} catch (ModelException e) {
			if (DLTKCore.DEBUG) {
				e.printStackTrace();
			}
		}

		String includePath = CorePreferencesSupport.getInstance().getProjectSpecificPreferencesValue(PREF_KEY, null,
				project);
		if (includePath != null) {
			while (includePath != null) {
				String path;
				int i = includePath.indexOf(PREF_SEP);
				if (i == -1) {
					path = includePath;
					includePath = null;
				} else {
					path = includePath.substring(0, i);
					includePath = includePath.substring(i + 1);
				}

				if ((i = path.indexOf(';')) != -1) {
					int kind = Integer.parseInt(path.substring(0, i));
					path = path.substring(i + 1);

					if (kind == 0) {
						IResource resource = ResourcesPlugin.getWorkspace().getRoot().findMember(path);
						if (resource != null) {
							includePathEntries.add(new IncludePath(resource, project));
						}
					} else if (buildpath != null) {
						for (IBuildpathEntry entry : buildpath) {
							if (entry.getEntryKind() == kind) {
								IPath localPath = EnvironmentPathUtils.getLocalPath(entry.getPath());
								if (localPath.equals(new Path(path))) {
									includePathEntries.add(new IncludePath(entry, project));
									break;
								}
							}
						}

					}
				}
			}
		} else if (buildpath != null) { // by default include path equals to the
										// build path
			for (IBuildpathEntry entry : buildpath) {
				if (isBuildpathAllowed(entry)) {
					includePathEntries.add(new IncludePath(entry, project));
				}
			}
		}
		return includePathEntries.toArray(new IncludePath[includePathEntries.size()]);
	}

