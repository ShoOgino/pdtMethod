	/**
	 * Finds type inference context for the given offset.
	 * 
	 * @param sourceModule
	 *            Source module element
	 * @param unit
	 *            Module decalaration AST node
	 * @param offset
	 *            Offset in the filetarget
	 */
	public static IContext findContext(final ISourceModule sourceModule, final ModuleDeclaration unit,
			final int offset) {

		ContextFinder visitor = new ContextFinder(sourceModule) {
			private IContext context;

			@Override
			public IContext getContext() {
				return context;
			}

			@Override
			public boolean visitGeneral(ASTNode node) throws Exception {
				if (!(node instanceof ASTError) && node.sourceStart() <= offset && node.sourceEnd() >= offset) {
					if (!contextStack.isEmpty()) {
						context = contextStack.peek();
					}
				}
				if (node.sourceEnd() < offset || node.sourceStart() > offset) {
					// node is before or after our search
					return false;
				}
				// search inside - we are looking for minimal node
				return true;
			}

		};

		try {
			unit.traverse(visitor);
		} catch (Exception e) {
			Logger.logException(e);
		}
		if (visitor.getContext() == null) {
			/*
			 * offset can be bigger than unit.end when sourceunit have syntax
			 * error on end
			 */
			Logger.log(Logger.WARNING_DEBUG, "Context is null"); //$NON-NLS-1$
			return new FileContext(sourceModule, unit, offset);
		}
		return visitor.getContext();
	}

