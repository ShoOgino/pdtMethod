	private boolean isReturnTypeCompletion(final int offset, String tagName, boolean haveSpacesAtEnd) {
		if (!haveSpacesAtEnd) {
			return false;
		}
		if (!PHPDocTag.RETURN_NAME.equals(tagName)) {
			return false;
		}

		// find function return types
		ModuleDeclaration moduleDeclaration = SourceParserUtil.getModuleDeclaration(sourceModule, null);

		Declaration declaration = ASTUtils.findDeclarationAfterPHPdoc(moduleDeclaration, offset);
		if (declaration instanceof MethodDeclaration) {
			IMethod method = (IMethod) PHPModelUtils.getModelElementByNode(sourceModule, moduleDeclaration, declaration);
			if (method != null) {
				IType[] returnTypes = CodeAssistUtils.getFunctionReturnType(method, true);
				if (returnTypes != null) {
					int relevanceClass = RELEVANCE_CLASS;
					for (IType type : returnTypes) {
						try {
							if ((type.getFlags() & IPHPModifiers.Internal) == 0) {
								reportType(type, relevanceClass--, EMPTY);
							}
						} catch (ModelException e) {
//							Logger.logException(e);
						}
					}
				}
			}
		}

		return false;
	}

