	public IGoal[] init() {
		for (IMethod method : getMethods()) {
			IType currentNamespace = PHPModelUtils.getCurrentNamespace(method);

			if (method instanceof IPHPDocAwareElement) {
				String[] typeNames = ((IPHPDocAwareElement) method)
						.getReturnTypes();
				if (typeNames != null) {
					for (String typeName : typeNames) {
						Matcher m = ARRAY_TYPE_PATTERN.matcher(typeName);
						if (m.find()) {
							int offset = 0;
							try {
								offset = method.getSourceRange().getOffset();
							} catch (ModelException e) {
							}
							evaluated.add(getArrayType(m.group(),
									currentNamespace, offset));
						} else {
							IEvaluatedType type = getEvaluatedType(typeName,
									currentNamespace);
							if (type != null) {
								evaluated.add(type);
							}
						}
					}
				}

			} else {
				PHPDocBlock docBlock = PHPModelUtils.getDocBlock(method);
				if (docBlock != null) {
					AbstractMethodReturnTypeGoal typedGoal = (AbstractMethodReturnTypeGoal) goal;
					IType[] types = typedGoal.getTypes();
					for (PHPDocTag tag : docBlock.getTags()) {
						if (tag.getTagKind() == PHPDocTag.RETURN) {
							// @return datatype1|datatype2|...
							for (SimpleReference reference : tag
									.getReferences()) {
								final String[] typesNames = PIPE_PATTERN
										.split(reference.getName());
								for (String typeName : typesNames) {
									Matcher m = ARRAY_TYPE_PATTERN
											.matcher(typeName);
									if (m.find()) {
										evaluated.add(getArrayType(m.group(),
												currentNamespace,
												docBlock.sourceStart()));
									} else {
										if (typeName.equals(SELF_RETURN_TYPE)
												&& types != null) {
											for (IType t : types) {
												IEvaluatedType type = getEvaluatedType(
														t.getElementName(),
														currentNamespace);
												if (type != null) {
													evaluated.add(type);
												}
											}
										} else {
											if (typeName
													.indexOf(NamespaceReference.NAMESPACE_SEPARATOR) > 0
													&& currentNamespace != null) {
												// check if the first part is an
												// alias,then get the full name
												ModuleDeclaration moduleDeclaration = SourceParserUtil
														.getModuleDeclaration(currentNamespace
																.getSourceModule());
												String prefix = typeName
														.substring(
																0,
																typeName.indexOf(NamespaceReference.NAMESPACE_SEPARATOR));
												final Map<String, UsePart> result = PHPModelUtils
														.getAliasToNSMap(
																prefix,
																moduleDeclaration,
																docBlock.sourceStart(),
																currentNamespace,
																true);
												if (result.containsKey(prefix)) {
													String fullName = result
															.get(prefix)
															.getNamespace()
															.getFullyQualifiedName();
													typeName = typeName
															.replace(prefix,
																	fullName);
												}
											}
											IEvaluatedType type = getEvaluatedType(
													typeName, currentNamespace);
											if (type != null) {
												evaluated.add(type);
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}

		return IGoal.NO_GOALS;
	}

