	public IGoal[] init() {
		for (IMethod method : getMethods()) {
			if (!method.exists()) {
				continue;
			}

			String[] typeNames = null;
			if (method instanceof IPHPDocAwareElement) {
				typeNames = ((IPHPDocAwareElement) method).getReturnTypes();
			} else {
				try {
					String returnType = method.getType();
					if (returnType != null) {
						typeNames = StringUtils.split(returnType, Constants.TYPE_SEPERATOR_CHAR);
					} else {
						List<String> returnTypeList = new LinkedList<String>();
						evaluateReturnType(returnTypeList, method);
						typeNames = returnTypeList.toArray(new String[returnTypeList.size()]);
					}
				} catch (ModelException e) {
					Logger.logException(e);
				}
			}
			if (typeNames != null) {
				AbstractMethodReturnTypeGoal goal = (AbstractMethodReturnTypeGoal) getGoal();
				IType currentNamespace = PHPModelUtils.getCurrentNamespace(method);
				IModelElement space = currentNamespace != null ? currentNamespace : method.getSourceModule();
				try {
					evaluated.addAll(Arrays.asList(PHPEvaluationUtils.evaluatePHPDocType(typeNames, space,
							method.getSourceRange().getOffset(), goal.getTypes())));
				} catch (ModelException e) {
					Logger.logException(e);
				}
			}
		}

		return IGoal.NO_GOALS;
	}

