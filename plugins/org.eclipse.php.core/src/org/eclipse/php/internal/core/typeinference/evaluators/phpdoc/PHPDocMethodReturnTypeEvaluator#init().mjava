	public IGoal[] init() {
		for (IMethod method : getMethods()) {
			IType currentNamespace = PHPModelUtils.getCurrentNamespace(method);
			String[] typeNames = null;
			if (method instanceof IPHPDocAwareElement) {
				typeNames = ((IPHPDocAwareElement) method).getReturnTypes();
			} else {
				List<String> returnTypeList = new LinkedList<String>();
				PHPDocBlock docBlock = PHPModelUtils.getDocBlock(method);
				if (docBlock == null) {
					return IGoal.NO_GOALS;
				}

				evaluateReturnType(returnTypeList, docBlock, method);
				typeNames = returnTypeList.toArray(new String[returnTypeList.size()]);
			}
			if (typeNames != null) {
				PHPDocBlock docBlock = PHPModelUtils.getDocBlock(method);
				if (docBlock != null) {
					AbstractMethodReturnTypeGoal goal = (AbstractMethodReturnTypeGoal) getGoal();
					IModelElement space = currentNamespace != null ? currentNamespace : method.getSourceModule();
					evaluated.addAll(Arrays.asList(PHPEvaluationUtils.evaluatePHPDocType(typeNames, space,
							docBlock.sourceStart(), goal.getTypes())));
				}
			}
		}

		return IGoal.NO_GOALS;
	}

