	public IGoal[] init() {
		PHPDocMethodReturnTypeGoal typedGoal = (PHPDocMethodReturnTypeGoal) goal;
		ISourceModuleContext context = (ISourceModuleContext) goal.getContext();
		IMethod method = typedGoal.getMethod();

		Set<PHPDocField> docs = new HashSet<PHPDocField>();

		if (method.getDeclaringType() != null) {
			try {
				for (PHPDocField doc : PHPModelUtils.getTypeHierarchyMethodDoc(method.getDeclaringType(), method.getElementName(), null)) {
					docs.add(doc);
				}
			} catch (CoreException e) {
				if (DLTKCore.DEBUG) {
					e.printStackTrace();
				}
			}
		} else {
			IScriptProject scriptProject = context.getSourceModule().getScriptProject();
			IDLTKSearchScope scope = SearchEngine.createSearchScope(scriptProject);
			IModelElement[] elements = PHPMixinModel.getInstance(scriptProject).getFunctionDoc(method.getElementName(), scope);
			for (IModelElement e : elements) {
				docs.add((PHPDocField) e);
			}
		}

		PHPDocField docFromSameFile = null;
		for (PHPDocField doc : docs) {
			if (doc.getSourceModule().equals(context.getSourceModule())) {
				docFromSameFile = doc;
				break;
			}
		}
		// If doc from the same file was found  - use it
		if (docFromSameFile != null) {
			docs.clear();
			docs.add(docFromSameFile);
		}

		for (PHPDocField doc : docs) {
			PHPDocBlock docBlock = doc.getDocBlock();
			for (PHPDocTag tag : docBlock.getTags()) {
				if (tag.getTagKind() == PHPDocTag.RETURN) {
					// @return datatype1|datatype2|...
					for (SimpleReference reference : tag.getReferences()) {
						final String[] types = PIPE_PATTERN.split(reference.getName());
						for (String typeName : types) {
							IEvaluatedType type = PHPSimpleTypes.fromString(typeName);
							if (type == null) {
								type = new PHPClassType(typeName);
							}
							evaluated.add(type);
						}
					}
				}
			}
		}

		return IGoal.NO_GOALS;
	}

