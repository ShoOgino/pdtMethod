	public IGoal[] init() {
		for (IMethod method : getMethods()) {
			IType currentNamespace = PHPModelUtils.getCurrentNamespace(method);

			if (method instanceof IPHPDocAwareElement) {
				String[] typeNames = ((IPHPDocAwareElement) method)
						.getReturnTypes();
				if (typeNames != null) {
					for (String typeName : typeNames) {
						Matcher m = ARRAY_TYPE_PATTERN.matcher(typeName);
						if (m.find()) {
							evaluated.add(getArrayType(m.group(),
									currentNamespace));
						} else {
							IEvaluatedType type = getEvaluatedType(typeName,
									currentNamespace);
							if (type != null) {
								evaluated.add(type);
							}
						}
					}
				}

			} else {
				PHPDocBlock docBlock = PHPModelUtils.getDocBlock(method);
				if (docBlock != null) {
					for (PHPDocTag tag : docBlock.getTags()) {
						if (tag.getTagKind() == PHPDocTag.RETURN) {
							// @return datatype1|datatype2|...
							for (SimpleReference reference : tag
									.getReferences()) {
								final String[] typesNames = PIPE_PATTERN
										.split(reference.getName());
								for (String typeName : typesNames) {
									Matcher m = ARRAY_TYPE_PATTERN
											.matcher(typeName);
									if (m.find()) {
										evaluated.add(getArrayType(m.group(),
												currentNamespace));
									} else {
										IEvaluatedType type = getEvaluatedType(
												typeName, currentNamespace);
										if (type != null) {
											evaluated.add(type);
										}
									}
								}
							}
						}
					}
				}
			}
		}

		return IGoal.NO_GOALS;
	}

