	/**
	 * Filter and sort a list of Use statements from a document
	 */
	public static List<UseStatement> filterAndSort(UseStatement[] statements, IDocument doc,
			ModuleDeclaration moduleDeclaration) {
		Vector<UseStatement> total = new Vector<UseStatement>();

		NamespaceFinder visitor = new NamespaceFinder();
		try {
			moduleDeclaration.traverse(visitor);
		} catch (Exception e1) {
		}

		for (UseStatement statement : statements) {
			List<Position> excludePositions;
			if (moduleDeclaration instanceof PHPModuleDeclaration) {
				excludePositions = getExcludeSortedAndFilteredPositions(
						((PHPModuleDeclaration) moduleDeclaration).getCommentList().toArray(new ASTNode[0]));
			} else {
				excludePositions = new ArrayList<Position>();
			}
			String contents;
			NamespaceDeclaration currentNamespace = visitor.getNamespaceDeclarationFor(statement);
			if (currentNamespace != null && currentNamespace.isBracketed()) {
				contents = stripUseStatements(statements, doc, currentNamespace.sourceStart(),
						currentNamespace.sourceEnd(), excludePositions);
			} else {
				contents = stripUseStatements(statements, doc, excludePositions);
			}

			Vector<UsePart> parts = new Vector<UsePart>();
			for (UsePart part : statement.getParts()) {
				if (containsUseStatement(part, contents, excludePositions)) {
					parts.add(part);
				}
			}

			if (parts.size() > 0) {
				total.add(new UseStatement(statement.start(), statement.end(), parts, statement.getStatementType()));
			}
		}

		// sort and remove duplicate UseStatements
		Set<UseStatement> set = new TreeSet<>(new Comparator<UseStatement>() {
			@Override
			public int compare(UseStatement a, UseStatement b) {
				if (a == b) {
					return 0;
				}
				if (a.getStatementType() != b.getStatementType()) {
					return a.getStatementType() - b.getStatementType();
				}

				String partA = createStringFromUseStatement(a, false).toLowerCase();
				String partB = createStringFromUseStatement(b, false).toLowerCase();
				String[] partsA = partA.split("\\\\");
				String[] partsB = partB.split("\\\\");

				int checkLength = Math.min(partsA.length, partsB.length);
				for (int i = 0; i < checkLength; i++) {
					int comp = partsA[i].compareTo(partsB[i]);

					if (comp != 0) {
						return comp;
					}
				}

				return partsA.length - partsB.length;
			}
		});
		set.addAll(total);

		return new ArrayList<UseStatement>(set);
	}

