	@Override
	@SuppressWarnings({ "unchecked", "null" })
	public boolean visit(MethodDeclaration method) throws Exception {
		fNodes.push(method);
		methodGlobalVars.add(new HashSet<String>());
		int modifiers = method.getModifiers();
		PHPDocBlock doc = null;
		if (method instanceof IPHPDocAwareDeclaration) {
			IPHPDocAwareDeclaration declaration = (IPHPDocAwareDeclaration) method;
			doc = declaration.getPHPDoc();
		}
		Declaration parentDeclaration = null;
		if (!declarations.empty()) {
			parentDeclaration = declarations.peek();
		}
		declarations.push(method);

		// In case we are entering a nested element - just add to the deferred
		// list
		// and get out of the nested element visiting process
		if (parentDeclaration instanceof MethodDeclaration) {
			if (fCurrentNamespace == null) {
				deferredDeclarations.add(method);
			} else {
				deferredNamespacedDeclarations.add(method);
			}
			return visitGeneral(method);
		}

		if (parentDeclaration instanceof InterfaceDeclaration) {
			method.setModifier(Modifiers.AccAbstract);
		}

		String methodName = method.getName();

		// Determine whether this method represents constructor:
		if (ASTUtils.isConstructor(methodName, parentDeclaration, fCurrentNamespace)) {
			modifiers |= IPHPModifiers.Constructor;
		}

		if (parentDeclaration == null
				|| (parentDeclaration instanceof TypeDeclaration && parentDeclaration == fCurrentNamespace)) {
			modifiers |= Modifiers.AccGlobal;
		}
		if (!Flags.isPrivate(modifiers) && !Flags.isProtected(modifiers) && !Flags.isPublic(modifiers)) {
			modifiers |= Modifiers.AccPublic;
		}
		if (doc != null && doc.getTags(TagKind.INHERITDOC).length != 0) {
			modifiers |= IPHPModifiers.AccInheritdoc;
		}

		modifiers = markAsDeprecated(modifiers, method);

		StringBuilder metadata = new StringBuilder();
		metadata.append(fCurrentQualifier != null ? fCurrentQualifierCounts.get(fCurrentQualifier) : 1);
		metadata.append(QUALIFIER_SEPERATOR);
		if (method instanceof PHPMethodDeclaration) {
			TypeReference returnType = ((PHPMethodDeclaration) method).getReturnType();
			if (returnType != null) {
				metadata.append(returnType.getName());
				modifiers |= IPHPModifiers.AccReturn;

				if (returnType instanceof FullyQualifiedReference) {
					if (((FullyQualifiedReference) returnType).isNullable()) {
						modifiers |= IPHPModifiers.AccNullable;
					}
				}
			}
		}
		metadata.append(RETURN_TYPE_SEPERATOR);

		List<Argument> arguments = method.getArguments();
		if (arguments != null) {
			Iterator<Argument> i = arguments.iterator();
			while (i.hasNext()) {
				Argument arg = i.next();

				String type = NULL_VALUE;
				if (arg instanceof FormalParameter) {
					FormalParameter fp = (FormalParameter) arg;
					if (fp.getParameterType() != null) {
						if (fp.getParameterType().getName() != null) {
							type = fp.getParameterType().getName();
						}
					}
					if (fp.isVariadic()) {
						modifiers |= IPHPModifiers.AccVariadic;
					}
				}
				if (type == NULL_VALUE && doc != null) {
					type = getParamType(doc, arg.getName(), type);
				}

				metadata.append(type);
				metadata.append(PARAMETER_SEPERATOR);
				metadata.append(arg.getName());
				metadata.append(PARAMETER_SEPERATOR);
				String defaultValue = NULL_VALUE;
				if (arg.getInitialization() != null) {
					if (arg.getInitialization() instanceof UnaryOperation) {
						UnaryOperation initialization = (UnaryOperation) arg.getInitialization();
						if (initialization.getExpr() instanceof Literal) {
							Literal scalar = (Literal) initialization.getExpr();
							defaultValue = initialization.getOperator() + scalar.getValue();
							// we need to encode all problematic characters
							defaultValue = encodeValue(defaultValue);
						} else {
							defaultValue = DEFAULT_VALUE;
						}
					} else if (arg.getInitialization() instanceof Literal) {
						Literal scalar = (Literal) arg.getInitialization();
						// we need to encode all problematic characters
						defaultValue = encodeValue(scalar.getValue());
					} else if (arg.getInitialization() instanceof ArrayCreation) {
						ArrayCreation arrayCreation = (ArrayCreation) arg.getInitialization();
						if (arrayCreation.getElements().isEmpty()) {
							defaultValue = EMPTY_ARRAY_VALUE;
						} else {
							defaultValue = ARRAY_VALUE;
						}
					} else {
						defaultValue = DEFAULT_VALUE;
					}
				}
				metadata.append(defaultValue);
				int paramModifiers = 0;

				if (arg instanceof FormalParameter) {
					FormalParameter fp = (FormalParameter) arg;
					if (fp.getParameterType() instanceof FullyQualifiedReference) {
						if (((FullyQualifiedReference) fp.getParameterType()).isNullable()) {
							paramModifiers |= IPHPModifiers.AccNullable;
						}
					}
				}
				if (arg instanceof FormalParameterByReference) {
					paramModifiers |= IPHPModifiers.AccReference;
				}

				if (paramModifiers != 0) {
					metadata.append(PARAMETER_SEPERATOR);
					metadata.append(String.valueOf(paramModifiers));
				}

				if (i.hasNext()) {
					metadata.append(","); //$NON-NLS-1$
				}
			}
		}

		// Add method declaration:
		modifyDeclaration(method,
				new DeclarationInfo(IModelElement.METHOD, modifiers, method.sourceStart(),
						method.sourceEnd() - method.sourceStart(), method.getNameStart(),
						method.getNameEnd() - method.getNameStart(), methodName, metadata.toString(),
						encodeDocInfo(method), fCurrentQualifier, fCurrentParent));

		for (PHPIndexingVisitorExtension visitor : extensions) {
			visitor.visit(method);
		}

		return visitGeneral(method);
	}

