	protected IType[] getVariableType(IType[] types, String propertyName, int offset, int line) {
		for (IType type : types) {
			IField[] fields = getClassProperties(type, propertyName);
			for (IField field : fields) {
				ModuleDeclaration moduleDeclaration = SourceParserUtil.getModuleDeclaration(field.getSourceModule(), null);
				BasicContext context = new BasicContext(field.getSourceModule(), moduleDeclaration);
				ClassVariableDeclarationGoal goal = new ClassVariableDeclarationGoal(context, types, field.getElementName());
				PHPTypeInferencer typeInferencer = new PHPTypeInferencer();
				IEvaluatedType evaluatedType = typeInferencer.evaluateType(goal);
				if (evaluatedType != null) {
					IModelElement[] modelElements = PHPMixinModel.getInstance().getClass(evaluatedType.getTypeName());
					return modelElementsToTypes(modelElements);
				}
			}
		}
		return null;
	}

