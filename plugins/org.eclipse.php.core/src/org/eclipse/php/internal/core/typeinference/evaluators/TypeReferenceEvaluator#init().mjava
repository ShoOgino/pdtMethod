	public IGoal[] init() {
		IContext context = goal.getContext();
		String className = typeReference.getName();

		if ("self".equals(className)) { //$NON-NLS-1$
			if (context instanceof MethodContext) {
				MethodContext methodContext = (MethodContext) context;
				IEvaluatedType instanceType = methodContext.getInstanceType();
				if (instanceType instanceof PHPClassType) {
					result = new PHPClassType(instanceType.getTypeName());
				}
			}
		} else if ("parent".equals(className)) { //$NON-NLS-1$
			if (context instanceof MethodContext) {
				MethodContext methodContext = (MethodContext) context;
				ModuleDeclaration rootNode = methodContext.getRootNode();
				final MethodDeclaration methodDecl = methodContext.getMethodNode();
				
				// Look for parent class types:
				final List<IEvaluatedType> types = new LinkedList<IEvaluatedType>();
				try {
					rootNode.traverse(new ASTVisitor() {
						private TypeDeclaration currentType;
						private boolean found;

						public boolean visit(MethodDeclaration s) throws Exception {
							if (s == methodDecl && currentType instanceof ClassDeclaration) {
								ClassDeclaration classDecl = (ClassDeclaration) currentType;
								for (String superClass : classDecl.getSuperClassNames()) {
									types.add(new PHPClassType(superClass));
								}
								found = true;
							}
							return !found;
						}

						public boolean visit(TypeDeclaration s) throws Exception {
							this.currentType = s;
							return !found;
						}
						
						public boolean endvisit(TypeDeclaration s) throws Exception {
							this.currentType = null;
							return super.endvisit(s);
						}
						
						public boolean visit(ASTNode n) throws Exception {
							return !found;	
						}
					});
				} catch (Exception e) {
					if (DLTKCore.DEBUG) {
						e.printStackTrace();
					}
				}
				
				if (types.size() == 1) {
					result = types.get(0);
				} else if (types.size() > 1) {
					result = new AmbiguousType(types.toArray(new IEvaluatedType[types.size()]));
				}
			}
		} else {
			result = new PHPClassType(className);
		}

		return IGoal.NO_GOALS;
	}

