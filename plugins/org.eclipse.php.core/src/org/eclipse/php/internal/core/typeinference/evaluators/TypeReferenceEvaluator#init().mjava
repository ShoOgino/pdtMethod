	@Override
	public IGoal[] init() {
		final IContext context = goal.getContext();
		String elementName = typeReference.getName();

		if (isSelfOrStatic()) {
			if (context instanceof MethodContext || context instanceof TypeContext) {
				IInstanceContext instanceContext = (IInstanceContext) context;
				IEvaluatedType instanceType = instanceContext.getInstanceType();
				if (instanceType instanceof PHPClassType) {
					result = instanceType;
				}
			}
		} else if (isParent()) {
			ISourceModule sourceModule = ((ISourceModuleContext) context).getSourceModule();
			final List<IEvaluatedType> parentClassTypes = new LinkedList<>();

			if (context instanceof MethodContext) {
				try {
					final MethodContext methodContext = (MethodContext) context;
					final ModuleDeclaration rootNode = methodContext.getRootNode();
					final MethodDeclaration methodDecl = methodContext.getMethodNode();

					// https://bugs.eclipse.org/bugs/show_bug.cgi?id=525370
					// Look for parent class types (inside method declaration):
					rootNode.traverse(new ASTVisitor() {
						private TypeDeclaration currentType;
						private boolean found;

						@Override
						public boolean visit(MethodDeclaration s) throws Exception {
							if (s == methodDecl && currentType instanceof ClassDeclaration) {
								addParentClassTypes(sourceModule, currentType, parentClassTypes);
								found = true;
							}
							return !found;
						}

						@Override
						public boolean visit(TypeDeclaration s) throws Exception {
							this.currentType = s;
							return !found;
						}

						@Override
						public boolean endvisit(TypeDeclaration s) throws Exception {
							this.currentType = null;
							return super.endvisit(s);
						}

						@Override
						public boolean visit(ASTNode n) throws Exception {
							return !found;
						}
					});
				} catch (Exception e) {
					if (DLTKCore.DEBUG) {
						e.printStackTrace();
					}
				}
			} else if (context instanceof TypeContext) {
				try {
					final TypeContext typeContext = (TypeContext) context;
					ModuleDeclaration rootNode = typeContext.getRootNode();

					// https://bugs.eclipse.org/bugs/show_bug.cgi?id=525370
					// Look for parent class types (inside class declaration):
					IType currentType = PHPModelUtils.getCurrentType(sourceModule, typeReference.sourceStart());
					if (currentType != null) {
						TypeDeclaration currentTypeDeclaration = PHPModelUtils.getNodeByClass(rootNode, currentType);
						addParentClassTypes(sourceModule, currentTypeDeclaration, parentClassTypes);
					}
				} catch (Exception e) {
					if (DLTKCore.DEBUG) {
						e.printStackTrace();
					}
				}
			}

			if (parentClassTypes.size() == 1) {
				result = parentClassTypes.get(0);
			} else if (parentClassTypes.size() > 1) {
				result = new AmbiguousType(parentClassTypes.toArray(new IEvaluatedType[parentClassTypes.size()]));
			}
		} else if (PHPSimpleTypes.isHintable(typeReference.getName(), phpVersion)) {
			result = PHPSimpleTypes.fromString(typeReference.getName());
		} else {
			String parentNamespace = null;

			// Check current context - if we are under some namespace:
			if (context instanceof INamespaceContext) {
				parentNamespace = ((INamespaceContext) context).getNamespace();
			}
			String fullyQualifiedName;
			int elementType = FullyQualifiedReference.T_TYPE;
			// If the namespace was prefixed explicitly - use it:
			if (typeReference instanceof FullyQualifiedReference) {
				fullyQualifiedName = ((FullyQualifiedReference) typeReference).getFullyQualifiedName();
				elementType = ((FullyQualifiedReference) typeReference).getElementType();
			} else {
				fullyQualifiedName = typeReference.getName();

				elementName = PHPEvaluationUtils.extractArrayType(fullyQualifiedName);
				elementName = PHPModelUtils.extractElementName(elementName);
			}
			ISourceModule sourceModule = ((ISourceModuleContext) context).getSourceModule();
			int offset = typeReference.sourceStart();
			try {
				// for use statement, extract namespace and class name directly
				IModelElement element = sourceModule.getElementAt(offset);
				if (element instanceof ImportDeclaration) {
					fullyQualifiedName = ((ImportDeclaration) element).getElementName();
					elementName = PHPModelUtils.extractElementName(fullyQualifiedName);
					String namespace = PHPModelUtils.extractNameSpaceName(fullyQualifiedName);
					// http://php.net/manual/en/language.namespaces.importing.php
					// "Note that for namespaced names (fully qualified
					// namespace names containing namespace separator, such as
					// Foo\Bar as opposed to global names that do not, such as
					// FooBar), the leading backslash is unnecessary and not
					// recommended, as import names must be fully qualified, and
					// are not processed relative to the current namespace."
					if (namespace != null && namespace.length() > 0
							&& namespace.charAt(0) != NamespaceReference.NAMESPACE_SEPARATOR) {
						namespace = NamespaceReference.NAMESPACE_DELIMITER + namespace;
					}
					// NB: ImportDeclaration has no useful type, we have to look
					// at the type of "typeReference"
					if (elementType == FullyQualifiedReference.T_CONSTANT) {
						if (namespace != null) {
							result = new PHPNamespaceConstantType(namespace, elementName);
						} else {
							result = new PHPNamespaceConstantType(elementName);
						}
						return new IGoal[] { new ConstantDeclarationGoal(goal.getContext(), elementName, namespace) };
					}
					if (elementType == FullyQualifiedReference.T_TYPE) {
						if (namespace != null) {
							result = new PHPClassType(namespace, elementName);
						} else {
							result = new PHPClassType(elementName);
						}
					}
					// NB: elementType == FullyQualifiedReference.T_FUNCTION is
					// not handled here (see also
					// PHPSelectionEngine.internalASTResolve())
					return IGoal.NO_GOALS;
				}
			} catch (ModelException e) {
			}
			String extractedNamespace = PHPModelUtils.extractNamespaceName(fullyQualifiedName, sourceModule, offset);
			if (extractedNamespace != null) {
				parentNamespace = extractedNamespace;
				// See also code from PHPClassType.fromTypeName(...) and
				// PHPClassType.fromTraitName(...)
				elementName = PHPModelUtils.getRealName(extractedNamespace, fullyQualifiedName, sourceModule, offset, elementName);
			}
			if (PHPModelUtils.isInUseTraitStatement(((ISourceModuleContext) context).getRootNode(),
					typeReference.sourceStart())) {
				if (parentNamespace != null) {
					result = new PHPTraitType(parentNamespace, elementName);
				} else {
					result = new PHPTraitType(elementName);
				}
			} else {
				if (parentNamespace != null) {
					if (elementType == FullyQualifiedReference.T_CONSTANT) {
						result = new PHPNamespaceConstantType(parentNamespace, elementName);
						return new IGoal[] {
								new ConstantDeclarationGoal(goal.getContext(), elementName, parentNamespace) };
					} else {
						result = new PHPClassType(parentNamespace, elementName);
					}
				} else {
					result = new PHPClassType(elementName);
				}
			}
		}

		return IGoal.NO_GOALS;
	}

