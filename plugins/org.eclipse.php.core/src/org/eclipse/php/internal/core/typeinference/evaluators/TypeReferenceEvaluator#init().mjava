	public IGoal[] init() {
		final IContext context = goal.getContext();
		String className = typeReference.getName();

		if ("self".equals(className)) { //$NON-NLS-1$
			if (context instanceof MethodContext) {
				MethodContext methodContext = (MethodContext) context;
				IEvaluatedType instanceType = methodContext.getInstanceType();
				if (instanceType instanceof PHPClassType) {
					result = instanceType;
				}
			}
		} else if ("parent".equals(className)) { //$NON-NLS-1$
			if (context instanceof MethodContext) {
				final MethodContext methodContext = (MethodContext) context;
				ModuleDeclaration rootNode = methodContext.getRootNode();
				final MethodDeclaration methodDecl = methodContext.getMethodNode();

				// Look for parent class types:
				final List<IEvaluatedType> types = new LinkedList<IEvaluatedType>();
				try {
					rootNode.traverse(new ASTVisitor() {
						private TypeDeclaration currentType;
						private boolean found;

						public boolean visit(MethodDeclaration s) throws Exception {
							if (s == methodDecl && currentType instanceof ClassDeclaration) {
								ClassDeclaration classDecl = (ClassDeclaration) currentType;
								for (String superClass : classDecl.getSuperClassNames()) {

									String parentNamespace = null;
									if (context instanceof INamespaceContext) {
										parentNamespace = ((INamespaceContext) context).getNamespace();
									}

									if (superClass.indexOf(NamespaceReference.NAMESPACE_SEPARATOR) != -1 || parentNamespace == null) {
										types.add(new PHPClassType(superClass));
									} else if (parentNamespace != null) {
										types.add(new PHPClassType(parentNamespace, superClass));
									}
								}
								found = true;
							}
							return !found;
						}

						public boolean visit(TypeDeclaration s) throws Exception {
							this.currentType = s;
							return !found;
						}

						public boolean endvisit(TypeDeclaration s) throws Exception {
							this.currentType = null;
							return super.endvisit(s);
						}

						public boolean visit(ASTNode n) throws Exception {
							return !found;
						}
					});
				} catch (Exception e) {
					if (DLTKCore.DEBUG) {
						e.printStackTrace();
					}
				}

				if (types.size() == 1) {
					result = types.get(0);
				} else if (types.size() > 1) {
					result = new AmbiguousType(types.toArray(new IEvaluatedType[types.size()]));
				}
			}
		} else {
			String parentNamespace = null;

			// Check current context - if we are under some namespace:
			if (context instanceof INamespaceContext) {
				parentNamespace = ((INamespaceContext) context).getNamespace();
			}

			// If the namespace was prefixed explicitly - use it:
			if (typeReference instanceof FullyQualifiedReference) {
				String fullyQualifiedName = ((FullyQualifiedReference) typeReference).getFullyQualifiedName();
				ISourceModule sourceModule = ((ISourceModuleContext) context).getSourceModule();
				int offset = typeReference.sourceStart();
				String extractedNamespace = PHPModelUtils.extractNamespaceName(fullyQualifiedName, sourceModule, offset);
				if (extractedNamespace != null) {
					parentNamespace = extractedNamespace;
				}
			}

			if (parentNamespace != null) {
				result = new PHPClassType(parentNamespace, className);
			} else {
				result = new PHPClassType(className);
			}
		}

		return IGoal.NO_GOALS;
	}

