	/**
	 * This function goes over all the object instantiation and tries to find
	 * for the follwing assignment the target's new type. and then fixes the
	 * database accordingly. $a = $b; $a = foo(); $a = MyClass::foo(); $a =
	 * $b->f(); / $a = $b->c;
	 *
	 * @param cls
	 *            the classes that was created in this parsing (not in the model
	 *            yet)
	 * @param func
	 *            the function that was created in this parsing (still not in
	 *            the model yet)
	 */

	protected void fixObjectInstantiation(PHPClassData[] cls, PHPFunctionData[] func) {
		CodeData[] projectClasses = projectModel.getClasses();
		CodeData[] projectFunctions = projectModel.getFunctions();
		PHPVariablesTypeManager variablesTypeManager = variableContextBuilder.getPHPVariablesTypeManager();
		Map variablesInstansiations = variablesTypeManager.getVariablesInstansiation();

		List variablesNames = new LinkedList();
		List contextes = new LinkedList();
		List classNames = new LinkedList();
		List lines = new LinkedList();
		List positions = new LinkedList();
		List userDocumentations = new LinkedList();

		Set keys = variablesInstansiations.keySet();
		Iterator keysIterator = keys.iterator();

		while (keysIterator.hasNext()) {
			String key = (String) keysIterator.next();
			String[] variableContext = key.split(";");

			String variableName = null;
			String contextClassName = null;
			String contextFunctionName = null;

			// the following code has a bug if it deals with the following code:
			// function f() {
			// $a->b = $c;
			// }
			// but its OK since we dont need to support them here - its being
			// fixed in the codeCompletion
			if (variableContext[0].equals("this") && variableContext.length > 3) {
				//this part solves the case were $this->a = $b;
				int length = variableContext.length;
				contextFunctionName = variableContext[length - 1];
				contextClassName = variableContext[length - 2];
				for (int i = length - 3; i >= 0; i--) {
					if (variableContext[i].equals("null")) {
						continue;
					}
					variableName = variableName == null ? variableContext[i] : variableContext[i] + ";" + variableName;
				}
			} else {
				if (variableContext.length >= 3) {
					contextFunctionName = variableContext[2];
				}
				if (variableContext.length >= 2) {
					contextClassName = variableContext[1];
				}
				if (variableContext.length >= 1) {
					variableName = variableContext[0];
				}
			}

			PHPCodeContext codeContext = ModelSupport.createContext(contextClassName, contextFunctionName);

			// going over all of the (same) object instantiations
			List list = (List) variablesInstansiations.get(key);
			Iterator listIter = list.iterator();
			while (listIter.hasNext()) {
				PHPVariableTypeData variableTypeData = (PHPVariableTypeData) listIter.next();
				String className = variableTypeData.getType();
				int lineNumber = variableTypeData.getLine();
				int position = variableTypeData.getPosition();
				boolean isUserDocumentation = variableTypeData.isUserDocumentation();
				if (className != null && className.startsWith("r_variable")) {
					className = getClassName(className, position, lineNumber, cls, func, projectClasses, projectFunctions);
				}
				if ("self".equalsIgnoreCase(className)) {
					className = codeContext.getContainerClassName();
				}
				variablesNames.add(variableName);
				contextes.add(codeContext);
				classNames.add(className);
				lines.add(new Integer(lineNumber));
				positions.add(new Integer(position));
				userDocumentations.add(Boolean.valueOf(isUserDocumentation));
			}
		}

		// clearing the DB
		variablesInstansiations.clear();

		// coping all the updated data back to the database.
		Iterator contextesIterator = contextes.iterator();
		Iterator variablesNamesIterator = variablesNames.iterator();
		Iterator classNamesIterator = classNames.iterator();
		Iterator linesIterator = lines.iterator();
		Iterator positionsIterator = positions.iterator();
		Iterator userDocumentationsIterator = userDocumentations.iterator();

		while (contextesIterator.hasNext()) {
			final String next = (String) variablesNamesIterator.next();
			variableContextBuilder.addObjectInstantiation((PHPCodeContext) contextesIterator.next(), next, (String) classNamesIterator.next(), ((Boolean) userDocumentationsIterator.next()).booleanValue(), ((Integer) linesIterator.next()).intValue(),
				((Integer) positionsIterator.next()).intValue());
		}
	}

