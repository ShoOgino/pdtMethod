	/**
	 * Getting an instance and finding its type.
	 */
	private static IType[] innerGetClassName(ISourceModule sourceModule, @NonNull TextSequence statementText,
			int propertyEndPosition, boolean isClassTriger, int offset) {

		PHPVersion phpVersion = ProjectOptions.getPHPVersion(sourceModule.getScriptProject().getProject());

		int classNameStart = PHPTextSequenceUtilities.readIdentifierStartIndex(phpVersion, statementText,
				propertyEndPosition, true);
		String className = classNameStart < 0 ? "" //$NON-NLS-1$
				: statementText.subSequence(classNameStart, propertyEndPosition).toString();
		if (isClassTriger && className != null && className.length() != 0) {
			final String comparable = PHPVersion.PHP5_4.isLessThan(phpVersion) ? className.toLowerCase() : className;
			if ("self".equals(comparable) //$NON-NLS-1$
					|| "parent".equals(comparable) //$NON-NLS-1$
					|| (phpVersion.isGreaterThan(PHPVersion.PHP5) && "static" //$NON-NLS-1$
							.equals(comparable))) {
				IType classData = PHPModelUtils.getCurrentType(sourceModule, offset - className.length() - 2); // the
																												// offset
																												// before
				// "self::",
				// "parent::" or
				// "static::"
				if (classData != null) {
					return new IType[] { classData };
				}
			}
			if (className.length() > 0) {
				if (className.startsWith("$") //$NON-NLS-1$
						&& phpVersion.isGreaterThan(PHPVersion.PHP5)) {
					int statementStart = statementText.getOriginalOffset(classNameStart);
					return getVariableType(sourceModule, className, statementStart);
				} else {
					ModuleDeclaration moduleDeclaration = SourceParserUtil.getModuleDeclaration(sourceModule, null);
					FileContext context = new FileContext(sourceModule, moduleDeclaration, offset);
					IEvaluatedType type = PHPClassType.fromTypeName(className, sourceModule, offset);
					IType[] modelElements = PHPTypeInferenceUtils.getModelElements(type, context, offset);
					if (modelElements != null) {
						return modelElements;
					}
					return EMPTY_TYPES;
				}
			}
		}
		if (className != null && className.length() == 0) {
			// this can happen if the first char before the property is ']'
			String testedVar = statementText.subSequence(0, propertyEndPosition).toString().trim();
			if (testedVar != null && testedVar.length() != 0) {
				// check for $GLOBALS['myVar'] scenario
				Matcher m = globalPattern.matcher(testedVar);
				if (m.matches()) {
					// $GLOBALS['myVar'] => 'myVar'
					String quotedVarName = testedVar.substring(testedVar.indexOf('[') + 1, testedVar.indexOf(']'))
							.trim();
					// 'myVar' => $myVar
					className = DOLLAR + quotedVarName.substring(1, quotedVarName.length() - 1);
					// check for $array[0] scenario
				} else if (testedVar.endsWith("}")) { //$NON-NLS-1$
					className = testedVar;
				} else if (testedVar.endsWith("]")) { //$NON-NLS-1$
					if (statementText.toString().lastIndexOf('[') > 0) {
						int end = statementText.toString().lastIndexOf('[');
						int classNameStart1 = PHPTextSequenceUtilities.readIdentifierStartIndex(phpVersion,
								statementText, end, true);
						className = classNameStart1 < 0 ? "" //$NON-NLS-1$
								: statementText.subSequence(classNameStart1, end).toString();
						// if its object call calc the object type.
						if (className.length() > 0 && className.charAt(0) == '$') {
							int statementStart = statementText.getOriginalOffset(classNameStart);
							return getArrayVariableType(sourceModule, className, statementStart);
						}
					}
					className = testedVar;
				}
			}
		}
		// if its object call calc the object type.
		if (className != null && className.length() > 0 && className.charAt(0) == '$') {
			int statementStart = statementText.getOriginalOffset(classNameStart);
			return getVariableType(sourceModule, className, statementStart);
		}
		boolean arrayReference = false;
		if (propertyEndPosition > 0 && statementText.charAt(propertyEndPosition - 1) == ']'
				&& phpVersion.isGreaterThan(PHPVersion.PHP5_3)) {
			int closeBracketIndex = statementText.toString().lastIndexOf(')');
			if (closeBracketIndex >= 0) {
				if (statementText.toString().indexOf('[', closeBracketIndex) > closeBracketIndex) {
					propertyEndPosition = closeBracketIndex + 1;
					arrayReference = true;
				}
			}
		}
		// if its function call calc the return type.
		if (propertyEndPosition > 0 && statementText.charAt(propertyEndPosition - 1) == ')') {
			int functionNameEnd = PHPModelUtils.getFunctionNameEndOffset(statementText, propertyEndPosition - 1);
			int functionNameStart = PHPTextSequenceUtilities.readIdentifierStartIndex(phpVersion, statementText,
					functionNameEnd, false);

			String functionName = functionNameStart < 0 ? "" //$NON-NLS-1$
					: statementText.subSequence(functionNameStart, functionNameEnd).toString().trim();
			if (isKeyword(functionName)) {
				functionName = ""; //$NON-NLS-1$
				functionNameStart = functionNameEnd = PHPTextSequenceUtilities.readForwardSpaces(statementText,
						functionNameEnd);
			}
			// if its a non class function
			Set<IType> returnTypes = new LinkedHashSet<>();
			if (functionNameStart == functionNameEnd && statementText.charAt(functionNameStart) == '('
					&& propertyEndPosition - 1 > functionNameStart + 1 && phpVersion.isGreaterThan(PHPVersion.PHP5_3)) {
				TextSequence newClassStatementText = statementText.subTextSequence(functionNameStart + 1,
						propertyEndPosition - 1);
				if (newClassStatementText.length() < 4
						|| !newClassStatementText.subSequence(0, 3).toString().equals(NEW)) {
					int innerStart = PHPTextSequenceUtilities.readForwardSpaces(newClassStatementText, 0);
					if (newClassStatementText.charAt(innerStart) == '('
							|| phpVersion.isGreaterThan(PHPVersion.PHP5_6)) {
						return getTypesFor(sourceModule, newClassStatementText, newClassStatementText.length(),
								newClassStatementText.length(),
								isClassTriger ? PAAMAYIM_NEKUDOTAIM : OBJECT_FUNCTIONS_TRIGGER);
					}
					return EMPTY_TYPES;

				}
				String newClassName = PHPModelUtils.getClassNameForNewStatement(newClassStatementText, phpVersion);
				try {
					return PHPModelUtils.getTypes(newClassName, sourceModule, offset, null, null);
				} catch (ModelException e) {
					if (DLTKCore.DEBUG) {
						Logger.logException(e);
					}
				}
				// String newClassName = statementText
				// .subSequence(functionNameStart + 1,
				// propertyEndPosition - 1).toString().trim();
				// if (newClassName.startsWith("new")
				// && newClassName.endsWith(")")) {
				// int newClassNameEnd = PHPModelUtils.getFunctionNameEndOffset(
				// newClassStatementText,
				// newClassStatementText.length() - 1);
				// int newClassNameStart = PHPTextSequenceUtilities
				// .readIdentifierStartIndex(phpVersion,
				// newClassStatementText, newClassNameEnd,
				// false);
				// if (newClassNameStart > 3) {// should have blank chars after
				// // 'new'
				// newClassName = newClassStatementText.subSequence(
				// newClassNameStart, newClassNameEnd).toString();
				//
				// }
				// }

			} else {
				String[] argNames = PHPTextSequenceUtilities.getArgNames(phpVersion,
						statementText.subSequence(functionNameEnd, propertyEndPosition - 1));
				if (arrayReference) {

					IType[] types = getFunctionArrayReturnType(null, functionName, USE_PHPDOC, sourceModule, offset,
							argNames);
					if (types != null) {
						returnTypes.addAll(Arrays.asList(types));
					}
				} else {
					IType[] types = getFunctionReturnType(null, functionName, USE_PHPDOC, sourceModule, offset,
							argNames);
					if (ArrayUtils.isNotEmpty(types)) {
						returnTypes.addAll(Arrays.asList(types));
					} else {
						IType namespace = PHPModelUtils.getCurrentNamespace(sourceModule, offset);
						ModuleDeclaration moduleDeclaration = SourceParserUtil.getModuleDeclaration(sourceModule);
						Map<String, UsePart> useParts = PHPModelUtils.getAliasToNSMap(functionName, moduleDeclaration,
								offset, namespace, true);
						if (useParts.containsKey(functionName)) {
							String name = useParts.get(functionName).getNamespace().getFullyQualifiedName();
							name = NamespaceReference.NAMESPACE_SEPARATOR + name;
							types = getFunctionReturnType(null, name, USE_PHPDOC, sourceModule, offset, argNames);
							if (types != null) {
								returnTypes.addAll(Arrays.asList(types));
							}
						}
					}
				}
			}
			return returnTypes.toArray(new IType[returnTypes.size()]);
		}
		return EMPTY_TYPES;
	}

