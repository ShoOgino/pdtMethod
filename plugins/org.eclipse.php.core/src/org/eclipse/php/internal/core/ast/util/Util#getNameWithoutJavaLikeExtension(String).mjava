	/**
	 * Get the jdk level of this root. The value can be:
	 * <ul>
	 * <li>major<<16 + minor : see predefined constants on ClassFileConstants</li>
	 * <li><code>0</null> if the root is a source package fragment root or if a Java
	 * model exception occured</li>
	 * </ul>
	 * Returns the jdk level
	 */
	/*
	 * public static long getJdkLevel(Object targetLibrary) { try { ClassFileReader
	 * reader = null; if (targetLibrary instanceof IFolder) { IFile classFile =
	 * findFirstClassFile((IFolder) targetLibrary); // only internal classfolders
	 * are allowed if (classFile != null) reader =
	 * Util.newClassFileReader(classFile); } else { // root is a jar file or a zip
	 * file ZipFile jar = null; try { IPath path = null; if (targetLibrary
	 * instanceof IResource) { path = ((IResource)targetLibrary).getFullPath(); }
	 * else if (targetLibrary instanceof File){ File f = (File) targetLibrary; if
	 * (!f.isDirectory()) { path = new Path(((File)targetLibrary).getPath()); } } if
	 * (path != null) { jar =
	 * JavaModelManager.getJavaModelManager().getZipFile(path); for (Enumeration e=
	 * jar.entries(); e.hasMoreElements();) { ZipEntry member= (ZipEntry)
	 * e.nextElement(); String entryName= member.getName(); if
	 * (org.eclipse.jdt.internal.compiler.util.Util.isClassFileName(entryName)) {
	 * reader = ClassFileReader.read(jar, entryName); break; } } } } catch
	 * (CoreException e) { // ignore } finally {
	 * JavaModelManager.getJavaModelManager().closeZipFile(jar); } } if (reader !=
	 * null) { return reader.getVersion(); } } catch (CoreException e) { // ignore }
	 * catch(ClassFormatException e) { // ignore } catch(IOException e) { // ignore
	 * } return 0; }
	 */
	/**
	 * Returns the substring of the given file name, ending at the start of a Java
	 * like extension. The entire file name is returned if it doesn't end with a
	 * Java like extension.
	 */
	public static String getNameWithoutJavaLikeExtension(String fileName) {
		int index = indexOfJavaLikeExtension(fileName);
		if (index == -1) {
			return fileName;
		}
		return fileName.substring(0, index);
	}

