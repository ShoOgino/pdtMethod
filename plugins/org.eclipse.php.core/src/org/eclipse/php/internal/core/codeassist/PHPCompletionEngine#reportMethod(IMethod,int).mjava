	private void reportMethod(IMethod method, int relevance) {
		if (relevance < 1) {
			relevance = 1;
		}

		String elementName = method.getElementName();
		char[] name = elementName.toCharArray();

		// accept result
		noProposal = false;
		if (!requestor.isIgnored(CompletionProposal.METHOD_DECLARATION)) {
			CompletionProposal proposal = createProposal(CompletionProposal.METHOD_DECLARATION, actualCompletionPosition);

			String[] params = null;
			try {
				params = method.getParameters();
			} catch (ModelException e) {
				if (DLTKCore.DEBUG_COMPLETION) {
					e.printStackTrace();
				}
			}

			if (params != null && params.length > 0) {
				char[][] args = new char[params.length][];
				for (int i = 0; i < params.length; ++i) {
					args[i] = params[i].toCharArray();
				}
				proposal.setParameterNames(args);
			}

			proposal.setModelElement(method);
			proposal.setName(name);

			if (method instanceof FakeGroupMethod) {
				proposal.setCompletion(elementName.substring(0, elementName.length() - 1).toCharArray());
				relevance = 10000001;
			} else if (hasOpenBraceAtEnd) {
				proposal.setCompletion(elementName.toCharArray());
			} else {
				proposal.setCompletion((elementName + BRACKETS_SUFFIX).toCharArray());
			}
			try {
				proposal.setIsConstructor(elementName.equals(CONSTRUCTOR) || method.isConstructor());
				proposal.setFlags(method.getFlags());
			} catch (ModelException e) {
				if (DEBUG) {
					e.printStackTrace();
				}
			}

			int replaceStart = this.startPosition - this.offset;
			int replaceEnd = this.endPosition - this.offset;
			if (replaceEnd < wordEndOffset) {
				replaceEnd = wordEndOffset;
			}
			proposal.setReplaceRange(replaceStart, replaceEnd);

			proposal.setRelevance(relevance);
			this.requestor.accept(proposal);
			if (DEBUG) {
				this.printDebug(proposal);
			}
		}

	}

