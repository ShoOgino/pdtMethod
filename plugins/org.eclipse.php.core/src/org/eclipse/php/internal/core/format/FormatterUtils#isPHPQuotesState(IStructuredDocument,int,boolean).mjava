	/**
	 * Extended version of the
	 * <code>"FormatterUtils.getPartitionType(document, offset) == PHPPartitionTypes.PHP_QUOTED_STRING"</code>
	 * check, since it also reports that variables (and other PHP code) inside
	 * back-quoted strings, double-quoted strings and heredoc sections are "quoted
	 * PHP code".
	 * 
	 * @param document
	 * @param offset
	 * @param preferNonWhitespacePartitions
	 * @return true if offset is in a quoted-string offsets range, false otherwise
	 * @see IPHPScriptRegion#isPHPQuotesState(int)
	 * @see PHPPartitionTypes#isPHPQuotesState(String)
	 */
	public static boolean isPHPQuotesState(IStructuredDocument document, int offset,
			boolean preferNonWhitespacePartitions) {
		try {
			IStructuredDocumentRegion sdRegion = document.getRegionAtCharacterOffset(offset);
			if (sdRegion == null) {
				return false;
			}

			ITextRegion tRegion = sdRegion.getRegionAtCharacterOffset(offset);
			if (tRegion == null && offset == document.getLength()) {
				offset -= 1;
				tRegion = sdRegion.getRegionAtCharacterOffset(offset);
			}
			// in case the cursor on the beginning of '?>' tag
			// we decrease the offset to get the PhpScriptRegion
			if (tRegion != null && tRegion.getType().equals(PHPRegionContext.PHP_CLOSE)) {
				tRegion = sdRegion.getRegionAtCharacterOffset(offset - 1);
			}
			if (tRegion != null) {
				int regionStart = sdRegion.getStartOffset(tRegion);

				// in case of container we have to extract the PhpScriptRegion
				if (tRegion instanceof ITextRegionContainer) {
					ITextRegionContainer container = (ITextRegionContainer) tRegion;
					tRegion = container.getRegionAtCharacterOffset(offset);
					regionStart += tRegion.getStart();
				}

				if (tRegion instanceof IPHPScriptRegion) {
					IPHPScriptRegion scriptRegion = (IPHPScriptRegion) tRegion;
					int regionOffset = offset - regionStart;
					if (preferNonWhitespacePartitions
							&& scriptRegion.getPHPToken(regionOffset).getTextEnd() <= regionOffset) {
						return scriptRegion.isPHPQuotesState(scriptRegion.getPHPToken(regionOffset).getEnd());
					}
					return scriptRegion.isPHPQuotesState(regionOffset);
				}
			}
		} catch (final BadLocationException e) {
		}

		return false;
	}

