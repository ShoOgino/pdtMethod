	protected void getRegularCompletion(String prefix, int offset, boolean showKeywords) {

		this.setSourceRange(offset - prefix.length(), offset);

		boolean inClass = false;
		try {
			IModelElement enclosingElement = sourceModule.getElementAt(offset);
			while (enclosingElement instanceof IField) {
				enclosingElement = enclosingElement.getParent();
			}
			if (enclosingElement instanceof IType) {
				inClass = true;
			}
		} catch (ModelException e) {
			if (DLTKCore.DEBUG_COMPLETION) {
				e.printStackTrace();
			}
		}

		int relevanceKeyword = RELEVANCE_KEYWORD;
		int relevanceVar = RELEVANCE_VAR;
		int relevanceConst = RELEVANCE_CONST;
		int relevanceClass = RELEVANCE_CLASS;
		int relevanceMethod = RELEVANCE_METHOD;

		if (showKeywords) {
			Collection<KeywordData> keywordsList = PHPKeywords.findByPrefix(sourceModule.getScriptProject().getProject(), prefix);
			for (KeywordData k : keywordsList) {
				if (!inClass || (inClass && k.isClassKeyword)) {
					reportKeyword(k.name, k.suffix, relevanceKeyword--);
				}
			}
		}
		
		boolean currentFileOnly = (!explicit && prefix.length() == 0);

		if (!currentFileOnly && internalPHPRegion != null) {
			final String type = internalPHPRegion.getType();

			if (prefix.startsWith(DOLLAR) && !inClass) { //$NON-NLS-1$
				if (PHPPartitionTypes.isPHPQuotesState(type)) {
					final IStructuredDocument doc = document;
					try {
						final char charBefore = doc.get(offset - 2, 1).charAt(0);
						if (charBefore == '\\')
							return;
					} catch (final BadLocationException e) {
						if (DLTKCore.DEBUG_COMPLETION) {
							e.printStackTrace();
						}
					}
				}

				Set<IModelElement> variables = new TreeSet<IModelElement>(new CodeAssistUtils.AlphabeticComparator());
				// Complete local scope variables:
				try {
					IModelElement enclosingElement = sourceModule.getElementAt(offset);
					while (enclosingElement instanceof IField) {
						enclosingElement = enclosingElement.getParent();
					}
					if (enclosingElement instanceof IMethod) {
						IMethod method = (IMethod) enclosingElement;
						int mask = 0;
						if (requestor.isContextInformationMode()) {
							mask |= CodeAssistUtils.EXACT_NAME;
						}
						variables.addAll(Arrays.asList(CodeAssistUtils.getMethodFields(method, prefix, mask)));
					}
				} catch (ModelException e) {
					if (DLTKCore.DEBUG_COMPLETION) {
						e.printStackTrace();
					}
				}

				// Complete global scope variables:
				int mask = 0;
				if (requestor.isContextInformationMode()) {
					mask |= CodeAssistUtils.EXACT_NAME;
				}
				if (!showVarsFromOtherFiles()) {
					mask |= CodeAssistUtils.ONLY_CURRENT_FILE;
				}
				variables.addAll(Arrays.asList(CodeAssistUtils.getGlobalFields(sourceModule, prefix, mask)));
				
				for (IModelElement var : variables) {
					IField field = (IField) var;
					try {
						if ((field.getFlags() & Modifiers.AccConstant) != 0) {
							reportField(field, relevanceConst--, false);
						} else {
							reportField(field, relevanceVar--, false);
						}
					} catch (ModelException e) {
						if (DLTKCore.DEBUG_COMPLETION) {
							e.printStackTrace();
						}
					}
				}
				
				IMethod containerMethodData = CodeAssistUtils.getContainerMethodData(sourceModule, offset);
				if (containerMethodData != null && containerMethodData.getDeclaringType() != null) {
					reportVariables(classVariables, prefix, relevanceVar--, false);
					relevanceVar -= classVariables.length;
				}

				reportVariables(phpVariables, prefix, relevanceVar--, false);
				return;
			}

			if (PHPPartitionTypes.isPHPQuotesState(type) || type.equals(PHPRegionTypes.PHP_HEREDOC_TAG) && regionContainer.getStartOffset(phpScriptRegion) + phpScriptRegion.getLength() <= offset) {
				return;
			}
		}

		if (!inClass) {
			int mask = 0;
			if (requestor.isContextInformationMode()) {
				mask |= CodeAssistUtils.EXACT_NAME;
			}
			if (currentFileOnly) {
				mask |= CodeAssistUtils.ONLY_CURRENT_FILE;
			}
			
			IModelElement[] functions = CodeAssistUtils.getGlobalMethods(sourceModule, prefix, mask);
			for (IModelElement function : functions) {
				try {
					if ((((IMethod) function).getFlags() & IPHPModifiers.Internal) == 0) {
						reportMethod((IMethod) function, relevanceMethod--);
					}
				} catch (ModelException e) {
					if (DLTKCore.DEBUG_COMPLETION) {
						e.printStackTrace();
					}
				}
			}

			if (showConstantAssist()) {
				mask = 0;
				if (requestor.isContextInformationMode()) {
					mask |= CodeAssistUtils.EXACT_NAME;
				}
				if (currentFileOnly && !showVarsFromOtherFiles()) {
					mask |= CodeAssistUtils.ONLY_CURRENT_FILE;
				}
				if (constantsCaseSensitive()) {
					mask |= CodeAssistUtils.CASE_SENSITIVE;
				}
				IModelElement[] constants = CodeAssistUtils.getGlobalFields(sourceModule, prefix, mask);
				for (IModelElement constant : constants) {
					try {
						if ((((IField) constant).getFlags() & Modifiers.AccConstant) != 0) {
							reportField((IField) constant, relevanceConst--, false);
						}
					} catch (ModelException e) {
						if (DLTKCore.DEBUG_COMPLETION) {
							e.printStackTrace();
						}
					}
				}
			}
		}

		if (!inClass) {
			if (showClassNamesInGlobalCompletion()) {
				int mask = 0;
				if (requestor.isContextInformationMode()) {
					mask |= CodeAssistUtils.EXACT_NAME;
				}
				if (currentFileOnly) {
					mask |= CodeAssistUtils.ONLY_CURRENT_FILE;
				}
				IType[] classes = CodeAssistUtils.getGlobalTypes(sourceModule, prefix, mask);
				for (IType type : classes) {
					try {
						if ((type.getFlags() & IPHPModifiers.Internal) == 0) {
							reportType(type, relevanceClass--, PAAMAYIM_NEKUDOTAIM);
						}
					} catch (ModelException e) {
						if (DLTKCore.DEBUG_COMPLETION) {
							e.printStackTrace();
						}
					}
				}
			}
		}
		return;
	}

