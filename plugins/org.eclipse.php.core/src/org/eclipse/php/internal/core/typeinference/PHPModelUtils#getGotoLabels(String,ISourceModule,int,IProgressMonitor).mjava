	/**
	 * This method returns goto labels (as fake fields) corresponding to its name.
	 * 
	 * @param gotoName
	 *            The goto name
	 * @param sourceModule
	 *            The file where the element is referenced
	 * @param offset
	 *            The offset where the element is referenced
	 * @param monitor
	 *            Progress monitor
	 * @return a list of relevant IModelElement elements
	 */
	public static IModelElement[] getGotoLabels(final String gotoName, final ISourceModule sourceModule,
			final int offset, final IProgressMonitor monitor) {

		final List<IField> elements = new LinkedList<>();

		try {
			ModuleDeclaration moduleDeclaration = SourceParserUtil.getModuleDeclaration(sourceModule, null);
			IContext context = ASTUtils.findContext(sourceModule, moduleDeclaration, offset);
			if (moduleDeclaration != null && context != null) {
				final ASTNode rootNode;
				if (context instanceof MethodContext || context instanceof TypeContext) {
					rootNode = ((MethodContext) context).getMethodNode();
				} else {
					rootNode = moduleDeclaration;
				}
				rootNode.traverse(new ASTVisitor() {
					@Override
					public boolean visitGeneral(ASTNode node) throws Exception {
						if (node instanceof Declaration && node != rootNode) {
							return false;
						}
						return super.visitGeneral(node);
					}

					@Override
					public boolean visit(Statement s) throws Exception {
						if (s instanceof GotoLabel) {
							GotoLabel gotoLabel = (GotoLabel) s;
							if (gotoLabel.getLabel().equals(gotoName)) {
								elements.add(new FakeField((ModelElement) sourceModule, gotoName,
										gotoLabel.sourceStart(), gotoLabel.sourceEnd() - gotoLabel.sourceStart()));
							}
						}
						return super.visit(s);
					}
				});
			}
		} catch (Exception e) {
			PHPCorePlugin.log(e);
		}

		return elements.toArray(new IModelElement[elements.size()]);
	}

