	private IModelElement[] lookForMatchingElements(PHPDocTag[] tags, ISourceModule sourceModule,
			ModuleDeclaration parsedUnit, int offset, int end, IModelAccessCache cache) throws ModelException {
		if (tags == null) {
			return null;
		}
		for (PHPDocTag phpDocTag : tags) {
			if (phpDocTag.sourceStart() <= offset && phpDocTag.sourceEnd() >= end) {
				if (phpDocTag.getTagKind() == TagKind.INHERITDOC) {
					Declaration declaration = ASTUtils.findDeclarationAfterPHPdoc(parsedUnit, offset);
					if (declaration != null) {
						IModelElement element = sourceModule.getElementAt(declaration.sourceStart());
						if (element != null) {
							try {
								if (element.getElementType() == IModelElement.METHOD) {
									IType type = (IType) element.getParent();
									return PHPModelUtils.getSuperTypeHierarchyMethod(type, null,
											element.getElementName(), true, null);
								} else if (element.getElementType() == IModelElement.FIELD) {
									IType type = (IType) element.getParent();
									return PHPModelUtils.getSuperTypeHierarchyField(type, null,
											element.getElementName(), true, null);
								} else if (element.getElementType() == IModelElement.TYPE) {
									return PHPModelUtils.getSuperClasses((IType) element, null);
								}
							} catch (CoreException e) {
								Logger.logException(e);
							}
						}
					}
				} else {
					for (TypeReference typeReference : phpDocTag.getTypeReferences()) {
						if (typeReference.sourceStart() <= offset && typeReference.sourceEnd() >= end) {
							String name = typeReference.getName();

							// remove additional end elements like '[]'
							if (typeReference.sourceEnd() > end) {
								int startShift = offset - typeReference.sourceStart();
								name = typeReference.getName().substring(startShift, (end - offset) + startShift);
							}
							return filterNS(PHPModelUtils.getTypes(name, sourceModule, offset, cache, null));
						}
					}
				}
			}
		}
		return null;
	}

