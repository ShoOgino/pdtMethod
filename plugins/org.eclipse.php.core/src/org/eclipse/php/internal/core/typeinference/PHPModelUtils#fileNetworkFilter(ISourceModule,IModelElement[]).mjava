	/**
	 * Filters model elements using file network.
	 * @param sourceModule
	 * @param elements
	 * @return
	 */
	private static IModelElement[] fileNetworkFilter(ISourceModule sourceModule, IModelElement[] elements) {
		
		if (elements != null && elements.length > 0) {
			List<IModelElement> filteredElements = new LinkedList<IModelElement>();
			
			// If some of elements belong to current file return just it:
			for (IModelElement element : elements) {
				if (sourceModule.equals(element.getOpenable())) {
					filteredElements.add(element);
				}
			}
			if (filteredElements.size() == 0) {
				// Filter by includes network
				ReferenceTree referenceTree = FileNetworkUtility.buildReferencedFilesTree(sourceModule, null);
				for (IModelElement element : elements) {
					if (LanguageModelInitializer.isLanguageModelElement(element) || referenceTree.find(((ModelElement)element).getSourceModule())) {
						filteredElements.add(element);
					}
				}
			}
			if (filteredElements.size() > 0) {
				elements = filteredElements.toArray(new IModelElement[filteredElements.size()]);
			}
		}
		return elements;
	}

