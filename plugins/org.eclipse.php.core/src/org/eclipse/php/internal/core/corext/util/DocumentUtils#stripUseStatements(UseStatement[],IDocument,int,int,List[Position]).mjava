	/**
	 * Remove all the given use statements from a document. Be warned that the
	 * "excludePositions" list will be updated to match the content of the
	 * returned string. It is important that this list is sorted by increasing
	 * position, or this method won't work correctly.
	 */
	public static String stripUseStatements(UseStatement[] statements, IDocument old_doc, int start, int end,
			List<Position> excludePositions) {
		int offset = 0;
		int lowestStatementStart = Integer.MAX_VALUE;
		IDocument doc = new Document(old_doc.get());

		for (UseStatement statement : statements) {
			if (statement.sourceStart() < start || statement.sourceEnd() > end) {
				continue;
			}
			int length = statement.sourceEnd() - statement.sourceStart();
			lowestStatementStart = Math.min(lowestStatementStart, statement.sourceStart());

			try {
				doc.replace(statement.sourceStart() - offset, length, "");
			} catch (BadLocationException e) {
			}

			offset += length;
		}

		if (offset > 0) {
			for (int i = excludePositions.size() - 1; i >= 0; i--) {
				Position position = excludePositions.get(i);
				if (position.getOffset() >= lowestStatementStart) {
					position.setOffset(position.getOffset() - offset);
				} else {
					break;
				}
			}
		}

		try {
			return doc.get(start, end - offset - start);
		} catch (BadLocationException e) {
			return doc.get();
		}
	}

