	/**
	 * Remove all the given use statements from a document. Be warned that the
	 * "excludePositions" list will be updated to match the content of the returned
	 * string. It is important that this list is sorted by increasing position and
	 * that the statement positions don't intersect with any of the exclude
	 * positions, or this method won't work correctly.
	 */
	public static String stripUseStatements(UseStatement[] statements, IDocument old_doc, int start, int end,
			List<Position> excludePositions) {
		int removedLength = 0;
		IDocument doc = new Document(old_doc.get());

		for (UseStatement statement : statements) {
			if (statement.sourceStart() < start || statement.sourceEnd() > end) {
				continue;
			}
			int length = statement.sourceEnd() - statement.sourceStart();

			try {
				doc.replace(statement.sourceStart() - removedLength, length, ""); //$NON-NLS-1$
			} catch (BadLocationException e) {
			}

			for (int i = excludePositions.size() - 1; i >= 0; i--) {
				Position position = excludePositions.get(i);
				int offset = position.getOffset() + removedLength;
				if (offset >= statement.sourceEnd()) {
					position.setOffset(position.getOffset() - length);
				} else if (offset + position.getLength() > statement.sourceStart()) {
					// statement positions should never intersect with exclude
					// positions, so (for safety) remove them from the exclusion
					// list
					excludePositions.remove(i);
				} else {
					break;
				}
			}

			removedLength += length;
		}

		try {
			return doc.get(start, end - start - removedLength);
		} catch (BadLocationException e) {
			return doc.get();
		}
	}

