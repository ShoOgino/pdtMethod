	final void doTextInsert(int insertOffset, ASTNode node,
			int initialIndentLevel, boolean removeLeadingIndent,
			TextEditGroup editGroup) {
		ArrayList markers = new ArrayList();
		String formatted = this.formatter.getFormattedResult(node,
				initialIndentLevel, markers);

		int currPos = 0;
		if (removeLeadingIndent) {
			while (currPos < formatted.length()
					&& ScannerHelper.isWhitespace(formatted.charAt(currPos))) {
				currPos++;
			}
		}
		for (int i = 0; i < markers.size(); i++) { // markers.size can change!
			NodeMarker curr = (NodeMarker) markers.get(i);

			int offset = curr.offset;
			if (offset != currPos) {
				String insertStr = formatted.substring(currPos, offset);
				doTextInsert(insertOffset, insertStr, editGroup); // insert
				// until the
				// marker's
				// begin
			}

			Object data = curr.data;
			if (data instanceof TextEditGroup) { // tracking a node
				// need to split and create 2 edits as tracking node can
				// surround replaced node.
				TextEdit edit = new RangeMarker(insertOffset, 0);
				addEditGroup((TextEditGroup) data, edit);
				addEdit(edit);
				if (curr.length != 0) {
					int end = offset + curr.length;
					int k = i + 1;
					while (k < markers.size()
							&& ((NodeMarker) markers.get(k)).offset < end) {
						k++;
					}
					curr.offset = end;
					curr.length = 0;
					markers.add(k, curr); // add again for end position
				}
				currPos = offset;
			} else {
				int lineOffset = getCurrentLineStart(formatted, offset);
				String destIndentString = (lineOffset == 0) ? this.formatter
						.createIndentString(initialIndentLevel)
						: this.formatter.getIndentString(getCurrentLine(
								formatted, offset));
				/*
				 * String destIndentString = this.formatter
				 * .getIndentString(getCurrentLine(formatted, offset));
				 */
				if (data instanceof CopyPlaceholderData) { // replace with a
					// copy/move target
					CopySourceInfo copySource = ((CopyPlaceholderData) data).copySource;
					int srcIndentLevel = getIndent(copySource.getNode()
							.getStart());
					TextEdit sourceEdit = getCopySourceEdit(copySource);
					doTextCopy(sourceEdit, insertOffset, srcIndentLevel,
							destIndentString, editGroup);
					currPos = offset + curr.length; // continue to insert after
					// the replaced string
					if (needsNewLineForLineComment(copySource.getNode(),
							formatted, currPos)) {
						doTextInsert(insertOffset, getLineDelimiter(),
								editGroup);
					}
				} else if (data instanceof StringPlaceholderData) { // replace
					// with a
					// placeholder
					String code = ((StringPlaceholderData) data).code;
					String str = this.formatter.changeIndent(code, 0,
							destIndentString);
					doTextInsert(insertOffset, str, editGroup);
					currPos = offset + curr.length; // continue to insert after
					// the replaced string
				}
			}

		}
		if (currPos < formatted.length()) {
			String insertStr = formatted.substring(currPos);
			if (node instanceof MethodStub && insertStr.startsWith(CURLY_CLOSE)) {
				doTextInsert(insertOffset, getLineDelimiter(), editGroup);
				String destIndentString = this.formatter
						.getIndentString(getCurrentLine(formatted, currPos));
				doTextInsert(insertOffset, destIndentString, editGroup);
			}
			doTextInsert(insertOffset, insertStr, editGroup);
		}
	}

