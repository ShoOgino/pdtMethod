	/**
	 * @param locateNode
	 * @return true if the given path indicates a global variable
	 */
	private static boolean isGlobalVariable(ASTNode locateNode) {
		assert locateNode != null;

		// check if it is a GLOBALS['a'] direction
		if (locateNode.getType() == ASTNode.SCALAR) {
			Scalar scalar = (Scalar) locateNode;
			final String stringValue = scalar.getStringValue();
			if (scalar.getScalarType() == Scalar.TYPE_STRING && stringValue.length() > 2) {
				final char charAtZero = stringValue.charAt(0);
				final char charAtEnd = stringValue.charAt(stringValue.length() - 1);
				if (!detectString(charAtZero) || !detectString(charAtEnd)) {
					return false;
				}
				if (scalar.getParent().getType() == ASTNode.ARRAY_ACCESS) {
					ArrayAccess arrayAccess = (ArrayAccess) scalar.getParent();
					final Expression variableName = arrayAccess.getVariableName();
					if (variableName.getType() == ASTNode.VARIABLE) {
						Variable var = (Variable) variableName;
						if (var.isDollared() &&  var.getVariableName().getType() == ASTNode.IDENTIFIER) {
							final Identifier id = (Identifier) var.getVariableName();
							if (id.getName().equals("GLOBALS")) {
								return true;
							}
						}
					}
				}
			}
		}

		// check if it is an identifier
		if (locateNode.getType() != ASTNode.IDENTIFIER) {
			return false;
		}
		Identifier targetIdentifier = (Identifier) locateNode;

		ASTNode parent = locateNode.getParent();
		if (parent.getType() != ASTNode.VARIABLE) {
			return false;
		}

		Variable variable = (Variable) parent;
		// if it is not a dollared variable - it is not a global one
		if (!variable.isDollared() || variable.getParent().getType() == ASTNode.FIELD_DECLARATION) {
			return false;
		}

		// ignore static memeber call
		if (parent.getParent().getType() == ASTNode.STATIC_FIELD_ACCESS) {
			final StaticFieldAccess staticFieldAccess = (StaticFieldAccess) parent.getParent();
			if (staticFieldAccess.getProperty() == variable) {
				return false;
			}
		}

		// check if declared global in function
		while (parent != null) {

			// if the variable was used inside a function
			if (parent.getType() == ASTNode.FUNCTION_DECLARATION) {
				boolean isGlobal = false;

				final FunctionDeclaration functionDeclaration = (FunctionDeclaration) parent;
				final Block body = functionDeclaration.getBody();
				int i = 0;

				final Statement[] statements = body.getStatements();
				while (i < statements.length && statements[i].getStart() < targetIdentifier.getStart()) {
					if (statements[i].getType() == ASTNode.GLOBAL_STATEMENT) {
						final GlobalStatement globalStatement = (GlobalStatement) statements[i];
						isGlobal = checkGlobal(targetIdentifier, variable, isGlobal, globalStatement);
					}
					i++;
				}
				return isGlobal;
			}
			parent = parent.getParent();
		}
		return true;
	}

