	private void initializeListener(final IPath containerPath, final IScriptProject project) {
		
		if (phpVersionListener != null) {
			return;
		}

		phpVersionListener = new IPreferencesPropagatorListener() {
			public void preferencesEventOccured(PreferencesPropagatorEvent event) {
				phpVersion = (String) event.getNewValue();
				buildPathEntries = null;
				try {
					initialize(containerPath, project);
				} catch (CoreException e) {
					Logger.logException(e);
				}
			}

			public IProject getProject() {
				return project.getProject();
			}
		};
		PhpVersionChangedHandler.getInstance().addPhpVersionChangedListener(phpVersionListener);

		ProjectRemovedObserversAttacher.getInstance().addProjectClosedObserver(project.getProject(), new IProjectClosedObserver() {
			public void closed() {
				PhpVersionChangedHandler.getInstance().removePhpVersionChangedListener(phpVersionListener);
				phpVersionListener = null;
			}
		});
	}

