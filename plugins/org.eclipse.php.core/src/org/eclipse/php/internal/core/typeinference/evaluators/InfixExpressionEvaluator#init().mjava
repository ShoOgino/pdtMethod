	@Override
	public IGoal[] init() {
		ExpressionTypeGoal typedGoal = (ExpressionTypeGoal) goal;
		InfixExpression infixExpression = (InfixExpression) typedGoal.getExpression();
		int operator = infixExpression.getOperatorType();
		switch (operator) {
		case InfixExpression.OP_IS_IDENTICAL:
		case InfixExpression.OP_IS_NOT_IDENTICAL:
		case InfixExpression.OP_IS_EQUAL:
		case InfixExpression.OP_IS_NOT_EQUAL:
		case InfixExpression.OP_RGREATER:
		case InfixExpression.OP_IS_SMALLER_OR_EQUAL:
		case InfixExpression.OP_LGREATER:
		case InfixExpression.OP_IS_GREATER_OR_EQUAL:
		case InfixExpression.OP_BOOL_OR:
		case InfixExpression.OP_BOOL_AND:
		case InfixExpression.OP_STRING_OR:
		case InfixExpression.OP_STRING_AND:
		case InfixExpression.OP_STRING_XOR:
		case InfixExpression.OP_OR:
		case InfixExpression.OP_AND:
		case InfixExpression.OP_XOR:
			result = PHPSimpleTypes.BOOLEAN;
			break;
		case InfixExpression.OP_CONCAT:
			result = PHPSimpleTypes.STRING;
			break;
		case InfixExpression.OP_PLUS:
		case InfixExpression.OP_MINUS:
		case InfixExpression.OP_MUL:
		case InfixExpression.OP_DIV:
		case InfixExpression.OP_MOD:
		case InfixExpression.OP_SL:
		case InfixExpression.OP_SR:
			result = PHPSimpleTypes.NUMBER;
			break;
		default:
			throw new IllegalArgumentException();
		}
		return IGoal.NO_GOALS;
	}

