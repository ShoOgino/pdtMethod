	/**
	 * This method get enclosing type element. It completely ignore statements
	 * without {
	 */
	protected IModelElement getEnclosingElement() {
		try {
			int offset = this.offset;
			PHPHeuristicScanner heuristicScanner = PHPHeuristicScanner.createHeuristicScanner(document, offset, true);
			if (offset >= document.getLength()) {
				offset = document.getLength() - 1;
			}
			int open = heuristicScanner.findOpeningPeer(offset, PHPHeuristicScanner.UNBOUND, PHPHeuristicScanner.LBRACE,
					PHPHeuristicScanner.RBRACE);
			if (open > -1) {
				int close = heuristicScanner.findOpeningPeer(offset, PHPHeuristicScanner.UNBOUND,
						PHPHeuristicScanner.RBRACE, PHPHeuristicScanner.LBRACE);
				if (close > open && open == heuristicScanner.findOpeningPeer(close - 1, PHPHeuristicScanner.UNBOUND,
						PHPHeuristicScanner.LBRACE, PHPHeuristicScanner.RBRACE)) {
					open = heuristicScanner.findOpeningPeer(open - 1, PHPHeuristicScanner.UNBOUND,
							PHPHeuristicScanner.LBRACE, PHPHeuristicScanner.RBRACE);
				}
			}
			TextSequence statementText = getStatementText();
			int statementStart = statementText.length() > 0 ? statementText.getOriginalOffset(0) + 1 : -1;
			if (open < 0 && statementStart < 0) {
				return sourceModule.getElementAt(offset);
			}
			IModelElement elementAt = sourceModule.getElementAt(open);
			IModelElement elementAt2 = sourceModule.getElementAt(statementStart);
			if (elementAt == null && elementAt2 == null) {
				return sourceModule.getElementAt(offset);
			}

			if (elementAt instanceof ISourceReference && elementAt2 instanceof ISourceReference) {
				if (((ISourceReference) elementAt).getSourceRange().getOffset() > ((ISourceReference) elementAt2)
						.getSourceRange().getOffset()) {
					return elementAt;
				} else {
					return elementAt2;
				}
			} else if (elementAt != null) {
				return elementAt;
			}

			return elementAt2;
		} catch (BadLocationException e) {
			Logger.logException(e);
		} catch (ModelException e) {
			Logger.logException(e);
		}

		return null;
	}

