	private void evaluateReturnType(List<String> returnTypeList,
			PHPDocBlock docBlock, IMethod method) {
		PHPDocTag[] tags = docBlock.getTags(PHPDocTagKinds.RETURN);
		PHPDocTag[] inherit = docBlock.getTags(PHPDocTagKinds.INHERITDOC);

		if (inherit.length == 1) {
			IType type = method.getDeclaringType();

			if (type != null) {
				try {
					IContext context = goal.getContext();
					IModelAccessCache cache = null;
					if (context instanceof IModelCacheContext) {
						cache = ((IModelCacheContext) context).getCache();
					}
					IType[] superClasses = PHPModelUtils.getSuperClasses(
							type,
							cache == null ? null : cache.getSuperTypeHierarchy(
									type, null));

					for (IType superClass : superClasses) {
						IMethod superClassMethod = superClass.getMethod(method
								.getElementName());

						if (superClassMethod != null) {
							PHPDocBlock superDocBlock = PHPModelUtils
									.getDocBlock(superClassMethod);
							if (superDocBlock == null) {
								continue;
							}
							evaluateReturnType(returnTypeList, superDocBlock,
									superClassMethod);
						}
					}
				} catch (ModelException e) {
					Logger.logException(e);
				}
			}
		}

		for (PHPDocTag phpDocTag : tags) {
			for (TypeReference ref : phpDocTag.getTypeReferences()) {
				returnTypeList.add(ref.getName());
			}
		}
	}

