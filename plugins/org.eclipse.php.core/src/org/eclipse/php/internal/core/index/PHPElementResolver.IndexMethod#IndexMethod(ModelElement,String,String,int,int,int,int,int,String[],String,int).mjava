		public IndexMethod(ModelElement parent, String name, String returnType, int flags, int offset, int length,
				int nameOffset, int nameLength, String[] parameterNames, String doc, int occurrenceCount) {

			super(parent, name);
			this.returnType = returnType;
			this.flags = flags;
			this.sourceRange = new SourceRange(offset, length);
			this.nameRange = new SourceRange(nameOffset, nameLength);
			// MethodParameterInfo
			this.parameters = new IParameter[0];
			if (parameterNames != null) {
				this.parameters = new IParameter[parameterNames.length];
				for (int i = 0; i < parameterNames.length; i++) {
					String[] values = parameterNames[i].split("\\" //$NON-NLS-1$
							+ PHPIndexingVisitor.PARAMETER_SEPERATOR);
					if (values.length == 1) {
						this.parameters[i] = new MethodParameterInfo(values[0]);
					} else {
						String type = values[0];
						if (PHPIndexingVisitor.NULL_VALUE.equals(type)) {
							type = null;
						}
						if (type != null) {
							type = type.replace(Constants.DOT, Constants.TYPE_SEPERATOR_CHAR);
						}
						String param = values[1];

						String defaultValue = values[2];
						if (PHPIndexingVisitor.NULL_VALUE.equals(defaultValue)) {
							defaultValue = null;
						}
						if (defaultValue != null) {
							defaultValue = defaultValue.replace("&p", PHPIndexingVisitor.PARAMETER_SEPERATOR) //$NON-NLS-1$
									.replace("&a", "&"); //$NON-NLS-1$ //$NON-NLS-2$
						}
						int modifiers = 0;
						if (values.length == 4) {
							try {
								modifiers = Integer.parseInt(values[3]);
							} catch (NumberFormatException e) {
								// should never happen
								Logger.logException(e);
							}
						}
						this.parameters[i] = new MethodParameterInfo(param, type, defaultValue, modifiers);
					}
				}
			}
			this.doc = doc;
			this.occurrenceCount = occurrenceCount;
		}

