	private void attachProjectOpenObserver() {
		ResourcesPlugin.getWorkspace().addResourceChangeListener(new IResourceChangeListener() {
			public void resourceChanged(IResourceChangeEvent event) {
				IResourceDelta resourceDelta = event.getDelta();
				if (resourceDelta == null) {
					return;
				}
				IResourceDelta[] affectedChildren = resourceDelta.getAffectedChildren(IResourceDelta.CHANGED);
				for (int i = 0; i < affectedChildren.length; i++) {
					resourceDelta = affectedChildren[i];
					IResource resource = resourceDelta.getResource();
					IProject project = (IProject) resource;
					int eventFlags = resourceDelta.getFlags();
					if ((eventFlags & IResourceDelta.OPEN) != 0) {
						// could be an OPEN or CLOSE
						if (project.isOpen()) {
							runBuild(project);
						}
					} else {
						// parse file which are not opened for editing but were changed
						IResourceDelta[] childrenDelta = resourceDelta.getAffectedChildren();
						for (int j = 0; j < childrenDelta.length; j++) {
							IResourceDelta delta = childrenDelta[j];
							parseModifiedClosedFiles(delta);
						}
					}
				}
			}

			/**
			 * This function iterates over changed resources recursivlly and request parsing only for those which are
			 * not currently opened for editing.
			 * 
			 * @param delta
			 */
			private void parseModifiedClosedFiles(IResourceDelta delta) {
				IResource resouce = delta.getResource();
				if (resouce.getType() == IResource.FILE  && delta.getKind() == IResourceDelta.CHANGED) {
					IFile file = (IFile) resouce;
					IStructuredModel existingModelForRead = null;
					try {
						existingModelForRead = StructuredModelManager.getModelManager().getModelForRead(file);
					} catch (IOException e) {
					} catch (CoreException e) {
					} finally {
						if (existingModelForRead != null) {
							existingModelForRead.releaseFromRead();
						} else if(file.isAccessible()) {
							addFileToModel(file);
						}
					}
				} else if (resouce.getType() == IResource.FOLDER) {
					IResourceDelta[] childrenDelta = delta.getAffectedChildren();
					for (int j = 0; j < childrenDelta.length; j++) {
						IResourceDelta folderDelta = childrenDelta[j];
						parseModifiedClosedFiles(folderDelta);
					}
				}
			}
		});
	}

