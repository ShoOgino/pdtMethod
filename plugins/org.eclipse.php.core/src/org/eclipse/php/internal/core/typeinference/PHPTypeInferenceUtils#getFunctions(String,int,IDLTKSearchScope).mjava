	/**
	 * This method returns method elements (IMethod).
	 * 
	 * @param prefix Method prefix
	 * @param matchRule Search match rule
	 * @param scope Search scope
	 * @return method element array
	 */
	public static IMethod[] getFunctions(String prefix, int matchRule, final IDLTKSearchScope scope) {

		final List<IMethod> methods = new LinkedList<IMethod>();
		SearchEngine searchEngine = new SearchEngine();

		if ((matchRule & SearchPattern.R_EXACT_MATCH) != 0) {
			try {
				SearchPattern pattern = SearchPattern.createPattern(prefix, IDLTKSearchConstants.METHOD, IDLTKSearchConstants.DECLARATIONS, matchRule, PHPLanguageToolkit.getDefault());
				searchEngine.search(pattern, new SearchParticipant[] { SearchEngine.getDefaultSearchParticipant() }, scope, new SearchRequestor() {
					public void acceptSearchMatch(SearchMatch match) throws CoreException {
						IMethod element = (IMethod) match.getElement();
						IModelElement parent = element.getParent();
						if (parent instanceof ISourceModule || parent instanceof IMethod || parent instanceof IType && PHPFlags.isNamespace(((IType) parent).getFlags())) {
							methods.add(element);
						}
					}
				}, new NullProgressMonitor());
			} catch (CoreException e) {
				Logger.logException(e);
				return null;
			}
		} else {
			final HandleFactory handleFactory = new HandleFactory();
			try {
				searchEngine.searchAllMethodNames(prefix.toCharArray(), matchRule, IDLTKSearchConstants.DECLARATIONS, scope, new MethodNameRequestor() {
					public void acceptMethod(int modifiers, char[] packageName, char[] simpleMethodName, char[][] enclosingTypeNames, char[][] parameterNames, String path) {
						if ((modifiers & Modifiers.AccGlobal) == 0) {
							return;
						}

						Openable openable = handleFactory.createOpenable(path, scope);
						ModelElement parent = openable;
						if (enclosingTypeNames.length > 0) {
							parent = new FakeType(openable, new String(enclosingTypeNames[0]), Modifiers.AccNameSpace);
						}
						FakeMethod method = new FakeMethod(parent, new String(simpleMethodName), modifiers);
						if (parameterNames != null) {
							method.setParameters(CharOperation.charArrayToStringArray(parameterNames));
						}
						methods.add(method);
					}
				}, IDLTKSearchConstants.WAIT_UNTIL_READY_TO_SEARCH, new NullProgressMonitor());
			} catch (ModelException e) {
				Logger.logException(e);
			}
		}

		return (IMethod[]) methods.toArray(new IMethod[methods.size()]);
	}

