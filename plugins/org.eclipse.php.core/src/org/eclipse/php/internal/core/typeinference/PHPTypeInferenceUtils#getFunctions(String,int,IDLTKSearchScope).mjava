	/**
	 * This method returns method elements (IMethod).
	 * 
	 * @param prefix Method prefix
	 * @param matchRule Search match rule
	 * @param scope Search scope
	 * @return method element array
	 */
	public static IMethod[] getFunctions(String prefix, int matchRule, IDLTKSearchScope scope) {
		final List<IMethod> methods = new LinkedList<IMethod>();
		SearchEngine searchEngine = new SearchEngine();
		SearchPattern pattern = SearchPattern.createPattern(prefix, IDLTKSearchConstants.METHOD, IDLTKSearchConstants.DECLARATIONS, matchRule, PHPLanguageToolkit.getDefault());
		try {
			searchEngine.search(pattern, new SearchParticipant[] { SearchEngine.getDefaultSearchParticipant() }, scope, new SearchRequestor() {
				public void acceptSearchMatch(SearchMatch match) throws CoreException {
					IMethod element = (IMethod) match.getElement();
					IModelElement parent = element.getParent();
					if (parent instanceof ISourceModule || parent instanceof IMethod || parent instanceof IType && PHPFlags.isNamespace(((IType) parent).getFlags())) {
						methods.add(element);
					}
				}
			}, null);
		} catch (CoreException e) {
			Logger.logException(e);
			return null;
		}
		return (IMethod[]) methods.toArray(new IMethod[methods.size()]);
	}

