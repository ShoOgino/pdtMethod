	/**
	 * Parses @@var comment using regular expressions
	 * 
	 * @param content
	 *            Content of the @@var comment token
	 * @param start
	 *            Token start position
	 * @param end
	 *            Token end position
	 * @return {@link VarComment}
	 */
	public static VarComment parseVarComment(String content, int start, int end) {
		Matcher m = null;
		String types = null, varName = null;
		int typeStart = -1, varStart = -1, varEnd = -1;
		boolean foundMatch = false;

		if ((m = VAR_COMMENT_PATTERN1.matcher(content)).matches()) {
			types = m.group(4);
			varName = m.group(2);
			varStart = start + m.group(1).length();
			varEnd = varStart + varName.length();
			typeStart = varEnd + m.group(3).length();
			foundMatch = true;
		} else if ((m = VAR_COMMENT_PATTERN2.matcher(content)).matches()) {
			types = m.group(2);
			varName = m.group(4);
			typeStart = start + m.group(1).length();
			varStart = typeStart + types.length() + m.group(3).length();
			varEnd = varStart + varName.length();
			foundMatch = true;
		}

		if (foundMatch) {
			List<TypeReference> typeReferences = new LinkedList<TypeReference>();

			if (types != null) {
				int pipeIdx = types.indexOf(Constants.TYPE_SEPARATOR_CHAR);
				while (pipeIdx >= 0) {
					String typeName = types.substring(0, pipeIdx);
					int typeEnd = typeStart + typeName.length();
					if (typeName.length() > 0) {
						typeReferences.add(new TypeReference(typeStart, typeEnd, typeName));
					}
					types = types.substring(pipeIdx + 1);
					typeStart += pipeIdx + 1;
					pipeIdx = types.indexOf(Constants.TYPE_SEPARATOR_CHAR);
				}
				String typeName = types;
				int typeEnd = typeStart + typeName.length();
				if (typeName.length() > 0) {
					typeReferences.add(new TypeReference(typeStart, typeEnd, typeName));
				}
			}

			VariableReference varReference = new VariableReference(varStart, varEnd, varName);
			VarComment varComment = new VarComment(start, end, varReference,
					typeReferences.toArray(new TypeReference[typeReferences.size()]));
			return varComment;
		}
		return null;
	}

