	private void rewriteReturnType(MethodDeclaration node,
			boolean isConstructor, boolean isConstructorChange) {
		// TODO
		// ChildPropertyDescriptor property = (node.getAST().apiLevel() ==
		// PHP4_INTERNAL) ? MethodDeclaration.RETURN_TYPE_PROPERTY :
		// MethodDeclaration.RETURN_TYPE2_PROPERTY;
		//
		// // weakness in the AST: return type can exist, even if missing in
		// source
		// ASTNode originalReturnType = (ASTNode) getOriginalValue(node,
		// property);
		// boolean returnTypeExists = originalReturnType != null &&
		// originalReturnType.getStart() != -1;
		// if (!isConstructorChange && returnTypeExists) {
		// rewriteRequiredNode(node, property);
		// return;
		// }
		// // difficult cases: return type insert or remove
		// ASTNode newReturnType = (ASTNode) getNewValue(node, property);
		// if (isConstructorChange || !returnTypeExists && newReturnType !=
		// originalReturnType) {
		// // use the start offset of the method name to insert
		// ASTNode originalMethodName = (ASTNode) getOriginalValue(node,
		// MethodDeclaration.NAME_PROPERTY);
		// int nextStart = originalMethodName.getStart(); // see bug 84049:
		// can't use extended offset
		// TextEditGroup editGroup = getEditGroup(node, property);
		// if (isConstructor || !returnTypeExists) { // insert
		// doTextInsert(nextStart, newReturnType, getIndent(nextStart), true,
		// editGroup);
		//				doTextInsert(nextStart, " ", editGroup); //$NON-NLS-1$
		// } else { // remove up to the method name
		// int offset = getExtendedOffset(originalReturnType);
		// doTextRemoveAndVisit(offset, nextStart - offset, originalReturnType,
		// editGroup);
		// }
		// }
	}

