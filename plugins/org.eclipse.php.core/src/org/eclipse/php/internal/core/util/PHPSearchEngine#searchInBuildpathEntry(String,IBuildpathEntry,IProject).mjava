	private static Result<?, ?> searchInBuildpathEntry(String path,
			IBuildpathEntry entry, IProject currentProject) {

		IPath entryPath = EnvironmentPathUtils.getLocalPath(entry.getPath());

		if (entry.getEntryKind() == IBuildpathEntry.BPE_LIBRARY) {
			IScriptProject scriptProject = DLTKCore.create(currentProject);
			IProjectFragment[] projectFragments = scriptProject
					.findProjectFragments(entry);

			if (projectFragments != null && projectFragments.length > 0) {
				if (projectFragments[0] instanceof ArchiveProjectFragment) {
					ArchiveProjectFragment apf = (ArchiveProjectFragment) projectFragments[0];
					boolean external = false;
					IPath apfp = apf.getPath();
					if (EnvironmentPathUtils.isFull(apfp)) {
						apfp = EnvironmentPathUtils.getLocalPath(apfp);
						external = true;
					}
					PharPath pharPath = PharPath.getPharPath(new Path(path));
					if (pharPath != null) {
						if (external
								&& apfp
										.equals(new Path(pharPath.getPharName()))
								|| !external
								&& apfp.lastSegment().equals(
										new Path(pharPath.getPharName())
												.lastSegment())) {
							if (pharPath.isPhar()) {
								final String stubName = PharConstants.STUB_PATH;
								pharPath.setFolder(new Path(stubName)
										.removeLastSegments(1).toString());
								pharPath.setFile(new Path(stubName)
										.lastSegment());
							}
							IScriptFolder scriptFolder = apf
									.getScriptFolder(new Path(pharPath
											.getFolder()));
							try {
								IModelElement[] children = scriptFolder
										.getChildren();
								if (children != null && children.length > 0) {
									for (int i = 0; i < children.length; i++) {
										if (((ISourceModule) children[i])
												.getElementName().equals(
														pharPath.getFile())) {
											return new IncludedPharFileResult(
													scriptFolder,
													(ISourceModule) children[i]);
										}
									}

								}
							} catch (ModelException e) {
								PHPCorePlugin.log(e);
								return null;
							}
						}
					}
				}

			}

			File entryDir = entryPath.toFile();
			File file = new File(entryDir, path);
			if (file.exists()) {
				return new IncludedFileResult(entry, file);
			}
		} else if (entry.getEntryKind() == IBuildpathEntry.BPE_VARIABLE) {
			entryPath = DLTKCore.getResolvedVariablePath(entryPath);
			File entryDir = entryPath.toFile();
			File file = new File(entryDir, path);
			if (file.exists()) {
				return new IncludedFileResult(entry, file);
			}
		} else if (entry.getEntryKind() == IBuildpathEntry.BPE_PROJECT) {
			IWorkspaceRoot workspaceRoot = ResourcesPlugin.getWorkspace()
					.getRoot();
			IProject project = workspaceRoot.getProject(entryPath.segment(0));
			if (project.isAccessible()) {
				IResource resource = project.findMember(path);
				if (resource instanceof IFile) {
					return new ResourceResult((IFile) resource);
				}
			}
		} else if (entry.getEntryKind() == IBuildpathEntry.BPE_SOURCE) {
			IWorkspaceRoot workspaceRoot = ResourcesPlugin.getWorkspace()
					.getRoot();
			IResource resource = workspaceRoot.findMember(entryPath);
			if (resource instanceof IContainer) {
				resource = ((IContainer) resource).findMember(path);
				if (resource instanceof IFile) {
					return new ResourceResult((IFile) resource);
				}
			}
		} else if (entry.getEntryKind() == IBuildpathEntry.BPE_CONTAINER) {
			try {
				IScriptProject scriptProject = DLTKCore.create(currentProject);
				IBuildpathContainer container = DLTKCore.getBuildpathContainer(
						entry.getPath(), scriptProject);
				if (container != null) {
					IBuildpathEntry[] buildpathEntries = container
							.getBuildpathEntries();
					if (buildpathEntries != null) {
						for (IBuildpathEntry buildpathEntry : buildpathEntries) {
							Result<?, ?> result = searchInBuildpathEntry(path,
									buildpathEntry, currentProject);
							if (result != null) {
								IProjectFragment[] projectFragments = scriptProject
										.findProjectFragments(entry);
								((IncludedFileResult) result)
										.setProjectFragments(projectFragments);
								return result;
							}
						}
					}
				}
			} catch (ModelException e) {
				PHPCorePlugin.log(e);
			}
		}

		return null;
	}

