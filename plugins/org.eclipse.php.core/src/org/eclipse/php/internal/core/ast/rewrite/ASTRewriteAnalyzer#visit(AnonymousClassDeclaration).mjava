	@Override
	public boolean visit(AnonymousClassDeclaration anonymousClassDeclaration) {
		if (!hasChildrenChanges(anonymousClassDeclaration)) {
			return doVisitUnchangedChildren(anonymousClassDeclaration);
		}
		try {
			// Rewrite the super-class property
			rewriteAnonymousClassDeclarationSuperClass(anonymousClassDeclaration);
			// Rewrite the interfaces
			int pos;
			if (anonymousClassDeclaration.getSuperClass() == null) {
				pos = anonymousClassDeclaration.getStart();
			} else {
				pos = anonymousClassDeclaration.getSuperClass().getEnd();
			}
			rewriteNodeList(anonymousClassDeclaration, AnonymousClassDeclaration.INTERFACES_PROPERTY, pos,
					" implements ", //$NON-NLS-1$
					", "); //$NON-NLS-1$
			// Rewrite the body
			return rewriteRequiredNodeVisit(anonymousClassDeclaration, AnonymousClassDeclaration.BODY_PROPERTY);
		} catch (Exception e) {
			handleException(e);
		}
		return false;
	}

