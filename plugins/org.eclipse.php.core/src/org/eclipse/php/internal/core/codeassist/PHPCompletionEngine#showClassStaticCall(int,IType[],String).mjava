	protected void showClassStaticCall(int offset, IType[] className, String prefix) {
		this.setSourceRange(offset - prefix.length(), offset);

		boolean showNonStrictOptions = showNonStrictOptions();

		int relevanceMethod = RELEVANCE_METHOD;
		if (!prefix.startsWith(DOLLAR)) {
			for (IType type : className) {
				IMethod[] classMethods = CodeAssistUtils.getClassMethods(type, prefix, false);

				for (IMethod method : classMethods) {
					try {
						if ((!isPHP5 || showNonStrictOptions || (method.getFlags() & Modifiers.AccStatic) != 0) && (method.getFlags() & IPHPModifiers.Internal) == 0) {
							reportMethod(method, relevanceMethod--);
						}
					} catch (ModelException e) {
//						Logger.logException(e);
					}
				}
			}
		}

		int relevanceConst = RELEVANCE_CONST;
		int relevanceVar = RELEVANCE_VAR;
		for (IType type : className) {
			IField[] classFields = CodeAssistUtils.getClassFields(type, prefix, false, true);
			for (IField field : classFields) {
				try {
					int flags = field.getFlags();
					boolean isConstant = (flags & Modifiers.AccConstant) != 0;
					if (isConstant || !isPHP5 || showNonStrictOptions || (flags & Modifiers.AccStatic) != 0) {
						if (isConstant) {
							reportField(field, relevanceConst--, false);
						} else {
							reportField(field, relevanceVar--, false);
						}
					}
				} catch (ModelException e) {
//					Logger.logException(e);
				}
			}
		}
	}

