		/**
		 * @param acceptMagicFunction the return value that should be returned if the function is a magic function.
		 */
		MagicFunctionFilter(boolean acceptMagicFunction) {
			this.acceptMagicFunction = acceptMagicFunction;
			// use PHPCodeDataFactory to obtain a list of magic functions
			// Assume PHP5
			CodeData[] magics = PHPCodeDataFactory.createMagicMethods(PHPCodeDataFactory.createPHPClassData("dummyClass", Modifier.PUBLIC, null, PHPCodeDataFactory.createUserData("", 0, 0, 0, 0), null, PHPCodeDataFactory.EMPTY_INTERFACES_DATA_ARRAY, PHPCodeDataFactory.EMPTY_CLASS_VAR_DATA_ARRAY,
				PHPCodeDataFactory.EMPTY_CLASS_CONST_DATA_ARRAY, PHPCodeDataFactory.EMPTY_FUNCTIONS_DATA_ARRAY), true);
			MagicFunctionFilter.magicFunction = new String[magics.length + 2];
			// add "__construct" & "__destruct"
			MagicFunctionFilter.magicFunction[0] = "__construct";
			MagicFunctionFilter.magicFunction[1] = "__destruct";
			// add the rest
			for (int i = 2; i < MagicFunctionFilter.magicFunction.length; i++) {
				MagicFunctionFilter.magicFunction[i] = magics[i - 2].getName();
			}
		}

