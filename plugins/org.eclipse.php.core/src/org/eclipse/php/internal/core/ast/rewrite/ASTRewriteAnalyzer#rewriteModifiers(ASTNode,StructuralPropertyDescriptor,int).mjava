	private void rewriteModifiers(ASTNode parent, StructuralPropertyDescriptor property, int offset) {
		RewriteEvent event = getEvent(parent, property);
		if (event == null || event.getChangeKind() != RewriteEvent.REPLACED) {
			return;
		}
		try {
			int oldModifiers = (Integer) event.getOriginalValue();
			int newModifiers = (Integer) event.getNewValue();
			TextEditGroup editGroup = getEditGroup(event);

			TokenScanner scanner = getScanner();

			Symbol tok = scanner.readNext(offset/*, false*/);
			int startPos = scanner.getCurrentStartOffset();
			int nextStart = startPos;
			// prepare the modifiers 'syms'
			PHPVersion phpVersion = this.scanner.getPHPVersion();
			int modifiers[] = new int[] { SymbolsProvider.getModifierSym("public", phpVersion), SymbolsProvider.getModifierSym("private", phpVersion), SymbolsProvider.getModifierSym("protected", phpVersion), SymbolsProvider.getModifierSym("static", phpVersion),
				SymbolsProvider.getModifierSym("abstract", phpVersion), SymbolsProvider.getModifierSym("final", phpVersion) };
			loop: while (true) {
				if (TokenScanner.isComment(tok)) {
					tok = scanner.readNext(/*true*/); // next non-comment token
				}
				boolean keep = true;
				if (tok == null) {
					break loop;
				}
				if (tok.sym == modifiers[0]) {
					keep = PHPFlags.isPublic(newModifiers);
				} else if (tok.sym == modifiers[1]) {
					keep = PHPFlags.isPrivate(newModifiers);
				} else if (tok.sym == modifiers[2]) {
					keep = PHPFlags.isProtected(newModifiers);
				} else if (tok.sym == modifiers[3]) {
					keep = PHPFlags.isStatic(newModifiers);
				} else if (tok.sym == modifiers[4]) {
					keep = PHPFlags.isAbstract(newModifiers);
				} else if (tok.sym == modifiers[5]) {
					keep = PHPFlags.isFinal(newModifiers);
				} else {
					break loop;
				}
				tok = getScanner().readNext(/*false*/); // include comments
				int currPos = nextStart;
				nextStart = getScanner().getCurrentStartOffset();
				if (!keep) {
					doTextRemove(currPos, nextStart - currPos, editGroup);
				}
			}
			int addedModifiers = newModifiers & ~oldModifiers;
			if (addedModifiers != 0) {
				if (startPos != nextStart) {
					int visibilityModifiers = addedModifiers & (Modifiers.AccPublic | Modifiers.AccPrivate | Modifiers.AccProtected);
					if (visibilityModifiers != 0) {
						StringBuffer buf = new StringBuffer();
						ASTRewriteFlattener.printModifiers(visibilityModifiers, buf);
						doTextInsert(startPos, buf.toString(), editGroup);
						addedModifiers &= ~visibilityModifiers;
					}
				}
				StringBuffer buf = new StringBuffer();
				ASTRewriteFlattener.printModifiers(addedModifiers, buf);
				doTextInsert(nextStart, buf.toString(), editGroup);
			}
		} catch (CoreException e) {
			handleException(e);
		}
	}

