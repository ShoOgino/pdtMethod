	private static void internalBuildReferencingFilesTree(Node root,
			Set<ISourceModule> processedFiles, IProgressMonitor monitor) {

		ISourceModule file = root.getFile();

		IDLTKSearchScope scope = SearchEngine.createSearchScope(file
				.getScriptProject());

		// Find all includes to the current source module in mixin:
		IField[] includes = PhpModelAccess.getDefault().findIncludes(
				file.getPath().lastSegment(), scope);
		for (IField include : includes) {

			// Candidate that includes the original source module:
			ISourceModule referencingFile = include.getSourceModule();

			// Try to resolve include:
			ISourceModule testFile = findSourceModule(referencingFile,
					((IncludeField) include).getFilePath());

			// If this is the correct include (that means that included file is
			// the original file):
			if (file.equals(testFile)
					&& !processedFiles.contains(referencingFile)) {
				processedFiles.add(referencingFile);
				Node node = new Node(referencingFile);
				root.addChild(node);
			}
		}

		Collection<Node> children = root.getChildren();
		if (children != null) {
			for (Node child : children) {
				internalBuildReferencingFilesTree(child, processedFiles,
						monitor);
			}
		}
	}

