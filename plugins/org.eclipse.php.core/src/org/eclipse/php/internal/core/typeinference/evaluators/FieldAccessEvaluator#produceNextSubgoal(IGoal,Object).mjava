	private IGoal[] produceNextSubgoal(IGoal previousGoal, Object previousResult) {

		ExpressionTypeGoal typedGoal = (ExpressionTypeGoal) goal;
		FieldAccess expression = (FieldAccess) typedGoal.getExpression();
		Expression receiver = expression.getDispatcher();
		Expression field = expression.getField();

		if (!(field instanceof SimpleReference)) {
			return null;
		}

		// just starting to evaluate method, evaluate method receiver first:
		if (state == STATE_INIT) {

			if (receiver == null) {
				state = STATE_GOT_RECEIVER;
			} else {
				state = STATE_WAITING_RECEIVER;
				return new IGoal[] { new ExpressionTypeGoal(goal.getContext(), receiver) };
			}
		}

		// receiver must been evaluated now:
		if (state == STATE_WAITING_RECEIVER) {
			receiverType = (IEvaluatedType) previousResult;
			if (receiverType == null) {
				state = STATE_UNKNOWN;
				return null;
			}
			state = STATE_GOT_RECEIVER;
		}

		// we've evaluated receiver, lets evaluate the method return type now:
		if (state == STATE_GOT_RECEIVER) {
			state = STATE_WAITING_FIELD;
			if (receiverType == UnknownType.INSTANCE) {
				receiverType = null;
			}

			if (receiverType instanceof PHPClassType) {
				return new IGoal[] { new ClassVariableDeclarationGoal(new InstanceContext((ISourceModuleContext) goal.getContext(), receiverType), (SimpleReference) field) };
			}
			if (receiverType instanceof AmbiguousType) {
				List<IGoal> subGoals = new LinkedList<IGoal>();
				AmbiguousType ambiguousType = (AmbiguousType) receiverType;
				for (IEvaluatedType type : ambiguousType.getPossibleTypes()) {
					if (type instanceof PHPClassType) {
						subGoals.add(new ClassVariableDeclarationGoal(new InstanceContext((ISourceModuleContext) goal.getContext(), type), (SimpleReference) field));
					}
				}
				return subGoals.toArray(new IGoal[subGoals.size()]);
			}
		}
		if (state == STATE_WAITING_FIELD) {
			result.add((IEvaluatedType) previousResult);
		}

		return null;
	}

