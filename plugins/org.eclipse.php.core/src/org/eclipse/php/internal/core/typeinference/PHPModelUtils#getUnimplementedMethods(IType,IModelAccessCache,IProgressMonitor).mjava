	/**
	 * Returns methods that must be overridden in first non-abstract class in
	 * hierarchy.
	 * 
	 * @param type
	 *            Type to start the search from
	 * @param cache
	 *            Temporary model cache instance
	 * @param monitor
	 *            Progress monitor
	 * @return unimplemented methods
	 * @throws ModelException
	 */
	public static IMethod[] getUnimplementedMethods(IType type, IModelAccessCache cache, IProgressMonitor monitor)
			throws ModelException {

		HashMap<String, IMethod> abstractMethods = new HashMap<String, IMethod>();
		HashSet<String> nonAbstractMethods = new HashSet<String>();

		internalGetUnimplementedMethods(type, nonAbstractMethods, abstractMethods, new HashSet<String>(), cache,
				monitor, true);

		for (String methodName : nonAbstractMethods) {
			Iterator<Map.Entry<String, IMethod>> iterator = abstractMethods.entrySet().iterator();
			while (iterator.hasNext()) {
				Map.Entry<String, IMethod> entry = iterator.next();
				if (methodName.equalsIgnoreCase(entry.getKey())) {
					iterator.remove();
				}
			}
		}

		Collection<IMethod> unimplementedMethods = abstractMethods.values();
		return unimplementedMethods.toArray(new IMethod[unimplementedMethods.size()]);
	}

