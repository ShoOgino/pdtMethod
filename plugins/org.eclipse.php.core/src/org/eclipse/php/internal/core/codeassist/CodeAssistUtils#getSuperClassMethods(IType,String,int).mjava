	/**
	 * This method finds all ancestor methods that match the given prefix.
	 * @param type
	 * @param prefix
	 * @param mask
	 * @return
	 */
	public static IMethod[] getSuperClassMethods(IType type, String prefix, int mask) {
		boolean exactName = (mask & EXACT_NAME) != 0;
		final Set<IMethod> methods = new TreeSet<IMethod>(new AlphabeticComparator());
		try {
			if (type.getSuperClasses() != null && type.getSuperClasses().length > 0) {
				ITypeHierarchy superTypeHierarchy = type.newSupertypeHierarchy(null);
				IType[] allSuperclasses = superTypeHierarchy.getAllSuperclasses(type);
				for (IType superClass : allSuperclasses) {
					for (IMethod method : superClass.getMethods()) {
						String methodName = method.getElementName();
						if (exactName) {
							if (methodName.equalsIgnoreCase(prefix)) {
								methods.add(method);
								break;
							}
						} else if (startsWithIgnoreCase(methodName, prefix)) {
							methods.add(method);
						}
					}
				}
			}
		} catch (Exception e) {
			if (DLTKCore.DEBUG_COMPLETION) {
				e.printStackTrace();
			}
		}
		return methods.toArray(new IMethod[methods.size()]);
	}

