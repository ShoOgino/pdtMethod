	/**
	 * This method finds all ancestor methods that match the given prefix.
	 * @param type
	 * @param prefix
	 * @param exactName
	 * @return
	 */
	public static IMethod[] getSuperClassMethods(IType type, String prefix, boolean exactName) {
		final Set<IMethod> methods = new HashSet<IMethod>();
		try {
			if (type.getSuperClasses() != null) {
				SearchEngine searchEngine = new SearchEngine();
				IDLTKSearchScope scope = SearchEngine.createHierarchyScope(type);
				
				int matchRule = exactName ? SearchPattern.R_EXACT_MATCH : SearchPattern.R_CAMELCASE_MATCH | SearchPattern.R_PREFIX_MATCH;
				SearchPattern pattern = SearchPattern.createPattern(prefix, IDLTKSearchConstants.METHOD, IDLTKSearchConstants.DECLARATIONS, matchRule, PHPLanguageToolkit.getDefault());

				searchEngine.search(pattern, new SearchParticipant[] { SearchEngine.getDefaultSearchParticipant() }, scope, new SearchRequestor() {
					public void acceptSearchMatch(SearchMatch match) throws CoreException {
						methods.add((IMethod) match.getElement());
					}
				}, null);
			}
		} catch (Exception e) {
			Logger.logException(e);
		}
		return methods.toArray(new IMethod[methods.size()]);
	}

