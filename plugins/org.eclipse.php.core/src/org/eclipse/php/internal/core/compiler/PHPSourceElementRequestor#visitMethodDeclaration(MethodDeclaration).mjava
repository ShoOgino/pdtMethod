	private boolean visitMethodDeclaration(MethodDeclaration method) throws Exception {
		this.fNodes.push(method);
		List<?> args = method.getArguments();

		String[] parameter = new String[args.size()];
		String[] initializers = new String[args.size()];
		int[] flags = new int[args.size()];
		ISourceElementRequestor.MethodInfo mi = new ISourceElementRequestor.MethodInfo();
		mi.modifiers = method.getModifiers();
		for (int a = 0; a < args.size(); a++) {
			Argument arg = (Argument) args.get(a);
			parameter[a] = arg.getName();
			if (arg.getInitialization() != null) {
				if (arg.getInitialization() instanceof UnaryOperation) {
					UnaryOperation initialization = (UnaryOperation) arg.getInitialization();
					if (initialization.getExpr() instanceof Literal) {
						Literal scalar = (Literal) initialization.getExpr();
						initializers[a] = initialization.getOperator() + scalar.getValue();
					} else {
						initializers[a] = PHPIndexingVisitor.DEFAULT_VALUE;
					}
				} else if (arg.getInitialization() instanceof Literal) {
					Literal scalar = (Literal) arg.getInitialization();
					initializers[a] = scalar.getValue();
				} else if (arg.getInitialization() instanceof ArrayCreation) {
					ArrayCreation arrayCreation = (ArrayCreation) arg.getInitialization();
					if (arrayCreation.getElements().isEmpty()) {
						initializers[a] = PHPIndexingVisitor.EMPTY_ARRAY_VALUE;
					} else {
						initializers[a] = PHPIndexingVisitor.ARRAY_VALUE;
					}
				} else {
					initializers[a] = PHPIndexingVisitor.DEFAULT_VALUE;
				}
			}
			if (arg instanceof FormalParameterByReference) {
				flags[a] = IPHPModifiers.AccReference;
			}
			if (arg instanceof FormalParameter) {
				FormalParameter fp = (FormalParameter) arg;
				if (fp.isVariadic()) {
					mi.modifiers |= IPHPModifiers.AccVariadic;
				}
				if (fp.getParameterType() instanceof FullyQualifiedReference) {
					if (((FullyQualifiedReference) fp.getParameterType()).isNullable()) {
						flags[a] |= IPHPModifiers.AccNullable;
					}
				}
			}
		}

		mi.parameterNames = parameter;
		mi.name = method.getName();
		mi.nameSourceStart = method.getNameStart();
		mi.nameSourceEnd = method.getNameEnd() - 1;
		mi.declarationStart = method.sourceStart();
		mi.parameterInitializers = initializers;
		mi.parameterFlags = flags;

		modifyMethodInfo(method, mi);

		fInfoStack.push(mi);
		this.fRequestor.enterMethod(mi);

		this.fInMethod = true;
		this.fCurrentMethod = method;
		return true;
	}

