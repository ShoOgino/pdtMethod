	protected void loadFiles(PHPLanguageManager languageManager) {
		final PHPParserManager phpParserManager = languageManager.createPHPParserManager();

		parseFilesFrom(phpParserManager, PHPCorePlugin.getDefault().getBundle(), languageManager.getPHPFunctionPath());

		// load language model extensions:
		IExtensionRegistry registry = Platform.getExtensionRegistry();
		IConfigurationElement[] elements = registry.getConfigurationElementsFor(PHPCorePlugin.ID, "phpModelExtensions");

		for (IConfigurationElement element : elements) {
			if ("model".equals(element.getName())) {
				String id = element.getAttribute("id");

				try {
					String enabledAttr = element.getAttribute("enabled");
					boolean enabled = (enabledAttr == null) ? true : Boolean.parseBoolean(enabledAttr);
					String directory = element.getAttribute("directory");
					String phpVersion = element.getAttribute("phpVersion");

					if (element.getAttribute("class") != null) {
						IPHPModelExtension extension = (IPHPModelExtension) element.createExecutableExtension("class");
						enabled = extension.isEnabled();
						if (extension.getDirectory() != null) {
							directory = extension.getDirectory();
						}
						if (extension.getPHPVersion() != null) {
							phpVersion = extension.getPHPVersion();
						}
					}

					if (enabled && getPHPVersion().equals(phpVersion)) {
						parseFilesFrom(phpParserManager, Platform.getBundle(element.getNamespaceIdentifier()), directory);
					}
				} catch (CoreException e) {
					PHPCorePlugin.logErrorMessage(NLS.bind("Error loading PHP model extension ID {0}", id));
				}
			}
		}

		Arrays.sort(functions);
		Arrays.sort(classes);
		Arrays.sort(constants);
	}

