	protected void loadFiles(PHPLanguageManager languageManager) {
		try {
			final PHPParserManager phpParserManager = languageManager.createPHPParserManager();

			// parse the specific language model
			String phpFunctionPath = languageManager.getPHPFunctionPath();
			Reader reader = new InputStreamReader(FileLocator.openStream(PHPCorePlugin.getDefault().getBundle(), new Path(phpFunctionPath), false));
			ParserClient innerParserClient = new InnerParserClient();

			ParserExecuter executer = new ParserExecuter(phpParserManager, null, innerParserClient, phpFunctionPath, reader, new Pattern[0], 0, false);
			executer.run();

			// load language model extensions:
			IExtensionRegistry registry = Platform.getExtensionRegistry();
			IConfigurationElement[] elements = registry.getConfigurationElementsFor(PHPCorePlugin.ID, "languageModelExtensions"); //$NON-NLS-1$
			for (IConfigurationElement element : elements) {
				if ("model".equals(element.getName())) { //$NON-NLS-1$
					String id = element.getAttribute("id"); //$NON-NLS-1$
					try {
						boolean enabled;
						String file, phpVersion;
						String className = element.getAttribute("class"); //$NON-NLS-1$
						if (className != null) {
							ILanguageModelExtension extension = (ILanguageModelExtension) element.createExecutableExtension(className);
							enabled = extension.isEnabled();
							file = extension.getFile();
							phpVersion = extension.getPHPVersion();
						} else {
							String enabledAttr = element.getAttribute("enabled"); //$NON-NLS-1$
							enabled = (enabledAttr == null) ? true : Boolean.parseBoolean(enabledAttr);
							file = element.getAttribute("file"); //$NON-NLS-1$
							phpVersion = element.getAttribute("phpVersion"); //$NON-NLS-1$
						}

						if (enabled && getPHPVersion().equals(phpVersion)) {
							reader = new InputStreamReader(FileLocator.openStream(PHPCorePlugin.getDefault().getBundle(), new Path(file), false));
							innerParserClient = new InnerParserClient();
							executer = new ParserExecuter(phpParserManager, null, innerParserClient, file, reader, new Pattern[0], 0, false);
							executer.run();
						}
					} catch (CoreException e) {
						PHPCorePlugin.logErrorMessage(NLS.bind("Error loading language model extension ID {0}", id)); //$NON-NLS-1$
					}
				}
			}

			Arrays.sort(functions);
			Arrays.sort(classes);
			Arrays.sort(constants);

		} catch (IOException e) {
			PHPCorePlugin.log(e);
		}
	}

