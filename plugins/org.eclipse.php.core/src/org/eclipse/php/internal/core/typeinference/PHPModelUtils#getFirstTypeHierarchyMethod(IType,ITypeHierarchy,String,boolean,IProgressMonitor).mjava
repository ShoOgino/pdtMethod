	/**
	 * Finds the first method by name in the class hierarchy (including the
	 * class itself)
	 * 
	 * @param type
	 *            Class element
	 * @param hierarchy
	 *            Cached type hierarchy
	 * @param prefix
	 *            Method name or prefix
	 * @param exactName
	 *            Whether the name is exact or it is prefix
	 * @param monitor
	 *            Progress monitor
	 * @throws CoreException
	 */
	@NonNull
	public static IMethod[] getFirstTypeHierarchyMethod(IType type, ITypeHierarchy hierarchy, String prefix,
			boolean exactName, IProgressMonitor monitor) throws CoreException {

		if (prefix == null) {
			throw new NullPointerException();
		}
		final List<IMethod> methods = new LinkedList<IMethod>();
		methods.addAll(Arrays.asList(getTypeMethod(type, prefix, exactName)));
		if (type.getSuperClasses() != null && type.getSuperClasses().length > 0 && methods.size() == 0) {
			IType[] allSuperclasses = getSuperClasses(type, hierarchy);
			for (IType superClass : allSuperclasses) {
				IMethod[] method = getTypeMethod(superClass, prefix, exactName);
				if (method != null && method.length > 0) {
					methods.addAll(Arrays.asList(method));
					break;
				}
			}

		}
		return methods.toArray(new IMethod[methods.size()]);
	}

