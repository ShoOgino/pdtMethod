	protected boolean isInArrayOption(boolean haveSpacesAtEnd, String firstWord, String lastWord, int startPosition, int offset, TextSequence text, String type) {
		if (PHPPartitionTypes.isPHPQuotesState(type)) {
			return false;
		}
		boolean isArrayOption = false;
		if (startPosition > 0 && !lastWord.startsWith("$")) { //$NON-NLS-1$
			if (haveSpacesAtEnd) {
				if (lastWord.length() == 0 && firstWord.length() == 0) {
					if (text.charAt(startPosition - 1) == '[') {
						isArrayOption = true;
					}
				}
			} else {
				if (firstWord.length() == 0) {
					if (text.charAt(startPosition - 1) == '[') {
						isArrayOption = true;
					}
				}
			}
		}
		if (!isArrayOption) {
			return false;
		}
		int endPosition = startPosition - 1;

		endPosition = PHPTextSequenceUtilities.readBackwardSpaces(text, endPosition);
		startPosition = PHPTextSequenceUtilities.readIdentifierStartIndex(text, endPosition, true);
		String variableName = text.subSequence(startPosition, endPosition).toString();

//		if (variableName.startsWith("$")) { //$NON-NLS-1$
//			variableName = variableName.substring(1);
//		}

		reportArrayVariables(variableName, offset, lastWord, determineObjectTypeFromOtherFile);

		IModelElement[] functions = PHPMixinModel.getInstance().getFunction(lastWord + WILDCARD);
		for (IModelElement function : functions) {
			reportMethod((IMethod) function, RELEVANCE_METHODS);
		}

		if (!disableConstants) {
			IModelElement[] constants = PHPMixinModel.getInstance().getConstant(lastWord + WILDCARD, null);
			int relevance = 4242;
			for (IModelElement constant : constants) {
				IField field = (IField) constant;
				reportField(field, relevance--);
			}
		}
		return true;
	}

