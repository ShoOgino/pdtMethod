  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.eclipse.php.internal.core.phpModel.javacup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 48: 
          { appendTextToComment();
//	yymore();
          }
        case 157: break;
        case 84: 
          { pushState(ST_LOOKING_FOR_VARNAME);
    return createSymbol(ParserConstants4.T_DOLLAR_OPEN_CURLY_BRACES);
          }
        case 158: break;
        case 68: 
          { return createSymbol(ParserConstants4.T_IS_SMALLER_OR_EQUAL);
          }
        case 159: break;
        case 153: 
          { return createSymbol(ParserConstants4.T_OLD_FUNCTION);
          }
        case 160: break;
        case 115: 
          { return createSymbol(ParserConstants4.T_UNSET);
          }
        case 161: break;
        case 55: 
          { return createSymbol(ParserConstants4.T_IF);
          }
        case 162: break;
        case 34: 
          { yybegin(ST_SINGLE_QUOTE);
    return createSymbol(ParserConstants4.T_SINGLE_QUATE);
          }
        case 163: break;
        case 18: 
          { return createSymbol(ParserConstants4.T_DIV);
          }
        case 164: break;
        case 1: 
          { return createSymbol(ParserConstants4.T_INLINE_HTML);
          }
        case 165: break;
        case 49: 
          { String yytext = yytext();
	switch (yytext.charAt(yytext.length() - 1)) {
		case '?':
		case '%':
		case '>':
			yypushback(1);
			appendTextToComment();
			break;
		default:
			handleCommentEnd();
			yybegin(ST_IN_SCRIPTING);
	}
//	yymore();
          }
        case 166: break;
        case 37: 
          { return createSymbol(ParserConstants4.T_ENCAPSED_AND_WHITESPACE);
          }
        case 167: break;
        case 8: 
          { handleCommentStart();
	yybegin(ST_ONE_LINE_COMMENT);
//	yymore();
          }
        case 168: break;
        case 44: 
          { popState();
    return createFullSymbol(ParserConstants4.T_STRING);
          }
        case 169: break;
        case 97: 
          { return createSymbol(ParserConstants4.T_USE);
          }
        case 170: break;
        case 152: 
          { return createSymbol(ParserConstants4.T_INCLUDE_ONCE);
          }
        case 171: break;
        case 106: 
          { return createSymbol(ParserConstants4.T_ELSE);
          }
        case 172: break;
        case 20: 
          { return createSymbol(ParserConstants4.T_REFERENCE);
          }
        case 173: break;
        case 116: 
          { return createSymbol(ParserConstants4.T_CONST);
          }
        case 174: break;
        case 62: 
          { return createSymbol(ParserConstants4.T_SR);
          }
        case 175: break;
        case 109: 
          { return createSymbol(ParserConstants4.T_LIST);
          }
        case 176: break;
        case 134: 
          { return createSymbol(ParserConstants4.T_INCLUDE);
          }
        case 177: break;
        case 29: 
          { return createSymbol(ParserConstants4.T_QUESTION_MARK);
          }
        case 178: break;
        case 64: 
          { return createSymbol(ParserConstants4.T_PAAMAYIM_NEKUDOTAYIM);
          }
        case 179: break;
        case 80: 
          { return createFullSymbol(ParserConstants4.T_VARIABLE);
          }
        case 180: break;
        case 77: 
          { return createSymbol(ParserConstants4.T_OR_EQUAL);
          }
        case 181: break;
        case 39: 
          { return createSymbol(ParserConstants4.T_CURLY_CLOSE);
          }
        case 182: break;
        case 47: 
          { appendTextToComment();
          }
        case 183: break;
        case 107: 
          { return createSymbol(ParserConstants4.T_ECHO);
          }
        case 184: break;
        case 60: 
          { pushState(ST_LOOKING_FOR_PROPERTY);
    return createSymbol(ParserConstants4.T_OBJECT_OPERATOR);
          }
        case 185: break;
        case 27: 
          { return createSymbol(ParserConstants4.T_TILDA);
          }
        case 186: break;
        case 69: 
          { return createSymbol(ParserConstants4.T_SL);
          }
        case 187: break;
        case 61: 
          { return createSymbol(ParserConstants4.T_MINUS_EQUAL);
          }
        case 188: break;
        case 121: 
          { return createSymbol(ParserConstants4.T_INT_CAST);
          }
        case 189: break;
        case 113: 
          { return createSymbol(ParserConstants4.T_BREAK);
          }
        case 190: break;
        case 105: 
          { handlePHPDocStart();
yybegin(ST_DOCBLOCK);
          }
        case 191: break;
        case 30: 
          { return createSymbol(ParserConstants4.T_AT);
          }
        case 192: break;
        case 23: 
          { return createSymbol(ParserConstants4.T_SEMICOLON);
          }
        case 193: break;
        case 38: 
          { return createSymbol(ParserConstants4.T_CURLY_OPEN);
          }
        case 194: break;
        case 99: 
          { return createSymbol(ParserConstants4.T_LOGICAL_AND);
          }
        case 195: break;
        case 41: 
          { yybegin(ST_IN_SCRIPTING);
    return createSymbol(ParserConstants4.T_SINGLE_QUATE);
          }
        case 196: break;
        case 89: 
          { handleCommentEnd();
    yybegin(ST_IN_SCRIPTING);
          }
        case 197: break;
        case 137: 
          { return createSymbol(ParserConstants4.T_FOREACH);
          }
        case 198: break;
        case 21: 
          { return createSymbol(ParserConstants4.T_OR);
          }
        case 199: break;
        case 6: 
          { return createSymbol(ParserConstants4.T_PLUS);
          }
        case 200: break;
        case 75: 
          { return createSymbol(ParserConstants4.T_AND_EQUAL);
          }
        case 201: break;
        case 148: 
          { return createSymbol(ParserConstants4.T_ENDSWITCH);
          }
        case 202: break;
        case 3: 
          { return createFullSymbol(ParserConstants4.T_DNUMBER);
          }
        case 203: break;
        case 74: 
          { return createSymbol(ParserConstants4.T_MOD_EQUAL);
          }
        case 204: break;
        case 101: 
          { return createSymbol(ParserConstants4.T_VAR);
          }
        case 205: break;
        case 19: 
          { return createSymbol(ParserConstants4.T_PRECENT);
          }
        case 206: break;
        case 9: 
          { return createSymbol(ParserConstants4.T_MINUS);
          }
        case 207: break;
        case 123: 
          { handlePHPStart();
    yybegin(ST_IN_SCRIPTING);
	//return T_OPEN_TAG;
          }
        case 208: break;
        case 139: 
          { return createSymbol(ParserConstants4.T_UNSET_CAST);
          }
        case 209: break;
        case 144: 
          { return createSymbol(ParserConstants4.T_FUNCTION);
          }
        case 210: break;
        case 10: 
          { return createSymbol(ParserConstants4.T_LGREATER);
          }
        case 211: break;
        case 141: 
          { return createSymbol(ParserConstants4.T_ENDWHILE);
          }
        case 212: break;
        case 45: 
          { yypushback(yylength());
    popState();
    pushState(ST_IN_SCRIPTING);
          }
        case 213: break;
        case 78: 
          { return createSymbol(ParserConstants4.T_BOOLEAN_OR);
          }
        case 214: break;
        case 25: 
          { return createSymbol(ParserConstants4.T_OPEN_RECT);
          }
        case 215: break;
        case 145: 
          { return createSymbol(ParserConstants4.T_CONTINUE);
          }
        case 216: break;
        case 33: 
          { yybegin(ST_DOUBLE_QUOTES);
    return createSymbol(ParserConstants4.T_QUATE);
          }
        case 217: break;
        case 13: 
          { return createSymbol(ParserConstants4.T_CLOSE_PARENTHESE);
          }
        case 218: break;
        case 90: 
          { handlePHPDocEnd();
     yybegin(ST_IN_SCRIPTING);
          }
        case 219: break;
        case 63: 
          { return createSymbol(ParserConstants4.T_IS_GREATER_OR_EQUAL);
          }
        case 220: break;
        case 119: 
          { return createSymbol(ParserConstants4.T_ARRAY);
          }
        case 221: break;
        case 56: 
          { return createSymbol(ParserConstants4.T_DO);
          }
        case 222: break;
        case 118: 
          { return createSymbol(ParserConstants4.T_WHILE);
          }
        case 223: break;
        case 53: 
          { return createSymbol(ParserConstants4.T_INC);
          }
        case 224: break;
        case 2: 
          { // do nothing
          }
        case 225: break;
        case 57: 
          { return createSymbol(ParserConstants4.T_LOGICAL_OR);
          }
        case 226: break;
        case 73: 
          { if (asp_tags) {
        handlePHPEnd();
        yybegin(YYINITIAL);
        return createSymbol(ParserConstants4.T_SEMICOLON);  /* implicit ';' at php-end tag */
    } else {
        return createSymbol(ParserConstants4.T_INLINE_HTML);
    }
          }
        case 227: break;
        case 50: 
          { if (asp_tags) {
        handlePHPStart();
        yybegin(ST_IN_SCRIPTING);
		//return T_OPEN_TAG;
    } else {
        return createSymbol(ParserConstants4.T_INLINE_HTML);
    }
          }
        case 228: break;
        case 82: 
          { return createFullSymbol(ParserConstants4.T_CONSTANT_ENCAPSED_STRING);
          }
        case 229: break;
        case 36: 
          { /* treat numbers (almost) as strings inside encapsulated strings */
    return createSymbol(ParserConstants4.T_NUM_STRING);
          }
        case 230: break;
        case 51: 
          { if (short_tags_allowed || yylength()>2) { /* yyleng>2 means it's not <? but <script> */
        handlePHPStart();
        yybegin(ST_IN_SCRIPTING);
        //return T_OPEN_TAG;
    } else {
        return createSymbol(ParserConstants4.T_INLINE_HTML);
    }
          }
        case 231: break;
        case 5: 
          { return createFullSymbol(ParserConstants4.T_STRING);
          }
        case 232: break;
        case 22: 
          { return createSymbol(ParserConstants4.T_KOVA);
          }
        case 233: break;
        case 103: 
          { return createSymbol(ParserConstants4.T_IS_NOT_IDENTICAL);
          }
        case 234: break;
        case 100: 
          { return createSymbol(ParserConstants4.T_SR_EQUAL);
          }
        case 235: break;
        case 117: 
          { return createSymbol(ParserConstants4.T_CLASS);
          }
        case 236: break;
        case 67: 
          { return createSymbol(ParserConstants4.T_IS_NOT_EQUAL);
          }
        case 237: break;
        case 87: 
          { return createSymbol(ParserConstants4.T_CHARACTER);
          }
        case 238: break;
        case 42: 
          { yybegin(ST_IN_SCRIPTING);
    return createSymbol(ParserConstants4.T_BACKQUATE);
          }
        case 239: break;
        case 133: 
          { return createSymbol(ParserConstants4.T_EXTENDS);
          }
        case 240: break;
        case 35: 
          { yybegin(ST_BACKQUOTE);
    return createSymbol(ParserConstants4.T_BACKQUATE);
          }
        case 241: break;
        case 122: 
          { heredoc = yytext().substring(3).trim();    // for '<<<'
    yybegin(ST_HEREDOC);
    return createSymbol(ParserConstants4.T_START_HEREDOC);
          }
        case 242: break;
        case 46: 
          { popState();
    pushState(ST_IN_SCRIPTING);
    return createFullSymbol(ParserConstants4.T_STRING_VARNAME);
          }
        case 243: break;
        case 136: 
          { return createSymbol(ParserConstants4.T_DECLARE);
          }
        case 244: break;
        case 70: 
          { return createSymbol(ParserConstants4.T_MUL_EQUAL);
          }
        case 245: break;
        case 132: 
          { return createSymbol(ParserConstants4.T_GLOBAL);
          }
        case 246: break;
        case 104: 
          { return createSymbol(ParserConstants4.T_SL_EQUAL);
          }
        case 247: break;
        case 11: 
          { return createSymbol(ParserConstants4.T_NEKUDOTAIM);
          }
        case 248: break;
        case 15: 
          { return createSymbol(ParserConstants4.T_NOT);
          }
        case 249: break;
        case 111: 
          { return createSymbol(ParserConstants4.T_ENDIF);
          }
        case 250: break;
        case 85: 
          { pushState(ST_IN_SCRIPTING);
    yypushback(yylength()-1);
    return createSymbol(ParserConstants4.T_CURLY_OPEN_WITH_DOLAR);
          }
        case 251: break;
        case 154: 
          { return createSymbol(ParserConstants4.T_FUNC_C);
          }
        case 252: break;
        case 130: 
          { return createSymbol(ParserConstants4.T_BOOL_CAST);
          }
        case 253: break;
        case 83: 
          { if (yylength() == 2) {
        yypushback(1);
    }
    return createSymbol(ParserConstants4.T_CHARACTER);
          }
        case 254: break;
        case 127: 
          { return createSymbol(ParserConstants4.T_STATIC);
          }
        case 255: break;
        case 114: 
          { return createSymbol(ParserConstants4.T_ISSET);
          }
        case 256: break;
        case 31: 
          { pushState(ST_IN_SCRIPTING);
    return createSymbol(ParserConstants4.T_CURLY_OPEN);
          }
        case 257: break;
        case 129: 
          { return createSymbol(ParserConstants4.T_RETURN);
          }
        case 258: break;
        case 131: 
          { return createSymbol(ParserConstants4.T_DOUBLE_CAST);
          }
        case 259: break;
        case 112: 
          { return createSymbol(ParserConstants4.T_EMPTY);
          }
        case 260: break;
        case 102: 
          { return createSymbol(ParserConstants4.T_IS_IDENTICAL);
          }
        case 261: break;
        case 65: 
          { return createSymbol(ParserConstants4.T_DOUBLE_ARROW);
          }
        case 262: break;
        case 151: 
          { return createSymbol(ParserConstants4.T_ENDFOREACH);
          }
        case 263: break;
        case 4: 
          { return createSymbol(ParserConstants4.T_NEKUDA);
          }
        case 264: break;
        case 142: 
          { return createSymbol(ParserConstants4.T_LINE);
          }
        case 265: break;
        case 88: 
          { String text = yytext();
    int length = text.length();
    text = text.trim();
    boolean foundNP = false;
    if (text.endsWith(";")) {
        text = text.substring(0, text.length() - 1);
        foundNP = true;
    }
    if (text.equals(heredoc)) {
        if (foundNP) {
            yypushback(length - text.length());
        }
        heredoc = null;
        yybegin(ST_IN_SCRIPTING);
        return createSymbol(ParserConstants4.T_END_HEREDOC);
    } else {
        return createFullSymbol(ParserConstants4.T_STRING);
    }
          }
        case 266: break;
        case 110: 
          { return createSymbol(ParserConstants4.T_CASE);
          }
        case 267: break;
        case 52: 
          { return createSymbol(ParserConstants4.T_CONCAT_EQUAL);
          }
        case 268: break;
        case 72: 
          { handleCommentStart();
    yybegin(ST_COMMENT);
          }
        case 269: break;
        case 143: 
          { return createSymbol(ParserConstants4.T_FILE);
          }
        case 270: break;
        case 79: 
          { return createSymbol(ParserConstants4.T_XOR_EQUAL);
          }
        case 271: break;
        case 58: 
          { return createSymbol(ParserConstants4.T_AS);
          }
        case 272: break;
        case 76: 
          { return createSymbol(ParserConstants4.T_BOOLEAN_AND);
          }
        case 273: break;
        case 156: 
          { return createFullSymbol(ParserConstants4.T_VAR_COMMENT);
          }
        case 274: break;
        case 138: 
          { return createSymbol(ParserConstants4.T_REQUIRE);
          }
        case 275: break;
        case 140: 
          { return createSymbol(ParserConstants4.T_ARRAY_CAST);
          }
        case 276: break;
        case 24: 
          { return createSymbol(ParserConstants4.T_COMMA);
          }
        case 277: break;
        case 14: 
          { return createSymbol(ParserConstants4.T_EQUAL);
          }
        case 278: break;
        case 128: 
          { return createSymbol(ParserConstants4.T_SWITCH);
          }
        case 279: break;
        case 126: 
          { /* not a keyword, hust for recognize constans.*/
    return createFullSymbol(ParserConstants4.T_DEFINE);
          }
        case 280: break;
        case 81: 
          { handlePHPEnd();
    yybegin(YYINITIAL);
    return createSymbol(ParserConstants4.T_SEMICOLON);  /* implicit ';' at php-end tag */
          }
        case 281: break;
        case 93: 
          { String text = yytext();
    if ((text.charAt(1)=='%' && asp_tags)
        || (text.charAt(1)=='?' && short_tags_allowed)) {
        handlePHPStart();
        yybegin(ST_IN_SCRIPTING);
        //return T_OPEN_TAG_WITH_ECHO;
    } else {
        return createSymbol(ParserConstants4.T_INLINE_HTML);
    }
          }
        case 282: break;
        case 108: 
          { return createSymbol(ParserConstants4.T_EVAL);
          }
        case 283: break;
        case 94: 
          { return createSymbol(ParserConstants4.T_LOGICAL_XOR);
          }
        case 284: break;
        case 96: 
          { return createSymbol(ParserConstants4.T_FOR);
          }
        case 285: break;
        case 26: 
          { return createSymbol(ParserConstants4.T_CLOSE_RECT);
          }
        case 286: break;
        case 86: 
          { switch (yytext().charAt(1)) {
        case 'n':
            break;
        case 't':
            break;
        case 'r':
            break;
        case '\\':
            break;
        case '$':
            break;
        case '{':
            break;
        default:
            return createSymbol(ParserConstants4.T_BAD_CHARACTER);
    }
    return createSymbol(ParserConstants4.T_CHARACTER);
          }
        case 287: break;
        case 66: 
          { return createSymbol(ParserConstants4.T_IS_EQUAL);
          }
        case 288: break;
        case 71: 
          { return createSymbol(ParserConstants4.T_DIV_EQUAL);
          }
        case 289: break;
        case 16: 
          { return createSymbol(ParserConstants4.T_RGREATER);
          }
        case 290: break;
        case 43: 
          { yypushback(yylength());
    popState();
          }
        case 291: break;
        case 98: 
          { return createSymbol(ParserConstants4.T_NEW);
          }
        case 292: break;
        case 40: 
          { yybegin(ST_IN_SCRIPTING);
    return createSymbol(ParserConstants4.T_QUATE);
          }
        case 293: break;
        case 91: 
          { handleCommentEnd();
	yybegin(ST_IN_SCRIPTING);
	//return T_COMMENT;
          }
        case 294: break;
        case 59: 
          { return createSymbol(ParserConstants4.T_DEC);
          }
        case 295: break;
        case 124: 
          { return createSymbol(ParserConstants4.T_ELSEIF);
          }
        case 296: break;
        case 146: 
          { return createSymbol(ParserConstants4.T_OBJECT_CAST);
          }
        case 297: break;
        case 32: 
          { /* This is a temporary fix which is dependant on flex and it's implementation */
    if (!stack.isEmpty()) {
        popState();
    }
    return createSymbol(ParserConstants4.T_CURLY_CLOSE);
          }
        case 298: break;
        case 147: 
          { return createSymbol(ParserConstants4.T_STRING_CAST);
          }
        case 299: break;
        case 149: 
          { return createSymbol(ParserConstants4.T_CLASS_C);
          }
        case 300: break;
        case 12: 
          { return createSymbol(ParserConstants4.T_OPEN_PARENTHESE);
          }
        case 301: break;
        case 95: 
          { return createSymbol(ParserConstants4.T_EXIT);
          }
        case 302: break;
        case 155: 
          { return createSymbol(ParserConstants4.T_REQUIRE_ONCE);
          }
        case 303: break;
        case 28: 
          { return createSymbol(ParserConstants4.T_DOLLAR);
          }
        case 304: break;
        case 54: 
          { return createSymbol(ParserConstants4.T_PLUS_EQUAL);
          }
        case 305: break;
        case 125: 
          { return createSymbol(ParserConstants4.T_ENDFOR);
          }
        case 306: break;
        case 17: 
          { return createSymbol(ParserConstants4.T_TIMES);
          }
        case 307: break;
        case 150: 
          { return createSymbol(ParserConstants4.T_ENDDECLARE);
          }
        case 308: break;
        case 120: 
          { return createSymbol(ParserConstants4.T_PRINT);
          }
        case 309: break;
        case 92: 
          { if (asp_tags || yytext().charAt(0)!='%') { /* asp comment? */
   		handleCommentEnd();
        yypushback(yylength());
		yybegin(ST_IN_SCRIPTING);
		//return T_COMMENT;
	} else {
		appendTextToComment();
	}
          }
        case 310: break;
        case 135: 
          { return createSymbol(ParserConstants4.T_DEFAULT);
          }
        case 311: break;
        case 7: 
          { 
          }
        case 312: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {     return createSymbol(sym.EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

