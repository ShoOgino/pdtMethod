  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public org.eclipse.php.internal.core.phpModel.javacup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
          }
          break;
        default:
          yy_r = false;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      if (yy_markedPos_l > yy_startRead) {
        switch (yy_buffer_l[yy_markedPos_l-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yy_atBOL = true;
          break;
        case '\r': 
          if (yy_markedPos_l < yy_endRead_l)
            yy_atBOL = yy_buffer_l[yy_markedPos_l] != '\n';
          else if (yy_atEOF)
            yy_atBOL = false;
          else {
            boolean eof = yy_refill();
            yy_markedPos_l = yy_markedPos;
            yy_buffer_l = yy_buffer;
            if (eof) 
              yy_atBOL = false;
            else 
              yy_atBOL = yy_buffer_l[yy_markedPos_l] != '\n';
          }
          break;
        default:
          yy_atBOL = false;
        }
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      if (yy_atBOL)
        yy_state = YY_LEXSTATE[yy_lexical_state+1];
      else
        yy_state = YY_LEXSTATE[yy_lexical_state];


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 72: 
          { return createSymbol(ParserConstants4.T_DOLLAR); }
        case 508: break;
        case 49: 
          { return createSymbol(ParserConstants4.T_TIMES); }
        case 509: break;
        case 46: 
          { return createSymbol(ParserConstants4.T_EQUAL); }
        case 510: break;
        case 39: 
          { return createSymbol(ParserConstants4.T_MINUS); }
        case 511: break;
        case 16: 
          { return createSymbol(ParserConstants4.T_NEKUDA); }
        case 512: break;
        case 56: 
          { return createSymbol(ParserConstants4.T_COMMA); }
        case 513: break;
        case 59: 
          { return createSymbol(ParserConstants4.T_TILDA); }
        case 514: break;
        case 60: 
          { return createSymbol(ParserConstants4.T_DOLLAR); }
        case 515: break;
        case 47: 
          { return createSymbol(ParserConstants4.T_NOT); }
        case 516: break;
        case 41: 
          { return createSymbol(ParserConstants4.T_NEKUDOTAIM); }
        case 517: break;
        case 18: 
          { return createSymbol(ParserConstants4.T_PLUS); }
        case 518: break;
        case 50: 
          { return createSymbol(ParserConstants4.T_DIV); }
        case 519: break;
        case 52: 
          { return createSymbol(ParserConstants4.T_REFERENCE); }
        case 520: break;
        case 54: 
          { return createSymbol(ParserConstants4.T_KOVA); }
        case 521: break;
        case 55: 
          { return createSymbol(ParserConstants4.T_SEMICOLON); }
        case 522: break;
        case 57: 
          { return createSymbol(ParserConstants4.T_OPEN_RECT); }
        case 523: break;
        case 58: 
          { return createSymbol(ParserConstants4.T_CLOSE_RECT); }
        case 524: break;
        case 61: 
          { return createSymbol(ParserConstants4.T_QUESTION_MARK); }
        case 525: break;
        case 45: 
          { return createSymbol(ParserConstants4.T_CLOSE_PARENTHESE); }
        case 526: break;
        case 43: 
          { return createSymbol(ParserConstants4.T_OPEN_PARENTHESE); }
        case 527: break;
        case 48: 
          { return createSymbol(ParserConstants4.T_RGREATER); }
        case 528: break;
        case 40: 
          { return createSymbol(ParserConstants4.T_LGREATER); }
        case 529: break;
        case 51: 
          { return createSymbol(ParserConstants4.T_PRECENT); }
        case 530: break;
        case 53: 
          { return createSymbol(ParserConstants4.T_OR); }
        case 531: break;
        case 62: 
          { return createSymbol(ParserConstants4.T_AT); }
        case 532: break;
        case 74: 
          { return createSymbol(ParserConstants4.T_CURLY_CLOSE);  }
        case 533: break;
        case 73: 
          { return createSymbol(ParserConstants4.T_CURLY_OPEN);  }
        case 534: break;
        case 191: 
          { 
    if (yylength() == 2) {
        yypushback(1);
    }
    return createSymbol(ParserConstants4.T_CHARACTER);
 }
        case 535: break;
        case 68: 
        case 70: 
        case 271: 
          {  /* treat numbers (almost) as strings inside encapsulated strings */
    return createSymbol(ParserConstants4.T_NUM_STRING);
 }
        case 536: break;
        case 486: 
          {    
	return createSymbol(ParserConstants4.T_OLD_FUNCTION);
 }
        case 537: break;
        case 100: 
        case 101: 
          { 
appendTextToComment();
//	yymore();
 }
        case 538: break;
        case 93: 
          { 
appendTextToComment();
//	yymore();
 }
        case 539: break;
        case 91: 
          { 
    popState();
    pushState(ST_IN_SCRIPTING);
    return createFullSymbol(ParserConstants4.T_STRING_VARNAME);
 }
        case 540: break;
        case 84: 
          { 
    return createSymbol(ParserConstants4.T_ENCAPSED_AND_WHITESPACE);
 }
        case 541: break;
        case 81: 
          { 
    return createSymbol(ParserConstants4.T_ENCAPSED_AND_WHITESPACE);
 }
        case 542: break;
        case 78: 
          { 
    return createSymbol(ParserConstants4.T_ENCAPSED_AND_WHITESPACE);
 }
        case 543: break;
        case 77: 
          { 
    return createSymbol(ParserConstants4.T_ENCAPSED_AND_WHITESPACE);
 }
        case 544: break;
        case 69: 
        case 71: 
        case 85: 
          { 
    return createSymbol(ParserConstants4.T_ENCAPSED_AND_WHITESPACE);
 }
        case 545: break;
        case 152: 
          { 
	return createSymbol(ParserConstants4.T_PAAMAYIM_NEKUDOTAYIM);
 }
        case 546: break;
        case 431: 
          { 
	return createSymbol(ParserConstants4.T_REQUIRE);
 }
        case 547: break;
        case 428: 
          { 
	return createSymbol(ParserConstants4.T_FOREACH);
 }
        case 548: break;
        case 422: 
          { 
	return createSymbol(ParserConstants4.T_DECLARE);
 }
        case 549: break;
        case 421: 
          { 
	return createSymbol(ParserConstants4.T_DEFAULT);
 }
        case 550: break;
        case 420: 
          { 
	return createSymbol(ParserConstants4.T_INCLUDE);
 }
        case 551: break;
        case 415: 
          { 
	return createSymbol(ParserConstants4.T_EXTENDS);
 }
        case 552: break;
        case 411: 
          { 
	return createSymbol(ParserConstants4.T_GLOBAL);
 }
        case 553: break;
        case 151: 
          { 
	return createSymbol(ParserConstants4.T_IS_GREATER_OR_EQUAL);
 }
        case 554: break;
        case 169: 
          { 
	return createSymbol(ParserConstants4.T_IS_SMALLER_OR_EQUAL);
 }
        case 555: break;
        case 195: 
        case 272: 
          { 
    return createSymbol(ParserConstants4.T_CHARACTER);
 }
        case 556: break;
        case 197: 
          { 
    return createSymbol(ParserConstants4.T_CHARACTER);
 }
        case 557: break;
        case 273: 
          { 
    return createSymbol(ParserConstants4.T_CHARACTER);
 }
        case 558: break;
        case 380: 
          { 
	return createSymbol(ParserConstants4.T_ELSEIF);
 }
        case 559: break;
        case 382: 
          { 
	return createSymbol(ParserConstants4.T_ENDFOR);
 }
        case 560: break;
        case 397: 
          { 
	return createSymbol(ParserConstants4.T_STATIC);
 }
        case 561: break;
        case 398: 
          { 
	return createSymbol(ParserConstants4.T_SWITCH);
 }
        case 562: break;
        case 399: 
          { 
	return createSymbol(ParserConstants4.T_RETURN);
 }
        case 563: break;
        case 489: 
          { 
    return createFullSymbol(ParserConstants4.T_VAR_COMMENT);
 }
        case 564: break;
        case 471: 
          { 
	return createSymbol(ParserConstants4.T_ENDFOREACH);
 }
        case 565: break;
        case 470: 
          { 
	return createSymbol(ParserConstants4.T_ENDDECLARE);
 }
        case 566: break;
        case 466: 
          { 
    return createSymbol(ParserConstants4.T_CLASS_C);
 }
        case 567: break;
        case 455: 
          { 
	return createSymbol(ParserConstants4.T_STRING_CAST);
 }
        case 568: break;
        case 454: 
          { 
	return createSymbol(ParserConstants4.T_OBJECT_CAST);
 }
        case 569: break;
        case 437: 
          { 
	return createSymbol(ParserConstants4.T_ARRAY_CAST);
 }
        case 570: break;
        case 435: 
          { 
	return createSymbol(ParserConstants4.T_UNSET_CAST);
 }
        case 571: break;
        case 409: 
          { 
	return createSymbol(ParserConstants4.T_DOUBLE_CAST);
 }
        case 572: break;
        case 149: 
          { 
	return createSymbol(ParserConstants4.T_MINUS_EQUAL);
 }
        case 573: break;
        case 127: 
          { 
	return createSymbol(ParserConstants4.T_LOGICAL_OR);
 }
        case 574: break;
        case 116: 
          { 
	return createSymbol(ParserConstants4.T_PLUS_EQUAL);
 }
        case 575: break;
        case 63: 
          { 
    pushState(ST_IN_SCRIPTING);
    return createSymbol(ParserConstants4.T_CURLY_OPEN);

 }
        case 576: break;
        case 178: 
          { 
	return createSymbol(ParserConstants4.T_BOOLEAN_AND);
 }
        case 577: break;
        case 180: 
          { 
	return createSymbol(ParserConstants4.T_BOOLEAN_OR);
 }
        case 578: break;
        case 219: 
          { 
	return createSymbol(ParserConstants4.T_LOGICAL_XOR);
 }
        case 579: break;
        case 225: 
          { 
	return createSymbol(ParserConstants4.T_EXIT);
 }
        case 580: break;
        case 244: 
          { 
	return createSymbol(ParserConstants4.T_LOGICAL_AND);
 }
        case 581: break;
        case 277: 
          { 
	return createSymbol(ParserConstants4.T_ELSE);
 }
        case 582: break;
        case 283: 
          { 
	return createSymbol(ParserConstants4.T_ECHO);
 }
        case 583: break;
        case 284: 
          { 
	return createSymbol(ParserConstants4.T_EVAL);
 }
        case 584: break;
        case 293: 
          { 
	return createSymbol(ParserConstants4.T_LIST);
 }
        case 585: break;
        case 304: 
          { 
	return createSymbol(ParserConstants4.T_CASE);
 }
        case 586: break;
        case 330: 
          { 
	return createSymbol(ParserConstants4.T_ENDIF);
 }
        case 587: break;
        case 335: 
          { 
	return createSymbol(ParserConstants4.T_EMPTY);
 }
        case 588: break;
        case 336: 
          { 
	return createSymbol(ParserConstants4.T_BREAK);
 }
        case 589: break;
        case 338: 
          { 
	return createSymbol(ParserConstants4.T_ISSET);
 }
        case 590: break;
        case 349: 
          { 
	return createSymbol(ParserConstants4.T_UNSET);
 }
        case 591: break;
        case 351: 
          { 
	return createSymbol(ParserConstants4.T_CONST);
 }
        case 592: break;
        case 352: 
          { 
	return createSymbol(ParserConstants4.T_CLASS);
 }
        case 593: break;
        case 357: 
          { 
	return createSymbol(ParserConstants4.T_WHILE);
 }
        case 594: break;
        case 358: 
          { 
	return createSymbol(ParserConstants4.T_ARRAY);
 }
        case 595: break;
        case 359: 
          { 
	return createSymbol(ParserConstants4.T_PRINT);
 }
        case 596: break;
        case 95: 
          { 
appendTextToComment();
 }
        case 597: break;
        case 94: 
        case 96: 
          { 
appendTextToComment();
 }
        case 598: break;
        case 92: 
          { 
appendTextToComment();
 }
        case 599: break;
        case 183: 
        case 269: 
        case 270: 
          { 
    handlePHPEnd();
    yybegin(YYINITIAL);
    return createSymbol(ParserConstants4.T_SEMICOLON);  /* implicit ';' at php-end tag */
 }
        case 600: break;
        case 148: 
        case 190: 
          { 
    pushState(ST_LOOKING_FOR_PROPERTY);
    return createSymbol(ParserConstants4.T_OBJECT_OPERATOR);
 }
        case 601: break;
        case 75: 
          { 
    yybegin(ST_IN_SCRIPTING);
    return createSymbol(ParserConstants4.T_QUATE);
 }
        case 602: break;
        case 14: 
        case 76: 
        case 80: 
        case 82: 
        case 86: 
          { 
	// do nothing
 }
        case 603: break;
        case 65: 
          { 
    yybegin(ST_DOUBLE_QUOTES);
    return createSymbol(ParserConstants4.T_QUATE);
 }
        case 604: break;
        case 185: 
          { 
    return createFullSymbol(ParserConstants4.T_CONSTANT_ENCAPSED_STRING);
 }
        case 605: break;
        case 260: 
          { 
	return createSymbol(ParserConstants4.T_IS_NOT_IDENTICAL);
 }
        case 606: break;
        case 89: 
          { 
    popState();
    return createFullSymbol(ParserConstants4.T_STRING);
 }
        case 607: break;
        case 97: 
        case 98: 
        case 99: 
          { 
	String yytext = yytext();
	switch (yytext.charAt(yytext.length() - 1)) {
		case '?':
		case '%':
		case '>':
			yypushback(1);
			appendTextToComment();
			break;
		default:
			handleCommentEnd();
			yybegin(ST_IN_SCRIPTING);
	}
//	yymore();
 }
        case 608: break;
        case 104: 
        case 504: 
          { 
    if (short_tags_allowed || yylength()>2) { /* yyleng>2 means it's not <? but <script> */
        handlePHPStart();
        yybegin(ST_IN_SCRIPTING);
        //return T_OPEN_TAG;
    } else {
        return createSymbol(ParserConstants4.T_INLINE_HTML);
    }
 }
        case 609: break;
        case 64: 
          { 
	/* This is a temporary fix which is dependant on flex and it's implementation */
    if (!stack.isEmpty()) {
        popState();
    }
    return createSymbol(ParserConstants4.T_CURLY_CLOSE);
 }
        case 610: break;
        case 88: 
          { 
    yypushback(yylength());
    popState();
 }
        case 611: break;
        case 199: 
        case 200: 
          { 
    String text = yytext();
    int length = text.length();
    text = text.trim();
    boolean foundNP = false;
    if (text.endsWith(";")) {
        text = text.substring(0, text.length() - 1);
        foundNP = true;
    }
    if (text.equals(heredoc)) {
        if (foundNP) {
            yypushback(length - text.length());
        }
        heredoc = null;
        yybegin(ST_IN_SCRIPTING);
        return createSymbol(ParserConstants4.T_END_HEREDOC);
    } else {
        return createFullSymbol(ParserConstants4.T_STRING);
    }
 }
        case 612: break;
        case 462: 
          { 
	return createSymbol(ParserConstants4.T_ENDSWITCH);
 }
        case 613: break;
        case 452: 
          { 
	return createSymbol(ParserConstants4.T_CONTINUE);
 }
        case 614: break;
        case 451: 
          { 
	return createSymbol(ParserConstants4.T_FUNCTION);
 }
        case 615: break;
        case 444: 
          { 
	return createSymbol(ParserConstants4.T_ENDWHILE);
 }
        case 616: break;
        case 403: 
          { 
	return createSymbol(ParserConstants4.T_BOOL_CAST);
 }
        case 617: break;
        case 79: 
          { 
    yybegin(ST_IN_SCRIPTING);
    return createSymbol(ParserConstants4.T_SINGLE_QUATE);
 }
        case 618: break;
        case 12: 
        case 13: 
        case 105: 
          { 
    return createSymbol(ParserConstants4.T_INLINE_HTML);
 }
        case 619: break;
        case 66: 
          { 
    yybegin(ST_SINGLE_QUOTE);
    return createSymbol(ParserConstants4.T_SINGLE_QUATE);
 }
        case 620: break;
        case 67: 
          { 
    yybegin(ST_BACKQUOTE);
    return createSymbol(ParserConstants4.T_BACKQUATE);
 }
        case 621: break;
        case 166: 
          { 
	return createSymbol(ParserConstants4.T_IS_EQUAL);
 }
        case 622: break;
        case 172: 
          { 
	return createSymbol(ParserConstants4.T_MUL_EQUAL);
 }
        case 623: break;
        case 173: 
          { 
	return createSymbol(ParserConstants4.T_DIV_EQUAL);
 }
        case 624: break;
        case 176: 
          { 
	return createSymbol(ParserConstants4.T_MOD_EQUAL);
 }
        case 625: break;
        case 177: 
          { 
	return createSymbol(ParserConstants4.T_AND_EQUAL);
 }
        case 626: break;
        case 179: 
          { 
	return createSymbol(ParserConstants4.T_OR_EQUAL);
 }
        case 627: break;
        case 181: 
          { 
	return createSymbol(ParserConstants4.T_XOR_EQUAL);
 }
        case 628: break;
        case 247: 
          { 
	return createSymbol(ParserConstants4.T_SR_EQUAL);
 }
        case 629: break;
        case 261: 
          { 
	return createSymbol(ParserConstants4.T_SL_EQUAL);
 }
        case 630: break;
        case 363: 
          { 
	return createSymbol(ParserConstants4.T_INT_CAST);
 }
        case 631: break;
        case 83: 
          { 
    yybegin(ST_IN_SCRIPTING);
    return createSymbol(ParserConstants4.T_BACKQUATE);
 }
        case 632: break;
        case 487: 
          { 
    return createSymbol(ParserConstants4.T_FUNC_C);
 }
        case 633: break;
        case 147: 
          { 
	return createSymbol(ParserConstants4.T_DEC);
 }
        case 634: break;
        case 144: 
          { 
	return createSymbol(ParserConstants4.T_AS);
 }
        case 635: break;
        case 125: 
          { 
	return createSymbol(ParserConstants4.T_DO);
 }
        case 636: break;
        case 120: 
          { 
	return createSymbol(ParserConstants4.T_IF);
 }
        case 637: break;
        case 115: 
          { 
	return createSymbol(ParserConstants4.T_INC);
 }
        case 638: break;
        case 90: 
          { 
    yypushback(yylength());
    popState();
    pushState(ST_IN_SCRIPTING);
 }
        case 639: break;
        case 150: 
          { 
	return createSymbol(ParserConstants4.T_SR);
 }
        case 640: break;
        case 170: 
          { 
	return createSymbol(ParserConstants4.T_SL);
 }
        case 641: break;
        case 192: 
          { 
    pushState(ST_LOOKING_FOR_VARNAME);
    return createSymbol(ParserConstants4.T_DOLLAR_OPEN_CURLY_BRACES);
 }
        case 642: break;
        case 205: 
          { 
    if (asp_tags || yytext().charAt(0)!='%') { /* asp comment? */
   		handleCommentEnd();
        yypushback(yylength());
		yybegin(ST_IN_SCRIPTING);
		//return T_COMMENT;
	} else {
		appendTextToComment();
	}
 }
        case 643: break;
        case 231: 
          { 
	return createSymbol(ParserConstants4.T_FOR);
 }
        case 644: break;
        case 234: 
          { 
	return createSymbol(ParserConstants4.T_USE);
 }
        case 645: break;
        case 235: 
          { 
	return createSymbol(ParserConstants4.T_NEW);
 }
        case 646: break;
        case 248: 
          { 
	return createSymbol(ParserConstants4.T_VAR);
 }
        case 647: break;
        case 376: 
        case 377: 
          { 
    handlePHPStart();
    yybegin(ST_IN_SCRIPTING);
	//return T_OPEN_TAG;
 }
        case 648: break;
        case 103: 
          { 
    if (asp_tags) {
        handlePHPStart();
        yybegin(ST_IN_SCRIPTING);
		//return T_OPEN_TAG;
    } else {
        return createSymbol(ParserConstants4.T_INLINE_HTML);
    }
 }
        case 649: break;
        case 24: 
          { 
	handleCommentStart();
	yybegin(ST_ONE_LINE_COMMENT);
//	yymore();
 }
        case 650: break;
        case 448: 
          { 
    return createSymbol(ParserConstants4.T_FILE);
 }
        case 651: break;
        case 447: 
          { 
    return createSymbol(ParserConstants4.T_LINE);
 }
        case 652: break;
        case 106: 
        case 209: 
          { 
    return createFullSymbol(ParserConstants4.T_DNUMBER);
 }
        case 653: break;
        case 15: 
        case 19: 
          { 
    return createFullSymbol(ParserConstants4.T_DNUMBER);
 }
        case 654: break;
        case 182: 
          { 
    return createFullSymbol(ParserConstants4.T_VARIABLE);
 }
        case 655: break;
        case 218: 
          { 
    return createFullSymbol(ParserConstants4.T_DNUMBER);
 }
        case 656: break;
        case 204: 
          { 
	handleCommentEnd();
	yybegin(ST_IN_SCRIPTING);
	//return T_COMMENT;
 }
        case 657: break;
        case 175: 
        case 267: 
        case 268: 
          { 
    if (asp_tags) {
        handlePHPEnd();
        yybegin(YYINITIAL);
        return createSymbol(ParserConstants4.T_SEMICOLON);  /* implicit ';' at php-end tag */
    } else {
        return createSymbol(ParserConstants4.T_INLINE_HTML);
    }
 }
        case 658: break;
        case 488: 
          { 
	return createSymbol(ParserConstants4.T_REQUIRE_ONCE);
 }
        case 659: break;
        case 485: 
          { 
	return createSymbol(ParserConstants4.T_INCLUDE_ONCE);
 }
        case 660: break;
        case 108: 
          { 
	return createSymbol(ParserConstants4.T_CONCAT_EQUAL);
 }
        case 661: break;
        case 165: 
          { 
	return createSymbol(ParserConstants4.T_DOUBLE_ARROW);
 }
        case 662: break;
        case 167: 
        case 168: 
          { 
	return createSymbol(ParserConstants4.T_IS_NOT_EQUAL);
 }
        case 663: break;
        case 259: 
          { 
	return createSymbol(ParserConstants4.T_IS_IDENTICAL);
 }
        case 664: break;
        case 194: 
        case 196: 
          { 
    switch (yytext().charAt(1)) {
        case 'n':
            break;
        case 't':
            break;
        case 'r':
            break;
        case '\\':
            break;
        case '$':
            break;
        case '{':
            break;
        default:
            return createSymbol(ParserConstants4.T_BAD_CHARACTER);
    }
    return createSymbol(ParserConstants4.T_CHARACTER);
 }
        case 665: break;
        case 87: 
          { 
    return createFullSymbol(ParserConstants4.T_STRING);
 }
        case 666: break;
        case 17: 
        case 20: 
        case 21: 
        case 22: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 42: 
        case 44: 
        case 109: 
        case 110: 
        case 111: 
        case 112: 
        case 113: 
        case 114: 
        case 118: 
        case 119: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 126: 
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
        case 145: 
        case 146: 
        case 153: 
        case 164: 
        case 211: 
        case 212: 
        case 213: 
        case 214: 
        case 215: 
        case 216: 
        case 217: 
        case 220: 
        case 221: 
        case 222: 
        case 223: 
        case 224: 
        case 226: 
        case 227: 
        case 228: 
        case 229: 
        case 230: 
        case 232: 
        case 233: 
        case 236: 
        case 237: 
        case 238: 
        case 239: 
        case 240: 
        case 241: 
        case 242: 
        case 243: 
        case 245: 
        case 246: 
        case 258: 
        case 276: 
        case 278: 
        case 279: 
        case 280: 
        case 281: 
        case 282: 
        case 285: 
        case 286: 
        case 287: 
        case 288: 
        case 289: 
        case 290: 
        case 291: 
        case 292: 
        case 294: 
        case 295: 
        case 296: 
        case 297: 
        case 298: 
        case 299: 
        case 300: 
        case 301: 
        case 302: 
        case 303: 
        case 305: 
        case 306: 
        case 307: 
        case 308: 
        case 309: 
        case 310: 
        case 311: 
        case 321: 
        case 328: 
        case 329: 
        case 331: 
        case 332: 
        case 333: 
        case 334: 
        case 337: 
        case 339: 
        case 340: 
        case 341: 
        case 342: 
        case 343: 
        case 344: 
        case 345: 
        case 346: 
        case 347: 
        case 348: 
        case 350: 
        case 353: 
        case 354: 
        case 355: 
        case 356: 
        case 371: 
        case 379: 
        case 381: 
        case 383: 
        case 384: 
        case 385: 
        case 387: 
        case 388: 
        case 389: 
        case 390: 
        case 391: 
        case 392: 
        case 393: 
        case 394: 
        case 395: 
        case 396: 
        case 400: 
        case 416: 
        case 417: 
        case 418: 
        case 419: 
        case 423: 
        case 424: 
        case 425: 
        case 426: 
        case 427: 
        case 429: 
        case 430: 
        case 441: 
        case 442: 
        case 443: 
        case 445: 
        case 446: 
        case 449: 
        case 450: 
        case 453: 
        case 460: 
        case 461: 
        case 463: 
        case 464: 
        case 465: 
        case 467: 
        case 472: 
        case 473: 
        case 474: 
        case 475: 
        case 478: 
        case 479: 
        case 480: 
        case 481: 
          { 
    return createFullSymbol(ParserConstants4.T_STRING);
 }
        case 667: break;
        case 372: 
        case 373: 
          { 
    heredoc = yytext().substring(3).trim();    // for '<<<'
    yybegin(ST_HEREDOC);
    return createSymbol(ParserConstants4.T_START_HEREDOC);
 }
        case 668: break;
        case 174: 
          { 
	handleCommentStart();
    yybegin(ST_COMMENT);
 }
        case 669: break;
        case 193: 
          { 
    pushState(ST_IN_SCRIPTING);
    yypushback(yylength()-1);
    return createSymbol(ParserConstants4.T_CURLY_OPEN_WITH_DOLAR);
 }
        case 670: break;
        case 202: 
          { 
	handleCommentEnd();
    yybegin(ST_IN_SCRIPTING);
 }
        case 671: break;
        case 203: 
          { 
     handlePHPDocEnd();
     yybegin(ST_IN_SCRIPTING);
 }
        case 672: break;
        case 386: 
          { 
    /* not a keyword, hust for recognize constans.*/
    return createFullSymbol(ParserConstants4.T_DEFINE);
 }
        case 673: break;
        case 23: 
          { 
 }
        case 674: break;
        case 206: 
          { 
    String text = yytext();
    if ((text.charAt(1)=='%' && asp_tags)
        || (text.charAt(1)=='?' && short_tags_allowed)) {
        handlePHPStart();
        yybegin(ST_IN_SCRIPTING);
        //return T_OPEN_TAG_WITH_ECHO;
    } else {
        return createSymbol(ParserConstants4.T_INLINE_HTML);
    }
 }
        case 675: break;
        case 265: 
          { 
handlePHPDocStart();
yybegin(ST_DOCBLOCK);
 }
        case 676: break;
        case 324: 
          { 
 }
        case 677: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              {     return createSymbol(sym.EOF);
 }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }

