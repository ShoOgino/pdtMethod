		private boolean sameMatchLenTest(String currName) {
			int matchLen = this.bestMatchLen;
			// known: bestName and currName differ from newName at position
			// 'matchLen'
			// currName and bestName don't have to differ at position 'matchLen'

			// determine the order and return true if currName is closer to
			// newName
			char newChar = getCharAt(this.newName, matchLen);
			char currChar = getCharAt(currName, matchLen);
			char bestChar = getCharAt(this.bestName, matchLen);

			if (newChar < currChar) {
				if (bestChar < newChar) { // b < n < c
					return (currChar - newChar) < (newChar - bestChar); // -> (c
					// - n)
					// < (n
					// - b)
				} else { // n < b && n < c
					if (currChar == bestChar) { // longer match between curr and
						// best
						return false; // keep curr and best together, new should
						// be before both
					} else {
						return currChar < bestChar; // -> (c < b)
					}
				}
			} else {
				if (bestChar > newChar) { // c < n < b
					return (newChar - currChar) < (bestChar - newChar); // -> (n
					// - c)
					// < (b
					// - n)
				} else { // n > b && n > c
					if (currChar == bestChar) { // longer match between curr and
						// best
						return true; // keep curr and best together, new should
						// be ahead of both
					} else {
						return currChar > bestChar; // -> (c > b)
					}
				}
			}
		}

