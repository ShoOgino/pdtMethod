		public TypeReferenceInfo(TypeReference typeReference, boolean isUseStatement) {
			this.typeReference = typeReference;
			this.isUseStatement = isUseStatement;
			FullyQualifiedReference fullTypeReference = null;
			if (typeReference instanceof FullyQualifiedReference) {
				fullTypeReference = (FullyQualifiedReference) typeReference;
				if (fullTypeReference.getNamespace() != null) {
					hasNamespace = true;
					namespaceName = fullTypeReference.getNamespace().getName();
					if (usePartInfo.get(namespaceName) != null) {
						namespaceName = usePartInfo.get(namespaceName).getFullyQualifiedName();
					}
				}
			}

			if (fullTypeReference != null && hasNamespace) {
				isGlobal = fullTypeReference.getNamespace().isGlobal();
				typeName = fullTypeReference.getFullyQualifiedName();
			} else {
				typeName = typeReference.getName();
			}

			if (fullTypeReference != null && isGlobal) {
				fullyQualifiedName = fullTypeReference.getFullyQualifiedName();
			} else if (hasNamespace) {
				fullyQualifiedName = namespaceName + NamespaceReference.NAMESPACE_DELIMITER + typeReference.getName();
			} else {
				fullyQualifiedName = typeName;
			}
			if (!isUseStatement && !fullyQualifiedName.startsWith(NamespaceReference.NAMESPACE_DELIMITER)) {
				String key = getFirstSegmentOfTypeName(fullyQualifiedName).toLowerCase();
				if (usePartInfo.containsKey(key)) {
					fullyQualifiedName = usePartInfo.get(key).getFullyQualifiedName();
				} else if (currentNamespace != null)
					fullyQualifiedName = currentNamespace.getName() + NamespaceReference.NAMESPACE_DELIMITER
							+ fullyQualifiedName;
			}
			if (!fullyQualifiedName.startsWith(NamespaceReference.NAMESPACE_DELIMITER))
				fullyQualifiedName = NamespaceReference.NAMESPACE_DELIMITER + fullyQualifiedName;
		}

