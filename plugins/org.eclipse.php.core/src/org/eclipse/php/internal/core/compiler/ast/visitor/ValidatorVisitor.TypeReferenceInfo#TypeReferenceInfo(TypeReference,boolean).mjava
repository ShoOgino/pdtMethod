		@SuppressWarnings("null")
		public TypeReferenceInfo(TypeReference typeReference, boolean isUseStatement) {
			this.typeReference = typeReference;
			this.isUseStatement = isUseStatement;
			// NB: typeReference.getName() returns directly a fqn *only* when
			// typeReference is *not* an instance of FullyQualifiedReference:
			this.typeName = typeReference.getName();

			FullyQualifiedReference fullTypeReference = null;
			if (typeReference instanceof FullyQualifiedReference) {
				fullTypeReference = (FullyQualifiedReference) typeReference;
				if (fullTypeReference.getNamespace() != null) {
					if (!fullTypeReference.getNamespace().isLocal()) {
						hasNamespace = true;

						// NB: isGlobal() will always return false
						// for NamespaceReferences used inside any kind of use
						// statement declaration
						isGlobal = fullTypeReference.getNamespace().isGlobal();
						namespaceName = fullTypeReference.getNamespace().getName();
						typeName = fullTypeReference.getFullyQualifiedName();

						// for use statement, no need to lookup the use
						// statement to compute namespace name
						if (!isUseStatement && !isGlobal) {
							// Bug 517368 - Use statement doesn't take care
							// Annotation / Alias
							// https://bugs.eclipse.org/bugs/show_bug.cgi?id=517368
							// use first segment of namespace to lookup the use
							// statements
							String[] segments = namespaceName.split("\\\\", 2); //$NON-NLS-1$
							UsePartInfo info = usePartInfo.get(segments[0].toLowerCase());
							if (info != null) {
								String restSegs = ""; //$NON-NLS-1$
								if (segments.length > 1) {
									restSegs = segments[1];
								}
								namespaceName = PHPModelUtils.concatFullyQualifiedNames(info.getFullyQualifiedName(),
										restSegs);
							}
						}
						if (isUseStatement) {
							isGlobal = true;
							namespaceName = addLeadingSeparator(namespaceName);
						}
					}
				} else {
					if (isUseStatement) {
						isGlobal = true;
					}
				}
			} else {
				isGlobal = typeName.startsWith(NamespaceReference.NAMESPACE_DELIMITER);
			}

			if (isGlobal) {
				fullyQualifiedName = addLeadingSeparator(typeName);
			} else if (hasNamespace /* && !isGlobal */) {
				fullyQualifiedName = PHPModelUtils.concatFullyQualifiedNames(namespaceName, typeReference.getName());
			} else {
				fullyQualifiedName = typeName;
			}
			if (!fullyQualifiedName.startsWith(NamespaceReference.NAMESPACE_DELIMITER)) {
				String key = getFirstSegmentOfTypeName(fullyQualifiedName).toLowerCase();
				if (usePartInfo.containsKey(key)) {
					fullyQualifiedName = usePartInfo.get(key).getFullyQualifiedName();
				} else if (currentNamespace != null && !currentNamespace.isGlobal()) {
					fullyQualifiedName = PHPModelUtils.concatFullyQualifiedNames(currentNamespace.getName(),
							fullyQualifiedName);
				}
				fullyQualifiedName = addLeadingSeparator(fullyQualifiedName);
			}
		}

