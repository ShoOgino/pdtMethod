	/**
	 * Sort the blocks of use statements from a document
	 */
	public static void sortUseStatements(ModuleDeclaration moduleDeclaration, IDocument doc) {
		UseStatement[] statements = ASTUtils.getUseStatements(moduleDeclaration, doc.getLength());

		int start = 0;
		Vector<ReplaceAction> queue = new Vector<>();

		while (start < statements.length) {
			int last_item = statements.length - 1;

			for (int i = start; i < statements.length - 1; i++) {
				try {
					if (doc.getLineOfOffset(
							statements[i + 1].sourceStart()) > doc.getLineOfOffset(statements[i].sourceStart()) + 1) {
						last_item = i;
						break;
					}
				} catch (BadLocationException e) {
					last_item = i;
					break;
				}
			}

			String indent = ""; //$NON-NLS-1$
			try {
				int lineOffset = doc.getLineOffset(doc.getLineOfOffset(statements[start].sourceStart()));

				indent = doc.get(lineOffset, statements[start].sourceStart() - lineOffset);
			} catch (BadLocationException e1) {
				e1.printStackTrace();
			}

			queue.add(new ReplaceAction(
					filterAndSort(Arrays.copyOfRange(statements, start, last_item + 1), doc, moduleDeclaration),
					statements[start].sourceStart(), statements[last_item].sourceEnd(), indent));

			start = last_item + 1; // start at the next one
		}

		int offset = 0;
		for (ReplaceAction item : queue) {
			List<UseStatement> sorted = item.statements;
			int length = item.end - item.start;

			String newNamespaces = createStringFromUseStatement(sorted, item.indent);
			try {
				doc.replace(item.start - offset, length, newNamespaces);
			} catch (BadLocationException e) {
			}

			offset += length - newNamespaces.length();
		}
	}

