	private void initRelativeNamespace(ISourceModule sourceModule, int offset, String lastWord) {
		String nsName = lastWord;
		String fullName = lastWord;
		nsPrefix = null;
		if (lastWord.lastIndexOf(NamespaceReference.NAMESPACE_SEPARATOR) > 0) {
			nsPrefix = lastWord.substring(0, lastWord.lastIndexOf(NamespaceReference.NAMESPACE_SEPARATOR));
			nsName = nsName.substring(0, nsName.lastIndexOf(NamespaceReference.NAMESPACE_SEPARATOR) + 1);

			try {
				namespaces = PHPModelUtils.getNamespaceOf(nsName, sourceModule, offset, null, null);
			} catch (ModelException e) {
				if (DLTKCore.DEBUG) {
					e.printStackTrace();
				}
			}
		} else {
			namespaces = PhpModelAccess.NULL_TYPES;
		}
		if (lastWord.startsWith(NamespaceReference.NAMESPACE_DELIMITER)) {
			nsPrefix = null;
		} else {

			currentNS = null;
			try {
				IModelElement enclosingElement = getEnclosingElement();
				if (enclosingElement != null) {
					IType type = (IType) enclosingElement.getAncestor(IModelElement.TYPE);
					if (type != null && type.getParent() instanceof IType) {
						type = (IType) type.getParent();
					}
					if (type != null && (PHPFlags.isNamespace(type.getFlags()))) {
						currentNS = type;
						fullName = NamespaceReference.NAMESPACE_SEPARATOR + currentNS.getElementName()
								+ NamespaceReference.NAMESPACE_SEPARATOR + lastWord;
					} else {

					}
				}
			} catch (ModelException e1) {
				e1.printStackTrace();
			}
			if (currentNS != null) {
				if (nsPrefix == null) {
					nsPrefix = currentNS.getElementName();
				} else {
					nsPrefix = currentNS.getElementName() + NamespaceReference.NAMESPACE_SEPARATOR + nsPrefix;
				}
			}
		}

		IDLTKSearchScope scope = SearchEngine.createSearchScope(sourceModule.getScriptProject());
		if (fullName.startsWith(NamespaceReference.NAMESPACE_DELIMITER)) {
			fullName = fullName.substring(1);
		}
		possibleNamespaces = PhpModelAccess.getDefault().findNamespaces(null, fullName, MatchRule.PREFIX, 0, 0, scope,
				null);
	}

