	@Override
	public IModelElement resolve(int elementType, int flags, int offset, int length, int nameOffset, int nameLength,
			String elementName, String metadata, String doc, String qualifier, String parent,
			ISourceModule sourceModule) {

		int occurrenceCount = 1;
		String metadataToDecode = null;

		if (metadata != null) {
			String[] split = StringUtils.split(metadata, SPLIT_CHAR);
			if (split.length >= 1) {
				try {
					occurrenceCount = Integer.parseInt(split[0]);
				} catch (NumberFormatException e) {
					// should never happen
					Logger.logException(e);
				}
			}
			if (split.length >= 2) {
				metadataToDecode = split[1];
			}
		}

		ModelElement parentElement = (ModelElement) sourceModule;
		if (PHPCoreConstants.FILE_PARENT.equals(parent)) {
			parent = null;
		}
		if (PHPCoreConstants.GLOBAL_NAMESPACE.equals(qualifier)) {
			qualifier = null;
		}
		if (qualifier != null) {
			// namespace:
			parentElement = new IndexType(parentElement, qualifier, Modifiers.AccNameSpace, 0, 0, 0, 0, null, doc,
					occurrenceCount);
		}
		if (parent != null) {
			parentElement = new SourceType(parentElement, parent);
		}

		String[] superClassNames = null;

		switch (elementType) {
		case IModelElement.PACKAGE_DECLARATION:
			if (metadataToDecode != null) {
				superClassNames = StringUtils.split(metadataToDecode, SEPARATOR_CHAR);
			}
			// a namespace cannot have a nested namespace otherwise
			// occurrenceCount will be applied to both!
			assert qualifier == null;
			return new IndexType(parentElement, elementName, flags, offset, length, nameOffset, nameLength,
					superClassNames, doc, occurrenceCount);

		case IModelElement.TYPE:
			if (metadataToDecode != null) {
				superClassNames = StringUtils.split(metadataToDecode, SEPARATOR_CHAR);
			}
			return new IndexType(parentElement, elementName, flags, offset, length, nameOffset, nameLength,
					superClassNames, doc, 1);

		case IModelElement.METHOD:
			String[] parameters = EMPTY;
			String returnType = null;
			if (metadataToDecode != null && metadataToDecode.length() > 1) {
				if (metadataToDecode.charAt(0) == RETURN_TYPE_CHAR) {
					returnType = null;
					metadataToDecode = metadataToDecode.substring(1);
				} else if (metadataToDecode.charAt(metadataToDecode.length() - 1) == RETURN_TYPE_CHAR) {
					returnType = metadataToDecode.substring(0, metadataToDecode.length() - 1);
					metadataToDecode = null;
				} else {
					String[] decoded = StringUtils.split(metadataToDecode, RETURN_TYPE_CHAR);
					if (decoded.length == 2) {
						metadataToDecode = decoded[1];
						returnType = decoded[0];
					}
				}
				if (metadataToDecode != null) {
					parameters = StringUtils.split(metadataToDecode, SEPARATOR_CHAR);
				}
			}
			return new IndexMethod(parentElement, elementName, returnType, flags, offset, length, nameOffset,
					nameLength, parameters, doc, 1);

		case IModelElement.FIELD:
			return new IndexField(parentElement, elementName, flags, offset, length, nameOffset, nameLength, doc, 1);

		case IModelElement.IMPORT_DECLARATION:
			// XXX: replace with import declaration element
			return new IncludeField(parentElement, metadataToDecode);

		default:
			Logger.log(Logger.WARNING,
					PHPElementResolver.class.getName() + ": Unsupported element type (" + elementType + ")"); //$NON-NLS-1$ //$NON-NLS-2$
		}
		return null;
	}

