	public boolean isValid(ISourceModule sourceModule, int offset,
			CompletionRequestor requestor) {
		if (!super.isValid(sourceModule, offset, requestor)) {
			return false;
		}
		String tagName = getTagName();
		if (!getTags().contains(tagName)) {
			return false;
		}
		TextSequence statementText = getStatementText();
		String statementTextString = statementText.toString();
		StringTokenizer st = new StringTokenizer(statementTextString);
		Stack<String> stack = new Stack<String>();
		while (st.hasMoreElements()) {
			stack.add((String) st.nextElement());
		}
		if (!stack.empty()) {
			String lastWord = stack.pop();
			if (lastWord.indexOf(NamespaceReference.NAMESPACE_SEPARATOR) >= 0) {
				if (!stack.empty() && isPrefix(lastWord)) {
					if (lastWord.startsWith("\\")) { //$NON-NLS-1$
						// isGlobal = true;
					}
					if (lastWord.startsWith("\\") //$NON-NLS-1$
							&& lastWord
									.lastIndexOf(NamespaceReference.NAMESPACE_SEPARATOR) == 0) {
						isGlobal = true;
					} else {
						initRelativeNamespace(sourceModule, offset, lastWord);
					}
					lastWord = stack.pop();
					return lastWord.endsWith(tagName);
				}
			} else {
				initRelativeNamespace(sourceModule, offset, lastWord);
				lastWord = stack.pop();
				return lastWord.endsWith(tagName);
			}
		}
		return false;
	}

