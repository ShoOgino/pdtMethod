	/* (non-Javadoc)
	 * @see org.eclipse.jdt.core.dom.ASTVisitor#visit(TypeDeclaration)
	 */
	public boolean visit(TypeDeclaration node) {
		//		if (!hasChildrenChanges(node)) {
		//			return doVisitUnchangedChildren(node);
		//		}
		//		String apiLevel = node.getAST().apiLevel();
		//
		//		int pos = rewriteDocumentation(node, TypeDeclaration.JAVADOC_PROPERTY);
		//
		//		if (apiLevel == PHP4_INTERNAL) {
		//			rewriteModifiers(node, TypeDeclaration.MODIFIERS_PROPERTY, pos);
		//		} else {
		//			rewriteModifiers2(node, TypeDeclaration.MODIFIERS2_PROPERTY, pos);
		//		}
		//
		//		boolean isInterface = ((Boolean) getOriginalValue(node, TypeDeclaration.INTERFACE_PROPERTY)).booleanValue();
		//		// modifiers & class/interface
		//		boolean invertType = isChanged(node, TypeDeclaration.INTERFACE_PROPERTY);
		//		if (invertType) {
		//			try {
		//				Symbol typeToken = isInterface ? SymbolsProvider.getSymbol(SymbolsProvider.INTERFACE_ID, scanner.getPHPVersion()) : SymbolsProvider.getSymbol(SymbolsProvider.CLASS_ID, scanner.getPHPVersion());
		//				getScanner().readToToken(typeToken, node.getStart());
		//
		//				String str = isInterface ? "class" : "interface"; //$NON-NLS-1$ //$NON-NLS-2$
		//				int start = getScanner().getCurrentStartOffset();
		//				int end = getScanner().getCurrentEndOffset();
		//
		//				doTextReplace(start, end - start, str, getEditGroup(node, TypeDeclaration.INTERFACE_PROPERTY));
		//			} catch (CoreException e) {
		//				// ignore
		//			}
		//		}
		//
		//		// name
		//		pos = rewriteRequiredNode(node, TypeDeclaration.NAME_PROPERTY);
		//
		//		if (apiLevel >= AST.JLS3) {
		//			pos = rewriteOptionalTypeParameters(node, TypeDeclaration.TYPE_PARAMETERS_PROPERTY, pos, "", false, true); //$NON-NLS-1$
		//		}
		//
		//		// superclass
		//		if (!isInterface || invertType) {
		//			ChildPropertyDescriptor superClassProperty = (apiLevel == PHP4_INTERNAL) ? TypeDeclaration.SUPERCLASS_PROPERTY : TypeDeclaration.SUPERCLASS_TYPE_PROPERTY;
		//
		//			RewriteEvent superClassEvent = getEvent(node, superClassProperty);
		//
		//			int changeKind = superClassEvent != null ? superClassEvent.getChangeKind() : RewriteEvent.UNCHANGED;
		//			switch (changeKind) {
		//				case RewriteEvent.INSERTED: {
		//					doTextInsert(pos, " extends ", getEditGroup(superClassEvent)); //$NON-NLS-1$
		//					doTextInsert(pos, (ASTNode) superClassEvent.getNewValue(), 0, false, getEditGroup(superClassEvent));
		//					break;
		//				}
		//				case RewriteEvent.REMOVED: {
		//					ASTNode superClass = (ASTNode) superClassEvent.getOriginalValue();
		//					int endPos = getExtendedEnd(superClass);
		//					doTextRemoveAndVisit(pos, endPos - pos, superClass, getEditGroup(superClassEvent));
		//					pos = endPos;
		//					break;
		//				}
		//				case RewriteEvent.REPLACED: {
		//					ASTNode superClass = (ASTNode) superClassEvent.getOriginalValue();
		//					SourceRange range = getExtendedRange(superClass);
		//					int offset = range.getStartPosition();
		//					int length = range.getLength();
		//					doTextRemoveAndVisit(offset, length, superClass, getEditGroup(superClassEvent));
		//					doTextInsert(offset, (ASTNode) superClassEvent.getNewValue(), 0, false, getEditGroup(superClassEvent));
		//					pos = offset + length;
		//					break;
		//				}
		//				case RewriteEvent.UNCHANGED: {
		//					pos = doVisit(node, superClassProperty, pos);
		//				}
		//			}
		//		}
		//		// extended interfaces
		//		ChildListPropertyDescriptor superInterfaceProperty = (apiLevel == PHP4_INTERNAL) ? TypeDeclaration.SUPER_INTERFACES_PROPERTY : TypeDeclaration.SUPER_INTERFACE_TYPES_PROPERTY;
		//
		//		RewriteEvent interfaceEvent = getEvent(node, superInterfaceProperty);
		//		if (interfaceEvent == null || interfaceEvent.getChangeKind() == RewriteEvent.UNCHANGED) {
		//			if (invertType) {
		//				List originalNodes = (List) getOriginalValue(node, superInterfaceProperty);
		//				if (!originalNodes.isEmpty()) {
		//					String keyword = isInterface ? " implements " : " extends "; //$NON-NLS-1$ //$NON-NLS-2$
		//					ASTNode firstNode = (ASTNode) originalNodes.get(0);
		//					doTextReplace(pos, firstNode.getStart() - pos, keyword, getEditGroup(node, TypeDeclaration.INTERFACE_PROPERTY));
		//				}
		//			}
		//			pos = doVisit(node, superInterfaceProperty, pos);
		//		} else {
		//			String keyword = (isInterface == invertType) ? " implements " : " extends "; //$NON-NLS-1$ //$NON-NLS-2$
		//			if (invertType) {
		//				List newNodes = (List) interfaceEvent.getNewValue();
		//				if (!newNodes.isEmpty()) {
		//					List origNodes = (List) interfaceEvent.getOriginalValue();
		//					int firstStart = pos;
		//					if (!origNodes.isEmpty()) {
		//						firstStart = ((ASTNode) origNodes.get(0)).getStart();
		//					}
		//					doTextReplace(pos, firstStart - pos, keyword, getEditGroup(node, TypeDeclaration.INTERFACE_PROPERTY));
		//					keyword = ""; //$NON-NLS-1$
		//					pos = firstStart;
		//				}
		//			}
		//			pos = rewriteNodeList(node, superInterfaceProperty, pos, keyword, ", "); //$NON-NLS-1$
		//		}
		//
		//		// type members
		//		// startPos : find position after left brace of type, be aware that bracket might be missing
		//		int startIndent = getIndent(node.getStart()) + 1;
		//		int startPos = getPosAfterLeftBrace(pos);
		//		rewriteParagraphList(node, TypeDeclaration.BODY_DECLARATIONS_PROPERTY, startPos, startIndent, -1, 2);
		// TODO
		return false;
	}

