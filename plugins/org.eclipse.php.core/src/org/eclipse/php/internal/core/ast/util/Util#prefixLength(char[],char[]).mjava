	/**
	 * Converts the given relative path into a package name. Returns null if the
	 * path is not a valid package name.
	 * 
	 * @param pkgPath
	 *            the package path
	 * @param sourceLevel
	 *            the source level
	 * @param complianceLevel
	 *            the compliance level
	 */
	/*
	 * public static String packageName(IPath pkgPath, String sourceLevel, String
	 * complianceLevel) { StringBuffer pkgName = new
	 * StringBuffer(IPackageFragment.DEFAULT_PACKAGE_NAME); for (int j = 0, max =
	 * pkgPath.segmentCount(); j < max; j++) { String segment = pkgPath.segment(j);
	 * if (!isValidFolderNameForPackage(segment, sourceLevel, complianceLevel)) {
	 * return null; } pkgName.append(segment); if (j < pkgPath.segmentCount() - 1) {
	 * pkgName.append("." ); //$NON-NLS-1$ } } return pkgName.toString(); }
	 */
	/**
	 * Returns the length of the common prefix between s1 and s2.
	 */
	public static int prefixLength(char[] s1, char[] s2) {
		int len = 0;
		int max = Math.min(s1.length, s2.length);
		for (int i = 0; i < max && s1[i] == s2[i]; ++i)
			++len;
		return len;
	}

