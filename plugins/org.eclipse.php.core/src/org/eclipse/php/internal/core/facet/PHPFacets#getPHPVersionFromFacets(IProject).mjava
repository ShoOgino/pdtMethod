	/**
	 * Returns the php version from given faceted project; before invoking this
	 * method ensure that {@link #isFacetedProject(IProject)} return true.
	 * 
	 * @param project
	 *            the php faceted project
	 * @return the php version
	 */
	public static PHPVersion getPHPVersionFromFacets(IProject project) {
		try {
			final IFacetedProject faceted = ProjectFacetsManager.create(project);
			if (faceted != null) {
				IProjectFacet phpFacet = ProjectFacetsManager.getProjectFacet(PHPFacetsConstants.PHP_COMPONENT);
				final IProjectFacetVersion version = faceted.getInstalledVersion(phpFacet);
				if (PHPFacetsConstants.PHP_COMPONENT_VERSION_5.equals(version.getVersionString())) {
					return PHPVersion.PHP5;
				}
				if (PHPFacetsConstants.PHP_COMPONENT_VERSION_5_3.equals(version.getVersionString())) {
					return PHPVersion.PHP5_3;
				}
				if (PHPFacetsConstants.PHP_COMPONENT_VERSION_5_4.equals(version.getVersionString())) {
					return PHPVersion.PHP5_4;
				}
				if (PHPFacetsConstants.PHP_COMPONENT_VERSION_5_5.equals(version.getVersionString())) {
					return PHPVersion.PHP5_5;
				}
				if (PHPFacetsConstants.PHP_COMPONENT_VERSION_5_6.equals(version.getVersionString())) {
					return PHPVersion.PHP5_6;
				}
				if (PHPFacetsConstants.PHP_COMPONENT_VERSION_7.equals(version.getVersionString())) {
					return PHPVersion.PHP7_0;
				}
				if (PHPFacetsConstants.PHP_COMPONENT_VERSION_7_1.equals(version.getVersionString())) {
					return PHPVersion.PHP7_1;
				}
				if (PHPFacetsConstants.PHP_COMPONENT_VERSION_7_2.equals(version.getVersionString())) {
					return PHPVersion.PHP7_2;
				}
				if (PHPFacetsConstants.PHP_COMPONENT_VERSION_7_3.equals(version.getVersionString())) {
					return PHPVersion.PHP7_3;
				}
				if (PHPFacetsConstants.PHP_COMPONENT_VERSION_7_4.equals(version.getVersionString())) {
					return PHPVersion.PHP7_4;
				}
			}
		} catch (CoreException ex) {
			// silently ignore
		}
		// defaults to php 5.4
		return PHPVersion.PHP5_4;
	}

