	/**
	 * Returns the type field element by name
	 * 
	 * @param type
	 *            Type
	 * @param prefix
	 *            Field name or prefix
	 * @param exactName
	 *            Whether the name is exact name or prefix
	 * @throws ModelException
	 */
	public static IField[] getTypeField(IType type, String prefix, boolean exactName) throws ModelException {

		List<IField> result = new LinkedList<IField>();
		if (type.exists()) {
			Set<String> nameSet = new HashSet<String>();
			IField[] fields = type.getFields();
			for (IField field : fields) {
				String elementName = field.getElementName();

				if (elementName.startsWith("$")) { //$NON-NLS-1$
					nameSet.add(elementName.substring(1));
				}
				if (elementName.startsWith("$") && !prefix.startsWith("$")) { //$NON-NLS-1$ //$NON-NLS-2$
					elementName = elementName.substring(1);
				}
				if (exactName && elementName.equalsIgnoreCase(prefix)
						|| !exactName && elementName.toLowerCase().startsWith(prefix.toLowerCase())) {
					result.add(field);
				}
			}
			fields = TraitUtils.getTraitFields(type, nameSet);
			for (IField field : fields) {
				String elementName = field.getElementName();
				if (elementName.startsWith("$") && !prefix.startsWith("$")) { //$NON-NLS-1$ //$NON-NLS-2$
					elementName = elementName.substring(1);
				}
				if (exactName && elementName.equalsIgnoreCase(prefix)
						|| !exactName && elementName.toLowerCase().startsWith(prefix.toLowerCase())) {
					result.add(field);
				}
			}
		}
		return (IField[]) result.toArray(new IField[result.size()]);
	}

