	/**
	 * Returns a {@link Symbol} that holds a sym id that is computed by identifying the
	 * correct id for the given php version.
	 * The given symID should be one of this class ID constants, and the PHP version String
	 * should be one of the {@link AST} defined PHP constants.
	 * The returned Symbol will always be a non-null Symbol. In case the Symbol was not
	 * recognized, an {@link SymbolsProvider#ERROR_SYMBOL} will be returned.
	 * 
	 * @param symID Symbol ID - One of this class constants.
	 * @param phpVersion PHP version String.
	 * @return A Symbol reference for the given id and php version. 
	 */
	public static Symbol getSymbol(int symID, String phpVersion) {
		if (AST.PHP5.equals(phpVersion)) {
			switch (symID) {
				case DOT_SYMBOL_ID:
					return DOT_SYMBOL_PHP5;
				case LESS_ID:
					return LESS_SYMBOL_PHP5;
				case GREATER_ID:
					return GREATER_SYMBOL_PHP5;
				case RBRACKET_ID:
					return RBRACKET_SYMBOL_PHP5;
				case LBRACKET_ID:
					return LBRACKET_SYMBOL_PHP5;
				case RBRACE_ID:
					return RBRACE_SYMBOL_PHP5;
				case LBRACE_ID:
					return LBRACE_SYMBOL_PHP5;
				case RPAREN_ID:
					return RPAREN_SYMBOL_PHP5;
				case LPAREN_ID:
					return LPAREN_SYMBOL_PHP5;
				case INTERFACE_ID:
					return INTERFACE_SYMBOL_PHP5;
				case CLASS_ID:
					return CLASS_SYMBOL_PHP5;
				case RETURN_ID:
					return RETURN_SYMBOL_PHP5;
				case BREAK_ID:
					return BREAK_SYMBOL_PHP5;
				case CONTINUE_ID:
					return CONTINUE_SYMBOL_PHP5;
				case DO_ID:
					return DO_SYMBOL_PHP5;
				case WHILE_ID:
					return WHILE_SYMBOL_PHP5;
				case SEMICOLON_ID:
					return SEMICOLON_SYMBOL_PHP5;
				case THROW_ID:
					return THROW_SYMBOL_PHP5;
				case NEW_ID:
					return NEW_SYMBOL_PHP5;
				case ELSE_ID:
					return ELSE_SYMBOL_PHP5;
				case IMPLEMENTS_ID:
					return IMPLEMENTS_SYMBOL_PHP5;
				case END_FOR_ID:
					return END_FOR_SYMBOL_PHP5;
				case END_FOREACH_ID:
					return END_FOREACH_SYMBOL_PHP5;
				case END_IF_ID:
					return END_IF_SYMBOL_PHP5;
				case END_WHILE_ID:
					return END_WHILE_SYMBOL_PHP5;
				case END_SWITCH_ID:
					return END_SWITCH_SYMBOL_PHP5;
				default:
					break;
			}
		} else if (AST.PHP4.equals(phpVersion)) {
			switch (symID) {
				case DOT_SYMBOL_ID:
					return DOT_SYMBOL_PHP4;
				case LESS_ID:
					return LESS_SYMBOL_PHP4;
				case GREATER_ID:
					return GREATER_SYMBOL_PHP4;
				case RBRACKET_ID:
					return RBRACKET_SYMBOL_PHP4;
				case LBRACKET_ID:
					return LBRACKET_SYMBOL_PHP4;
				case RBRACE_ID:
					return RBRACE_SYMBOL_PHP4;
				case LBRACE_ID:
					return LBRACE_SYMBOL_PHP4;
				case RPAREN_ID:
					return RPAREN_SYMBOL_PHP4;
				case LPAREN_ID:
					return LPAREN_SYMBOL_PHP4;
				case CLASS_ID:
					return CLASS_SYMBOL_PHP4;
				case RETURN_ID:
					return RETURN_SYMBOL_PHP4;
				case BREAK_ID:
					return BREAK_SYMBOL_PHP4;
				case CONTINUE_ID:
					return CONTINUE_SYMBOL_PHP4;
				case DO_ID:
					return DO_SYMBOL_PHP4;
				case WHILE_ID:
					return WHILE_SYMBOL_PHP4;
				case SEMICOLON_ID:
					return SEMICOLON_SYMBOL_PHP4;
				case NEW_ID:
					return NEW_SYMBOL_PHP4;
				case ELSE_ID:
					return ELSE_SYMBOL_PHP4;
				case END_FOR_ID:
					return END_FOR_SYMBOL_PHP4;
				case END_FOREACH_ID:
					return END_FOREACH_SYMBOL_PHP4;
				case END_IF_ID:
					return END_IF_SYMBOL_PHP4;
				case END_WHILE_ID:
					return END_WHILE_SYMBOL_PHP4;
				case END_SWITCH_ID:
					return END_SWITCH_SYMBOL_PHP4;
				default:
					break;
			}
		}
		return ERROR_SYMBOL;
	}

