	protected static IMethod[] getClassMethods(IType type, String prefix) {
		final Set<IMethod> methods = new HashSet<IMethod>();
		try {
			if (type.getSuperClasses() != null) {
				SearchEngine searchEngine = new SearchEngine();
				IDLTKSearchScope scope = SearchEngine.createHierarchyScope(type);
				SearchPattern pattern = SearchPattern.createPattern(prefix + WILDCARD, IDLTKSearchConstants.METHOD, IDLTKSearchConstants.DECLARATIONS, SearchPattern.R_PATTERN_MATCH, PHPLanguageToolkit.getDefault());
	
				searchEngine.search(pattern, new SearchParticipant[] { SearchEngine.getDefaultSearchParticipant() }, scope, new SearchRequestor() {
					public void acceptSearchMatch(SearchMatch match) throws CoreException {
						methods.add((IMethod) match.getElement());
					}
				}, null);
			}

			IMethod[] typeMethods = type.getMethods();
			for (IMethod typeMethod : typeMethods) {
				if (startsWithIgnoreCase(typeMethod.getElementName(), prefix)) {
					methods.add(typeMethod);
				}
			}
		} catch (Exception e) {
			Logger.logException(e);
		}
		return methods.toArray(new IMethod[methods.size()]);
	}

