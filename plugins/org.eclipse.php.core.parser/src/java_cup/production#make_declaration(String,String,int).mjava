  /** Return label declaration code
   * @param labelname    the label name
   * @param stack_type   the stack type of label?
   * @author frankf
   */ 
  protected String make_declaration(
				    String  labelname,
				    String  stack_type,
				    int     offset)
    {
      String ret;

      /* Put in the left/right value labels */
      if (emit.lr_values()){
	if (!emit.locations())
        ret = "\t\tint " + labelname + "left = ((java_cup.runtime.Symbol)" + 
	  emit.pre("stack") + 
 	    // TUM 20050917
	    ((offset==0)?".peek()":(".elementAt(" + emit.pre("top") + "-" + offset + ")"))+
	    ").left;\n" +
	  "\t\tint " + labelname + "right = ((java_cup.runtime.Symbol)" + 
	  emit.pre("stack") +
 	    // TUM 20050917
	    ((offset==0)?".peek()":(".elementAt(" + emit.pre("top") + "-" + offset + ")"))+
	    ").right;\n";
	else
        ret = "\t\tLocation " + labelname + "xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)" + 
	  emit.pre("stack") + 
 	    // TUM 20050917
	    ((offset==0)?".peek()":(".elementAt(" + emit.pre("top") + "-" + offset + ")"))+
	    ").xleft;\n" +
	  "\t\tLocation " + labelname + "xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)" + 
	  emit.pre("stack") +
 	    // TUM 20050917
	    ((offset==0)?".peek()":(".elementAt(" + emit.pre("top") + "-" + offset + ")"))+
	    ").xright;\n";}
      else ret = "";

      /* otherwise, just declare label. */
	return ret + "\t\t" + stack_type + " " + labelname + " = (" + stack_type + 
	  ")((" + "java_cup.runtime.Symbol) " + emit.pre("stack") + 
	    // TUM 20050917
	    ((offset==0)?".peek()":(".elementAt(" + emit.pre("top") + "-" + offset + ")"))+
	    ").value;\n";

    }
  /*. . . . . . . . . . . . . . . . . . . . . . . . . . . . . .*/

