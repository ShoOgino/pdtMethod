  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 22: 
          {  return symbol("LT",LT);                       }
        case 133: break;
        case 21: 
          {  return symbol("GT",GT);                       }
        case 134: break;
        case 14: 
          {  return symbol("RBRACK",RBRACK);               }
        case 135: break;
        case 13: 
          {  return symbol("LBRACK",LBRACK);               }
        case 136: break;
        case 8: 
          {  return symbol("QESTION",QUESTION);            }
        case 137: break;
        case 118: 
          {  return symbol("PACKAGE",PACKAGE);             }
        case 138: break;
        case 119: 
          {  return symbol("EXTENDS",EXTENDS);             }
        case 139: break;
        case 43: 
          {  sb = new StringBuffer(); csline=yyline+1; cscolumn=yycolumn+1; yybegin(CODESEG);     }
        case 140: break;
        case 3: 
        case 4: 
          {                                                }
        case 141: break;
        case 31: 
        case 32: 
          {  sb.append(yytext());  }
        case 142: break;
        case 7: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 37: 
        case 38: 
        case 39: 
        case 40: 
        case 41: 
        case 42: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
        case 72: 
        case 74: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
        case 80: 
        case 82: 
        case 83: 
        case 84: 
        case 86: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 95: 
        case 96: 
        case 97: 
        case 99: 
        case 101: 
        case 102: 
        case 103: 
        case 106: 
        case 107: 
        case 108: 
        case 110: 
        case 111: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 126: 
        case 127: 
        case 128: 
        case 130: 
          {  return symbol("ID",ID,yytext());              }
        case 143: break;
        case 2: 
        case 5: 
        case 16: 
        case 23: 
          {  emit_warning("Unrecognized character '" +yytext()+"' -- ignored");  }
        case 144: break;
        case 54: 
          {  yybegin(YYINITIAL); return symbolFactory.newSymbol("CODE_STRING",CODE_STRING, new Location(csline, cscolumn),new Location(yyline+1,yycolumn+1+yylength()), sb.toString());  }
        case 145: break;
        case 94: 
          {  return symbol("PERCENT_PREC",PERCENT_PREC);   }
        case 146: break;
        case 6: 
          {  return symbol("STAR",STAR);                   }
        case 147: break;
        case 11: 
          {  return symbol("DOT",DOT);                     }
        case 148: break;
        case 93: 
          {  return symbol("WITH",WITH);		        }
        case 149: break;
        case 100: 
          {  return symbol("CLASS",CLASS); 	        }
        case 150: break;
        case 105: 
          {  return symbol("SUPER",SUPER);                 }
        case 151: break;
        case 12: 
          {  return symbol("BAR",BAR);                     }
        case 152: break;
        case 104: 
          {  return symbol("START",START);		        }
        case 153: break;
        case 113: 
          {  return symbol("IMPORT",IMPORT);	        }
        case 154: break;
        case 124: 
          {  return symbol("PARSER",TERMINAL);	        }
        case 155: break;
        case 56: 
          {  return symbol("COLON_COLON_EQUALS",COLON_COLON_EQUALS);    }
        case 156: break;
        case 73: 
          {  return symbol("NON",NON);		        }
        case 157: break;
        case 112: 
          {  return symbol("ACTION",ACTION);	        }
        case 158: break;
        case 129: 
          {  return symbol("PRECEDENCE",PRECEDENCE);       }
        case 159: break;
        case 131: 
          {  return symbol("NONTERMINAL",NONTERMINAL);     }
        case 160: break;
        case 85: 
          {  return symbol("INIT",INIT);		        }
        case 161: break;
        case 98: 
          {  return symbol("RIGHT",RIGHT);		        }
        case 162: break;
        case 87: 
          {  return symbol("LEFT",LEFT);		        }
        case 163: break;
        case 9: 
          {  return symbol("SEMI",SEMI);                   }
        case 164: break;
        case 109: 
          {  return symbol("PARSER",PARSER);	        }
        case 165: break;
        case 81: 
          {  return symbol("CODE",CODE);		        }
        case 166: break;
        case 125: 
          {  return symbol("NONASSOC",NONASSOC);           }
        case 167: break;
        case 15: 
          {  return symbol("COLON",COLON);                 }
        case 168: break;
        case 10: 
          {  return symbol("COMMA",COMMA);                 }
        case 169: break;
        case 88: 
          {  return symbol("SCAN",SCAN);		        }
        case 170: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              {     return symbolFactory.newSymbol("EOF",sym.EOF);
 }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }

