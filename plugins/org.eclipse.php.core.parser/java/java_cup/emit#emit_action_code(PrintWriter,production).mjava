  /** Emit code for the non-public class holding the actual action code. 
   * @param out        stream to produce output on.
   * @param start_prod the start production of the grammar.
   */
  protected static void emit_action_code(PrintWriter out, production start_prod)
    throws internal_error
    {
      production prod;

      long start_time = System.currentTimeMillis();

      /* class header */
      out.println();
      out.println(
       "/** Cup generated class to encapsulate user supplied action code.*/"
      );  
      out.println("@SuppressWarnings({\"rawtypes\", \"unchecked\", \"unused\"})");
      /* TUM changes; proposed by Henning Niss 20050628: added type arguement */
      out.println("class " +  pre("actions") + typeArgument() + " {");
      /* user supplied code */
      if (action_code != null)
	{
	  out.println();
          out.println(action_code);
	}

      /* field for parser object */
      /* TUM changes; proposed by Henning Niss 20050628: added typeArgument */
      out.println("  private final "+parser_class_name + typeArgument() + " parser;");

      /* constructor */
      out.println();
      out.println("  /** Constructor */");
      /* TUM changes; proposed by Henning Niss 20050628: added typeArgument */
      out.println("  " + pre("actions") + "("+parser_class_name+typeArgument()+" parser) {");
      out.println("    this.parser = parser;");
      out.println("  }");

      out.println();
      for (int instancecounter = 0; instancecounter <= production.number()/UPPERLIMIT; instancecounter++) {
      out.println("  /** Method "+instancecounter+" with the actual generated action code for actions "+(instancecounter*UPPERLIMIT)+" to "+((instancecounter+1)*UPPERLIMIT) +". */");
      out.println("  public final java_cup.runtime.Symbol " + 
		     pre("do_action_part")+ String.format("%08d",new Integer(instancecounter)) +"(");
      out.println("    int                        " + pre("act_num,"));
      out.println("    java_cup.runtime.lr_parser " + pre("parser,"));
      out.println("    java.util.Stack            " + pre("stack,"));
      out.println("    int                        " + pre("top)"));
      out.println("    throws java.lang.Exception");
      out.println("    {");
      out.println("      /* Symbol object for return from actions */");
      out.println("      java_cup.runtime.Symbol " + pre("result") + ";");
      out.println();
      out.println("      /* select the action based on the action number */");
      out.println("      switch (" + pre("act_num") + ")");
      out.println("        {");
      // START Switch
      /* emit action code for each production as a separate case */
      int proditeration = instancecounter*UPPERLIMIT;
      prod=production.find(proditeration);
      for ( ;proditeration<Math.min((instancecounter+1)*UPPERLIMIT,production.number());prod=(production)production.find(++proditeration) )
	{
	  /* case label */
          out.println("          /*. . . . . . . . . . . . . . . . . . . .*/");
          out.println("          case " + prod.index() + ": // " + 
					  prod.to_simple_string());

	  /* give them their own block to work in */
	  out.println("            {");


          /**
           * TUM 20060608 intermediate result patch
           */
          String result = "null";
          if (prod instanceof action_production) {
              int lastResult = ((action_production)prod).getIndexOfIntermediateResult();
              if (lastResult!=-1) {
                  result =  "(" + prod.lhs().the_symbol().stack_type() + ") " +
                      "((java_cup.runtime.Symbol) " + emit.pre("stack") + 
                      // TUM 20050917
                      ((lastResult==1)?".peek()":(".elementAt(" + emit.pre("top") + "-" + (lastResult-1) + ")"))+
                      ").value";
              }
          }

	  /* create the result symbol */
	  /*make the variable RESULT which will point to the new Symbol (see below)
	    and be changed by action code
	    6/13/96 frankf */
	  out.println("              " +  prod.lhs().the_symbol().stack_type() +
		      " RESULT ="+result+";");

	  /* Add code to propagate RESULT assignments that occur in
	   * action code embedded in a production (ie, non-rightmost
	   * action code). 24-Mar-1998 CSA
	   */
	  for (int i=prod.rhs_length()-1; i>=0; i--) {
	    // only interested in non-terminal symbols.
	    if (!(prod.rhs(i) instanceof symbol_part)) continue;
	    symbol s = ((symbol_part)prod.rhs(i)).the_symbol();
	    if (!(s instanceof non_terminal)) continue;
	    // skip this non-terminal unless it corresponds to
	    // an embedded action production.
	    if (((non_terminal)s).is_embedded_action == false) continue;
	    // OK, it fits.  Make a conditional assignment to RESULT.
	    int index = prod.rhs_length() - i - 1; // last rhs is on top.
            // set comment to inform about where the intermediate result came from
	    out.println("              " + "// propagate RESULT from " +s.name());
//            // look out, whether the intermediate result is null or not
//	    out.println("              " + "if ( " +
//	      "((java_cup.runtime.Symbol) " + emit.pre("stack") + 
//			// TUM 20050917
//			((index==0)?".peek()":(".elementAt(" + emit.pre("top") + "-" + index + ")"))+
//			").value != null )");

// TUM 20060608: even when its null: who cares?

	    // store the intermediate result into RESULT
            out.println("                " + "RESULT = " +
	      "(" + prod.lhs().the_symbol().stack_type() + ") " +
	      "((java_cup.runtime.Symbol) " + emit.pre("stack") + 
			// TUM 20050917
			((index==0)?".peek()":(".elementAt(" + emit.pre("top") + "-" + index + ")"))+
			").value;");
            break;
	  }

        /* if there is an action string, emit it */
          if (prod.action() != null && prod.action().code_string() != null &&
              !prod.action().equals(""))
            out.println(prod.action().code_string());

	  /* here we have the left and right values being propagated.  
		must make this a command line option.
	     frankf 6/18/96 */

         /* Create the code that assigns the left and right values of
            the new Symbol that the production is reducing to */
	  if (emit.lr_values()) {	    
	    int loffset;
	    String leftstring, rightstring;
	    // TUM 20050917
            //int roffset = 0;
	    rightstring = "((java_cup.runtime.Symbol)" + emit.pre("stack") + 
		// TUM 20050917
		//".elementAt(" + emit.pre("top") + "-" + roffset + "))"+
		".peek()"+
                // TUM 20060327 removed .right
		")"; 	  
	    if (prod.rhs_length() == 0) 
	      leftstring = rightstring;
	    else {
	      loffset = prod.rhs_length() - 1;
	      leftstring = "((java_cup.runtime.Symbol)" + emit.pre("stack") + 
		  // TUM 20050917
		  ((loffset==0)?(".peek()"):(".elementAt(" + emit.pre("top") + "-" + loffset + ")")) +
                  // TUM 20060327 removed .left
		  ")";
	    }
	    out.println("              " + pre("result") + " = parser.getSymbolFactory().newSymbol(" + 
                        "\""+ 	prod.lhs().the_symbol().name() +"\","+ 
			prod.lhs().the_symbol().index()  +
			", " + leftstring + ((prod.rhs_length()==0)?(""):(", " + rightstring)) + ", RESULT);");
	  } else {
	    out.println("              " + pre("result") + " = parser.getSymbolFactory().newSymbol(" + 
		"\""+ 	prod.lhs().the_symbol().name() +  "\","+ 
			prod.lhs().the_symbol().index() + 
			", RESULT);");
	  }
	  
	  /* end of their block */
	  out.println("            }");

	  /* if this was the start production, do action for accept */
	  if (prod == start_prod)
	    {
	      out.println("          /* ACCEPT */");
	      out.println("          " + pre("parser") + ".done_parsing();");
	    }

	  /* code to return lhs symbol */
	  out.println("          return " + pre("result") + ";");
	  out.println();
	}

      // END Switch
      out.println("          /* . . . . . .*/");
      out.println("          default:");
      out.println("            throw new Exception(");
      out.println("               \"Invalid action number \"+"+pre("act_num")+"+\"found in " +
				  "internal parse table\");");
      out.println();
      out.println("        }");
      out.println("    } /* end of method */");
      }

      /* action method head */
      out.println();
      out.println("  /** Method splitting the generated action code into several parts. */");
      out.println("  public final java_cup.runtime.Symbol " + 
		     pre("do_action") + "(");
      out.println("    int                        " + pre("act_num,"));
      out.println("    java_cup.runtime.lr_parser " + pre("parser,"));
      out.println("    java.util.Stack            " + pre("stack,"));
      out.println("    int                        " + pre("top)"));
      out.println("    throws java.lang.Exception");
      out.println("    {");

      if (production.number()<UPPERLIMIT) { // Make it simple for the optimizer to inline!
	  out.println("              return " + pre("do_action_part")+ String.format("%08d",new Integer(0))+"(");
	  out.println("                               " + pre("act_num,"));
	  out.println("                               " + pre("parser,"));
	  out.println("                               " + pre("stack,"));
	  out.println("                               " + pre("top);"));
	  out.println("    }");

	  /* end of class */
	  out.println("}");
	  out.println();

	  action_code_time = System.currentTimeMillis() - start_time;
	  return;
      }

      /* switch top */
      out.println("      /* select the action handler based on the action number */");
      out.println("      switch (" + pre("act_num") + "/"+UPPERLIMIT+ ")");
      out.println("        {");

      /* emit action code for each production as a separate case */
      for (int instancecounter = 0; instancecounter <= production.number()/UPPERLIMIT; instancecounter++) {
	  /* case label */
          out.println("          /*. . . . . . . . "+(instancecounter*UPPERLIMIT)+" < #action < "+((instancecounter+1)*UPPERLIMIT)+". . . . . . . . . . . .*/");
          out.println("          case " + instancecounter + ": ");
	  out.println("              return " + pre("do_action_part")+ String.format("%08d",new Integer(instancecounter))+"(");
	  out.println("                               " + pre("act_num,"));
	  out.println("                               " + pre("parser,"));
	  out.println("                               " + pre("stack,"));
	  out.println("                               " + pre("top);"));
      }

      out.println("          /* . . . no valid action number: . . .*/");
      out.println("          default:");
      out.println("            throw new Exception(\"Invalid action number found in internal parse table\");");
      out.println();
      out.println("        }      /* end of switch */");

      /* end of method */
      out.println("    }");

      /* end of class */
      out.println("}");
      out.println();

      action_code_time = System.currentTimeMillis() - start_time;
    }

