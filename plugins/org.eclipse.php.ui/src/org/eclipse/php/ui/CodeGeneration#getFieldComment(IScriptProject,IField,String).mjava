	/**
	 * Returns the content for a new field comment using the 'field comment'
	 * code template. The returned content is unformatted and is not indented.
	 * 
	 * @param sp
	 *            The compilation unit where the field is contained. The
	 *            compilation unit does not need to exist.
	 * @param fieldType
	 *            The name of the field declared type.
	 * @param fieldName
	 *            The name of the field to which the comment is added.
	 * @param lineDelimiter
	 *            The line delimiter to be used.
	 * @return Returns the new content or <code>null</code> if the code template
	 *         is undefined or empty. The returned content is unformatted and is
	 *         not indented.
	 * @throws CoreException
	 *             Thrown when the evaluation of the code template fails.
	 * @since 3.0
	 */
	public static String getFieldComment(IScriptProject sp, IField field,
			String lineDelimiter) throws CoreException {
		Boolean isVar = false;
		Program program = null;

		try {
			// XXX: WAIT_NO (instead of WAIT_YES) due bug 466694 and until
			// bug 438661 will be fixed
			program = SharedASTProvider.getAST(field.getSourceModule(),
					SharedASTProvider.WAIT_NO, new NullProgressMonitor());
		} catch (IOException e1) {
		}

		if (program == null) {
			program = generageProgram(field, null);
			if (program == null) {
				return null;
			}
		}

		ASTNode elementAt = program.getElementAt(field.getSourceRange()
				.getOffset());
		// we need at least one entry (even if content is null)
		Expression[] expressions = new Expression[1];
		ITypeBinding[] varTypes = new ITypeBinding[1];
		String[] fieldNames = new String[] { field.getElementName() };

		if (elementAt instanceof Variable) {
			isVar = true;
			Variable varDeclaration = (Variable) elementAt;
			if (varDeclaration.getParent() instanceof Assignment) {
				expressions[0] = ((Assignment) varDeclaration.getParent())
						.getRightHandSide();
				varTypes[0] = expressions[0].resolveTypeBinding();
			} else {
				varTypes[0] = varDeclaration.resolveTypeBinding();
			}
		} else if (elementAt instanceof FieldsDeclaration) {
			FieldsDeclaration fieldDeclaration = (FieldsDeclaration) elementAt;
			Variable[] varDeclarations = fieldDeclaration.getVariableNames();
			if (varDeclarations.length > 0) {
				expressions = fieldDeclaration.getInitialValues();
				assert varDeclarations.length == expressions.length;

				varTypes = new ITypeBinding[varDeclarations.length];
				fieldNames = new String[varDeclarations.length];
				for (int i = 0; i < varDeclarations.length; i++) {
					varTypes[i] = varDeclarations[i].resolveTypeBinding();
					fieldNames[i] = getVarName(varDeclarations[i]);
				}
			}
		} else if (elementAt instanceof ConstantDeclaration) {
			ConstantDeclaration constDeclaration = (ConstantDeclaration) elementAt;
			Identifier[] varDeclarations = constDeclaration.names().toArray(
					new Identifier[0]);
			if (varDeclarations.length > 0) {
				expressions = constDeclaration.initializers().toArray(
						new Expression[0]);
				assert varDeclarations.length == expressions.length;

				varTypes = new ITypeBinding[varDeclarations.length];
				fieldNames = new String[varDeclarations.length];
				for (int i = 0; i < varDeclarations.length; i++) {
					varTypes[i] = varDeclarations[i].resolveTypeBinding();
					fieldNames[i] = getVarName(varDeclarations[i]);
				}
			}
		}

		String[] fieldTypes = getFieldTypes(varTypes, expressions);

		if (isVar || fieldTypes.length > 1) {
			return StubUtility.getMultipleFieldsComment(sp, fieldTypes,
					fieldNames, lineDelimiter);
		}
		return StubUtility.getFieldComment(sp, fieldTypes[0], fieldNames[0],
				lineDelimiter);
	}

