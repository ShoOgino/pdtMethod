	// public static String getMethodComment(IScriptProject sp, String
	// declaringTypeName, MethodDeclaration decl, boolean isDeprecated, String
	// overriddenMethodName, String overriddenMethodDeclaringTypeName, String[]
	// overriddenMethodParameterTypeNames, String lineDelimiter) throws
	// CoreException {
	// return StubUtility.getMethodComment(sp, declaringTypeName, decl,
	// isDeprecated, overriddenMethodName, overriddenMethodDeclaringTypeName,
	// overriddenMethodParameterTypeNames, false, lineDelimiter);
	// }
	/**
	 * Returns the content of the body for a method or constructor using the
	 * method body templates. <code>null</code> is returned if the template is
	 * empty.
	 * <p>
	 * The returned string is unformatted and not indented.
	 * 
	 * @param sp
	 *            The compilation unit to which the method belongs. The
	 *            compilation unit does not need to exist.
	 * @param declaringTypeName
	 *            Name of the type to which the method belongs. For inner types
	 *            the name must be qualified and include the outer types names
	 *            (dot separated). See
	 *            {@link org.eclipse.jdt.core.IType#getTypeQualifiedName(char)}.
	 * @param methodName
	 *            Name of the method.
	 * @param isConstructor
	 *            Defines if the created body is for a constructor.
	 * @param bodyStatement
	 *            The code to be entered at the place of the variable
	 *            ${body_statement}.
	 * @param lineDelimiter
	 *            The line delimiter to be used.
	 * @return Returns the constructed body content or <code>null</code> if the
	 *         comment code template is empty. The returned string is
	 *         unformatted and and has no indent (formatting required).
	 * @throws CoreException
	 *             Thrown when the evaluation of the code template fails.
	 */
	public static String getMethodBodyContent(IScriptProject sp, String declaringTypeName, String methodName,
			boolean isConstructor, String bodyStatement, String lineDelimiter) throws CoreException {
		return StubUtility.getMethodBodyContent(isConstructor, sp, declaringTypeName, methodName, bodyStatement,
				lineDelimiter);
	}

