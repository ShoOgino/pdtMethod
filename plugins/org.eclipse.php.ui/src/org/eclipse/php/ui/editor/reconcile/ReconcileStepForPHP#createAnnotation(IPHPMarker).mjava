	protected IReconcileResult createAnnotation(IPHPMarker marker) {
		String descr = marker.getDescription();
		UserData userData = marker.getUserData();
		int offset = userData.getStartPosition();
		int endPos = userData.getEndPosition();
		int length = endPos - offset;
		Message mess = new LocalizedMessage(IMessage.HIGH_SEVERITY, descr);

		if (offset < 0 || length < 0) {
			return null;
		}

		String messageText = null;
		try {
			messageText = mess.getText(mess.getClass().getClassLoader());
		} catch (Exception t) {
			Logger.logException("exception reporting message from validator", t); //$NON-NLS-1$
			return null;
		}

		String type = TemporaryAnnotation.ANNOT_INFO;
		String markerType = marker.getType();
		if (markerType.equals(IPHPMarker.TASK)) {
			// TODO :
			// type = TemporaryAnnotation.ANNOT_TASK;
			type = TemporaryAnnotation.ANNOT_INFO;
		} else if (markerType.equals(IPHPMarker.ERROR)) {
			type = TemporaryAnnotation.ANNOT_ERROR;
		} else if (markerType.equals(IPHPMarker.WARNING)) {
			type = TemporaryAnnotation.ANNOT_WARNING;
		}

		Position p = new Position(offset, length);
		IStructuredDocument structuredDocument = getStructuredDocument();
		ReconcileAnnotationKey key = createKey(structuredDocument.getRegionAtCharacterOffset(offset), ReconcileAnnotationKey.TOTAL);
		return new TemporaryAnnotation(p, type, messageText, key);
	}

