	public void validate(IRegion dirtyRegion, IValidationContext helper, IReporter reporter) {
		int offset = dirtyRegion.getOffset();
		ITypedRegion typedRegion;
		try {
			typedRegion = fDocument.getPartition(offset);
		} catch (BadLocationException e) {
			Logger.logException(e);
			return;
		}

		if (typedRegion.getType().equals(IHTMLPartitionTypes.HTML_DEFAULT)) {
			super.validate(dirtyRegion, helper, reporter);
			return;
		} else if (!typedRegion.getType().equals(PHPPartitionTypes.PHP_DEFAULT)) {
			return;
		}

        IStructuredModel structuredModel = null;
        try {
    		structuredModel = StructuredModelManager.getModelManager().getExistingModelForRead(fDocument);
    		if (structuredModel == null) {
    			return; // error
    		}
    		PHPEditorModel model = (PHPEditorModel) structuredModel;
    
    		//@GINO: Updata the FileData because the content has changed
    		//this might not be the best way to do this
    		if (!PHPEditorModel.FREQUENT_MODEL_UPDATE)
    			model.updateFileData();
    
    		PHPFileData fileData = model.getFileData();
    		if (fileData == null) {
    			return;
    		}
    
    		reporter.removeAllMessages(this);
    		IPHPMarker[] markers = fileData.getMarkers();
    
    		if (markers == null) {
    			return;
    		}
    		for (int i = 0; markers.length > i; i++) {
    			IPHPMarker marker = markers[i];
    			if(marker.getType().equals(IPHPMarker.TASK)){
    				continue;
    			}
    			String descr = marker.getDescription();
    			LocalizedMessage mess = new LocalizedMessage(IMessage.HIGH_SEVERITY, descr);
    			UserData userData = marker.getUserData();
    			//			mess.setLineNo(userData.get);
    			mess.setOffset(userData.getStartPosition());
    			mess.setLength(userData.getEndPosition() - userData.getStartPosition());
    			reporter.addMessage(this, mess);
    		}
		} finally {
			if (structuredModel != null)structuredModel.releaseFromRead();
		}

	}

