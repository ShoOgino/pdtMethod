	public static IPListElement createFromExisting(Object parent, IIncludePathEntry curr, IProject project) {
		IPath path = curr.getPath();
		IWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot();

		// get the resource
		IResource res = null;
		boolean isMissing = false;

		switch (curr.getEntryKind()) {
			case IIncludePathEntry.IPE_CONTAINER:
				res = null;
				isMissing = project != null && (PHPProjectOptions.getIncludePathContainer(path, project) == null);
				break;
			case IIncludePathEntry.IPE_VARIABLE:
				IPath resolvedPath = PHPProjectOptions.getResolvedVariablePath(path);
				res = null;
				isMissing = root.findMember(resolvedPath) == null && !resolvedPath.toFile().isFile();
				break;
			case IIncludePathEntry.IPE_LIBRARY:
				res = root.findMember(path);
				if (res == null) {
					if (!ZipFileFilter.isZipPath(path)) {
						if (root.getWorkspace().validatePath(path.toString(), IResource.FOLDER).isOK() && root.getProject(path.segment(0)).exists()) {
							res = root.getFolder(path);
						}
					}
					isMissing = !path.toFile().exists(); 
				}
				break;
			case IIncludePathEntry.IPE_SOURCE:
				path = path.removeTrailingSeparator();
				res = root.findMember(path);
				if (res == null) {
					if (root.getWorkspace().validatePath(path.toString(), IResource.FOLDER).isOK()) {
						res = root.getFolder(path);
					}
					isMissing = true;
				}
				break;
			case IIncludePathEntry.IPE_PROJECT:
				res = root.findMember(path);
				isMissing = (res == null);
				break;
		}
		IPListElement elem = new IPListElement(parent, project, curr.getEntryKind(), curr.getContentKind(), path, res);
		elem.setExported(curr.isExported());

		if (project != null && project.exists()) {
			elem.setIsMissing(isMissing);
		}
		return elem;
	}

