	/**
	 * Returns the comment for a method or constructor using the comment code
	 * templates (constructor / method / overriding method). <code>null</code>
	 * is returned if the template is empty.
	 * <p>
	 * The returned string is unformatted and not indented.
	 * 
	 * @param method
	 *            The method to be documented. The method must exist.
	 * @param overridden
	 *            The method that will be overridden by the created method or
	 *            <code>null</code> for non-overriding methods. If not
	 *            <code>null</code>, the method must exist.
	 * @param lineDelimiter
	 *            The line delimiter to be used.
	 * @param useFQN
	 *            Generate fully-qualified type names.
	 * @return Returns the constructed comment or <code>null</code> if the
	 *         comment code template is empty. The returned string is
	 *         unformatted and and has no indent (formatting required).
	 * @throws CoreException
	 *             Thrown when the evaluation of the code template fails.
	 *             Contributed by zhaozw - bug #255204 [regression] Parameters
	 *             type is not displayed in Generated element comments doc block
	 */
	public static String getMethodComment(IMethod method, IMethod overridden, String lineDelimiter, boolean useFQN)
			throws CoreException {

		// FIXME - 'retType' should be initialized to null after the
		// 'getReturnType will be functional, so void/c'tor will not have
		// 'return' tag

		String retType = null;
		String[] typeParameterNames = null;
		String[] parameterTypes = null;
		Program program = null;

		// XXX: do not call SharedASTProvider.getAST() due bug 466694 and
		// until bug 438661 will be fixed. Even without those bugs, it's still
		// better to force new AST generation using generateProgram(method,
		// null), because the cached AST (retrieved using ASTProvider and
		// WAIT_YES) could still be outdated when there was previously an
		// ASTError above the method we're handling here!
		// try {
		// program = SharedASTProvider.getAST(method.getSourceModule(),
		// SharedASTProvider.WAIT_YES, new NullProgressMonitor());
		// } catch (IOException e1) {
		// }

		if (program == null) {
			program = generateProgram(method, null);
			if (program == null) {
				return null;
			}
		}

		// XXX: bindings can also be out-of-sync with current AST when DLTK's
		// document indexing is still running. It's a rare case here but ideally
		// we should always wait until end of indexing (sadly it could
		// momentarily freeze the UI):
		// ModelManager.getModelManager().getIndexManager().waitUntilReady();

		ASTNode elementAt = null;
		try {
			elementAt = program.getElementAt(method.getSourceRange().getOffset());
		} catch (IllegalArgumentException e) {
			program = generateProgram(method, null);
			if (program == null) {
				return null;
			}
			elementAt = program.getElementAt(method.getSourceRange().getOffset());
			if (elementAt == null) {
				return null;
			}
		}

		if (!(elementAt instanceof MethodDeclaration || elementAt instanceof FunctionDeclaration
				|| elementAt.getParent() instanceof MethodDeclaration)) {
			program = generateProgram(method, program);
			if (program == null) {
				return null;
			}
			elementAt = program.getElementAt(method.getSourceRange().getOffset());
		}

		if (elementAt.getParent() instanceof MethodDeclaration) {
			elementAt = elementAt.getParent();
		}

		ITypeBinding[] returnTypes = null;
		ITypeBinding[] typeParametersTypes = null;
		IFunctionBinding resolvedBinding = null;
		List<FormalParameter> formalParameters = null;

		if (elementAt instanceof MethodDeclaration) {
			MethodDeclaration methodDeclaration = (MethodDeclaration) elementAt;
			resolvedBinding = methodDeclaration.resolveMethodBinding();
			formalParameters = methodDeclaration.getFunction().formalParameters();
			Identifier returnType = methodDeclaration.getFunction().getReturnType();
			if (returnType != null) {
				if (returnType.isNullable()) {
					StringBuilder returnTypeBuffer = new StringBuilder();
					returnTypeBuffer.append(returnType.getName()).append(Constants.TYPE_SEPARATOR_CHAR)
							.append(PHPSimpleTypes.NULL.getTypeName());
					retType = returnTypeBuffer.toString();
				} else {
					retType = returnType.getName();
				}
			}
		} else if (elementAt instanceof FunctionDeclaration) {
			FunctionDeclaration functionDeclaration = (FunctionDeclaration) elementAt;
			resolvedBinding = functionDeclaration.resolveFunctionBinding();
			formalParameters = functionDeclaration.formalParameters();
			Identifier returnType = functionDeclaration.getReturnType();
			if (returnType != null) {
				if (returnType.isNullable()) {
					StringBuilder returnTypeBuffer = new StringBuilder();
					returnTypeBuffer.append(returnType.getName()).append(Constants.TYPE_SEPARATOR_CHAR)
							.append(PHPSimpleTypes.NULL.getTypeName());
					retType = returnTypeBuffer.toString();
				} else {
					retType = returnType.getName();
				}
			}
		}
		final List<String> exceptions = new ArrayList<>();
		elementAt.accept(new AbstractVisitor() {
			@Override
			public boolean visit(ThrowStatement throwStatement) {
				Expression expression = throwStatement.getExpression();
				if (expression instanceof ClassInstanceCreation) {
					ClassInstanceCreation cic = (ClassInstanceCreation) throwStatement.getExpression();
					if (cic.getClassName().getName() instanceof Identifier) {
						Identifier name = (Identifier) cic.getClassName().getName();
						String className;
						if (useFQN) {
							className = resolveFQN(name, method.getSourceModule());
						} else {
							className = name.getName();
						}
						exceptions.add(className);
					}
				}
				if (expression instanceof Variable) {
					ITypeBinding type = ((Variable) expression).resolveTypeBinding();
					if (type != null) {
						exceptions.add(type.getName());
					}
				}

				return true;
			}
		});
		final List<String> newExceptions = new ArrayList<>();
		final Set<String> exceptionSet = new HashSet<>();
		for (Iterator<String> iterator = exceptions.iterator(); iterator.hasNext();) {
			String exception = iterator.next();
			if (!exceptionSet.contains(exception)) {
				exceptionSet.add(exception);
				newExceptions.add(exception);
			}
		}
		if (formalParameters != null) {
			// get parameter type
			parameterTypes = new String[formalParameters.size()];
			int i = 0;
			for (ASTNode node : formalParameters) {
				FormalParameter formalParameter = (FormalParameter) node;
				Expression parameterType = formalParameter.getParameterType();
				if (parameterType != null) {
					String typeName;
					if (useFQN) {
						typeName = resolveFQN((Identifier) parameterType, method.getSourceModule());
					} else {
						typeName = ((Identifier) parameterType).getName();
					}
					parameterTypes[i++] = typeName;
					continue;
				}
				if (formalParameter.getDefaultValue() != null && formalParameter.getDefaultValue() instanceof Scalar
						&& !formalParameter.getDefaultValue().isNullExpression()) {
					Scalar scalar = (Scalar) formalParameter.getDefaultValue();
					String value = scalar.getStringValue();
					IEvaluatedType simpleType;
					if ("true".equalsIgnoreCase(value) //$NON-NLS-1$
							|| "false".equalsIgnoreCase(value)) { //$NON-NLS-1$
						simpleType = PHPSimpleTypes.BOOLEAN;
					} else {
						simpleType = PHPSimpleTypes.fromString(Scalar.getType(scalar.getScalarType()));
					}
					if (simpleType == null) {
						parameterTypes[i++] = Scalar.getType(scalar.getScalarType());
					} else {
						parameterTypes[i++] = simpleType.getTypeName();
					}
					continue;
				}
				if (formalParameter.getDefaultValue() != null
						&& formalParameter.getDefaultValue() instanceof ArrayCreation) {
					parameterTypes[i++] = PHPSimpleTypes.ARRAY.getTypeName();
					continue;
				}
				parameterTypes[i++] = UNKNOWN_TYPE;
			}
		}

		StringBuilder returnTypeBuffer = new StringBuilder();
		if (null != resolvedBinding) {
			// check if the return type has already been determined by the
			// function/method signature (PHP 7)
			if (retType == null) {
				// no return type in the signature - try to evaluate it
				returnTypes = resolvedBinding.getReturnType();
				if (null != returnTypes && returnTypes.length > 0) {
					List<ITypeBinding> returnTypesList = removeDuplicateTypes(returnTypes);
					for (ITypeBinding returnType : returnTypesList) {
						if (returnType.isUnknown()) {
							// show unknown types as if they were null types,
							// even if looking for returnType.isUnknown() is not
							// the same as looking for returnType.isNullType()
							returnTypeBuffer.append(PHPSimpleTypes.NULL.getTypeName())
									.append(Constants.TYPE_SEPARATOR_CHAR);
						} else if (returnType.isAmbiguous()) {
							returnTypeBuffer.append("Ambiguous").append(Constants.TYPE_SEPARATOR_CHAR); //$NON-NLS-1$
						} else if (!appendAllPossibleTypes(returnType.getEvaluatedType(), returnTypeBuffer)) {
							returnTypeBuffer.append(returnType.getName()).append(Constants.TYPE_SEPARATOR_CHAR);
						}
					}
					if (returnTypeBuffer.length() > 0) {
						retType = returnTypeBuffer.substring(0, returnTypeBuffer.length() - 1);
					}
				}
			}

			if (retType != null && useFQN) {
				retType = resolveFQN(retType, method.getSourceModule(), method.getSourceRange().getOffset());
			}

			typeParametersTypes = resolvedBinding.getParameterTypes();

			if (null != typeParametersTypes) {
				int i = 0;
				typeParameterNames = new String[typeParametersTypes.length];
				for (ITypeBinding type : typeParametersTypes) {
					typeParameterNames[i++] = type.getName();
				}
			}
		}

		String[] paramNames = method.getParameterNames();
		if (formalParameters == null) {
			parameterTypes = new String[paramNames.length];
			for (int i = 0; i < paramNames.length; i++) {
				parameterTypes[i] = UNKNOWN_TYPE;
			}
		} else {
			for (int i = 0; i < formalParameters.size(); i++) {
				if (formalParameters.get(i).isVariadic()) {
					paramNames[i] = ScriptElementLabels.ELLIPSIS_STRING + paramNames[i];
				}
			}
		}
		// add parameter type before parameter name
		for (int i = 0; i < paramNames.length; i++) {
			if (null != parameterTypes && null != parameterTypes[i]) {
				paramNames[i] = parameterTypes[i] + " " + paramNames[i]; //$NON-NLS-1$
				// } else {
				// String parameterType =
				// detectFromHungarianNotation(paramNames[i]);
				// if (parameterType != null) {
				// paramNames[i] = parameterType + " " + paramNames[i];
				// }
			}
		}
		IType declaringType = method.getDeclaringType();
		if (null != declaringType) {
			return StubUtility.getMethodComment(method.getScriptProject(), declaringType.getElementName(),
					method.getElementName(), paramNames, retType, typeParameterNames, overridden, false, lineDelimiter,
					newExceptions);
		}
		return StubUtility.getMethodComment(method.getScriptProject(), null, method.getElementName(), paramNames,
				retType, typeParameterNames, overridden, false, lineDelimiter, newExceptions);
	}

