	/**
	 * Returns the comment for a method or constructor using the comment code
	 * templates (constructor / method / overriding method). <code>null</code>
	 * is returned if the template is empty.
	 * <p>
	 * The returned string is unformatted and not indented.
	 * 
	 * @param method
	 *            The method to be documented. The method must exist.
	 * @param overridden
	 *            The method that will be overridden by the created method or
	 *            <code>null</code> for non-overriding methods. If not
	 *            <code>null</code>, the method must exist.
	 * @param lineDelimiter
	 *            The line delimiter to be used.
	 * @return Returns the constructed comment or <code>null</code> if the
	 *         comment code template is empty. The returned string is
	 *         unformatted and and has no indent (formatting required).
	 * @throws CoreException
	 *             Thrown when the evaluation of the code template fails.
	 *             Contributed by zhaozw - bug #255204 [regression] Parameters
	 *             type is not displayed in Generated element comments doc block
	 */
	public static String getMethodComment(IMethod method, IMethod overridden,
			String lineDelimiter) throws CoreException {
		// FIXME - 'retType' should be initialized to null after the
		// 'getReturnType will be functional, so void/c'tor will not have
		// 'return' tag

		String retType = "unknown_type";
		String[] typeParameterNames = null;
		String[] parameterTypes = null;

		try {
			Program program = SharedASTProvider.getAST(
					method.getSourceModule(), SharedASTProvider.WAIT_YES,
					new NullProgressMonitor());
			ASTNode elementAt = program.getElementAt(method.getSourceRange()
					.getOffset());
			ITypeBinding returnType = null;
			ITypeBinding[] typeParametersTypes = null;
			IFunctionBinding resolvedBinding = null;
			List<FormalParameter> formalParameters = null;

			if (elementAt instanceof MethodDeclaration) {
				MethodDeclaration methodDeclaration = (MethodDeclaration) elementAt;
				resolvedBinding = methodDeclaration.resolveMethodBinding();
				formalParameters = methodDeclaration.getFunction()
						.formalParameters();
			} else if (elementAt instanceof FunctionDeclaration) {
				FunctionDeclaration functionDeclaration = (FunctionDeclaration) elementAt;
				resolvedBinding = functionDeclaration.resolveFunctionBinding();
				formalParameters = functionDeclaration.formalParameters();
			}

			if (formalParameters != null) {
				// get parameter type
				parameterTypes = new String[formalParameters.size()];
				int i = 0;
				for (ASTNode node : formalParameters) {
					FormalParameter formalParameter = (FormalParameter) node;
					Expression parameterType = formalParameter
							.getParameterType();
					if (parameterType != null) {
						String typeName = ((Identifier) parameterType)
								.getName();
						parameterTypes[i++] = typeName;
					} else {
						parameterTypes[i++] = null;
					}
				}
			}

			if (null != resolvedBinding) {
				returnType = resolvedBinding.getReturnType();
				if (null != returnType) {
					if (returnType.isUnknown()) {
						retType = "unknown_type";
					} else if (returnType.isAmbiguous()) {
						retType = "Ambiguous";
					} else {
						retType = returnType.getName();
					}
				}

				typeParametersTypes = resolvedBinding.getParameterTypes();

				if (null != returnType) {
					int i = 0;
					typeParameterNames = new String[typeParametersTypes.length];
					for (ITypeBinding type : typeParametersTypes) {
						typeParameterNames[i++] = type.getName();
					}
				}
			}

		} catch (IOException e) {
			Logger.logException(e);
		}

		String[] paramNames = method.getParameters();
		// add parameter type before parameter name
		for (int i = 0; i < paramNames.length; i++) {
			if (null != parameterTypes && null != parameterTypes[i]) {
				paramNames[i] = parameterTypes[i] + " " + paramNames[i];
				// } else {
				// String parameterType =
				// detectFromHungarianNotation(paramNames[i]);
				// if (parameterType != null) {
				// paramNames[i] = parameterType + " " + paramNames[i];
				// }
			}
		}
		IType declaringType = method.getDeclaringType();
		if (null != declaringType) {
			return StubUtility.getMethodComment(method.getScriptProject(),
					declaringType.getElementName(), method.getElementName(),
					paramNames, retType, typeParameterNames, overridden, false,
					lineDelimiter);
		}
		return StubUtility.getMethodComment(method.getScriptProject(), null,
				method.getElementName(), paramNames, retType,
				typeParameterNames, overridden, false, lineDelimiter);
	}

