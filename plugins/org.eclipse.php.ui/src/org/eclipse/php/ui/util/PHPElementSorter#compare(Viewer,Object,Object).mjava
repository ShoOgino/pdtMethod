	/*
	 * @see ViewerSorter#compare
	 */
	public int compare(Viewer viewer, Object e1, Object e2) {
		int cat1 = category(e1);
		int cat2 = category(e2);

		if (cat1 != cat2)
			return cat1 - cat2;

		if (cat1 == PROJECTS || cat1 == RESOURCES || cat1 == RESOURCEFOLDERS || cat1 == STORAGE || cat1 == OTHERS) {
			String name1 = getNonPHPElementLabel(viewer, e1);
			String name2 = getNonPHPElementLabel(viewer, e2);
			if (name1 != null && name2 != null) {
				return getCollator().compare(name1, name2);
			}
			return 0; // can't compare
		}

		// if it is an outline node (classes, functions, constants) sort by type
		if (cat1 == OUTLINE_NODES && cat2 == OUTLINE_NODES) {
			assert e1 instanceof OutlineNode && e2 instanceof OutlineNode;
			return ((Comparable) e1).compareTo(e2);
		}

		if (e1 instanceof PHPCodeData) {
			if (fMemberOrderCache.isSortByVisibility()) {
				int flags1 = getVisibilityCode(e1);
				int flags2 = getVisibilityCode(e2);
				int vis = fMemberOrderCache.getVisibilityIndex(flags1) - fMemberOrderCache.getVisibilityIndex(flags2);
				if (vis != 0) {
					return vis;
				}
			}
		}

		String name1 = getElementName(e1);
		String name2 = getElementName(e2);

		int cmp = getCollator().compare(name1, name2);
		if (cmp != 0) {
			return cmp;
		}

		if (e1 instanceof PHPFunctionData) {
			PHPFunctionParameter[] params1 = ((PHPFunctionData) e1).getParameters();
			PHPFunctionParameter[] params2 = ((PHPFunctionData) e2).getParameters();
			int len = Math.min(params1.length, params2.length);
			for (int i = 0; i < len; i++) {
				String classType1 = params1[i].getClassType();
				String classType2 = params2[i].getClassType();
				if (classType1 == null) {
					if (classType2 == null)
						return 0;
					return 1;
				} else if (classType2 == null)
					return -1;
			}
			return params1.length - params2.length;
		}
		return 0;
	}

