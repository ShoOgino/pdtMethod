	/**
	 * Create a stub for a getter of the given field using getter/setter templates.
	 * The resulting code has to be formatted and indented.
	 * 
	 * @param field
	 *            The field to create a getter for
	 * @param setterName
	 *            The chosen name for the setter
	 * @param addComments
	 *            If <code>true</code>, comments will be added.
	 * @param flags
	 *            The flags signaling visibility, if static, synchronized or final
	 * @return Returns the generated stub.
	 * @throws CoreException
	 *             when stub creation failed
	 */
	public static void createSetterStub(IField field, String setterName, boolean addComments, int flags,
			ListRewrite rewrite, ASTNode insertion) throws CoreException {
		String fieldName = field.getElementName();
		IType parentType = field.getDeclaringType();

		AST ast = rewrite.getASTRewrite().getAST();

		String lineDelim = StubUtility.getLineDelimiterUsed(field.getScriptProject());

		MethodDeclaration method = new MethodDeclarationStub(ast);

		FunctionDeclaration func = ast.newFunctionDeclaration();
		FormalParameter param = ast.newFormalParameter();

		Expression exp = ast.newScalar(fieldName);
		param.setParameterName(exp);

		func.formalParameters().add(param);
		func.setFunctionName(rewrite.getParent().getAST().newIdentifier(getSetterName(field)));

		method.setFunction(func);

		boolean isStatic = Flags.isStatic(flags);
		boolean isFinal = Flags.isFinal(flags);

		String argname = field.getElementName();
		if (argname.equals(fieldName) || (!isStatic)) {
			if (isStatic) {
				fieldName = parentType.getElementName() + "::" + fieldName; //$NON-NLS-1$
			} else {
				fieldName = "$this->" + removeDollarSign(fieldName); //$NON-NLS-1$
			}
		}

		// only php 5 supports modifers.
		int modifiers = 0;
		if (isStatic) {
			modifiers = modifiers | Modifiers.AccStatic;
		}
		if (isFinal) {
			modifiers = modifiers | Modifiers.AccFinal;
		}
		if (Flags.isPublic(flags)) {
			modifiers = modifiers | Modifiers.AccPublic;
		}
		if (Flags.isProtected(flags)) {
			modifiers = modifiers | Modifiers.AccProtected;
		}
		if (Flags.isPrivate(flags)) {
			modifiers = modifiers | Modifiers.AccPrivate;
		}

		method.setModifier(modifiers);

		Block body = ast.newBlock();
		func.setBody(body);

		String bodyContent = CodeGeneration.getSetterMethodBodyContent(field.getScriptProject(),
				parentType.getTypeQualifiedName(), setterName, fieldName, field.getElementName(), lineDelim);

		if (bodyContent != null) {
			ASTNode todoNode = rewrite.getASTRewrite().createStringPlaceholder(bodyContent, ASTNode.EMPTY_STATEMENT);
			body.statements().add((Statement) todoNode);
		}

		if (addComments) {
			String filedType = getFieldType(field);
			String comment = CodeGeneration.getSetterComment(field.getScriptProject(),
					field.getDeclaringType().getElementName(), setterName, fieldName, filedType, field.getElementName(),
					field.getElementName(), lineDelim);
			if (comment != null) {
				Comment commentNode = (Comment) rewrite.getASTRewrite().createStringPlaceholder(comment + lineDelim,
						ASTNode.COMMENT);
				commentNode.setCommentType(Comment.TYPE_PHPDOC);
				method.setComment(commentNode);
			}
		}

		addNewAccessor(method, rewrite, insertion);
	}

