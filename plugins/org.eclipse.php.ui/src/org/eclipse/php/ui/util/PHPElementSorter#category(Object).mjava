	/*
	 * @see ViewerSorter#category
	 */
	public int category(Object element) {
		if (element instanceof PHPCodeData) {

			if (element instanceof PHPFunctionData) {
				PHPFunctionData function = (PHPFunctionData) element;
				if (false) {//function.isConstructor()) {
					return getMemberCategory(MembersOrderPreferenceCache.CONSTRUCTORS_INDEX);
				}
				int flags = function.getModifiers();
				if (PHPModifier.isStatic(flags))
					return getMemberCategory(MembersOrderPreferenceCache.STATIC_FUNCTIONS_INDEX);
				else
					return getMemberCategory(MembersOrderPreferenceCache.FUNCTIONS_INDEX);

			} else if (element instanceof PHPClassVarData) {
				PHPClassVarData var = (PHPClassVarData) element;
				int flags = var.getModifiers();
				if (PHPModifier.isStatic(flags))
					return getMemberCategory(MembersOrderPreferenceCache.STATIC_VARS_INDEX);
				else
					return getMemberCategory(MembersOrderPreferenceCache.VARS_INDEX);

			} else if (element instanceof PHPClassVarData) {
				return getMemberCategory(MembersOrderPreferenceCache.CLASS_INDEX);
			} else if (element instanceof PHPClassVarData) {
				return getMemberCategory(MembersOrderPreferenceCache.CLASS_INDEX);
			} else if (element instanceof PHPProjectModel)
				return PROJECTS;
			else if (element instanceof PHPClassData)
				return CLASSFILES;
			else if (element instanceof PHPFileData)
				return COMPILATIONUNITS;
			return JAVAELEMENTS;
		} else if (element instanceof IFile) {
			return RESOURCES;
		} else if (element instanceof IProject) {
			return PROJECTS;
		} else if (element instanceof IContainer) {
			return RESOURCEFOLDERS;
		} else if (element instanceof IStorage) {
			return STORAGE;
		} else if (element instanceof OutlineNode) {
			return OUTLINE_NODES;
		}
		return OTHERS;
	}

