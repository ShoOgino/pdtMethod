	/**
	 * Retreive an array of IEditorParts representing all the dirty editors open
	 * for the files provided in the list.
	 * 
	 * @param files
	 *            A list of IFiles.
	 * @return An array of IEditorParts containing all the dirty editors for the
	 *         files in the list.
	 */
	public static List<IEditorPart> getDirtyEditors(IProject project) {
		List<IEditorPart> result = new ArrayList<>(0);
		IWorkbench workbench = PlatformUI.getWorkbench();
		IWorkbenchWindow[] windows = workbench.getWorkbenchWindows();
		for (int i = 0; i < windows.length; i++) {
			IWorkbenchPage[] pages = windows[i].getPages();
			for (int x = 0; x < pages.length; x++) {
				IEditorPart[] editors = pages[x].getDirtyEditors();
				for (int z = 0; z < editors.length; z++) {
					IEditorPart ep = editors[z];
					IEditorInput input = ep.getEditorInput();
					if (input instanceof IFileEditorInput) {
						IFileEditorInput fileInput = (IFileEditorInput) input;
						IFile file = fileInput.getFile();
						if (project != null && !(file.getProject() == project)) {
							continue;
						}
						result.add(ep);
					}
				}
			}
		}
		return result;
	}

