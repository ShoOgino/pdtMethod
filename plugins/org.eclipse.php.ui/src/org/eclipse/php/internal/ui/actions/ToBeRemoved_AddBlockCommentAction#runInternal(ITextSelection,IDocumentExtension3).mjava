	@Override
	protected void runInternal(ITextSelection selection, IDocumentExtension3 docExtension) throws BadLocationException, BadPartitioningException {

		MultiTextEdit multiEdit = new MultiTextEdit();

		int selectionOffset = selection.getOffset();
		int selectionEndOffset = selectionOffset + selection.getLength();

		if (docExtension instanceof IStructuredDocument) {
			IStructuredDocument sDoc = (IStructuredDocument) docExtension;
			IStructuredDocumentRegion sdRegion = sDoc.getRegionAtCharacterOffset(selectionOffset);
			ITextRegion textRegion = sdRegion.getRegionAtCharacterOffset(selectionOffset);

			ITextRegionCollection container = sdRegion;

			if (textRegion instanceof ITextRegionContainer) {
				container = (ITextRegionContainer) textRegion;
				textRegion = container.getRegionAtCharacterOffset(selectionOffset);
			}

			if (textRegion.getType() == PHPRegionContext.PHP_CONTENT) {
				IPhpScriptRegion phpScriptRegion = (IPhpScriptRegion) textRegion;
				ITypedRegion partition = PHPPartitionTypes.getPartition(phpScriptRegion, selectionOffset - container.getStartOffset() - phpScriptRegion.getStart());

				int phpRegionStart = container.getStartOffset(phpScriptRegion);

				handleFirstPartition(partition, multiEdit, selectionOffset, phpRegionStart);

				ITypedRegion lastPartition = partition;
				while (partition != null && phpRegionStart + partition.getOffset() + partition.getLength() < selectionEndOffset) {
					lastPartition = partition;
					partition = handleInteriorPartition(partition, multiEdit, docExtension, phpRegionStart);
				}
				if (partition == null) {
					partition = lastPartition;
				}
				handleLastPartition(partition, multiEdit, selectionEndOffset, phpRegionStart);
			}

			IStructuredTextUndoManager undoManager = sDoc.getUndoManager();
			undoManager.beginRecording(this);
			multiEdit.apply(sDoc);
			undoManager.endRecording(this);
		}
	}

