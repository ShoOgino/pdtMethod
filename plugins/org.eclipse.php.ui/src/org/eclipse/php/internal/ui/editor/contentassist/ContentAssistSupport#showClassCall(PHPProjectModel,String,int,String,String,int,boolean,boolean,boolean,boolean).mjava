	protected void showClassCall(PHPProjectModel projectModel, String fileName, int offset, String className, String startWith, int selectionLength, boolean isInstanceOf, boolean addVariableDollar, boolean explicit, boolean isStrict) {
		CodeData[] allFunctions = null;
		CodeData[] allClassVariables = null;

		String[] classNames = className.split("\\|");
		for (String realClassName : classNames) {
			realClassName = realClassName.trim();
			if (explicit || autoShowFunctionsKeywordsConstants) {
				CodeData[] functions = projectModel.getClassFunctions(fileName, realClassName, startWith.length() == 0 ? "" : startWith); //$NON-NLS-1$
				if (allFunctions == null) {
					allFunctions = functions;
				} else {
					allFunctions = ModelSupport.merge(allFunctions, functions);
				}
			}
			if (explicit || autoShowVariables) {
				CodeData[] classVariables = ModelSupport.getFilteredCodeData(projectModel.getClassVariables(fileName, realClassName, ""), ModelSupport.NOT_STATIC_VARIABLES_FILTER); //$NON-NLS-1$
				if (allClassVariables == null) {
					allClassVariables = classVariables;
				} else {
					allClassVariables = ModelSupport.merge(allClassVariables, classVariables);
				}
			}
		}
		CodeData[] result = ModelSupport.getFilteredCodeData(ModelSupport.merge(allFunctions, allClassVariables), getAccessLevelFilter(projectModel, fileName, className, offset, isInstanceOf));

		if (addVariableDollar) {
			completionProposalGroup = classVariableCallCompletionProposalGroup;
		} else {
			completionProposalGroup = phpCompletionProposalGroup;
		}
		completionProposalGroup.setData(offset, result, startWith, selectionLength, isStrict);
	}

