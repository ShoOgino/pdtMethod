	public ICompletionProposal[] computeCompletionProposals(ITextViewer viewer,
			int offset) {
		document = viewer.getDocument();
		try {
			String type = TextUtilities.getContentType(document,
					IStructuredPartitioning.DEFAULT_STRUCTURED_PARTITIONING,
					offset, true);
			if (!PHPPartitionTypes.PHP_DEFAULT.equals(type)) {
				return EMPTY;
			}
		} catch (BadLocationException e) {
		}
		if (isInDocOrCommentOrString(viewer, offset)) {
			return EMPTY;
		}

		ITextSelection selection = (ITextSelection) viewer
				.getSelectionProvider().getSelection();

		ICompletionProposal[] selectionProposal = EMPTY;
		if (selection.getLength() != 0) {
			isSelection = true;
			int tempOffset = offset;
			// adjust offset to end of normalized selection
			if (selection.getOffset() == tempOffset)
				tempOffset = selection.getOffset() + selection.getLength();

			String prefix = extractPrefix(viewer, tempOffset);
			IRegion region = new Region(selection.getOffset(), 0);
			Position position = new Position(offset, selection.getLength());
			TemplateContext context = createContext(viewer, region, position);//
			if (context == null)
				return new ICompletionProposal[0];

			// if (selection.y != 0) {
			try {
				// selectedText= document.get(selection.getOffset(),
				// selection.getLength());
				document.addPosition(position);
				fPositions.put(document, position);
			} catch (BadLocationException e) {
			}
			// }

			// name of the selection variables {line, word}_selection
			context.setVariable("selection", selection.getText()); //$NON-NLS-1$

			boolean multipleLinesSelected = areMultipleLinesSelected(viewer);

			List<TemplateProposal> matches = new ArrayList<TemplateProposal>();
			Template[] templates = getTemplates(context.getContextType()
					.getId());
			for (int i = 0; i != templates.length; i++) {
				Template template = templates[i];
				if (context.canEvaluate(template)
						&& (!multipleLinesSelected
								&& template.getPattern().indexOf(
										$_WORD_SELECTION) != -1 || (multipleLinesSelected && template
								.getPattern().indexOf($_LINE_SELECTION) != -1))) {
					matches.add((TemplateProposal) createProposal(templates[i],
							context, region, getRelevance(template, prefix)));
				}
			}
			selectionProposal = matches.toArray(new ICompletionProposal[matches
					.size()]);
		} else {
			isSelection = false;
		}
		ICompletionProposal[] completionProposals = super
				.computeCompletionProposals(viewer, offset);
		if (completionProposals == null) {
			return selectionProposal;
		}
		completionProposals = filterUsingPrefix(completionProposals,
				extractPrefix(viewer, offset));

		List<ICompletionProposal> matches = new ArrayList<ICompletionProposal>();
		for (int i = 0; i < selectionProposal.length; i++) {
			matches.add(selectionProposal[i]);
		}
		for (int i = 0; i < completionProposals.length; i++) {
			matches.add(completionProposals[i]);
		}

		return matches.toArray(new ICompletionProposal[matches.size()]);
	}

