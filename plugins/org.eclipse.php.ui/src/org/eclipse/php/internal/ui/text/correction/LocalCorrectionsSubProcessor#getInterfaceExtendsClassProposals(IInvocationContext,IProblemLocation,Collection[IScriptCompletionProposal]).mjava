	public static void getInterfaceExtendsClassProposals(IInvocationContext context, IProblemLocation problem,
			Collection<IScriptCompletionProposal> proposals) {
		ASTNode selectedNode = problem.getCoveringNode(context.getASTRoot());
		if (selectedNode == null) {
			return;
		}
		while (selectedNode.getParent() instanceof NamespaceName) {
			selectedNode = selectedNode.getParent();
		}

		boolean isType = false;
		if (selectedNode instanceof Identifier) {
			ITypeBinding typeBinding = ((Identifier) selectedNode).resolveTypeBinding();
			if (typeBinding != null && typeBinding.getPHPElement() instanceof IType) {
				try {
					int flags = ((IType) typeBinding.getPHPElement()).getFlags();
					if (PHPFlags.isClass(flags) || PHPFlags.isInterface(flags)) {
						isType = true;
					}
				} catch (ModelException e) {
					PHPUiPlugin.log(e);
				}
			}
		}
		if (!isType) {
			return;
		}

		StructuralPropertyDescriptor locationInParent = selectedNode.getLocationInParent();
		if (locationInParent != ClassDeclaration.SUPER_CLASS_PROPERTY
				&& locationInParent != AnonymousClassDeclaration.SUPER_CLASS_PROPERTY) {
			return;
		}

		ASTNode typeDecl = selectedNode.getParent();
		{
			ChildListPropertyDescriptor property = null;
			if (locationInParent == ClassDeclaration.SUPER_CLASS_PROPERTY)
				property = ClassDeclaration.INTERFACES_PROPERTY;
			else
				property = AnonymousClassDeclaration.INTERFACES_PROPERTY;

			ASTRewrite rewrite = ASTRewrite.create(context.getASTRoot().getAST());
			ASTNode placeHolder = rewrite.createMoveTarget(selectedNode);
			ListRewrite interfaces = rewrite.getListRewrite(typeDecl, property);
			interfaces.insertFirst(placeHolder, null);

			String label = CorrectionMessages.LocalCorrectionsSubProcessor_extendstoimplements_description;
			Image image = DLTKPluginImages.get(DLTKPluginImages.IMG_CORRECTION_CHANGE);
			ASTRewriteCorrectionProposal proposal = new ASTRewriteCorrectionProposal(label,
					context.getCompilationUnit(), rewrite, IProposalRelevance.CHANGE_EXTENDS_TO_IMPLEMENTS, image);
			proposals.add(proposal);
		}
		{
			// ASTRewrite rewrite =
			// ASTRewrite.create(context.getASTRoot().getAST());
			//
			// rewrite.set(typeDecl, ClassDeclaration.INTERFACES_PROPERTY,
			// Boolean.TRUE, null);
			//
			// String typeName = typeDecl.getName().getName();
			// String label =
			// Messages.format(CorrectionMessages.LocalCorrectionsSubProcessor_classtointerface_description,
			// BasicElementLabels.getJavaElementName(typeName));
			// Image image =
			// DLTKPluginImages.get(DLTKPluginImages.IMG_CORRECTION_CHANGE);
			// ASTRewriteCorrectionProposal proposal = new
			// ASTRewriteCorrectionProposal(label,
			// context.getCompilationUnit(), rewrite,
			// IProposalRelevance.CHANGE_CLASS_TO_INTERFACE, image);
			// proposals.add(proposal);
		}
	}

