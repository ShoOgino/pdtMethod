	/**
	 * Opens a PHP editor for file and line number
	 * 
	 * @throws CoreException 
	 */
	public static IEditorPart openInEditor(final String fileName, int lineNumber) throws CoreException {

		final IWorkspace workspace = ResourcesPlugin.getWorkspace();
		final IWorkspaceRoot root = workspace.getRoot();

		IPath path = new Path(fileName);
		IFile file = root.getFileForLocation(path);
		if (file == null) {
			if (path.segmentCount() < ICoreConstants.MINIMUM_FILE_SEGMENT_LENGTH) {
				return null;
			}
			file = root.getFile(path);
			if (file == null) {
				final IProject[] projects = root.getProjects();
				for (int i = 0; i < projects.length; ++i) {
					if (!projects[i].isOpen())
						continue;
					file = projects[i].getFile(path);
					if (file != null)
						break;
				}
			}
		}

		if (file == null) {
			return null;
		}

		if (!file.exists()) {
			File localFile = new File(fileName);
			if (localFile.exists()) {
				IEditorInput editorInput = null;

				// If this file is external - put it into the external files registry
				if (!ExternalFilesRegistry.getInstance().isEntryExist(path.toString())) {
					IFile localIFile = ResourcesPlugin.getWorkspace().getRoot().getFile(path);
					if (!localIFile.exists()) {
						IFile externalFile = ExternalFileDecorator.createFile(fileName);
						ExternalFilesRegistry.getInstance().addFileEntry(fileName, externalFile);
					}
				}

				// If this is external file:
				if (ExternalFilesRegistry.getInstance().isEntryExist(path.toString())) {
					editorInput = new FileStoreEditorInput(new LocalFile(localFile));
				} else {
					LocalFileStorage fileStorage = new LocalFileStorage(localFile);
					fileStorage.setProject(file.getProject());
					editorInput = new LocalFileStorageEditorInput(fileStorage);
				}

				if (editorInput != null) {
					final IWorkbenchPage p = PHPUiPlugin.getActivePage();
					if (p != null) {
						IEditorPart part = openInEditor(editorInput, getEditorID(editorInput), true);
						if (lineNumber > 0) {
							if (part instanceof ITextEditor) {
								ITextEditor textEditor = (ITextEditor) part;
								// If a line number was given, go to it
								try {
									lineNumber = lineNumber - 1;
									IDocument document = textEditor.getDocumentProvider().getDocument(textEditor.getEditorInput());
									textEditor.selectAndReveal(document.getLineOffset(lineNumber), document.getLineLength(lineNumber));
								} catch (BadLocationException e) {
									// invalid text position -> do nothing
								}
							}
						}
						return part;
					}
					return null;
				}
			}
		}

		if (!file.exists()) {
			return null;
		}

		final IMarker marker = file.createMarker(IMarker.TEXT);
		marker.setAttribute(IMarker.LINE_NUMBER, lineNumber);
		//marker.setAttribute(IDE.EDITOR_ID_ATTR, PHPUiConstants.PHP_EDITOR_ID);
		final IWorkbenchPage p = PHPUiPlugin.getActivePage();

		IEditorPart editor = null;
		if (p != null)
			editor = IDE.openEditor(p, marker);
		marker.delete();
		return editor;
	}

