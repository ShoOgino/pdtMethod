	/**
	 * Perform a two level 2- or 3-way diff. The first level is based on line
	 * comparison, the second level on token comparison.
	 */
	private void doDiff() {
		IDocument lDoc = fLeft.getDocument();
		IDocument rDoc = fRight.getDocument();
		if (lDoc == null || rDoc == null)
			return;
		fAncestor.resetLineBackground();
		fLeft.resetLineBackground();
		fRight.resetLineBackground();

		fCurrentDiff = null;
		try {
			fMerger.doDiff();
		} catch (CoreException e) {
			CompareUIPlugin.log(e.getStatus());
			String title = Utilities.getString(getResourceBundle(), "tooComplexError.title"); //$NON-NLS-1$
			String format = Utilities.getString(getResourceBundle(), "tooComplexError.format"); //$NON-NLS-1$
			String msg = MessageFormat.format(format, new Object[] {
					Integer.toString(PlatformUI.getWorkbench().getProgressService().getLongOperationTime() / 1000) });
			MessageDialog.openError(fComposite.getShell(), title, msg);
		}

		if (fMerger.hasChanges()) {
			for (Iterator iterator = fMerger.changesIterator(); iterator.hasNext();) {
				Diff diff = (Diff) iterator.next();
				updateDiffBackground(diff);
			}
		}
		invalidateTextPresentation();
	}

