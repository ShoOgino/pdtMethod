	/**
	 * This method removes file created as an input for untitled php file, from
	 * external storage
	 * 
	 * @param file
	 *            New file in the workspace
	 */
	private void deleteUntitledStorageFile(IFile file) {
		IPath oldPath = ((NonExistingPHPFileEditorInput) getEditorInput())
				.getPath(getEditorInput());
		File oldFile = new File(oldPath.toOSString());
		if (oldFile.exists() && oldFile.canWrite()) {
			if (!oldFile.delete()) {
				Logger.log(Logger.WARNING, PHPUIMessages
						.getString("UntitledPHPEditor_deleteFailed")); //$NON-NLS-1$
			}
		}

		// copy markers
		if (file != null) {
			IWorkspaceRoot resource = ResourcesPlugin.getWorkspace().getRoot();
			try {
				IMarker[] markers = resource.findMarkers(null, true,
						IResource.DEPTH_ZERO);
				final IBreakpointManager breakpointManager = DebugPlugin
						.getDefault().getBreakpointManager();
				for (IMarker marker : markers) {
					String markerType = MarkerUtilities.getMarkerType(marker);
					if (markerType != null) {
						String fileName = (String) marker
								.getAttribute(StructuredResourceMarkerAnnotationModel.SECONDARY_ID_KEY);
						if (fileName != null
								&& new File(fileName).equals(oldFile)) {
							IBreakpoint breakpoint = breakpointManager
									.getBreakpoint(marker);
							if (breakpoint != null) {
								IMarker createdMarker = file
										.createMarker(markerType);
								createdMarker.setAttributes(breakpoint
										.getMarker().getAttributes());
								breakpointManager.removeBreakpoint(breakpoint,
										true);
								breakpoint.setMarker(createdMarker);
								breakpointManager.addBreakpoint(breakpoint);
							} else {
								MarkerUtilities.createMarker(file, marker
										.getAttributes(), markerType);
							}
						}
					}
					marker.delete();
				}
			} catch (Exception e) {
				Logger.logException(e);
			}
		}
	}

