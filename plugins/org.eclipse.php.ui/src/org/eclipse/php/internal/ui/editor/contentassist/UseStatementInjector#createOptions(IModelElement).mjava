	private Map<Object, Object> createOptions(IModelElement modelElement) {
		Map<Object, Object> options = new HashMap<>(PHPCorePlugin.getOptions());

		if (modelElement == null || modelElement.getScriptProject() == null) {
			return options;
		}

		IScopeContext[] contents = new IScopeContext[] { new ProjectScope(modelElement.getScriptProject().getProject()),
				InstanceScope.INSTANCE, DefaultScope.INSTANCE };
		for (int i = 0; i < contents.length; i++) {
			IScopeContext scopeContext = contents[i];
			IEclipsePreferences node = scopeContext.getNode(PHPCorePlugin.ID);
			if (node != null) {
				if (!options.containsKey(PHPCoreConstants.FORMATTER_USE_TABS)) {
					String useTabs = node.get(PHPCoreConstants.FORMATTER_USE_TABS, null);
					if (useTabs != null) {
						options.put(PHPCoreConstants.FORMATTER_USE_TABS, useTabs);
					}
				}
				if (!options.containsKey(PHPCoreConstants.FORMATTER_INDENTATION_SIZE)) {
					String size = node.get(PHPCoreConstants.FORMATTER_INDENTATION_SIZE, null);
					if (size != null) {
						options.put(PHPCoreConstants.FORMATTER_INDENTATION_SIZE, size);
					}
				}
			}
		}
		return options;
	}

