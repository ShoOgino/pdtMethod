	private String readNamespacePrefix(ISourceModule sourceModule, IDocument document, int offset,
			PHPVersion phpVersion) {

		if (offset > 0) {
			--offset;
		}

		IStructuredDocumentRegion sRegion = ((IStructuredDocument) document).getRegionAtCharacterOffset(offset);
		if (sRegion != null) {
			ITextRegion tRegion = sRegion.getRegionAtCharacterOffset(offset);

			ITextRegionCollection container = sRegion;
			if (tRegion instanceof ITextRegionContainer) {
				container = (ITextRegionContainer) tRegion;
				tRegion = container.getRegionAtCharacterOffset(offset);
			}

			if (tRegion != null && tRegion.getType() == PHPRegionContext.PHP_CONTENT) {
				IPHPScriptRegion phpScriptRegion = (IPHPScriptRegion) tRegion;
				try {
					tRegion = phpScriptRegion
							.getPHPToken(offset - container.getStartOffset() - phpScriptRegion.getStart());
				} catch (BadLocationException e) {
					return null;
				}

				// Determine element name:
				int elementStart = container.getStartOffset() + phpScriptRegion.getStart() + tRegion.getStart();
				TextSequence statement = PHPTextSequenceUtilities.getStatement(elementStart + tRegion.getLength(),
						sRegion, true);
				if (statement.length() != 0) {
					int endPosition = PHPTextSequenceUtilities.readBackwardSpaces(statement, statement.length());
					int startPosition = PHPTextSequenceUtilities.readIdentifierStartIndex(phpVersion, statement,
							endPosition, true);
					String elementName = startPosition < 0 ? "" //$NON-NLS-1$
							: statement.subSequence(startPosition, endPosition).toString();
					if (elementName.length() > 0) {
						return PHPModelUtils.extractNamespaceName(elementName, sourceModule, offset);
					}
				}
			}
		}
		return null;
	}

