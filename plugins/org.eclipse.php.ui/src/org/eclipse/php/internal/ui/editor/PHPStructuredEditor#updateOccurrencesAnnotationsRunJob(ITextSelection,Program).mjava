	private void updateOccurrencesAnnotationsRunJob(ITextSelection selection, Program astRoot) {
		if (astRoot == null || selection == null)
			return;

		ISourceViewer viewer = getSourceViewer();
		if (viewer == null)
			return;

		IDocument document = viewer.getDocument();
		if (document == null)
			return;

		// TODO: see the method comment, need to be removed once
		// PHPStructuredEditor#aboutToBeChangedEvent is used
		if (document.getLength() != astRoot.getEnd() || this.fReconcileSelection) {
			return;
		}

		boolean hasChanged = false;
		if (document instanceof IDocumentExtension4) {
			int offset = selection.getOffset();
			long currentModificationStamp = ((IDocumentExtension4) document).getModificationStamp();
			IRegion markOccurrenceTargetRegion = fMarkOccurrenceTargetRegion;
			hasChanged = currentModificationStamp != fMarkOccurrenceModificationStamp;
			if (markOccurrenceTargetRegion != null && !hasChanged) {
				if (markOccurrenceTargetRegion.getOffset() <= offset
						&& offset <= markOccurrenceTargetRegion.getOffset() + markOccurrenceTargetRegion.getLength())
					return;
			}
			fMarkOccurrenceTargetRegion = ScriptWordFinder.findWord(document, offset);
			fMarkOccurrenceModificationStamp = currentModificationStamp;
		}

		OccurrenceLocation[] locations = null;

		ASTNode selectedNode = NodeFinder.perform(astRoot, selection.getOffset(), selection.getLength());

		if (locations == null && fMarkExceptions) {
			// TODO : Implement Me!
			// ExceptionOccurrencesFinder finder= new
			// ExceptionOccurrencesFinder();
			// if (finder.initialize(astRoot, selectedNode) == null) {
			// locations= finder.getOccurrences();
			// }
		}

		if (locations == null && fMarkMethodExitPoints) {
			IOccurrencesFinder finder = OccurrencesFinderFactory.createMethodExitsFinder();
			if (finder.initialize(astRoot, selectedNode) == null) {
				locations = finder.getOccurrences();
			}
		}

		if (locations == null && fMarkImplementors) {
			IOccurrencesFinder finder = OccurrencesFinderFactory.createIncludeFinder();
			if (finder.initialize(astRoot, selectedNode) == null) {
				locations = finder.getOccurrences();
			}
		}

		if (locations == null && fMarkBreakContinueTargets) {
			IOccurrencesFinder finder = OccurrencesFinderFactory.createBreakContinueTargetFinder();
			if (finder.initialize(astRoot, selectedNode) == null) {
				locations = finder.getOccurrences();
			}
		}

		if (locations == null && fMarkImplementors) {
			IOccurrencesFinder finder = OccurrencesFinderFactory.createImplementorsOccurrencesFinder();
			if (finder.initialize(astRoot, selectedNode) == null) {
				locations = finder.getOccurrences();
			}
		}

		if (selectedNode != null && selectedNode.getType() == ASTNode.VARIABLE) {
			final Expression name = ((Variable) selectedNode).getName();
			if (name instanceof Identifier) {
				selectedNode = name;
			}
		}

		if (locations == null && selectedNode != null
				&& (selectedNode instanceof Identifier || (isScalarButNotInString(selectedNode)))) {
			int type = PhpElementConciliator.concile(selectedNode);
			if (markOccurrencesOfType(type)) {
				IOccurrencesFinder finder = OccurrencesFinderFactory.getOccurrencesFinder(type);
				if (finder != null) {
					if (finder.initialize(astRoot, selectedNode) == null) {
						locations = finder.getOccurrences();
					}
				}
			}
		}

		if (locations == null) {
			if (!fStickyOccurrenceAnnotations)
				removeOccurrenceAnnotations();
			else if (hasChanged) // check consistency of current annotations
				removeOccurrenceAnnotations();
			return;
		}

		fOccurrencesFinderJob = new OccurrencesFinderJob(document, locations, selection);
		// fOccurrencesFinderJob.setPriority(Job.DECORATE);
		// fOccurrencesFinderJob.setSystem(true);
		// fOccurrencesFinderJob.schedule();
		fOccurrencesFinderJob.run(new NullProgressMonitor());
	}

