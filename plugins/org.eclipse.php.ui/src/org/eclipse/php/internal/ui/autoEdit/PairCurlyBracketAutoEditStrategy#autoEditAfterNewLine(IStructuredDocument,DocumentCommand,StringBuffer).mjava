	public int autoEditAfterNewLine(IStructuredDocument document, DocumentCommand command, StringBuffer buffer) {
		try {

			int offset = command.offset;

			int rvPosition = offset + buffer.length();
			rvPosition += copyRestOfLine(document, command, buffer);

			boolean addCurlyClose = false;
			int curlyCloseCounter = 0;
			int currOffset = offset;
			IStructuredDocumentRegion sdRegion = document.getRegionAtCharacterOffset(currOffset);
			while (currOffset >= 0 && sdRegion != null) {
				if (sdRegion.getType() != PHPRegionTypes.PHP_CONTENT) {
					currOffset = sdRegion.getStartOffset() - 1;
					sdRegion = sdRegion.getPrevious();
					continue;
				}
				int regionStart = sdRegion.getStart();
				String text = sdRegion.getFullText();

				ITextRegion tRegion = null;
				int indexInText = text.length() - 1;
				while (indexInText >= 0) {
					char currChar = text.charAt(indexInText);
					if (currChar == CURLY_CLOSE) {
						tRegion = sdRegion.getRegionAtCharacterOffset(regionStart + indexInText);
						if (tRegion.getType() == PHPRegionTypes.PHP_CURLY_CLOSE) {
							curlyCloseCounter++;
						}
					} else if (currChar == CURLY_OPEN) {
						tRegion = sdRegion.getRegionAtCharacterOffset(regionStart + indexInText);
						String regionType = tRegion.getType();
						if (regionType != PHPRegionTypes.PHP_CURLY_OPEN) {
							indexInText--;
							continue;
						}
						curlyCloseCounter--;
						if (curlyCloseCounter < 0) {
							if (matcher.match(document, regionStart + indexInText + 1) == null) {
								addCurlyClose = true;
								break;
							}
							curlyCloseCounter++;
						}
					}
					indexInText--;
				}
				if (addCurlyClose) {
					break;
				}

				currOffset = sdRegion.getStartOffset() - 1;
				sdRegion = sdRegion.getPrevious();
			}

			if (addCurlyClose) {
				addCurlyCloseBracket(document, command, buffer);
			}
			return rvPosition;
		} catch (BadLocationException e) {
			Logger.logException(e);
		}
		return -1;
	}

