	private void createFileAnnotations(Map<ProjectionAnnotation, Position> currentAnnotations, Map<ProjectionAnnotation, Position> addedAnnotations, PHPFileData fileData, int startOffset, int endOffset) {
		final ProjectionModelNodeAdapterFactoryPHP adapterFactory = getAdapterFactory();
		assert adapterFactory != null : PHPUIMessages.getString("ProjectionModelNodeAdapterPHP.2"); //$NON-NLS-1$

		// set the automatic folding according to preference
		final boolean foldingPhpDoc = adapterFactory.isFoldingPhpDoc();
		final boolean foldingFunctions = adapterFactory.isFoldingFunctions();
		final boolean foldingClasses = adapterFactory.isFoldingClasses();

		Element fileElement = ElementFactory.createFileElement(fileData);
		// adds the file doc block
		createDocBlockAnnotations(fileElement, fileData, currentAnnotations, addedAnnotations, startOffset, endOffset, foldingPhpDoc);

		PHPClassData[] classes = fileData.getClasses();
		Map<String, Integer> classIndices = new HashMap<String, Integer>();
		for (PHPClassData classData : classes) {
			Integer classIndex = classIndices.get(classData.getName());
			if (classIndex == null) {
				classIndex = new Integer(0);
			} else {
				classIndex++;
			}
			classIndices.put(classData.getName(), classIndex);
			Element classElement = createCodeDataAnnotations(fileElement, classData, currentAnnotations, addedAnnotations, classIndex, startOffset, endOffset, foldingClasses, foldingPhpDoc);
			PHPFunctionData[] methods = classData.getFunctions();
			Map<String, Integer> methodIndices = new HashMap<String, Integer>();
			for (PHPFunctionData methodData : methods) {
				Integer methodIndex = methodIndices.get(methodData.getName());
				if (methodIndex == null) {
					methodIndex = new Integer(0);
				} else {
					methodIndex++;
				}
				methodIndices.put(methodData.getName(), methodIndex);
				createCodeDataAnnotations(classElement, methodData, currentAnnotations, addedAnnotations, methodIndex, startOffset, endOffset, foldingFunctions, foldingPhpDoc);
			}
			PHPClassVarData[] variables = classData.getVars();
			Map<String, Integer> variableIndices = new HashMap<String, Integer>();
			for (PHPClassVarData variableData : variables) {
				Integer variableIndex = variableIndices.get(variableData.getName());
				if (variableIndex == null) {
					variableIndex = new Integer(0);
				} else {
					variableIndex++;
				}
				variableIndices.put(variableData.getName(), variableIndex);
				createCodeDataAnnotations(classElement, variableData, currentAnnotations, addedAnnotations, variableIndex, startOffset, endOffset, false, foldingPhpDoc);
			}

			PHPClassConstData[] constants = classData.getConsts();
			Map<String, Integer> constantIndices = new HashMap<String, Integer>();
			for (PHPClassConstData constantData : constants) {
				Integer constantIndex = constantIndices.get(constantData.getName());
				if (constantIndex == null) {
					constantIndex = new Integer(0);
				} else {
					constantIndex++;
				}
				constantIndices.put(constantData.getName(), constantIndex);
				createCodeDataAnnotations(classElement, constantData, currentAnnotations, addedAnnotations, constantIndex, startOffset, endOffset, false, foldingPhpDoc);
			}
		}

		PHPFunctionData[] functions = fileData.getFunctions();
		Map<String, Integer> functionIndices = new HashMap<String, Integer>();
		for (PHPFunctionData functionData : functions) {
			Integer functionIndex = functionIndices.get(functionData.getName());
			if (functionIndex == null) {
				functionIndex = new Integer(0);
			} else {
				functionIndex++;
			}
			functionIndices.put(functionData.getName(), functionIndex);
			createCodeDataAnnotations(fileElement, functionData, currentAnnotations, addedAnnotations, functionIndex, startOffset, endOffset, foldingFunctions, foldingPhpDoc);
		}
	}

