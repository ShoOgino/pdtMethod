	/**
	 * Returns all markers which include the ruler's line of activity.
	 * 
	 * @param textEditor
	 * @param resource
	 * @param document
	 * @param annotationModel
	 * @param rulerInfo
	 * @return
	 */
	public static IMarker[] getMarkers(ITextEditor textEditor, IResource resource, IDocument document,
			AbstractMarkerAnnotationModel annotationModel, IVerticalRulerInfo rulerInfo) {

		List<IMarker> markers = new ArrayList<IMarker>();
		if (resource != null && annotationModel != null) {
			try {
				IMarker[] allMarkers;
				if (resource instanceof IFile && resource.exists()) {
					allMarkers = resource.findMarkers(IBreakpoint.BREAKPOINT_MARKER, true, IResource.DEPTH_ZERO);
					if (allMarkers != null) {
						for (IMarker marker : allMarkers) {
							if (includesRulerLine(annotationModel.getMarkerPosition(marker), document, rulerInfo)) {
								markers.add(marker);
							}
						}
					}
				} else {
					String secondaryId = getSecondaryId(textEditor);
					allMarkers = resource.getWorkspace().getRoot().findMarkers(IBreakpoint.BREAKPOINT_MARKER, true,
							IResource.DEPTH_ZERO);
					if (allMarkers != null) {
						IBreakpointManager manager = DebugPlugin.getDefault().getBreakpointManager();
						for (IMarker marker : allMarkers) {
							if (manager.getBreakpoint(marker) != null) {
								String markerSecondaryId = marker
										.getAttribute(StructuredResourceMarkerAnnotationModel.SECONDARY_ID_KEY, null);
								if ((secondaryId == null || secondaryId.equals(markerSecondaryId)) && includesRulerLine(
										annotationModel.getMarkerPosition(marker), document, rulerInfo)) {
									markers.add(marker);
								}
							}
						}
					}
				}

			} catch (CoreException x) {
			}
		}
		return (IMarker[]) markers.toArray(new IMarker[0]);
	}

