	@Override
	public void createPartControl(final Composite parent) {
		super.createPartControl(parent);
		getSite().getWorkbenchWindow().addPerspectiveListener(new IPerspectiveListener2() {

			public void perspectiveChanged(IWorkbenchPage page, IPerspectiveDescriptor perspective, IWorkbenchPartReference partRef, String changeId) {
				if (changeId == IWorkbenchPage.CHANGE_EDITOR_CLOSE) {
					if (partRef.getPart(false) == getEditorPart()) {
						final IFile file = getFile();
						if (file != null) {
							ExternalFilesRegistry externalRegistry = ExternalFilesRegistry.getInstance();
							if (file.exists()) {
								IProject proj = file.getProject();
								try {
									//remove the file from project model when it is an RSE project.
									//this is to prevent display of the completion from this file
									//when it is closed
									if (proj.hasNature(PHPUiConstants.RSE_TEMP_PROJECT_NATURE_ID)) {
										PHPWorkspaceModelManager.getInstance().getModelForProject(proj).removeFileFromModel(file);
									} else {
										//parse the file in case the editor was closed without saving

										// making sure the project model exists (in case the editor closing is during PDT startup)
										if (PHPWorkspaceModelManager.getInstance().getModelForProject(proj) != null) {
											WorkspaceJob job = new WorkspaceJob("") { //$NON-NLS-1$
												@Override
												public IStatus runInWorkspace(IProgressMonitor monitor) throws CoreException {
													PHPWorkspaceModelManager.getInstance().addFileToModel(file);
													return Status.OK_STATUS;
												}
											};
											job.setRule(ResourcesPlugin.getWorkspace().getRuleFactory().buildRule());
											job.schedule();
										}
									}

								} catch (CoreException ce) {
									Logger.logException(ce);
									return;
								}
							}
							//external php file
							else {
								IStructuredModel model = getModel();
								if (model != null) {
									String fileName = model.getBaseLocation();
									if (externalRegistry.isEntryExist(fileName)) {
										//if there are more than one editor opening the external file using "New Editor", do not remove it from model and registry
										IEditorReference[] existingEditors = null;
										WorkbenchPage activePage = (WorkbenchPage) PHPStructuredEditor.this.getSite().getWorkbenchWindow().getActivePage();
										if (activePage != null) {
											existingEditors = activePage.getEditorManager().findEditors(getEditorInput(), null, IWorkbenchPage.MATCH_INPUT);
										}
										// Make sure that the file has a full path before we try to remove it from the model.
										if (existingEditors == null || existingEditors.length == 1) { //a single editor
											IFile fileDecorator = ExternalFilesRegistry.getInstance().getFileEntry(fileName);
											PHPWorkspaceModelManager.getInstance().removeFileFromModel(fileDecorator);
											externalRegistry.removeFileEntry(fileName);
										}
									}
								}
							}
						}
						getSite().getWorkbenchWindow().removePerspectiveListener(this);
					}
				}
			}

			public void perspectiveActivated(IWorkbenchPage page, IPerspectiveDescriptor perspective) {
			}

			public void perspectiveChanged(IWorkbenchPage page, IPerspectiveDescriptor perspective, String changeId) {
			}
		});
		final IInformationControlCreator informationControlCreator = new IInformationControlCreator() {
			public IInformationControl createInformationControl(Shell shell) {
				boolean cutDown = false;
				int style = cutDown ? SWT.NONE : SWT.V_SCROLL | SWT.H_SCROLL;
				return new DefaultInformationControl(shell, SWT.RESIZE | SWT.TOOL, style, new HTMLTextPresenter(cutDown));
			}
		};

		fInformationPresenter = new InformationPresenter(informationControlCreator);
		fInformationPresenter.setSizeConstraints(60, 10, true, true);
		fInformationPresenter.install(getSourceViewer());

		// bug fix - #154817
		StyledText styledText = getTextViewer().getTextWidget();
		styledText.getContent().addTextChangeListener(new TextChangeListener() {

			public void textChanging(TextChangingEvent event) {
			}

			public void textChanged(TextChangedEvent event) {
			}

			public void textSet(TextChangedEvent event) {
				refreshViewer();
			}

		});

		//		 bug fix - #156810
		ResourcesPlugin.getWorkspace().addResourceChangeListener(new IResourceChangeListener() {

			public void resourceChanged(IResourceChangeEvent event) {
				try {
					if (getSite().getPage().getActiveEditor().equals(PHPStructuredEditor.this) && event.getType() == IResourceChangeEvent.POST_CHANGE && event.getDelta() != null) {
						refreshViewer();
					}
				} catch (NullPointerException e) {

				}
			}

		});

	}

