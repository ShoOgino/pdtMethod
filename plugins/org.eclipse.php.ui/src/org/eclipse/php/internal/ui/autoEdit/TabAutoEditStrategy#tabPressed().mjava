	private void tabPressed() {
		try {

			// get original line information
			final int lineNumber = document.getLineOfOffset(command.offset);
			final IRegion originalLineInfo = document.getLineInformation(lineNumber);
			final int originalLineStart = originalLineInfo.getOffset();
			int originalIndentSize = 0;
			int autoIndentSize = 0;

			boolean caretInBegining = (command.offset == originalLineStart);

			// if caret is either :
			// - located in line's begining
			// OR
			// - there's no alphabetical text before it
			if (caretInBegining || !hasTextBeforeCaret(originalLineInfo)) {
				// the current "visual" indentation size (Tab = 4 x space)
				originalIndentSize = calculateOriginalIndentSize(lineNumber, originalLineInfo);
				// the automatic needed total "visual" indentation size (Tab = 4
				// x space)
				autoIndentSize = calculateAutoIndentSize(lineNumber);

				// calculateAutoIndentSize(lineNumber) had a runtime Exception
				// and returns -1
				if (autoIndentSize == -1) {
					applyTabRule();
					return;
				}
				// checks whether caret is before a space OR Tab character
				boolean emptyCharAfterOldCaretPos = hasEmptyCharAfterCaret(lineNumber, originalLineStart);
				if (autoIndentSize >= originalIndentSize) {
					applyIndent(lineNumber, originalLineStart);

					// if the caret "Visual" position did not change and it is
					// exactly in the begining
					// of an alphabetical text
					if ((autoIndentSize == originalIndentSize) && !emptyCharAfterOldCaretPos) {
						applyTabRule();
					}
				}
				// autoIndentSize < originalIndentSize, means that indentation
				// will shorten the line
				else {
					if (hasEmptyCharAfterCaret(lineNumber, originalLineStart)) {
						// this indentation will shorten the line
						applyIndent(lineNumber, originalLineStart);
					} else {
						// this will not do auto indentation, but will apply a
						// Tab
						applyTabRule();
					}
				}
			}

			// caret is located in the middle of line and there's text before it
			else {
				applyTabRule();
			}

		} catch (BadLocationException exp) {
			Logger.logException(exp);
		}
	}

