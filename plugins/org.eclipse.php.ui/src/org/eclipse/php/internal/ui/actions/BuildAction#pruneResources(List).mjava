	/* (non-Javadoc)
	 * Method declared on WorkspaceAction.
	 *
	 * Change the order of the resources so that
	 * it matches the build order. Closed and
	 * non existant projects are eliminated. Also,
	 * any projects in cycles are eliminated.
	 */
	List pruneResources(List resourceCollection) {
		//recursively compute project prerequisites
		HashSet toBuild = new HashSet();
		for (Iterator it = resourceCollection.iterator(); it.hasNext();)
			addAllProjects((IProject) it.next(), toBuild);

		// Optimize...
		if (toBuild.size() < 2)
			return resourceCollection;

		// Try the workspace's description build order if specified
		String[] orderedNames = ResourcesPlugin.getWorkspace().getDescription().getBuildOrder();
		if (orderedNames != null) {
			List orderedProjects = new ArrayList(toBuild.size());
			IWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot();
			for (int i = 0; i < orderedNames.length; i++) {
				IProject handle = root.getProject(orderedNames[i]);
				if (toBuild.contains(handle)) {
					orderedProjects.add(handle);
					toBuild.remove(handle);
				}
			}
			//Add anything not specified before we return
			orderedProjects.addAll(toBuild);
			return orderedProjects;
		}

		// Try the project prerequisite order then
		IProject[] projects = new IProject[toBuild.size()];
		projects = (IProject[]) toBuild.toArray(projects);
		IWorkspace.ProjectOrder po = ResourcesPlugin.getWorkspace().computeProjectOrder(projects);
		ArrayList orderedProjects = new ArrayList();
		orderedProjects.addAll(Arrays.asList(po.projects));
		return orderedProjects;
	}

