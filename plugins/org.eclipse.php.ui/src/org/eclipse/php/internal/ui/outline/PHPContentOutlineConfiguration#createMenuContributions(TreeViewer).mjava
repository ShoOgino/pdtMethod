	protected IContributionItem[] createMenuContributions(final TreeViewer viewer) {
		IContributionItem[] items;

		changeOutlineModeActionPHP = new ChangeOutlineModeAction(PHPUIMessages.PHPOutlinePage_mode_php, MODE_PHP, this,
				viewer);
		final IContributionItem showPHPItem = new ActionContributionItem(changeOutlineModeActionPHP);

		changeOutlineModeActionHTML = new ChangeOutlineModeAction(PHPUIMessages.PHPOutlinePage_mode_html, MODE_HTML,
				this, viewer);

		propertyChangeListener = new IPropertyChangeListener() {
			public void propertyChange(PropertyChangeEvent event) {
				if (event.getProperty().equals("checked")) { //$NON-NLS-1$
					boolean checked = ((Boolean) event.getNewValue()).booleanValue();
					if (sortAction != null) {
						sortAction.setEnabled(!checked);
					}
				}
			}
		};
		changeOutlineModeActionHTML.addPropertyChangeListener(propertyChangeListener);

		final IContributionItem showHTMLItem = new ActionContributionItem(changeOutlineModeActionHTML);

		items = super.createMenuContributions(viewer);

		if (items == null) {
			items = new IContributionItem[] { showPHPItem, showHTMLItem };
		} else {
			final IContributionItem[] combinedItems = new IContributionItem[items.length + 3];
			combinedItems[0] = showPHPItem;
			combinedItems[1] = showHTMLItem;
			combinedItems[2] = new Separator(OUTLINE_MODE);

			for (int i = 0; i < items.length; i++) {
				if (OUTLINE_SHOW_ATTRIBUTE_ID.equals(items[i].getId())) {
					items[i] = new ModeBasedContributionItem(MODE_HTML, items[i]);
					break;
				}
			}

			System.arraycopy(items, 0, combinedItems, 3, items.length);
			items = combinedItems;
		}
		if (changeOutlineModeActionHTML.isChecked() && sortAction != null) {
			sortAction.setEnabled(false);
		}
		return items;
	}

