	protected IContributionItem[] createMenuContributions(
			final TreeViewer viewer) {
		IContributionItem[] items;

		changeOutlineModeActionPHP = new ChangeOutlineModeAction(
				PHPUIMessages.PHPOutlinePage_mode_php, MODE_PHP, this, viewer); 
		final IContributionItem showPHPItem = new ActionContributionItem(
				changeOutlineModeActionPHP);

		changeOutlineModeActionHTML = new ChangeOutlineModeAction(
				PHPUIMessages.PHPOutlinePage_mode_html, MODE_HTML, this, viewer); 

		propertyChangeListener = new IPropertyChangeListener() {
			public void propertyChange(PropertyChangeEvent event) {
				if (event.getProperty().equals("checked")) { //$NON-NLS-1$
					boolean checked = ((Boolean) event.getNewValue())
							.booleanValue();
					if (sortAction != null) {
						sortAction.setEnabled(!checked);
					}
				}
			}
		};
		changeOutlineModeActionHTML
				.addPropertyChangeListener(propertyChangeListener);

		final IContributionItem showHTMLItem = new ActionContributionItem(
				changeOutlineModeActionHTML);

		// Custom filter group
		if (fCustomFiltersActionGroup == null) {
			fCustomFiltersActionGroup = new CustomFiltersActionGroup(
					OUTLINE_PAGE, viewer); 
		}

		final IContributionItem filtersItem = new FilterActionGroupContributionItem(
				fCustomFiltersActionGroup);

		items = super.createMenuContributions(viewer);

		if (items == null)
			items = new IContributionItem[] { showPHPItem, showHTMLItem,
					filtersItem };
		else {
			final IContributionItem[] combinedItems = new IContributionItem[items.length + 3];
			System.arraycopy(items, 0, combinedItems, 0, items.length);
			combinedItems[items.length] = showPHPItem;
			combinedItems[items.length + 1] = showHTMLItem;
			combinedItems[items.length + 2] = filtersItem;
			items = combinedItems;
		}
		if (changeOutlineModeActionHTML.isChecked()) {
			sortAction.setEnabled(false);
		}
		return items;
	}

