	/**
	 * Hook method for restoring widget values to the values that they held last
	 * time this wizard was used to completion.
	 */
	protected void restoreWidgetValues() {
		super.restoreWidgetValues();

		initializeJarPackage();

		if (fileNames != null && fileNames.length > 0) {
			fDestinationNamesCombo.setItems(fileNames);
			fDestinationNamesCombo.select(0);
		}
		if (pharData.getExportType() == PharConstants.PHAR) {
			pharCompressRadio.setSelection(true);
		} else if (pharData.getExportType() == PharConstants.TAR) {
			tarCompressRadio.setSelection(true);
		} else if (pharData.getExportType() == PharConstants.ZIP) {
			zipCompressRadio.setSelection(true);
			setZipExportType();
		}

		if (pharData.getCompressType() == PharConstants.NONE_COMPRESSED) {
			noneCompressTypePhar.setSelection(true);
		} else if (pharData.getCompressType() == PharConstants.BZ2_COMPRESSED) {
			bzipCompressTypePhar.setSelection(true);
		} else if (pharData.getCompressType() == PharConstants.GZ_COMPRESSED) {
			zlibCompressTypePhar.setSelection(true);
		}
		// fIncludeDirectoryEntriesCheckbox.setSelection(pharData
		// .areDirectoryEntriesIncluded());
		fOverwriteCheckbox.setSelection(pharData.allowOverwrite());
		if (pharData.isStubGenerated()) {
			fGenerateManifestRadioButton.setSelection(true);
		} else {
			fUseManifestRadioButton.setSelection(true);
			fManifestFileText.setText(pharData.getStubLocation().toString());
		}

		fUseSignatureCheckbox.setSelection(pharData.isUseSignature());
		if (pharData.getSignature() != null) {
			for (Iterator<Button> iterator = signatureButtons.iterator(); iterator
					.hasNext();) {
				Button button = iterator.next();
				if (button.getText().equals(pharData.getSignature())) {
					button.setSelection(true);
					break;
				}
			}
		} else {
			if (signatureButtons.size() > 0) {
				signatureButtons.get(0).setSelection(true);
			}
		}

		// fUseSignatureCheckbox.sets
		updateEnableState();
	}

