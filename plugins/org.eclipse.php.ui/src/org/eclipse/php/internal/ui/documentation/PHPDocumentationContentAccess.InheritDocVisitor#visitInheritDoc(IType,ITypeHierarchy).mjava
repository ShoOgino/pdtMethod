		/**
		 * Visits the super types of the given <code>currentType</code>.
		 * 
		 * @param currentType
		 *            the starting type
		 * @param typeHierarchy
		 *            a super type hierarchy that contains
		 *            <code>currentType</code>
		 * @return the result from a call to {@link #visit(IType)}, or
		 *         <code>null</code> if none of the calls returned a result
		 * @throws ModelException
		 *             unexpected problem
		 */
		public Object visitInheritDoc(IType currentType, ITypeHierarchy typeHierarchy) throws ModelException {
			ArrayList visited = new ArrayList();
			visited.add(currentType);
			// Object result = visitInheritDocInterfaces(visited, currentType,
			// typeHierarchy);
			// if (result != InheritDocVisitor.CONTINUE)
			// return result;
			Object result;
			IType[] superClasses = typeHierarchy.getSuperclass(currentType);
			for (IType superClass : superClasses) {
				while (superClass != null && !visited.contains(superClass)) {
					result = visit(superClass);
					if (result == InheritDocVisitor.STOP_BRANCH) {
						return null;
					} else if (result == InheritDocVisitor.CONTINUE) {
						visited.add(superClass);
						result = visitInheritDocInterfaces(visited, superClass, typeHierarchy);
						if (result != InheritDocVisitor.CONTINUE)
							return result;
						else
							superClasses = typeHierarchy.getSuperclass(superClass);
					} else {
						return result;
					}
				}
			}
			return null;
		}

