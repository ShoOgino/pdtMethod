	/* (non-Javadoc)
	 * @see org.eclipse.jface.text.templates.TemplateVariableResolver#resolve(org.eclipse.jface.text.templates.TemplateVariable, org.eclipse.jface.text.templates.TemplateContext)
	 */
	public void resolve(TemplateVariable variable, TemplateContext context) {
		
		if (variable instanceof PhpVariable) {
			PhpContext jc= (PhpContext) context;
			PhpVariable jv= (PhpVariable) variable;
	
			List params= variable.getVariableType().getParams();
			if (params.size() == 0) {
				fTypes= getVisibleVariables(fDefaultType, jc);
				jv.setParamType(fDefaultType);
			} else if (params.size() == 1) {
				String type= (String) params.get(0);
				fTypes= getVisibleVariables(type, jc);
				jv.setParamType(type);
			} else {
				ArrayList variables= new ArrayList();
				for (Iterator iterator= params.iterator(); iterator.hasNext();) {
					variables.addAll(Arrays.asList(getVisibleVariables((String) iterator.next(), jc)));
				}
				fTypes= (IType[]) variables.toArray(new IType[variables.size()]);
				
				//set to default type, a template which references to the type
				//of _the_ parameter will not correctly work anyway
				jv.setParamType(fDefaultType);
			}
			
			if (fTypes.length > 0) {
				jv.setChoices(fTypes);
				jc.markAsUsed(jv.getDefaultValue());
			} else {
				super.resolve(variable, context);
				return;
			}
			if (fTypes.length > 1)
				variable.setUnambiguous(false);
			else
				variable.setUnambiguous(isUnambiguous(context));
		} else
			super.resolve(variable, context);
	}

