	/**
	 * @param blockedRegion
	 * @param partitionStartOffset
	 * @param partitionLength
	 * @param holdResults
	 * @return
	 */
	public boolean prepareTextRegion(ITextRegionCollection blockedRegion, int partitionStartOffset, int partitionLength,
			Collection<StyleRange> holdResults) {
		if (blockedRegion == null) {
			return false;
		}

		assert blockedRegion.getLength() > 0 && partitionStartOffset >= 0 && partitionLength >= 0
				&& holdResults != null;

		if (partitionLength == 0) {
			return true;
		}

		boolean handled = false;
		final int partitionEndOffset = partitionStartOffset + partitionLength;
		ITextRegion region = null;
		ITextRegionList regions = blockedRegion.getRegions();
		int nRegions = regions.size();
		StyleRange styleRange = null;
		TextAttribute previousAttr = null;
		TextAttribute attr = null;
		int previousEndOffset = -1;

		for (int i = 0; i < nRegions; i++) {
			region = regions.get(i);
			final int startOffset = blockedRegion.getStartOffset(region);
			if (startOffset >= partitionEndOffset)
				break;
			if (blockedRegion.getEndOffset(region) <= partitionStartOffset)
				continue;

			if (region instanceof ITextRegionCollection) {
				handled = prepareTextRegion((ITextRegionCollection) region, partitionStartOffset, partitionLength,
						holdResults);
				previousAttr = null;
				styleRange = null;
				previousEndOffset = -1;
			} else {

				if (region.getType() == PHPRegionContext.PHP_CONTENT) {
					handled = preparePhpRegions(holdResults, (IPhpScriptRegion) region, startOffset,
							partitionStartOffset, partitionLength);
					previousAttr = null;
					styleRange = null;
					previousEndOffset = -1;
				} else {
					attr = getAttributeFor(region);
					if (attr != null) {
						handled = true;
						// if this region's attr is the same as previous one,
						// then just adjust the previous style range
						// instead of creating a new instance of one
						// note: to use 'equals' in this case is important,
						// since sometimes different instances of attributes are
						// associated with a region, even if the attribute has
						// the same values.
						// TODO: this needs to be improved to handle readonly
						// regions correctly
						if (styleRange != null && previousAttr != null && previousAttr.equals(attr)
								&& previousEndOffset == startOffset) {
							// extends the prev styleRange with the current
							// region length
							styleRange.length += region.getLength();
							if (styleRange.start + styleRange.length > partitionEndOffset) {
								styleRange.length -= styleRange.start + styleRange.length - partitionEndOffset;
							}
						} else {
							styleRange = createStyleRange(blockedRegion, region, attr, partitionStartOffset,
									partitionLength);
							holdResults.add(styleRange);
						}
						previousAttr = attr;
						previousEndOffset = blockedRegion.getEndOffset(region);
					} else {
						previousAttr = null;
						styleRange = null;
						previousEndOffset = -1;
					}
				}
			}
		}
		return handled;
	}

