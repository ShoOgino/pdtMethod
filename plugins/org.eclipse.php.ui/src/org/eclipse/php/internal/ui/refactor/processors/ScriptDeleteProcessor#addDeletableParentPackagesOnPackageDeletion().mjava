	/**
	 * Add deletable parent packages to the list of items to delete.
	 * 
	 * @throws CoreException
	 */
	private void addDeletableParentPackagesOnPackageDeletion() throws CoreException {

		final List/* <IScriptFolder */<?> initialPackagesToDelete = ReorgUtils.getElementsOfType(fScriptElements,
				IModelElement.SCRIPT_FOLDER);

		if (initialPackagesToDelete.size() == 0)
			return;

		// Move from inner to outer packages
		Collections.sort(initialPackagesToDelete, new Comparator<Object>() {
			@Override
			public int compare(Object arg0, Object arg1) {
				IScriptFolder one = (IScriptFolder) arg0;
				IScriptFolder two = (IScriptFolder) arg1;
				return two.getElementName().compareTo(one.getElementName());
			}
		});

		// Get resources andscriptelements which will be deleted as well
		final Set<IResource> deletedChildren = new HashSet<>();
		deletedChildren.addAll(Arrays.asList(fResources));
		for (int i = 0; i < fScriptElements.length; i++) {
			if (!ReorgUtils.isInsideSourceModule(fScriptElements[i]))
				deletedChildren.add(fScriptElements[i].getResource());
		}

		// new package list in the right sequence
		final List<IScriptFolder> allFragmentsToDelete = new ArrayList<>();

		for (Iterator<?> outerIter = initialPackagesToDelete.iterator(); outerIter.hasNext();) {
			final IScriptFolder currentScriptFolder = (IScriptFolder) outerIter.next();

			// The package will at least be cleared
			allFragmentsToDelete.add(currentScriptFolder);

			if (canRemoveCompletely(currentScriptFolder, initialPackagesToDelete)) {

				final IScriptFolder parent = ModelElementUtil.getParentSubpackage(currentScriptFolder);
				if (parent != null && !initialPackagesToDelete.contains(parent)) {

					final List<IScriptFolder> emptyParents = new ArrayList<>();
					addDeletableParentPackages(parent, initialPackagesToDelete, deletedChildren, emptyParents);

					// Add parents in the right sequence (inner to outer)
					allFragmentsToDelete.addAll(emptyParents);
				}
			}
		}

		// Remove resources in deleted packages; and the packages as well
		final List<IModelElement> modelElements = new ArrayList<>();
		for (int i = 0; i < fScriptElements.length; i++) {
			if (!(fScriptElements[i] instanceof IScriptFolder)) {
				// remove children of deleted packages
				final IScriptFolder frag = (IScriptFolder) fScriptElements[i].getAncestor(IModelElement.SCRIPT_FOLDER);
				if (!allFragmentsToDelete.contains(frag))
					modelElements.add(fScriptElements[i]);
			}
		}
		// Re-add deleted packages - note the (new) sequence
		modelElements.addAll(allFragmentsToDelete);

		// Remove resources in deleted folders
		final List<IResource> resources = new ArrayList<>();
		for (int i = 0; i < fResources.length; i++) {
			IResource parent = fResources[i];
			if (parent.getType() == IResource.FILE)
				parent = parent.getParent();
			if (!deletedChildren.contains(parent))
				resources.add(fResources[i]);
		}

		fScriptElements = modelElements.toArray(new IModelElement[modelElements.size()]);
		fResources = resources.toArray(new IResource[resources.size()]);
	}

