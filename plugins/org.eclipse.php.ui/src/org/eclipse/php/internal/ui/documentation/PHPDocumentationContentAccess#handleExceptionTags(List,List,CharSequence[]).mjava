	private void handleExceptionTags(List tags, List exceptionNames, CharSequence[] exceptionDescriptions) {
		if (tags.size() == 0 && containsOnlyNull(exceptionNames))
			return;

		handleBlockTagTitle(PHPDocumentationMessages.JavaDoc2HTMLTextReader_throws_section);

		ArrayList<String> descList = new ArrayList<String>();

		for (Iterator iter = tags.iterator(); iter.hasNext();) {
			PHPDocTag tag = (PHPDocTag) iter.next();
			List<TypeReference> fragments = tag.getTypeReferences();
			if (fragments.size() > 0) {
				descList.add(handleThrowsException(fragments.get(0).getName().trim(), tag.getValue()));
			}
		}
		for (int i = 0; i < exceptionDescriptions.length; i++) {
			// by construction, the value of "name" must be a tag name in the
			// "tags" list
			String name = (String) exceptionNames.get(i);
			CharSequence rawDescription = exceptionDescriptions[i];
			if (name != null) {
				String fullDesc = handleThrowsException(name, rawDescription);
				String emptyDesc = handleThrowsException(name, null);
				// Add the inherited exception description when it differs from
				// the tag exception description.
				// Also only add the inherited description when it is a full
				// exception description.
				if (!descList.contains(fullDesc) && !fullDesc.equals(emptyDesc)) {
					boolean wasEmptyDescFound = false;
					// replace existing empty descriptions by full descriptions
					for (int j = 0; j < descList.size(); j++) {
						if (emptyDesc.equals(descList.get(j))) {
							descList.set(j, fullDesc);
							wasEmptyDescFound = true;
						}
					}
					// add the inherited exception description when necessary
					if (!wasEmptyDescFound) {
						descList.add(fullDesc);
					}
				}
			}
		}

		for (int i = 0; i < descList.size(); i++) {
			fBuf.append(BlOCK_TAG_ENTRY_START);
			fBuf.append(descList.get(i));
			doWorkAround();
			fBuf.append(BlOCK_TAG_ENTRY_END);
		}
	}

