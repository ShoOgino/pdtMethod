	/**
	 * Get the ProjectionModelNodeAdapterFactoryJSP to use with this provider.
	 *
	 * @return ProjectionModelNodeAdapterFactoryJSP
	 */
	private ProjectionModelNodeAdapterFactoryPHP getAdapterFactoryPHP(boolean createIfNeeded) {
		final long start = System.currentTimeMillis();

		ProjectionModelNodeAdapterFactoryPHP factory = null;
		if (fDocument != null) {
			IStructuredModel sModel = null;
			try {
				sModel = StructuredModelManager.getModelManager().getExistingModelForRead(fDocument);
				if (sModel != null) {
					final FactoryRegistry factoryRegistry = sModel.getFactoryRegistry();

					// getting the projectionmodelnodeadapter for the first
					// time
					// so do some initializing
					if (!factoryRegistry.contains(ProjectionModelNodeAdapterPHP.class) && createIfNeeded) {
						final ProjectionModelNodeAdapterFactoryPHP newFactory = new ProjectionModelNodeAdapterFactoryPHP();

						// add factory to factory registry
						factoryRegistry.addFactory(newFactory);

						// add factory to propogating adapter
						final IDOMModel domModel = (IDOMModel) sModel;
						final Document document = domModel.getDocument();
						final PropagatingAdapter propagatingAdapter = (PropagatingAdapter) ((INodeNotifier) document).getAdapterFor(PropagatingAdapter.class);
						if (propagatingAdapter != null) {
							propagatingAdapter.addAdaptOnCreateFactory(newFactory);
						}
					}

					// try and get the factory
					factory = (ProjectionModelNodeAdapterFactoryPHP) factoryRegistry.getFactoryFor(ProjectionModelNodeAdapterPHP.class);
				}
			} finally {
				if (sModel != null) {
					sModel.releaseFromRead();
				}
			}
		}

		return factory;
	}

