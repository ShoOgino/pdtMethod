	private static ITypeBinding getPossibleReferenceBinding(ASTNode node) {
		ASTNode parent = node.getParent();
		switch (parent.getType()) {
		case ASTNode.ASSIGNMENT:
			Assignment assignment = (Assignment) parent;
			if (node.equals(assignment.getLeftHandSide())) {
				return assignment.getRightHandSide().resolveTypeBinding();
			}
			return assignment.getLeftHandSide().resolveTypeBinding();
		case ASTNode.INFIX_EXPRESSION:
			InfixExpression infix = (InfixExpression) parent;
			int op = infix.getOperator();
			if (op == InfixExpression.OP_AND || op == InfixExpression.OP_OR) {
				// boolean operation
				return infix.getAST().resolveWellKnownType("boolean"); //$NON-NLS-1$
			} else if (op == InfixExpression.OP_SL || op == InfixExpression.OP_SR) {
				// asymmetric operation
				return infix.getAST().resolveWellKnownType("int"); //$NON-NLS-1$
			}
			if (node.equals(infix.getLeft())) {
				// xx operation expression
				ITypeBinding rigthHandBinding = infix.getRight().resolveTypeBinding();
				if (rigthHandBinding != null) {
					return rigthHandBinding;
				}
			} else {
				// expression operation xx
				ITypeBinding leftHandBinding = infix.getLeft().resolveTypeBinding();
				if (leftHandBinding != null) {
					return leftHandBinding;
				}
			}
			if (op != InfixExpression.OP_IS_EQUAL && op != InfixExpression.OP_IS_NOT_EQUAL) {
				return infix.getAST().resolveWellKnownType("int"); //$NON-NLS-1$
			}
			break;
		case ASTNode.INSTANCE_OF_EXPRESSION:
			InstanceOfExpression instanceofExpression = (InstanceOfExpression) parent;
			return instanceofExpression.getExpression().resolveTypeBinding();
		case ASTNode.SINGLE_FIELD_DECLARATION:
			SingleFieldDeclaration frag = (SingleFieldDeclaration) parent;
			if (frag.getName().equals(node)) {
				return frag.getName().resolveTypeBinding();
			}
			break;
		case ASTNode.METHOD_INVOCATION:
			MethodInvocation methodInvocation = (MethodInvocation) parent;
			IMethodBinding methodBinding = methodInvocation.resolveMethodBinding();
			if (methodBinding != null) {
				return getParameterTypeBinding(node, methodInvocation.getMethod().parameters(), methodBinding);
			}
			break;
		case ASTNode.CLASS_INSTANCE_CREATION: {
			ClassInstanceCreation creation = (ClassInstanceCreation) parent;
			IMethodBinding creationBinding = creation.resolveConstructorBinding();
			if (creationBinding != null) {
				return getParameterTypeBinding(node, creation.ctorParams(), creationBinding);
			}
			break;
		}
		case ASTNode.PARENTHESIS_EXPRESSION:
			return guessBindingForReference(parent);
		case ASTNode.ARRAY_ACCESS:
			if (((ArrayAccess) parent).getIndex().equals(node)) {
				return parent.getAST().resolveWellKnownType("int"); //$NON-NLS-1$
			} else {
				ITypeBinding parentBinding = getPossibleReferenceBinding(parent);
				if (parentBinding == null) {
					parentBinding = parent.getAST().resolveWellKnownType("java.lang.Object"); //$NON-NLS-1$
				}
				return parentBinding.createArrayType(1);
			}
		case ASTNode.CONDITIONAL_EXPRESSION:
			ConditionalExpression expression = (ConditionalExpression) parent;
			if (node.equals(expression.getCondition())) {
				return parent.getAST().resolveWellKnownType("boolean"); //$NON-NLS-1$
			}
			if (node.equals(expression.getIfFalse())) {
				return expression.getIfTrue().resolveTypeBinding();
			}
			return expression.getIfFalse().resolveTypeBinding();
		case ASTNode.IF_STATEMENT:
		case ASTNode.WHILE_STATEMENT:
		case ASTNode.DO_STATEMENT:
			if (node instanceof Expression) {
				return parent.getAST().resolveWellKnownType("boolean"); //$NON-NLS-1$
			}
			break;
		case ASTNode.SWITCH_STATEMENT:
			if (((SwitchStatement) parent).getExpression().equals(node)) {
				return parent.getAST().resolveWellKnownType("int"); //$NON-NLS-1$
			}
			break;
		case ASTNode.CAST_EXPRESSION:
			return ((CastExpression) parent).resolveTypeBinding();
		case ASTNode.THROW_STATEMENT:
		case ASTNode.CATCH_CLAUSE:
			return parent.getAST().resolveWellKnownType("Exception"); //$NON-NLS-1$
		case ASTNode.FIELD_ACCESS:
			if (node.equals(((FieldAccess) parent).getField())) {
				return getPossibleReferenceBinding(parent);
			}
			break;
		case ASTNode.SWITCH_CASE:
			if (node.equals(((SwitchCase) parent).getValue()) && parent.getParent() instanceof SwitchStatement) {
				return ((SwitchStatement) parent.getParent()).getExpression().resolveTypeBinding();
			}
			break;
		default:
			// do nothing
		}

		return null;
	}

