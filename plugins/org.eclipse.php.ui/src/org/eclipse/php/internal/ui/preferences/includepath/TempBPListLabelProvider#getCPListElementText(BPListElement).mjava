	public String getCPListElementText(BPListElement cpentry) {

		IPath path = cpentry.getPath();
		if (path.toString().startsWith(
				IBuildpathEntry.BUILTIN_EXTERNAL_ENTRY_STR)) {
			return ScriptElementLabels.BUILTINS_FRAGMENT;
		}
		if (EnvironmentPathUtils.isFull(path)) {
			path = EnvironmentPathUtils.getLocalPath(path);
		}
		switch (cpentry.getEntryKind()) {
		case IBuildpathEntry.BPE_LIBRARY: {
			IResource resource = cpentry.getResource();
			if (resource instanceof IContainer) {
				StringBuffer buf = new StringBuffer(path.makeRelative()
						.toString());
				IPath linkTarget = cpentry.getLinkTarget();
				if (linkTarget != null) {
					buf.append(ScriptElementLabels.CONCAT_STRING);
					buf.append(linkTarget.toOSString());
				}
				buf.append(' ');
				buf.append(fClassLabel);
				if (!resource.exists()) {
					buf.append(' ');
					if (cpentry.isMissing()) {
						buf.append(fCreateLabel);
					} else {
						buf.append(fNewLabel);
					}
				}
				return buf.toString();
			} else if (ArchiveFileFilter.isArchivePath(path)) {
				return getPathString(path, resource == null);
			}
			// should not get here
			if (!cpentry.isExternalFolder()) {
				return path.makeRelative().toString();
			} else {
				return path.toString();
			}
		}
		case IBuildpathEntry.BPE_PROJECT:
			return path.lastSegment();
		case IBuildpathEntry.BPE_CONTAINER:
			try {
				IBuildpathContainer container = DLTKCore.getBuildpathContainer(
						path, cpentry.getScriptProject());
				if (container != null) {
					return container.getDescription(cpentry.getScriptProject());
				}
				BuildpathContainerInitializer initializer = DLTKCore
						.getBuildpathContainerInitializer(path.segment(0));
				if (initializer != null) {
					String description = initializer.getDescription(path,
							cpentry.getScriptProject());
					return Messages
							.format(
									NewWizardMessages.CPListLabelProvider_unbound_library,
									description);
				}
			} catch (ModelException e) {

			}
			return path.toString();
		case IBuildpathEntry.BPE_SOURCE: {
			StringBuffer buf = new StringBuffer(path.makeRelative().toString());
			IPath linkTarget = cpentry.getLinkTarget();
			if (linkTarget != null) {
				buf.append(ScriptElementLabels.CONCAT_STRING);
				buf.append(linkTarget.toOSString());
			}
			IResource resource = cpentry.getResource();
			if (resource != null && !resource.exists()) {
				buf.append(' ');
				if (cpentry.isMissing()) {
					buf.append(fCreateLabel);
				} else {
					buf.append(fNewLabel);
				}
			} else if (cpentry.getOrginalPath() == null) {
				buf.append(' ');
				buf.append(fNewLabel);
			}
			return buf.toString();
		}
		default:
			// pass
		}
		return NewWizardMessages.CPListLabelProvider_unknown_element_label;
	}

