	public IHyperlink[] detectHyperlinks(ITextViewer textViewer,
			IRegion region, boolean canShowMultipleHyperlinks) {

		PHPStructuredEditor editor = EditorUtility.getPHPEditor(textViewer);
		if (editor == null) {
			return null;
		}

		IModelElement input = org.eclipse.dltk.internal.ui.editor.EditorUtility
				.getEditorInputModelElement(editor, false);
		if (!(input instanceof ISourceModule)) {
			return null;
		}

		final int offset = region.getOffset();
		final String file[] = new String[1];
		final Region selectRegion[] = new Region[1];

		final ISourceModule sourceModule = (ISourceModule) input;
		ModuleDeclaration moduleDeclaration = SourceParserUtil
				.getModuleDeclaration(sourceModule, null);

		ASTVisitor visitor = new ASTVisitor() {
			boolean found = false;

			public boolean visit(Expression expr) throws ModelException {
				if (expr.sourceStart() < offset && expr.sourceEnd() > offset) {
					if (expr instanceof Include) {
						Expression fileExpr = ((Include) expr).getExpr();
						if (fileExpr instanceof InfixExpression) {
							InfixExpression ie = (InfixExpression) fileExpr;
							if (ie.getRight() instanceof Scalar) {
								fileExpr = ie.getRight();
							}
						}
						if (fileExpr instanceof Scalar) {
							String value = ((Scalar) fileExpr).getValue();
							file[0] = ASTUtils.stripQuotes(value);
							file[0] = file[0].trim();

							// only select file, without quotes or surrounding
							// whitespaces
							int startIdx = fileExpr.sourceStart()
									+ value.indexOf(file[0]);
							int length = file[0].length();
							selectRegion[0] = new Region(startIdx, length);
						}
						found = true;
						return false;
					}
				}
				return !found;
			}

			public boolean visitGeneral(ASTNode n) {
				return !found;
			}
		};

		try {
			moduleDeclaration.traverse(visitor);
		} catch (Exception e) {
			Logger.logException(e);
		}

		if (file[0] != null) {
			if (!inclusive(region, selectRegion[0]))
				return null;

			ISourceModule includedSourceModule = FileNetworkUtility
					.findSourceModule(sourceModule, file[0]);
			if (includedSourceModule != null) {
				return new IHyperlink[] { new ModelElementHyperlink(
						selectRegion[0], includedSourceModule, new OpenAction(
								editor)) };
			}
		}
		return null;
	}

