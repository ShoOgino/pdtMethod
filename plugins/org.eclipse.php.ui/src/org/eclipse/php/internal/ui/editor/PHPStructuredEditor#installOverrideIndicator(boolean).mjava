	protected void installOverrideIndicator(boolean provideAST) {
		uninstallOverrideIndicator();
		if (getDocumentProvider() == null) {
			return;
		}
		IAnnotationModel model = getDocumentProvider().getAnnotationModel(getEditorInput());
		final IModelElement inputElement = getModelElement();
		if (model == null || inputElement == null || inputElement.getElementType() != IModelElement.SOURCE_MODULE) {
			return;
		}

		fOverrideIndicatorManager = new OverrideIndicatorManager(model);
		addReconcileListener(fOverrideIndicatorManager);
		if (provideAST) {
			Job job = new Job("Installing override indicator") { //$NON-NLS-1$

				@Override
				protected IStatus run(IProgressMonitor monitor) {
					try {
						Program ast = SharedASTProvider.getAST((ISourceModule) inputElement,
								SharedASTProvider.WAIT_ACTIVE_ONLY, new NullProgressMonitor());
						if (fOverrideIndicatorManager != null) {
							fOverrideIndicatorManager.reconciled(ast, true, getProgressMonitor());
						}
					} catch (ModelException e) {
						Logger.logException(e);
					} catch (IOException e) {
						Logger.logException(e);
					}
					return Status.OK_STATUS;
				}
			};
			job.setSystem(true);
			job.setPriority(Job.DECORATE);
			job.schedule();

		}
	}

