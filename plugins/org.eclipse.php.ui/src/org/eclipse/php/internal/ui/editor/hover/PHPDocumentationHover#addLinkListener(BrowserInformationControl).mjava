	private static void addLinkListener(final BrowserInformationControl control) {
		control.addLocationListener(PHPElementLinks.createLocationListener(new PHPElementLinks.ILinkHandler() {
			/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.jdt.internal.ui.viewsupport.JavaElementLinks
			 * .ILinkHandler #handleInlineJavadocLink(org.eclipse.jdt.core
			 * .IModelElement)
			 */
			public void handleInlineLink(IModelElement linkTarget) {
				PHPDocumentationBrowserInformationControlInput hoverInfo = getHoverInfo(
						new IModelElement[] { linkTarget }, null,
						(PHPDocumentationBrowserInformationControlInput) control.getInput());
				if (control.hasDelayedInputChangeListener())
					control.notifyDelayedInputChange(hoverInfo);
				else
					control.setInput(hoverInfo);
			}

			/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.jdt.internal.ui.viewsupport.JavaElementLinks
			 * .ILinkHandler #handleDeclarationLink(org.eclipse.jdt.core.
			 * IModelElement)
			 */
			public void handleDeclarationLink(IModelElement linkTarget) {
				control.notifyDelayedInputChange(null);
				control.dispose(); // FIXME: should have protocol to
				// hide, rather than dispose
				// try {
				// FIXME: add hover location to editor navigation
				// history?
				// JavaUI.openInEditor(linkTarget);
				// } catch (PartInitException e) {
				// PHPUiPlugin.log(e);
				// } catch (ModelException e) {
				// PHPUiPlugin.log(e);
				// }
			}

			/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.jdt.internal.ui.viewsupport.JavaElementLinks
			 * .ILinkHandler#handleExternalLink(java.net.URL,
			 * org.eclipse.swt.widgets.Display)
			 */
			public boolean handleExternalLink(URL url, Display display) {
				control.notifyDelayedInputChange(null);
				control.dispose(); // FIXME: should have protocol to
				// hide, rather than dispose

				// open external links in real browser:
				OpenBrowserUtil.open(url, display); // $NON-NLS-1$

				return true;
			}

			public void handleTextSet() {
			}
		}));
	}

