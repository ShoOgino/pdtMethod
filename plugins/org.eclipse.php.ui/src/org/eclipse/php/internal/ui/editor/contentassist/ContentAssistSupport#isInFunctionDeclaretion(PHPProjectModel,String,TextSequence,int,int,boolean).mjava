	protected boolean isInFunctionDeclaretion(PHPProjectModel projectModel, String fileName, TextSequence text, int offset, int selectionLength, boolean explicit) {
		// are we inside function declaretion statment
		int functionStart = PHPTextSequenceUtilities.isInFunctionDeclaretion(text);
		if (functionStart == -1) {
			return false;
		}

		// are we inside parameters part in function declaretion statment
		for (int i = text.length() - 1; i >= functionStart; i--) {
			if (text.charAt(i) == '(') {
				boolean showClassCompletion = true;
				for (int j = text.length() - 1; j > i; j--) {
					// fixed bug 178032 - check if the cursor is after type means no '$' sign between cursor to '(' sign or ',' sign
					if (text.charAt(j) == '$') {
						showClassCompletion = false;
						break;
					}
					if (text.charAt(j) == ',') {
						break;
					}
				}
				if (showClassCompletion) {
					CodeData[] classes = projectModel.getClasses();
					completionProposalGroup = phpCompletionProposalGroup;
					String prefix = text.subTextSequence(i + 1, text.length()).toString();
					completionProposalGroup.setData(offset, classes, prefix, selectionLength, false);
				}
				return true;
			}
		}

		PHPClassData classData = getContainerClassData(projectModel, fileName, text.getOriginalOffset(functionStart));
		// We look for the container class data in function start offset.

		if (classData == null) {
			// We are not inside class function.
			return true;
		}

		int wordEnd = PHPTextSequenceUtilities.readBackwardSpaces(text, text.length());
		int wordStart = PHPTextSequenceUtilities.readIdentifiarStartIndex(text, wordEnd, false);
		String word = text.subSequence(wordStart, wordEnd).toString();

		String functionNameStart;
		if (word.equals("function")) { //$NON-NLS-1$
			functionNameStart = ""; //$NON-NLS-1$
		} else if (wordEnd == text.length()) {
			functionNameStart = word;
		} else {
			return true;
		}

		/*if (!explicit && functionNameStart.length() == 0) {
			return true;
		}*/

		CodeData[] data;
		String phpVersion = projectModel.getPHPLanguageModel().getPHPVersion();
		boolean isPHP5 = phpVersion.equals(PHPVersion.PHP5);

		CodeData[] magicMethods = PHPCodeDataFactory.createMagicMethods(classData, isPHP5);
		CodeData[] constructors = PHPCodeDataFactory.createConstructors(classData, isPHP5);

		data = new CodeData[magicMethods.length + constructors.length];
		System.arraycopy(magicMethods, 0, data, 0, magicMethods.length);
		System.arraycopy(constructors, 0, data, magicMethods.length, constructors.length);

		Arrays.sort(data);

		completionProposalGroup = classConstructorCompletionProposalGroup;
		completionProposalGroup.setData(offset, data, functionNameStart, selectionLength);
		return true;
	}

