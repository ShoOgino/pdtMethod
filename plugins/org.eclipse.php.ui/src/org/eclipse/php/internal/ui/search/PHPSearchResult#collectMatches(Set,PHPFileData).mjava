	private void collectMatches(Set matches, PHPFileData fileData) {
		if (fileData == null) {
			return;
		}
		switch (fQuery.getSpecification().getScope().getSearchFor()) {
			case IPHPSearchConstants.CLASS:
				PHPClassData[] classData = fileData.getClasses();
				for (int i = 0; i < classData.length; i++) {
					// no need to pass the IProject since it is not count in the hash function...
					addToMatches(matches, new PHPClassDataDecorator(classData[i], null));
				}
				break;
			case IPHPSearchConstants.FUNCTION:
				PHPFunctionData[] functions = fileData.getFunctions();
				for (int i = 0; i < functions.length; i++) {
					// no need to pass the IProject since it is not count in the hash function...
					addToMatches(matches, new PHPFunctionDataDecorator(functions[i], null));
				}
				PHPClassData[] classes = fileData.getClasses();
				for (int i = 0; i < classes.length; i++) {
					functions = classes[i].getFunctions();
					for (int j = 0; j < functions.length; j++) {
						// no need to pass the IProject since it is not count in the hash function...
						addToMatches(matches, new PHPFunctionDataDecorator(functions[j], null));
					}
				}
				break;
			case IPHPSearchConstants.CONSTANT:
				PHPConstantData[] constants = fileData.getConstants();
				for (int i = 0; i < constants.length; i++) {
					// no need to pass the IProject since it is not count in the hash function...
					addToMatches(matches, new PHPConstantDataDecorator(constants[i], null));
				}
				break;
		}
	}

