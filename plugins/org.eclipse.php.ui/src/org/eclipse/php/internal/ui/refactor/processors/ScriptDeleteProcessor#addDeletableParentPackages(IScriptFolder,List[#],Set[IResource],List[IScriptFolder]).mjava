	/**
	 * Adds deletable parent packages of the fragment "frag" to the list
	 * "deletableParentPackages"; also adds the resources of those packages to
	 * the set "resourcesToDelete".
	 * 
	 */
	private void addDeletableParentPackages(IScriptFolder frag, List<?> initialPackagesToDelete,
			Set<IResource> resourcesToDelete, List<IScriptFolder> deletableParentPackages) throws CoreException {

		if (frag.getResource().isLinked()) {
			final IConfirmQuery query = fDeleteQueries.createYesNoQuery(
					RefactoringCoreMessages.ScriptDeleteProcessor_confirm_linked_folder_delete, false,
					IReorgQueries.CONFIRM_DELETE_LINKED_PARENT);
			if (!query.confirm(
					Messages.format(RefactoringCoreMessages.ScriptDeleteProcessor_delete_linked_folder_question,
							new String[] { frag.getResource().getName() }))) {
				return;
			}
		}

		final IResource[] children = (((IContainer) frag.getResource())).members();
		for (int i = 0; i < children.length; i++) {
			// Child must be a package fragment already in the list,
			// or a resource which is deleted as well.
			if (!resourcesToDelete.contains(children[i])) {
				return;
			}
		}
		resourcesToDelete.add(frag.getResource());
		deletableParentPackages.add(frag);

		final IScriptFolder parent = ModelElementUtil.getParentSubpackage(frag);
		if (parent != null && !initialPackagesToDelete.contains(parent)) {
			addDeletableParentPackages(parent, initialPackagesToDelete, resourcesToDelete, deletableParentPackages);
		}
	}

