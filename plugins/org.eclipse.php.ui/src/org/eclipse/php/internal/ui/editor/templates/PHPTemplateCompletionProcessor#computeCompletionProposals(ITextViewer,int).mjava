	@Override
	public ICompletionProposal[] computeCompletionProposals(ITextViewer viewer, int offset) {
		document = viewer.getDocument();
		try {
			String type = TextUtilities.getContentType(document,
					IStructuredPartitioning.DEFAULT_STRUCTURED_PARTITIONING, offset, true);
			if (!PHPPartitionTypes.PHP_DEFAULT.equals(type)) {
				return EMPTY;
			}
		} catch (BadLocationException e) {
		}
		if (isInDocOrCommentOrString(viewer, offset)) {
			return EMPTY;
		}

		ISourceModule sourceModule = getContext().getSourceModule();
		if (sourceModule == null) {
			return EMPTY;
		}
		List<String> contextIds = new ArrayList<>();
		contextIds.add(contextTypeId);
		// check whether enclosing element is a method
		try {
			IModelElement enclosingElement = sourceModule.getElementAt(offset);
			while (enclosingElement instanceof IField) {
				enclosingElement = enclosingElement.getParent();
			}
			if ((enclosingElement instanceof IMethod)) {
				enclosingMethod = (IMethod) enclosingElement;
			}

			boolean isFieldAccess = false;

			try {
				if (offset > 2) {
					String accessPrefix = document.get(offset - 2, 2);
					if ("->".equals(accessPrefix) || "::".equals(accessPrefix)) { //$NON-NLS-1$ //$NON-NLS-2$
						isFieldAccess = true;
					}
				}
			} catch (BadLocationException e) {
			}

			// find the most outer enclosing type if exists
			while (enclosingElement != null && !(enclosingElement instanceof IType)) {
				enclosingElement = enclosingElement.getParent();
			}
			enclosingType = (IType) enclosingElement;

			if (enclosingMethod == null && enclosingType == null && !isFieldAccess) {
				contextIds.add(PHPTemplateContextType.PHP_STATEMENTS_CONTEXT_TYPE_ID);
				contextIds.add(PHPTemplateContextType.PHP_GLOBAL_MEMBERS_CONTEXT_TYPE_ID);
			} else if (enclosingMethod == null && enclosingType != null && !isFieldAccess) {
				if (!PHPFlags.isNamespace(enclosingType.getFlags())) {
					contextIds.add(PHPTemplateContextType.PHP_TYPE_MEMBERS_CONTEXT_TYPE_ID);
					if (PHPFlags.isClass(enclosingType.getFlags())) {
						contextIds.add(PHPTemplateContextType.PHP_CLASS_MEMBERS_CONTEXT_TYPE_ID);
					}
				} else {
					contextIds.add(PHPTemplateContextType.PHP_STATEMENTS_CONTEXT_TYPE_ID);
					contextIds.add(PHPTemplateContextType.PHP_GLOBAL_MEMBERS_CONTEXT_TYPE_ID);
				}
			} else if (enclosingMethod != null && enclosingType != null && !isFieldAccess) {
				if (!PHPFlags.isNamespace(enclosingType.getFlags())) {
					contextIds.add(PHPTemplateContextType.PHP_TYPE_METHOD_STATEMENTS_CONTEXT_TYPE_ID);
				}
				contextIds.add(PHPTemplateContextType.PHP_STATEMENTS_CONTEXT_TYPE_ID);
			} else if (enclosingMethod != null && enclosingType == null) {
				contextIds.add(PHPTemplateContextType.PHP_STATEMENTS_CONTEXT_TYPE_ID);
			}
		} catch (ModelException e) {
			PHPCorePlugin.log(e);
		}

		ITextSelection selection = (ITextSelection) viewer.getSelectionProvider().getSelection();

		ICompletionProposal[] selectionProposal = EMPTY;
		if (selection.getLength() != 0) {
			isSelection = true;
			int tempOffset = offset;
			// adjust offset to end of normalized selection
			if (selection.getOffset() == tempOffset) {
				tempOffset = selection.getOffset() + selection.getLength();
			}

			String prefix = extractPrefix(viewer, tempOffset);
			IRegion region = new Region(selection.getOffset(), 0);
			Position position = new Position(offset, selection.getLength());
			TemplateContext context = createContext(viewer, region, position);//
			if (context == null) {
				return new ICompletionProposal[0];
			}

			try {
				document.addPosition(position);
				fPositions.put(document, position);
			} catch (BadLocationException e) {
			}

			// name of the selection variables {line, word}_selection
			context.setVariable("selection", selection.getText()); //$NON-NLS-1$

			boolean multipleLinesSelected = areMultipleLinesSelected(viewer);

			List<TemplateProposal> matches = new ArrayList<>();
			Template[] templates = getTemplates(contextIds);
			for (int i = 0; i != templates.length; i++) {
				Template template = templates[i];
				if (context.canEvaluate(template)
						&& (!multipleLinesSelected && template.getPattern().indexOf($_WORD_SELECTION) != -1
								|| (multipleLinesSelected && template.getPattern().indexOf($_LINE_SELECTION) != -1))) {
					matches.add((TemplateProposal) createProposal(templates[i], context, region,
							getRelevance(template, prefix)));
				}
			}
			selectionProposal = matches.toArray(new ICompletionProposal[matches.size()]);
		} else {
			isSelection = false;
		}
		String prefix = extractPrefix(viewer, offset);
		if (!isValidPrefix(prefix)) {
			return new ICompletionProposal[0];
		}
		IRegion region = new Region(offset - prefix.length(), prefix.length());
		TemplateContext context = createContext(viewer, region);
		if (context == null) {
			return new ICompletionProposal[0];
		}

		// name of the selection variables {line, word}_selection
		context.setVariable("selection", selection.getText()); //$NON-NLS-1$

		List<TemplateProposal> matches = new ArrayList<>();

		Template[] templates = getTemplates(contextIds);
		for (int i = 0; i < templates.length; i++) {
			Template template = templates[i];
			try {
				context.getContextType().validate(template.getPattern());
			} catch (TemplateException e) {
				continue;
			}
			if (template.getName().startsWith(prefix)) {
				matches.add(
						(TemplateProposal) createProposal(template, context, region, getRelevance(template, prefix)));
			}
		}

		final IInformationControlCreator controlCreator = getInformationControlCreator();
		for (TemplateProposal proposal : matches) {
			proposal.setInformationControlCreator(controlCreator);
		}

		List<ICompletionProposal> result = new ArrayList<>();
		for (int i = 0; i < selectionProposal.length; i++) {
			result.add(selectionProposal[i]);
		}
		for (int i = 0; i < matches.size(); i++) {
			result.add(matches.get(i));
		}

		return result.toArray(new ICompletionProposal[matches.size()]);
	}

