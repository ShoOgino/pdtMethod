		/**
		 * Constructs a new instance of PreferenceTreeNode according to the
		 * parameters.
		 * <p>
		 * The <code>label</code> and the <code>key</code> must not be
		 * <code>null</code> if the node has a corresponding UI control.
		 * </p>
		 * 
		 * @param label
		 *            the label text
		 * @param key
		 *            the key
		 * @param controlType
		 *            the type of UI control.
		 * @param showAllChildren
		 *            tells whether all children should be shown even if just
		 *            one child matches the filter.
		 */
		public PreferenceTreeNode(String label, Key key, int controlType, boolean showAllChildren) {
			super();
			if (controlType != NONE && (label == null || key == null)) {
				throw new IllegalArgumentException();
			}
			if (label == null) {
				label = ""; //$NON-NLS-1$
			}
			fLabel = LegacyActionTools.removeMnemonics(label);
			fKey = key;
			fControlType = controlType;
			fShowAllChildren = showAllChildren;
		}

