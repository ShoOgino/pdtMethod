	private void autoIndentAfterNewLine(final IStructuredDocument document,
			final DocumentCommand command) {
		try {

			helpBuffer.setLength(0);
			helpBuffer.append(command.text);

			placeMatchingBlanks(document, helpBuffer,
					document.getLineOfOffset(command.offset), command);

			int futureCaretPosition = -1;

			if (command.offset > 0) {
				final IAfterNewLineAutoEditStrategy autoEditStrategy = getAfterNewLineAutoEditStrategy(
						document, command);
				if (autoEditStrategy != null)
					futureCaretPosition = autoEditStrategy
							.autoEditAfterNewLine(document, command, helpBuffer);
			}

			final int startOffset = command.offset;
			final int endOffset = startOffset + command.length;

			IRegion firstLineInfo = document
					.getLineInformationOfOffset(startOffset);
			int firstLineOffset = firstLineInfo.getOffset();
			int firstLineLength = firstLineInfo.getLength();
			String firstLineText = document.get(firstLineOffset,
					firstLineLength);

			IRegion lastLineInfo;
			int lastLineOffset;
			int lastLineLength;
			String lastLineText;

			// In most case, selections are empty or single-line selections.
			if (firstLineOffset <= endOffset
					&& endOffset <= firstLineOffset + firstLineLength) {
				lastLineInfo = firstLineInfo;
				lastLineOffset = firstLineOffset;
				lastLineLength = firstLineLength;
				lastLineText = firstLineText;
			} else {
				lastLineInfo = document.getLineInformationOfOffset(endOffset);
				lastLineOffset = lastLineInfo.getOffset();
				lastLineLength = lastLineInfo.getLength();
				lastLineText = document.get(lastLineOffset, lastLineLength);
			}

			// https://bugs.eclipse.org/bugs/show_bug.cgi?id=464039
			// How it works: remove blank chars in front of first and last line
			// of selection, because "helpBuffer" already contains (new &
			// correct) indentation for those lines.
			//
			// Start by removing blank chars BEFORE actual selection.
			// Only valid if all chars between firstLineOffset and
			// startOffset - 1 are blank chars.
			if (startOffset > firstLineOffset) {
				int pos = 0;
				for (; pos < startOffset - firstLineOffset
						&& (firstLineText.charAt(pos) == ' ' || firstLineText
								.charAt(pos) == '\t'); pos++)
					;
				if (pos == startOffset - firstLineOffset) {
					// Tweak: also try to keep previous indentation when
					// "helpBuffer" starts with a newline char. It's mainly
					// cosmetic, first line of selection should keep its
					// blank chars (between firstLineOffset and startOffset - 1)
					// if its content (starting from startOffset) is put/pushed
					// on a new line.
					if (TextUtilities.startsWith(
							document.getLegalLineDelimiters(),
							helpBuffer.toString()) != -1) {
						helpBuffer.insert(
								0,
								firstLineText.substring(0, startOffset
										- firstLineOffset));
					}
					command.length += startOffset - firstLineOffset;
					command.offset = firstLineOffset;
				}
			}
			// Continue by removing all blank chars AFTER end of
			// selection.
			for (int i = endOffset - lastLineOffset; i < lastLineLength
					&& (lastLineText.charAt(i) == ' ' || lastLineText.charAt(i) == '\t'); i++, command.length++)
				;

			command.text = helpBuffer.toString();

			// if we need to put the caret at a position different then the end
			// of the text
			if (DefaultIndentationStrategy.getPairArrayParen()) {
				futureCaretPosition = DefaultIndentationStrategy
						.getPairArrayOffset();
				DefaultIndentationStrategy.unsetPairArrayParen();
			}
			if (futureCaretPosition != -1) {
				// running the command ourself
				document.replace(command.offset, command.length, command.text);
				// consuming the command
				command.length = 0;
				command.text = ""; //$NON-NLS-1$
				command.offset = futureCaretPosition;
				// moving the caret position
				document.getUndoManager().disableUndoManagement();
				document.replace(command.offset, command.length, command.text);
				document.getUndoManager().enableUndoManagement();
			}
		} catch (final BadLocationException exp) {
			Logger.logException(exp);
		}
	}

