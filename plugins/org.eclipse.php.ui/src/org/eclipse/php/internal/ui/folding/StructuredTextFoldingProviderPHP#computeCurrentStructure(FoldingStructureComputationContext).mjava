	private Map<IModelElement, List<Tuple>> computeCurrentStructure(FoldingStructureComputationContext ctx) {
		Map<IModelElement, List<Tuple>> map = new HashMap<>();
		ProjectionAnnotationModel model = ctx.getModel();
		Iterator<?> e = model.getAnnotationIterator();
		while (e.hasNext()) {
			Object annotation = e.next();
			if (annotation instanceof PHPProjectionAnnotation) {
				PHPProjectionAnnotation java = (PHPProjectionAnnotation) annotation;
				Position position = model.getPosition(java);
				Assert.isNotNull(position);
				List<Tuple> list = map.get(java.getElement());
				if (list == null) {
					list = new ArrayList<>(2);
					map.put(java.getElement(), list);
				}
				list.add(new Tuple(java, position));
			}
		}

		Comparator<Tuple> comparator = new Comparator<Tuple>() {
			@Override
			public int compare(Tuple o1, Tuple o2) {
				return o1.position.getOffset() - o2.position.getOffset();
			}
		};
		for (Iterator<List<Tuple>> it = map.values().iterator(); it.hasNext();) {
			List<Tuple> list = it.next();
			Collections.sort(list, comparator);
		}
		return map;
	}

