	/**
	 * Copies the rest of the line (after the '(' ) into the buffer in order put
	 * the text inside the parentheses
	 * 
	 * @return The number of characters the caret should be advanced at
	 */
	private int copyRestOfLine(IStructuredDocument document,
			DocumentCommand command, StringBuffer buffer)
			throws BadLocationException {

		int documentLength = document.getLength();
		if (command.offset + command.length == documentLength) { // if we're at
																	// the end
																	// of the
																	// document
																	// then
																	// nothing
																	// to copy
			return 0;
		}
		int offset = command.offset;
		IRegion lineInfo = document.getLineInformationOfOffset(offset);
		int endOffset = lineInfo.getOffset() + lineInfo.getLength();
		int whiteSpacesAdded = 0;
		int lengthToCopyDown = endOffset - offset;

		IStructuredDocumentRegion[] structuredDocumentRegions = document
				.getStructuredDocumentRegions(offset, lengthToCopyDown);
		if (structuredDocumentRegions != null
				&& structuredDocumentRegions.length > 0) {
			IStructuredDocumentRegion structuredDocumentRegion = structuredDocumentRegions[0];
			ITextRegion firstRegion = structuredDocumentRegion.getFirstRegion();
			ITextRegion lastRegion = structuredDocumentRegion.getLastRegion();

			int xmlRelativeOffset = 0;

			// deal with PHP block within HTML tags
			if (!(firstRegion instanceof ContextRegion)) { // meaning
															// "not-PHP-Resgion"
				ITextRegion regionAtCharacterOffset = structuredDocumentRegion
						.getRegionAtCharacterOffset(offset);
				if (regionAtCharacterOffset instanceof ContextRegionContainer) {
					ContextRegionContainer phpContext = (ContextRegionContainer) regionAtCharacterOffset;
					lastRegion = phpContext.getLastRegion();
					firstRegion = phpContext.getFirstRegion();
					xmlRelativeOffset = firstRegion.getLength();
				}

			}
			int absolutOffset = lastRegion.getStart()
					+ structuredDocumentRegion.getStartOffset()
					+ xmlRelativeOffset;
			if (absolutOffset <= endOffset && offset <= absolutOffset) {
				lengthToCopyDown = absolutOffset - offset;
				;
			}
		}
		String lineEnd = document.get(offset, lengthToCopyDown);

		// if there are spaces between the '{' and the text in the line
		// (or the end of line)then need to override them
		for (int i = 0; i < lineEnd.length(); i++) {
			char c = lineEnd.charAt(i);
			lengthToCopyDown--; // for every iteration, need copy one less char
			if (c == '\n' || c == '\r' || !Character.isWhitespace(c)) {
				command.length += i;
				lengthToCopyDown++; // incrementing one back...
				break;
			}
		}

		String trimmedLineEnd = lineEnd.trim();
		if (trimmedLineEnd.length() > 0
				&& (trimmedLineEnd.charAt(0) == PAREN_CLOSE || trimmedLineEnd
						.charAt(0) == BRACKET_CLOSE)) {
			// if there is a ) then there is a problem with
			// parenCloseInsertionStrategy calc
			// and we need to add manually another indentation.
			int indentationSize = FormatterUtils.getFormatterCommonPrferences()
					.getIndentationSize(document);
			char indentationChar = FormatterUtils
					.getFormatterCommonPrferences()
					.getIndentationChar(document);
			for (int i = 0; i < indentationSize; i++) {
				buffer.append(indentationChar);
				whiteSpacesAdded++;
			}
			buffer.append(document.getLineDelimiter());
			int baseline = DefaultIndentationStrategy.getIndentationBaseLine(
					document, document.getLineOfOffset(offset), offset, true);
			lineInfo = document.getLineInformation(baseline);
			String blanks = FormatterUtils.getLineBlanks(document, lineInfo);
			buffer.append(blanks);
		}

		// copying the rest of the line after the "(" ,
		// using length calculated according to regionEnd or EndOfLine
		offset += command.length;
		char nextChar = document.getChar(offset);
		for (int i = 0; lengthToCopyDown > 0; lengthToCopyDown--) {
			buffer.append(nextChar);
			command.length++;
			offset++;
			if (offset == documentLength) {
				break;
			}
			nextChar = document.getChar(offset);
		}

		return whiteSpacesAdded;
	}

