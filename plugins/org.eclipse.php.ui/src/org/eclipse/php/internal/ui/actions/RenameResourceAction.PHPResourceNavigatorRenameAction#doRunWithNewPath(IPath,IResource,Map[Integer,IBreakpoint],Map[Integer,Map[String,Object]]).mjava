		protected void doRunWithNewPath(final IPath path, final IResource resource, final Map<Integer, IBreakpoint> breakpoints, final Map<Integer, Map<String, Object>> breakpointAttributes) {
			// Get the breakpoints and bookmarks that were set on this resource before running the
			// workbench action. Add these markers after the workbench action is processed.
			final IBreakpointManager breakpointManager = DebugPlugin.getDefault().getBreakpointManager();
			try {
				synchronized (this) { // this can run simultaneously
					IMarker[] markers = resource.findMarkers(IBreakpoint.LINE_BREAKPOINT_MARKER, true, IResource.DEPTH_ZERO);
					for (IMarker marker : markers) {
						IBreakpoint breakpoint = breakpointManager.getBreakpoint(marker);
						Integer line = (Integer) marker.getAttribute(IMarker.LINE_NUMBER);
						if (breakpoint != null) {
							breakpoints.put(line, breakpoint);
							breakpointAttributes.put(line, breakpoint.getMarker().getAttributes());
						}
					}
				}
			} catch (CoreException e) {
				Logger.logException(e);
			}
			// Call the super implementation
			super.runWithNewPath(path, resource);
			// Add the breakpoints that got removed after the rename action.
			final IWorkspace workspace = ResourcesPlugin.getWorkspace();
			WorkspaceJob createMarker = new WorkspaceJob("Creating markers") {
				@Override
				public IStatus runInWorkspace(IProgressMonitor monitor) throws CoreException {
					synchronized (this) {
						IFile oldFile = workspace.getRoot().getFile(resource.getFullPath());
						if (oldFile.isAccessible()) { // in case the old file exists (fast undo-redo)
							return Status.CANCEL_STATUS;

						}
						IFile file = (IFile) workspace.getRoot().findMember(path);
						if (file == null) {
							return Status.CANCEL_STATUS;
						}
						for (final Integer line : breakpoints.keySet()) {
							final Map<String, Object> oldAttributesMap = breakpointAttributes.get(line);
							IMarker newMarker = file.createMarker("org.eclipse.php.debug.core.PHPConditionalBreakpointMarker"); //$NON-NLS-1$
							// Fix the breakpoint's tooltip string before applying the old attributes to the new marker.
							String oldMessge = (String) oldAttributesMap.get(IMarker.MESSAGE);
							if (oldMessge != null) {
								oldAttributesMap.put(IMarker.MESSAGE, oldMessge.replaceFirst(resource.getName(), path.lastSegment()));
							}
							newMarker.setAttributes(oldAttributesMap);
							IBreakpoint breakpoint = breakpoints.get(line);
							breakpoint.setMarker(newMarker);
							breakpointManager.addBreakpoint(breakpoint);
						}
					}
					return Status.OK_STATUS;
				}
			};
			createMarker.setRule(workspace.getRoot());
			createMarker.setSystem(true);
			createMarker.schedule(1000); // wait for UI refresh which refreshes the markers
		}

