	protected List<Object> getScriptProjectContent(IScriptProject scriptProject) {
		List<Object> returnChildren = new ArrayList<>();
		IProject project = scriptProject.getProject();

		// Add include path node
		IncludePath[] includePaths = IncludePathManager.getInstance().getIncludePaths(project);
		try {
			if (project.hasNature(PHPNature.ID)) {
				IncludePathContainer incPathContainer = new IncludePathContainer(scriptProject, includePaths);
				returnChildren.add(incPathContainer);
			}
		} catch (CoreException e) {
			Logger.logException(e);
		}

		// Add the language library
		try {
			Object[] projectChildren = getProjectFragments(scriptProject);
			for (Object modelElement : projectChildren) {
				if (modelElement instanceof BuildPathContainer && ((BuildPathContainer) modelElement)
						.getBuildpathEntry().getPath().equals(LanguageModelInitializer.LANGUAGE_CONTAINER_PATH)) {
					returnChildren.add(modelElement);
				}
			}
		} catch (ModelException e) {
			Logger.logException(e);
		}

		// let extensions contribute explorer root elements
		for (ITreeContentProvider provider : TreeContentProviderRegistry.getInstance().getTreeProviders()) {

			Object[] providerChildren = provider.getChildren(scriptProject);
			if (providerChildren != null) {
				returnChildren.addAll(new ArrayList<>(Arrays.asList(providerChildren)));
			}
		}

		return returnChildren;
	}

