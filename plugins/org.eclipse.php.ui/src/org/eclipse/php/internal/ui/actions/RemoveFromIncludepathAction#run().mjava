	/**
	 * {@inheritDoc}
	 */
	public void run() {
		Object object = fSelectedElements.get(0);
		if (object instanceof ExternalProjectFragment) {
			ExternalProjectFragment projFragment = (ExternalProjectFragment) object;
			IScriptProject scriptProject = projFragment.getScriptProject();
			try {
				BuildPathUtils.removeEntryFromBuildPath(scriptProject, projFragment.getBuildpathEntry());
			} catch (ModelException e) {
				Logger.logException("Could not remove buildPathEntry", e); //$NON-NLS-1$
			}
		} else if (object instanceof IProjectFragment) {
			IProjectFragment root = (IProjectFragment) object;
		} else {
			assert object instanceof IncludePath;

			IncludePath includePath = (IncludePath) object;
			try {
				if (includePath.isBuildpath())
					IncludePathManager.getInstance().removeEntryFromIncludePath(includePath.getProject(),
							(IBuildpathEntry) (includePath.getEntry()));
				IProject proj = includePath.getProject();
				IncludePathManager manager = IncludePathManager.getInstance();
				IncludePath[] paths = manager.getIncludePaths(proj);
				List<IncludePath> entries = new ArrayList<IncludePath>();
				for (IncludePath path : paths) {
					if (!path.equals(includePath)) {
						entries.add(path);
					}
				}
				manager.setIncludePath(proj, entries.toArray(new IncludePath[entries.size()]));
			} catch (ModelException e) {
				Logger.logException("Could not remove buildPathEntry", e); //$NON-NLS-1$
			}
		}
	}

