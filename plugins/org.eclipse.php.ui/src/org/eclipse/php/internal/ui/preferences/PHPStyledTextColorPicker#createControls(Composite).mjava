	protected void createControls(Composite parent) {
		Composite styleRow = createComposite(parent, 3);
		// row 1 - content type label, combo box, restore defaults
		createLabel(styleRow, SSEUIMessages.Content_type__UI_); //$NON-NLS-1$ = "Content type:"
		// Contexts combo box
		fStyleCombo = createCombo(styleRow, new String[0], -1);
		fClearStyle = createPushButton(styleRow, SSEUIMessages.Restore_Default_UI_); //$NON-NLS-1$ = "Restore Default"
		Composite styleRow2;
		if (showItalic)
			styleRow2 = createComposite(parent, 8);
		else
			styleRow2 = createComposite(parent, 7);
		// row 2 - foreground label, button, background label, button, bold,
		// italics?
		fForegroundLabel = createLabel(styleRow2, SSEUIMessages.Foreground_UI_); //$NON-NLS-1$ = "Foreground"
		fForeground = new ColorSelector(styleRow2);
		fForeground.getButton().setLayoutData(new GridData());
		setAccessible(fForeground.getButton(), fForegroundLabel.getText());
		fForeground.getButton().getAccessible().addAccessibleControlListener(foregroundAccListener); // defect
		// 200764
		// -
		// ACC:display
		// values
		// for
		// color
		// buttons
		((GridData) fForeground.getButton().getLayoutData()).minimumWidth = 20;
		fBackgroundLabel = createLabel(styleRow2, SSEUIMessages.Background_UI_); //$NON-NLS-1$ = "Background"
		fBackground = new ColorSelector(styleRow2);
		fBackground.getButton().setLayoutData(new GridData());
		setAccessible(fBackground.getButton(), fBackgroundLabel.getText());
		fBackground.getButton().getAccessible().addAccessibleControlListener(backgroundAccListener); // defect
		// 200764
		// -
		// ACC:display
		// values
		// for
		// color
		// buttons
		((GridData) fBackground.getButton().getLayoutData()).minimumWidth = 20;
		createLabel(styleRow2, ""); //$NON-NLS-1$
		fBold = createCheckBox(styleRow2, SSEUIMessages.Bold_UI_);
		if (showItalic)
			fItalic = createCheckBox(styleRow2, SSEUIMessages.Italics_UI);
		fUnderline = createCheckBox(styleRow2, PHPUIMessages.ColorPage_Underline);
		//		// Defaults checkbox
		fForeground.setEnabled(false);
		fBackground.setEnabled(false);
		fClearStyle.setEnabled(false);
		fBold.setEnabled(false);
		if (showItalic)
			fItalic.setEnabled(false);
		fUnderline.setEnabled(false);
		fForegroundLabel.setEnabled(false);
		fBackgroundLabel.setEnabled(false);
		Composite sample = createComposite(parent, 1);
		createLabel(sample, SSEUIMessages.Sample_text__UI_); //$NON-NLS-1$ = "&Sample text:"
		// BUG141089 - make sure text is left-aligned
		fText = new StyledText(sample, SWT.LEFT_TO_RIGHT | SWT.MULTI | SWT.V_SCROLL | SWT.H_SCROLL | SWT.BORDER | SWT.READ_ONLY);
		GridData data = new GridData(GridData.FILL_BOTH);
		fText.setLayoutData(data);
		fText.setEditable(false);
		fText.setBackground(fDefaultBackground);
		fText.setFont(JFaceResources.getTextFont());
		fText.addKeyListener(getTextKeyListener());
		fText.addSelectionListener(getTextSelectionListener());
		fText.addMouseListener(getTextMouseListener());
		fText.addTraverseListener(getTraverseListener()); // defect 220377 -
		// Provide tab
		// traversal for
		// fText widget
		setAccessible(fText, SSEUIMessages.Sample_text__UI_); //$NON-NLS-1$ = "&Sample text:"
		fForeground.addListener(new IPropertyChangeListener() {
			public void propertyChange(PropertyChangeEvent event) {
				if (event.getProperty().equals(ColorSelector.PROP_COLORCHANGE)) {
					// get current (newly old) style
					String namedStyle = getStyleName(fStyleCombo.getItem(fStyleCombo.getSelectionIndex()));
					String prefString = getPreferenceStore().getString(namedStyle);
					String[] stylePrefs = PHPColorHelper.unpackStylePreferences(prefString);
					if (stylePrefs != null) {
						String oldValue = stylePrefs[0];
						String newValue = "null"; //$NON-NLS-1$
						Object newValueObject = event.getNewValue();
						if (newValueObject instanceof RGB) {
							newValue = PHPColorHelper.toRGBString((RGB) newValueObject);
						}

						if (!newValue.equals(oldValue)) {
							stylePrefs[0] = newValue;
							String newPrefString = PHPColorHelper.packStylePreferences(stylePrefs);
							getPreferenceStore().setValue(namedStyle, newPrefString);
							refresh();
						}
					}
				}
			}
		});
		fBackground.addListener(new IPropertyChangeListener() {
			public void propertyChange(PropertyChangeEvent event) {
				if (event.getProperty().equals(ColorSelector.PROP_COLORCHANGE)) {
					// get current (newly old) style
					String namedStyle = getStyleName(fStyleCombo.getItem(fStyleCombo.getSelectionIndex()));
					String prefString = getPreferenceStore().getString(namedStyle);
					String[] stylePrefs = PHPColorHelper.unpackStylePreferences(prefString);
					if (stylePrefs != null) {
						String oldValue = stylePrefs[1];

						String newValue = "null"; //$NON-NLS-1$
						Object newValueObject = event.getNewValue();
						if (newValueObject instanceof RGB) {
							newValue = PHPColorHelper.toRGBString((RGB) newValueObject);
						}

						if (!newValue.equals(oldValue)) {
							stylePrefs[1] = newValue;
							String newPrefString = PHPColorHelper.packStylePreferences(stylePrefs);
							getPreferenceStore().setValue(namedStyle, newPrefString);
							refresh();
						}
					}
				}
			}
		});

		fClearStyle.addSelectionListener(buttonListener);
		fBold.addSelectionListener(buttonListener);
		if (showItalic)
			fItalic.addSelectionListener(buttonListener);
		fUnderline.addSelectionListener(buttonListener);
		fStyleCombo.addSelectionListener(comboListener);
	}

