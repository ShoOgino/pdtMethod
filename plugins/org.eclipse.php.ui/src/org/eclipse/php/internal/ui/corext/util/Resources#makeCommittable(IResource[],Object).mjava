	/**
	 * Makes the given resources committable. Committable means that all
	 * resources are writeable and that the content of the resources hasn't
	 * changed by calling <code>validateEdit</code> for a given file on
	 * <tt>IWorkspace</tt>.
	 * 
	 * @param resources
	 *            the resources to be checked
	 * @param context
	 *            the context passed to <code>validateEdit</code>
	 * @return IStatus status describing the method's result. If <code>status.
	 * isOK()</code> returns <code>true</code> then the add resources are
	 *         committable
	 * 
	 * @see org.eclipse.core.resources.IWorkspace#validateEdit(org.eclipse.core.resources.IFile[],
	 *      java.lang.Object)
	 */
	public static IStatus makeCommittable(IResource[] resources, Object context) {
		List<IFile> readOnlyFiles = new ArrayList<IFile>();
		for (int i = 0; i < resources.length; i++) {
			IResource resource = resources[i];
			if (resource.getType() == IResource.FILE && isReadOnly(resource)) {
				readOnlyFiles.add((IFile) resource);
			}
		}
		if (readOnlyFiles.size() == 0) {
			return new Status(IStatus.OK, PHPUiPlugin.getPluginId(), IStatus.OK, "", null); //$NON-NLS-1$
		}

		Map<IFile, Long> oldTimeStamps = createModificationStampMap(readOnlyFiles);
		IStatus status = ResourcesPlugin.getWorkspace()
				.validateEdit(readOnlyFiles.toArray(new IFile[readOnlyFiles.size()]), context);
		if (!status.isOK()) {
			return status;
		}

		IStatus modified = null;
		Map<IFile, Long> newTimeStamps = createModificationStampMap(readOnlyFiles);
		for (Entry<IFile, Long> entry : oldTimeStamps.entrySet()) {
			final IFile file = entry.getKey();
			if (!entry.getValue().equals(newTimeStamps.get(file))) {
				modified = addModified(modified, file);
			}
		}
		if (modified != null) {
			return modified;
		}

		return new Status(IStatus.OK, PHPUiPlugin.getPluginId(), IStatus.OK, "", null); //$NON-NLS-1$
	}

