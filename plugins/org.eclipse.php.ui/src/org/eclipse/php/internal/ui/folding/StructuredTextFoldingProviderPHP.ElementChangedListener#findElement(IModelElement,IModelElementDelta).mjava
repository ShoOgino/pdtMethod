		/**
		 * Ignore the delta if there are errors on the caret line.
		 * <p>
		 * We don't ignore the delta if an import is added and the
		 * caret isn't inside the import container.
		 * </p> 
		 *  
		 * @param ast the compilation unit AST
		 * @param delta the Java element delta for the given AST element
		 * @return <code>true</code> if the delta should be ignored
		 * @since 3.3

		private boolean shouldIgnoreDelta(CompilationUnit ast, IModelElementDelta delta) {
			if (ast == null)
				return false; // can't compute
				
			IDocument document= getDocument();
			if (document == null)
				return false; // can't compute

			JavaEditor editor= fEditor;
			if (editor == null || editor.getCachedSelectedRange() == null)
				return false; // can't compute
			
			try {
				if (delta.getAffectedChildren().length == 1 && delta.getAffectedChildren()[0].getElement() instanceof IImportContainer) {
					IModelElement elem= SelectionConverter.getElementAtOffset(ast.getTypeRoot(), new TextSelection(editor.getCachedSelectedRange().x, editor.getCachedSelectedRange().y));
					if (!(elem instanceof IImportDeclaration))
						return false;
					
				}
			} catch (ModelException e) {
				return false; // can't compute
			}
			
			int caretLine= 0;
			try {
				caretLine= document.getLineOfOffset(editor.getCachedSelectedRange().x) + 1; 
			} catch (BadLocationException x) {
				return false; // can't compute
			}
			
			if (caretLine > 0) {
				IProblem[] problems= ast.getProblems();
				for (int i= 0; i < problems.length; i++) {
					if (problems[i].isError() && caretLine == problems[i].getSourceLineNumber())
						return true;
				}
			}
			
			return false;
		}
		 */		

		private IModelElementDelta findElement(IModelElement target, IModelElementDelta delta) {

			if (delta == null || target == null)
				return null;

			IModelElement element= delta.getElement();

			if (element.getElementType() > IModelElement.BINARY_MODULE)
				return null;

			if (target.equals(element))
				return delta;

			IModelElementDelta[] children= delta.getAffectedChildren();

			for (int i= 0; i < children.length; i++) {
				IModelElementDelta d= findElement(target, children[i]);
				if (d != null)
					return d;
			}

			return null;
		}

