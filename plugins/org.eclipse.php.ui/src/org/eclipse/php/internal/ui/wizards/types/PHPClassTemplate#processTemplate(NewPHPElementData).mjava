	@Override
	public String processTemplate(NewPHPElementData data) {
		// handle class default PHPDOC
		set(DEFAULT_PHPDOC_VAR, ""); //$NON-NLS-1$

		// handle superclass declaration
		extract(INPUT, SUPERCLASS_STRUCT, SUPERCLASS_STRUCT_COMPILED);
		set(SUPERCLASS_STRUCT, ""); //$NON-NLS-1$
		if (data.superClass != null) {
			String superClass = data.superClass.getElementName();
			if (!isImported(data, data.superClass)) {
				superClass = "\\" + superClass; //$NON-NLS-1$
			}
			set(SUPERCLASS_NAME_VAR, superClass);
			compile(SUPERCLASS_STRUCT_COMPILED, SUPERCLASS_STRUCT, true);
		}

		// handle interfaces declaration
		extract(INPUT, INTERFACES_STRUCT, INTERFACES_STRUCT_COMPILED);
		set(INTERFACES_STRUCT, ""); //$NON-NLS-1$
		if (data.interfaces.length > 0) {
			for (int i = 0; i < data.interfaces.length; i++) {
				String interfaceName = data.interfaces[i].getElementName();
				if (!isImported(data, data.interfaces[i])) {
					interfaceName = "\\" + interfaceName; //$NON-NLS-1$
				}
				// if not the last interface name, add the ','
				if ((i + 1) < data.interfaces.length) {
					interfaceName += ", "; //$NON-NLS-1$
				}
				set(INTERFACE_NAME_VAR, interfaceName);
				compile(INTERFACES_STRUCT_COMPILED, INTERFACES_STRUCT, true);
			}
		}
		extract(INPUT, IMPLEMENTS_STRUCT, IMPLEMENTS_STRUCT_COMPILED);
		set(IMPLEMENTS_STRUCT, ""); //$NON-NLS-1$
		if (data.interfaces.length > 0) {
			compile(IMPLEMENTS_STRUCT_COMPILED, IMPLEMENTS_STRUCT, true);
		}

		// handle traits declaration
		extract(INPUT, TRAITS_STRUCT, TRAITS_STRUCT_COMPILED);
		set(TRAITS_STRUCT, ""); //$NON-NLS-1$
		if (data.traits.length > 0) {
			for (int i = 0; i < data.traits.length; i++) {
				String interfaceName = data.traits[i].getElementName();
				if (!isImported(data, data.traits[i])) {
					interfaceName = "\\" + interfaceName; //$NON-NLS-1$
				}
				// if not the last interface name, add the ','
				if ((i + 1) < data.traits.length) {
					interfaceName += ", "; //$NON-NLS-1$
				}
				set(TRAIT_NAME_VAR, interfaceName);
				compile(TRAITS_STRUCT_COMPILED, TRAITS_STRUCT, true);
			}
		}
		extract(INPUT, USESTRAITS_STRUCT, USESTRAITS_STRUCT_COMPILED);
		set(USESTRAITS_STRUCT, ""); //$NON-NLS-1$
		if (data.traits.length > 0) {
			compile(USESTRAITS_STRUCT_COMPILED, USESTRAITS_STRUCT, true);
		}

		// handle methods content
		extract(INPUT, FUNC_PARAMS_STRUCT, FUNC_PARAMS_STRUCT_COMPILED);// extract
		// method
		// params
		extract(INPUT, FUNC_PHPDOC_PARAMS_STRUCT, FUNC_PHPDOC_PARAMS_STRUCT_COMPILED);// extract
																						// method
																						// phpdoc
		// params
		extract(INPUT, FUNC_PHPDOC_STRUCT, FUNC_PHPDOC_STRUCT_COMPILED);// extract
		// method
		// phpdoc
		extract(INPUT, FUNCTIONS_STRUCT, FUNCTIONS_STRUCT_COMPILED);// extract
		// method
		set(FUNC_PARAMS_STRUCT, ""); //$NON-NLS-1$
		set(FUNC_PHPDOC_STRUCT, ""); //$NON-NLS-1$
		set(FUNCTIONS_STRUCT, ""); //$NON-NLS-1$
		set(FUNCTION_MODIFIER_VAR, ""); //$NON-NLS-1$
		set(FUNCTION_STATIC_VAR, ""); //$NON-NLS-1$
		set(FUNCTION_PARENT_CALL, ""); //$NON-NLS-1$

		// handle constructor
		if (data.isGenerateConstructor
				&& !containsFunction(data.funcsToAdd, TypeWizardConstants.PHP5_CONSTRUCTOR_TEMPLATE)) {
			generateConstructor(data);
		}

		// generate methods !
		set(TODO_VAR, ""); //$NON-NLS-1$
		if (data.funcsToAdd.length > 0) {
			generateInheritedMethods(data, data.funcsToAdd);
			set(TODO_VAR, ""); //$NON-NLS-1$
		} else {
			// fixed bug 14453 - change the class template and add todo
			// comment for the class in case of no methods.
			if (data.isGenerateTODOs) {
				set(TODO_VAR, TODO_TEXT);
			}
		}

		// handle destructor
		if (data.isGenerateDestructor
				&& !containsFunction(data.funcsToAdd, TypeWizardConstants.PHP5_DESTRUCTOR_TEMPLATE)) {
			generateDestructor(data);
		}

		// handle class
		extract(INPUT, CLASS_STRUCT, CLASS_STRUCT_COMPILED);
		set(CLASS_STRUCT, ""); //$NON-NLS-1$
		set(ABSTRACT_VAR, ""); //$NON-NLS-1$
		set(FINAL_VAR, ""); //$NON-NLS-1$
		if (data.isFinal) {
			set(FINAL_VAR, FINAL_TEXT);
		}
		if (data.isAbstract) {
			set(ABSTRACT_VAR, ABSTRACT_TEXT);
		}

		// Generate the PHPDoc for class.
		if (data.isGeneratePHPDoc) {
			set(DEFAULT_PHPDOC_VAR, getDefaultPHPDoc());
		}

		set(CLASS_NAME_VAR, data.className);
		set(ELEMENT_TYPE_VAR, TypeWizardConstants.CLASS_TYPE);
		compile(CLASS_STRUCT_COMPILED, CLASS_STRUCT, false);

		// handle namespace
		extract(INPUT, NAMESPACE_STRUCT, NAMESPACE_STRUCT_COMPILED);
		set(NAMESPACE_STRUCT, ""); //$NON-NLS-1$

		if (data.namespace != null && !data.namespace.isEmpty()) {
			set(NAMESPACE_NAME, data.namespace);
			compile(NAMESPACE_STRUCT_COMPILED, NAMESPACE_STRUCT, true);
		}

		// handle requires list declaration
		handleRequires(data);

		// handle use
		extract(INPUT, USE_STRUCT, USE_STRUCT_COMPILED);
		set(USE_STRUCT, ""); //$NON-NLS-1$

		for (int i = 0; i < data.imports.length; i++) {
			set(USE, data.imports[i]);
			compile(USE_STRUCT_COMPILED, USE_STRUCT, true);
		}

		// handle namespace in existing file
		extract(CLASS_STRUCT, NAMESPACE_IN_FILE_STRUCT, NAMESPACE_IN_FILE_STRUCT_COMPILED);
		set(NAMESPACE_IN_FILE_STRUCT, ""); //$NON-NLS-1$

		// handle use in existing file
		extract(CLASS_STRUCT, USE_IN_FILE_STRUCT, USE_IN_STRUCT_COMPILED);
		set(USE_IN_FILE_STRUCT, ""); //$NON-NLS-1$

		if (data.isExistingFile && data.isInFirstBlock) {
			if (data.namespace != null && !data.namespace.isEmpty()) {
				set(NAMESPACE_NAME, data.namespace);
				compile(NAMESPACE_IN_FILE_STRUCT_COMPILED, NAMESPACE_IN_FILE_STRUCT, true);
			}
			for (int i = 0; i < data.imports.length; i++) {
				set(USE, data.imports[i]);
				compile(USE_IN_STRUCT_COMPILED, USE_IN_FILE_STRUCT, true);
			}
		}

		// handle php_content
		extract(INPUT, PHP_CONTENT_STRUCT, PHP_CONTENT_STRUCT_COMPILED);
		compile(PHP_CONTENT_STRUCT_COMPILED, PHP_CONTENT_STRUCT, false);

		// a new php file or a new block ==> include the PHP open/close tag in
		// string
		if (!data.isExistingFile || (data.isExistingFile && !data.isInFirstBlock)
				|| (data.isExistingFile && data.isInFirstBlock && !data.hasFirstBlock)) {
			compile(get(PHP_CONTENT_STRUCT));
			return compile(get(INPUT));
		}

		// an existing file, take only class code
		else {
			return compile(get(CLASS_STRUCT));
		}
	}

