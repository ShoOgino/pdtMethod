	/**
	 * This method overrides WST since sometimes we get a subset of the document and NOT the whole document, although the case is FORMAT_DOCUMENT. In all other cases we call the parent method.
	 */
	@Override
	public void doOperation(int operation) {
		Point selection = getTextWidget().getSelection();
		int cursorPosition = selection.x;
		// save the last cursor position and the top visible line.
		int selectionLength = selection.y - selection.x;
		int topLine = getTextWidget().getTopIndex();
		if (operation == FORMAT_DOCUMENT) {
			try {
				setRedraw(false);
				// begin recording
				beginRecording(FORMAT_DOCUMENT_TEXT, FORMAT_DOCUMENT_TEXT, cursorPosition, selectionLength);

				// format the whole document !
				IRegion region = new Region(0, getDocument().getLength());
				if (fContentFormatter instanceof IContentFormatterExtension) {
					IContentFormatterExtension extension = (IContentFormatterExtension) fContentFormatter;
					IFormattingContext context = new FormattingContext();
					context.setProperty(FormattingContextProperties.CONTEXT_DOCUMENT, Boolean.TRUE);
					context.setProperty(FormattingContextProperties.CONTEXT_REGION, region);
					extension.format(getDocument(), context);
				} else {
					fContentFormatter.format(getDocument(), region);
				}
			} finally {
				// end recording
				selection = getTextWidget().getSelection();

				selectionLength = selection.y - selection.x;
				endRecording(cursorPosition, selectionLength);
				// return the cursor to its original position after the formatter change its position.
				getTextWidget().setSelection(cursorPosition);
				getTextWidget().setTopIndex(topLine);
				setRedraw(true);
			}
		} else if (operation == PASTE) {
			super.doOperation(operation);

			// IStructuredDocument sDoc = (IStructuredDocument) getDocument();
			// IStructuredDocumentRegion sdRegion = sDoc.getRegionAtCharacterOffset(selection.x);
			// ITextRegion textRegion = sdRegion.getRegionAtCharacterOffset(selection.x);
			//
			// boolean shouldFormat = false;
			//
			// if (textRegion instanceof ITextRegionContainer) {
			// textRegion = ((ITextRegionContainer) textRegion).getRegionAtCharacterOffset(selection.x);
			// if (textRegion.getType() == PHPRegionContext.PHP_OPEN || textRegion.getType() ==
			// PHPRegionContext.PHP_CLOSE || textRegion instanceof PhpScriptRegion) {
			// shouldFormat = true;
			// }
			// } else if (textRegion.getType() == PHPRegionContext.PHP_CONTENT) {
			// shouldFormat = true;
			// }
			// if(shouldFormat) {
			// TextTransfer plainTextTransfer = TextTransfer.getInstance();
			// String text = (String) new Clipboard(getTextWidget().getDisplay()).getContents(plainTextTransfer,
			// DND.CLIPBOARD);
			// IRegion region = new Region(selection.x, text.length());
			// ((IStructuredDocument) getDocument()).getUndoManager().disableUndoManagement();
			// fContentFormatter.format(getDocument(), region);
			// ((IStructuredDocument) getDocument()).getUndoManager().enableUndoManagement();
			// }
		} else if (operation == CONTENTASSIST_PROPOSALS) {
			// Handle javascript content assist when there is no support (instead of printing the stack trace)
			if (config != null) {
				IProject project =null;
				boolean isJavaScriptRegion = false;
				boolean hasJavaScriptNature = true;
				try {
					// Resolve the partition type
					IStructuredDocument sDoc = (IStructuredDocument) getDocument();
					IStructuredDocumentRegion sdRegion = sDoc.getRegionAtCharacterOffset(selection.x);
					ITextRegion textRegion = sdRegion.getRegionAtCharacterOffset(selection.x);
					if (textRegion instanceof ForeignRegion) {
						isJavaScriptRegion = (textRegion.getType() == DOMRegionContext.BLOCK_TEXT);
					}

					// Check if the containing project has JS nature or not
					if (textEditor instanceof PHPStructuredEditor) {
						IModelElement modelElement = ((PHPStructuredEditor) textEditor).getModelElement();
						
						if (modelElement != null) {
							IScriptProject scriptProject = modelElement.getScriptProject();
							project = scriptProject.getProject();
							if (project != null && project.getNature(JavaScriptCore.NATURE_ID) == null) {
								hasJavaScriptNature = false;
							}
						}
					}
					
					// open dialog if required
					if (isJavaScriptRegion && !hasJavaScriptNature) {
						Shell activeWorkbenchShell = PHPUiPlugin.getActiveWorkbenchShell();
						// Pop a question dialog - if the user selects 'Yes' JS Support is added, otherwise no change
						boolean addJavaScriptSupport = ErrorDialog.openQuestion(activeWorkbenchShell, PHPUIMessages.getString("PHPStructuredTextViewer.0"), PHPUIMessages.getString("PHPStructuredTextViewer.1"));
						// run the JSDT action for adding the JS nature
						if (addJavaScriptSupport && project != null) {
							SetupProjectsWizzard wiz = new SetupProjectsWizzard();
							wiz.selectionChanged(null, new StructuredSelection(project));
							wiz.run(null);
						}
						return;
					}

				} catch (CoreException e) {
					Logger.logException(e);
				}
			}

			// notifing the processors that the next request for completion is an explicit request
			if (config != null) {
				PHPStructuredTextViewerConfiguration structuredTextViewerConfiguration = (PHPStructuredTextViewerConfiguration) config;
				IContentAssistProcessor[] all = structuredTextViewerConfiguration.getContentAssistProcessors(this, PHPPartitionTypes.PHP_DEFAULT);
				for (IContentAssistProcessor element : all) {
					if (element instanceof PHPCompletionProcessor) {
						((PHPCompletionProcessor) element).setExplicit(true);
					}
				}
			}
			super.doOperation(operation);
			// }
			// else if (operation == CONTENTASSIST_CONTEXT_INFORMATION) {
			// if (fContentAssistant != null) {
			// String err = fContentAssistant.showContextInformation();
			// PlatformStatusLineUtil.displayErrorMessage(err);
			// PlatformStatusLineUtil.addOneTimeClearListener();
			// }
		} else if (operation == QUICK_ASSIST) {
			if (fOutlinePresenter != null) {
				fOutlinePresenter.showInformation();
			}
		} else if (operation == SHIFT_LEFT) {
			shift(false, false, true);
		} else if (operation == SHOW_HIERARCHY) {
			if (fHierarchyPresenter != null) {
				fHierarchyPresenter.showInformation();
			}
		} else {
			super.doOperation(operation);
		}
	}

