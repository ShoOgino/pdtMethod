	public void run() {
		while (true) {
			continueAddingElements = true;
			elementsChanged = false;
			Display.getDefault().syncExec(new Runnable() {
				public void run() {
					if (!continueAddingElements) {
						return;
					}
					tableViewer
							.setContentProvider(new SimpleListContentProvider());
					tableViewer.setInput(null);
				}
			});

			int elementsLength;
			synchronized (changeTableElements) {
				elementsLength = tableElements.length;
			}
			for (int i = 0; continueAddingElements && i < elementsLength; i++) {
				final Object element;
				synchronized (changeTableElements) {
					if (!continueAddingElements) {
						break;
					}
					element = tableElements[i];
				}
				Display.getDefault().syncExec(new Runnable() {
					public void run() {
						if (!continueAddingElements) {
							return;
						}
						tableViewer.add(element);
					}
				});
				if (i == 0 && defaultElementSelection) {
					if (!continueAddingElements) {
						break;
					}
					Display.getDefault().syncExec(new Runnable() {
						public void run() {
							if (!continueAddingElements) {
								return;
							}
							tableViewer
									.setSelection(new IStructuredSelection() {
										public Object getFirstElement() {
											return element;
										}

										public Iterator iterator() {
											return toList().iterator();
										}

										public int size() {
											return 1;
										}

										public Object[] toArray() {
											return new Object[] { element };
										}

										public List toList() {
											ArrayList arrayList = new ArrayList();
											arrayList.add(element);
											return arrayList;
										}

										public boolean isEmpty() {
											return false;
										}
									});
						}
					});
				}
			}
			synchronized (this) {
				if (exit) {
					return;
				}
				if (elementsChanged) {
					continue;
				}
				try {
					wait();
				} catch (InterruptedException e) {
				}
				if (exit) {
					return;
				}
			}
		}
	}

