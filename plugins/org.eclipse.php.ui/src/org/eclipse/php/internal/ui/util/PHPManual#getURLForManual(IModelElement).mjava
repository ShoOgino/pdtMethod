	/**
	 * XXX: support manual for keywords This method tries to determine PHP
	 * manual URL for the specified PHP element
	 * 
	 * @param codeData
	 *            PHP element code data
	 * @return URL for the manual page
	 */
	public String getURLForManual(IModelElement modelElement) {
		if (modelElement == null) {
			throw new IllegalArgumentException();
		}

		String path = null;
		if (modelElement instanceof IMethod) {
			try {
				IModelElement ancestor = ((IMethod) modelElement)
						.getAncestor(IModelElement.TYPE);
				if (null != ancestor) {
					// if this is actually a method (not function), checking for
					// declaring class manual
					path = buildPathForClass((IType) ancestor);
				} else {
					path = buildPathForMethod((IMethod) modelElement);
				}
			} catch (ModelException e) {
				Logger.logException(e);
			}
		} else if (modelElement instanceof IType) {
			try {
				path = buildPathForClass((IType) modelElement);
			} catch (ModelException e) {
				Logger.logException(e);
			}
		}
		if (path != null) {
			StringBuffer url = new StringBuffer();
			url.append(site.getUrl());
			if (!site.getUrl().endsWith("/")) { //$NON-NLS-1$
				url.append("/"); //$NON-NLS-1$
			}
			url.append(path);
			url.append("."); //$NON-NLS-1$
			url.append(site.getExtension());

			return url.toString();
		}
		return null;
	}

