	protected void installOccurrencesFinder(boolean forceUpdate) {
		fMarkOccurrenceAnnotations = true;

		fPostSelectionListenerWithAST = new ISelectionListenerWithAST() {
			public void selectionChanged(IEditorPart part,
					ITextSelection selection, Program astRoot) {
				updateOccurrenceAnnotations(selection, astRoot, false);
			}
		};
		SelectionListenerWithASTManager.getDefault().addListener(this,
				fPostSelectionListenerWithAST);
		if (forceUpdate && getSelectionProvider() != null) {
			fForcedMarkOccurrencesSelection = getSelectionProvider()
					.getSelection();
			IModelElement source = getModelElement();
			if ((source != null)
					&& source.getElementType() == IModelElement.SOURCE_MODULE) {
				try {
					final Program ast = SharedASTProvider.getAST(
							(ISourceModule) source, SharedASTProvider.WAIT_NO,
							getProgressMonitor());
					updateOccurrenceAnnotations(
							(ITextSelection) fForcedMarkOccurrencesSelection,
							ast, false);
				} catch (ModelException e) {
					Logger.logException(e);
				} catch (IOException e) {
					Logger.logException(e);
				}
			}
		}

		if (fOccurrencesFinderJobCanceler == null) {
			fOccurrencesFinderJobCanceler = new OccurrencesFinderJobCanceler();
			fOccurrencesFinderJobCanceler.install();
		}
	}

