	/**
	 * Update the projection annotation of all the nodes that are children of
	 * node and adds all projection annotations to viewer (for newly added
	 * viewers)
	 *
	 * We run over the PHP elements and add the relevant annotations,
	 * We don't handle the HTML projections as it is handled in the HTML adapter
	 * hence don't call the super @see ProjectionModelNodeAdapterHTML#updateAdapter(org.w3c.dom.Node, org.eclipse.jface.text.source.projection.ProjectionViewer)
	 */
	@Override
	public void updateAdapter(Node node, ProjectionViewer viewer) {

		final Map<ProjectionAnnotation, Position> addedAnnotations = new HashMap<ProjectionAnnotation, Position>();
		final Map<ProjectionAnnotation, Position> currentAnnotations = new HashMap<ProjectionAnnotation, Position>();

		if (node != null && node instanceof NodeImpl) {
			NodeImpl element = (NodeImpl) node;
			assert element.getModel() instanceof DOMModelForPHP : PHPUIMessages.getString("ProjectionModelNodeAdapterPHP.0"); //$NON-NLS-1$
			DOMModelForPHP phpModel = (DOMModelForPHP) element.getModel();
			document = phpModel.getStructuredDocument();

			// resolve the viewer
			ProjectionViewer modelViewer = getAdapterFactory().findViewer(phpModel);
			if (modelViewer == null) {
				return;
			}

			// ignore editor changes when the php model isn't ready.
			ProjectionViewerInformation information = getAdapterFactory().getInformation(modelViewer);
			if (information.isDocumentChanging()) {
				return;
			}

			PHPFileData fileData = phpModel.getFileData();
			if (fileData == null) {
				return;
			}

			createAnnotationsForChild(addedAnnotations, currentAnnotations, fileData, node.getFirstChild());

			// in the end, want to delete anything leftover in old list, add
			// everything in additions, and update everything in
			// projectionAnnotations
			ProjectionAnnotation[] oldList = null;
			if (!previousAnnotations.isEmpty()) {
				oldList = previousAnnotations.keySet().toArray(new ProjectionAnnotation[0]);
			}
			// specifically add all annotations to viewer
			if (viewer != null && !currentAnnotations.isEmpty()) {
				fAdapterFactory.queueAnnotationModelChanges(node, null, currentAnnotations, null, viewer);
			}

			// only update when there is something to update
			if (oldList != null && oldList.length > 0 || !addedAnnotations.isEmpty() || currentAnnotations != null && currentAnnotations.size() > 0) {
				fAdapterFactory.queueAnnotationModelChanges(node, oldList, addedAnnotations, currentAnnotations);
			}

			// next time don't obey preferences rules
			shouldAutoCollapseAnnotations = false;
		}

		// save new list of annotations
		previousAnnotations = currentAnnotations;

	}

