	/**
	 * Returns the statment start.
	 * the statment start is: Math.max(position of the last ';', position of php start tag)
	 */
	public static TextSequence getStatment(int offset, IStructuredDocumentRegion sdRegion, boolean removeComments) {
		int startPosition = sdRegion.getStartOffset();
		ITextRegion tRegion = sdRegion.getRegionAtCharacterOffset(offset);
		if (tRegion == null){
			tRegion = sdRegion.getLastRegion();
		}
		// if we are standing at the beginning of a word and asking for completion 
		if (tRegion.getType() != PHPRegionTypes.PHP_OPENTAG && sdRegion.getStartOffset(tRegion) == offset) {
			tRegion = sdRegion.getRegionAtCharacterOffset(offset - 1);
			if (tRegion == null) {
				sdRegion = sdRegion.getPrevious();
				if (sdRegion == null)
					return null;
				tRegion = sdRegion.getRegionAtCharacterOffset(offset - 1);
				if (tRegion == null)
					return null;
			}
		}
		
		IStructuredDocument document = sdRegion.getParentDocument();
		while (tRegion != null && tRegion.getType() != PHPRegionTypes.PHP_OPENTAG) {
			String type = tRegion.getType();
			int textStart = sdRegion.getStartOffset(tRegion);
			if (type == PHPRegionTypes.PHP_SEMICOLON || type == PHPRegionTypes.PHP_CURLY_OPEN || type == PHPRegionTypes.PHP_CURLY_CLOSE) {
				startPosition = textStart + 1;
				break;
			}
			tRegion = sdRegion.getRegionAtCharacterOffset(textStart - 1);
		}
		TextSequence textSequence = TextSequenceUtilities.createTextSequence(sdRegion, startPosition, offset - startPosition);

		if (removeComments) {
			textSequence = removeComments(textSequence);
		}
		// remove spaces from start.
		textSequence = textSequence.subTextSequence(readForwardSpaces(textSequence, 0), textSequence.length());
		return textSequence;
	}

