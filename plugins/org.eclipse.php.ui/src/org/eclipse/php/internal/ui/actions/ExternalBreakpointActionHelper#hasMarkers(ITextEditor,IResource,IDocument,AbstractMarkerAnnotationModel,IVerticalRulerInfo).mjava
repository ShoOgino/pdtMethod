	/**
	 * Returns if there are markers which include the ruler's line of activity.
	 * 
	 * @param textEditor
	 * @param resource
	 * @param document
	 * @param annotationModel
	 * @param rulerInfo
	 * @return
	 */
	public static boolean hasMarkers(ITextEditor textEditor, IResource resource, IDocument document,
			AbstractMarkerAnnotationModel annotationModel, IVerticalRulerInfo rulerInfo) {

		if (resource != null && annotationModel != null) {
			try {
				IMarker[] allMarkers;
				if (resource instanceof IFile && resource.exists()) {
					allMarkers = resource.findMarkers(IBreakpoint.LINE_BREAKPOINT_MARKER, true, IResource.DEPTH_ZERO);
					if (allMarkers != null) {
						for (IMarker marker : allMarkers) {
							if (includesRulerLine(annotationModel.getMarkerPosition(marker), document, rulerInfo)) {
								return true;
							}
						}
					}
				} else {
					String secondaryId = getSecondaryId(textEditor);

					// get it from the workspace root
					allMarkers = resource.getWorkspace().getRoot().findMarkers(IBreakpoint.LINE_BREAKPOINT_MARKER, true,
							IResource.DEPTH_ZERO);
					IBreakpointManager manager = DebugPlugin.getDefault().getBreakpointManager();
					if (allMarkers != null) {
						for (IMarker marker : allMarkers) {
							if (manager.getBreakpoint(marker) != null) {
								String markerSecondaryId = marker
										.getAttribute(StructuredResourceMarkerAnnotationModel.SECONDARY_ID_KEY, null);
								if ((secondaryId == null || secondaryId.equals(markerSecondaryId)) && includesRulerLine(
										annotationModel.getMarkerPosition(marker), document, rulerInfo)) {
									return true;
								}
							}
						}
					}
				}
			} catch (CoreException x) {
			}
		}
		return false;
	}

