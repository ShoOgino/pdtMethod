		public LocationGroup(Composite composite) {
			final int numColumns = 3;
			final Group group = new Group(composite, SWT.None);
			group.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
			group.setLayout(initGridLayout(new GridLayout(numColumns, false),
					true));
			group.setText(NewWizardMessages.ScriptProjectWizardFirstPage_LocationGroup_title);
			fWorkspaceRadio = new SelectionButtonDialogField(SWT.RADIO);
			fWorkspaceRadio.setDialogFieldListener(this);
			fWorkspaceRadio
					.setLabelText(NewWizardMessages.ScriptProjectWizardFirstPage_LocationGroup_workspace_desc);
			fExternalRadio = new SelectionButtonDialogField(SWT.RADIO);
			fExternalRadio.setDialogFieldListener(this);
			fExternalRadio
					.setLabelText(NewWizardMessages.ScriptProjectWizardFirstPage_LocationGroup_external_desc);
			fLocation = new StringButtonDialogField(this);
			fLocation.setDialogFieldListener(this);
			fLocation
					.setLabelText(NewWizardMessages.ScriptProjectWizardFirstPage_LocationGroup_locationLabel_desc);
			fLocation
					.setButtonLabel(NewWizardMessages.ScriptProjectWizardFirstPage_LocationGroup_browseButton_desc);
			// fExternalRadio.attachDialogField(fLocation);
			fWorkspaceRadio.setSelection(true);
			fExternalRadio.setSelection(false);
			fPreviousExternalLocation = ""; //$NON-NLS-1$
			fWorkspaceRadio.doFillIntoGrid(group, numColumns);
			fExternalRadio.doFillIntoGrid(group, numColumns);
			fLocation.doFillIntoGrid(group, numColumns);
			LayoutUtil.setHorizontalGrabbing(fLocation.getTextControl(null));
			fExternalRadio.attachDialogFields(new DialogField[] { fLocation });

			environments = EnvironmentManager.getEnvironments();
			String[] items = new String[environments.length];
			localEnv = 0;
			for (int i = 0; i < items.length; i++) {
				items[i] = environments[i].getName();
				if (environments[i].isLocal()) {
					localEnv = i;
				}
			}

			// check if any of the server can provide local doc root.

			Server[] servers = ServersManager.getServers();
			List<String> docRoots = new ArrayList<String>();
			for (int i = 0; i < servers.length; i++) {
				String docRoot = servers[i].getDocumentRoot();
				String isLocal = servers[i].getAttribute(Server.LOCALSERVER,
						null);
				if (isLocal != null && docRoot != null
						&& !"".equals(docRoot.trim())) { //$NON-NLS-1$
					docRoots.add(docRoot);
				}
			}

			if (docRoots.size() > 0) {
				fLocalServerRadio = new SelectionButtonDialogField(SWT.RADIO);
				fLocalServerRadio.setDialogFieldListener(this);
				fLocalServerRadio
						.setLabelText(PHPUIMessages
								.getString("PHPProjectWizardFirstPage.localServerLabel")); //$NON-NLS-1$
				fLocalServerRadio.setSelection(false);
				fLocalServerRadio.doFillIntoGrid(group, numColumns);
				fSeverLocationList = new ComboDialogField(SWT.READ_ONLY);
				fSeverLocationList
						.setLabelText(NewWizardMessages.ScriptProjectWizardFirstPage_LocationGroup_locationLabel_desc);
				fSeverLocationList.doFillIntoGrid(group, numColumns);
				fSeverLocationList.setEnabled(false);
				docRootArray = new String[docRoots.size()];
				docRoots.toArray(docRootArray);
				fSeverLocationList.setItems(docRootArray);
				fSeverLocationList.selectItem(0);
				fLocalServerRadio.attachDialogField(fSeverLocationList);
				fWorkspaceRadio.setSelection(false);
				fLocalServerRadio.setSelection(true);
			}

		}

