		/**
		 * The worker method. It will find the container, create the file if
		 * missing or just replace its contents, and open the editor on the
		 * newly created file.
		 * 
		 * @param wizard
		 * @param containerName
		 * @param fileName
		 * @param monitor
		 * @param contents
		 * @param editorID
		 *            An optional editor ID to use when opening the file (can be
		 *            null).
		 * @throws CoreException
		 */
		public void createFile(Wizard wizard, String containerName,
				String fileName, IProgressMonitor monitor, String contents,
				final int offset, final String editorID) throws CoreException {
			// create a sample file
			monitor.beginTask(
					NLS.bind(PHPUIMessages.newPhpFile_create, fileName), 2);
			IWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot();
			IResource resource = root.findMember(new Path(containerName));
			if (!resource.exists() || !(resource instanceof IContainer)) {
				throwCoreException(PHPUIMessages.PHPFileCreationWizard_1
						+ containerName + PHPUIMessages.PHPFileCreationWizard_2); 
			}
			IContainer container = (IContainer) resource;
			final IFile file = container.getFile(new Path(fileName));

			// adopt project's/workspace's line delimiter (separator)
			String lineSeparator = Platform.getPreferencesService().getString(
					Platform.PI_RUNTIME,
					Platform.PREF_LINE_SEPARATOR,
					null,
					new IScopeContext[] { new ProjectScope(container
							.getProject()) });
			if (lineSeparator == null)
				lineSeparator = Platform.getPreferencesService().getString(
						Platform.PI_RUNTIME, Platform.PREF_LINE_SEPARATOR,
						null, new IScopeContext[] { new InstanceScope() });
			if (lineSeparator == null)
				lineSeparator = System
						.getProperty(Platform.PREF_LINE_SEPARATOR);
			if (contents != null) {
				contents = contents.replaceAll("(\n\r?|\r\n?)", lineSeparator); //$NON-NLS-1$
			}

			try {
				InputStream stream = openContentStream(contents,
						getCharSetValue(container));
				if (file.exists()) {
					file.setContents(stream, true, true, monitor);
				} else {
					file.create(stream, true, monitor);
				}
				stream.close();
			} catch (IOException e) {
				Logger.logException(e);
				return;
			}

			// Change file encoding:
			/*
			 * if (container instanceof IProject) { PHPProjectOptions options =
			 * PHPProjectOptions.forProject((IProject) container); if (options
			 * != null) { String defaultEncoding = (String)
			 * options.getOption(PHPCoreConstants.PHPOPTION_DEFAULT_ENCODING);
			 * if (defaultEncoding == null || defaultEncoding.length() == 0) {
			 * defaultEncoding = container.getDefaultCharset(); }
			 * file.setCharset(defaultEncoding, monitor); } }
			 */

			monitor.worked(1);
			monitor.setTaskName(NLS.bind(PHPUIMessages.newPhpFile_openning,
					fileName));
			wizard.getShell().getDisplay().asyncExec(new Runnable() {
				public void run() {
					IWorkbenchPage page = PlatformUI.getWorkbench()
							.getActiveWorkbenchWindow().getActivePage();
					try {
						normalizeFile(file);
						IEditorPart editor;
						if (editorID == null) {
							editor = IDE.openEditor(page, file, true);
						} else {
							editor = IDE.openEditor(page, file, editorID, true);
						}
						if (editor instanceof PHPStructuredEditor) {
							StructuredTextViewer textViewer = ((PHPStructuredEditor) editor)
									.getTextViewer();
							textViewer.setSelectedRange(offset, 0);
						}
					} catch (PartInitException e) {
					}
				}
			});
			monitor.worked(1);
		}

