	protected void validatePageValues(int validationCode) {
		switch (validationCode) {
		case VALIDATE_ELEMENT_NAME:
			elementNameStatus = new StatusInfo();
			if (getElementName() == null || getElementName().length() == 0) {
				String message = Messages.NewPHPTypePage_nameMustNotBeEmpty;
				switch (fTypeKind) {
				case CLASS_TYPE:
					message = Messages.NewPHPTypePage_class + message;
					break;
				case INTERFACE_TYPE:
					message = Messages.NewPHPTypePage_interface + message;
					break;
				case TRAIT_TYPE:
					message = Messages.NewPHPTypePage_trait + message;
					break;
				}
				elementNameStatus.setError(message);
			} else if (isInExistingPHPFile()) {
				Path p = new Path(getSourceText() + File.separatorChar + getExistingFileName());
				IWorkspaceRoot wsRoot = ResourcesPlugin.getWorkspace().getRoot();
				IFile file = wsRoot.getFile(p);

				// PHPFileData fileData =
				// PHPWorkspaceModelManager.getInstance().getModelForFile(p.toString());

				ISourceModule sourceModule = DLTKCore.createSourceModuleFrom(file);
				if (sourceModule != null && sourceModule.exists()) {
					IType[] types = null;
					try {
						types = sourceModule.getTypes();
					} catch (ModelException e) {
						Logger.logException(e);
					}

					if (types != null) {
						// check if the new class/interface already exists in a
						// current file
						for (IType type : types) {
							if (type.getElementName().equalsIgnoreCase(getElementName())) {
								if (fTypeKind == CLASS_TYPE && !PHPFlags.isClass(type.getElementType())) {
									elementNameStatus.setError(Messages.NewPHPTypePage_class + getElementName()
											+ Messages.NewPHPTypePage_alreadyExistsInFile + existingFileName);
									break;
								} else if (fTypeKind == INTERFACE_TYPE && PHPFlags.isInterface(type.getElementType())) {
									elementNameStatus.setError(Messages.NewPHPTypePage_interface + getElementName()
											+ Messages.NewPHPTypePage_alreadyExistsInFile);
									break;
								} else if (fTypeKind == TRAIT_TYPE && PHPFlags.isInterface(type.getElementType())) {
									elementNameStatus.setError(Messages.NewPHPTypePage_trait + getElementName()
											+ Messages.NewPHPTypePage_alreadyExistsInFile);
									break;
								}
							}
						}
					} // do nothing here, no elements exists in the file
				}

			}

			// fix bug 14446 - add PHP identifier validation
			if (getProject() != null) {
				if (!isValidPhpIdentifier(getElementName())) {
					String message = Messages.NewPHPTypePage_InvalidPhp;
					String nameLabel = Messages.NewPHPTypePage_InvalidPhpName;
					switch (fTypeKind) {
					case CLASS_TYPE:
						message = message + Messages.NewPHPTypePage_class + nameLabel;
						break;
					case INTERFACE_TYPE:
						message = message + Messages.NewPHPTypePage_interface + nameLabel;
						break;
					case TRAIT_TYPE:
						message = message + Messages.NewPHPTypePage_trait + nameLabel;
						break;
					}
					elementNameStatus.setError(message);
				}
			}
			updateStatus(findMostSevereStatus());
			break;
		case VALIDATE_SOURCE_FOLDER:
			// since source folder is a critical location (PHP model)
			// we should check how it affects the wizard pages
			sourceFolderChanged();
			break;
		case VALIDATE_EXISTING_FILE:
			existingFileStatus = new StatusInfo();
			if (isInExistingPHPFile()) {
				if (existingFileText.getText().length() == 0) {
					existingFileStatus.setError(Messages.NewPHPTypePage_existingFileMustNotBeEmpty);
				} else if (!isPathExist(sourceText.getText() + File.separatorChar + existingFileText.getText())) {
					existingFileStatus.setError(Messages.NewPHPTypePage_targetPHPFile + existingFileText.getText()
							+ Messages.NewPHPTypePage_doesNotExist);
				} else if (!isPHPSuffix(existingFileText.getText())) {
					existingFileStatus.setError(Messages.NewPHPTypePage_phpFile + existingFileText.getText()
							+ Messages.NewPHPTypePage_notPhpExtention);
				}
			}
			updateStatus(findMostSevereStatus());
			break;
		case VALIDATE_NEW_FILE:
			newFileStatus = new StatusInfo();
			if (!isInExistingPHPFile()) {
				String fileName = newFileText.getText();
				if (fileName.length() == 0) {
					newFileStatus.setError(Messages.NewPHPTypePage_fileMustnotBeEmpty);
				}

				else if (isPathExist(sourceText.getText() + File.separatorChar + fileName)) {
					newFileStatus.setError(
							Messages.NewPHPTypePage_phpFile + fileName + Messages.NewPHPTypePage_alreadyExists);
				} else if (!isPHPSuffix(fileName)) {
					newFileStatus.setError(
							Messages.NewPHPTypePage_phpFile + fileName + Messages.NewPHPTypePage_notPhpExtention);
				} else if (!isValidFileName(fileName)) {
					newFileStatus.setError(Messages.NewPHPTypePage_phpFile
							+ MessageFormat.format(Messages.NewPHPTypePage_filename_not_valid, fileName));
				}
			}
			updateStatus(findMostSevereStatus());
			break;
		case VALIDATE_NAMESPACE:
			namespaceStatus = new StatusInfo();
			String namespace = getNamespace();
			if (namespace != null && !namespace.isEmpty()) {
				int separator = namespace.indexOf('/', 0);
				if (separator != -1) {
					namespaceStatus.setError(Messages.NewPHPTypePage_invalidSeparator);
				} else {
					if (namespace.endsWith("\\")) {//$NON-NLS-1$
						namespaceStatus.setError(Messages.NewPHPTypePage_emptySublevel);
					} else {
						String[] segments = namespace.split("\\\\");//$NON-NLS-1$
						if (segments.length == 1 && !isValidPhpIdentifier(namespace.trim())) {
							namespaceStatus.setError(Messages.NewPHPTypePage_invalidNamespaceName);
						} else {
							for (String segment : segments) {
								if (segment.isEmpty()) {
									namespaceStatus.setError(Messages.NewPHPTypePage_emptySublevel);
								} else {
									try {
										Integer.valueOf(segment);
										namespaceStatus.setError(Messages.NewPHPTypePage_invalidSublevel);
									} catch (NumberFormatException e) {
										// valid segment
									}
								}
							}
						}
					}
				}
			}
			updateStatus(findMostSevereStatus());
			break;
		}
		String sourcePathStr = getProjectName(getSourceText());
		if (sourcePathStr == null || sourcePathStr.length() == 0) {
			return;
		}

		Path projPath = new Path(sourcePathStr);
		if (projPath.segmentCount() == 1) {
			IProject currentProject = getCurrentProject();
			if (currentProject != null && currentProject.exists()) {
				IScriptProject model = DLTKCore.create(currentProject);
				if (getInterfaces().size() > 0) {
					validateInterfaces(model);
				}
				if (getTraits().size() > 0) {
					validateTraits(model);
				}
			}
		}
	}

