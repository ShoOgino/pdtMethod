	private ImageDescriptor getCPListElementBaseImage(IPListElement entry) {
		switch (entry.getEntryKind()) {
			case IIncludePathEntry.IPE_SOURCE:
				if (entry.getPath().segmentCount() == 1) {
					return fProjectImage;
				}
				return fFolderImage;
			case IIncludePathEntry.IPE_LIBRARY:
			case IIncludePathEntry.IPE_JRE:
				IResource res = entry.getResource();
				if (res == null) {
					if (entry.getContentKind() == IIncludePathEntry.K_BINARY) {
						return fExtZipIcon;
					}
					return fContainerImage;
				} else if (res instanceof IFile) {
					return fZipIcon;
				} else {
					return fFolderImage;
				}
			case IIncludePathEntry.IPE_PROJECT:
				IResource container = entry.getResource();
				if (container != null) {
					if (imageProvider == null) {
						imageProvider = new PHPElementImageProvider();
					}
					return imageProvider.getWorkbenchImageDescriptor(container, 0);
				}
				return null;
			case IIncludePathEntry.IPE_VARIABLE:
				return fVariableImage;
			case IIncludePathEntry.IPE_CONTAINER:
				return fContainerImage;
			default:
				return null;
		}
	}

