	public static void getMethodLabel(PHPFunctionData method, long flags, StringBuffer buf) {
		// qualification
		//			if (getFlag(flags, M_FULLY_QUALIFIED)) {
		//				getTypeLabel(method.getDeclaringType(), T_FULLY_QUALIFIED | (flags & P_COMPRESSED), buf);
		//				buf.append('.');
		//			}

		//        buf.append("function ");

		buf.append(method.getName());

		// parameters
		if (getFlag(flags, M_PARAMETER_TYPES | M_PARAMETER_NAMES)) {
			PHPFunctionParameter[] parameters = method.getParameters();

			buf.append('(');

			//				String[] types= getFlag(flags, M_PARAMETER_TYPES) ? method.getParameterTypes() : null;
			//				String[] names=  getFlag(flags, M_PARAMETER_NAMES)   ? method.getParameterNames() : null;
			int nParams = (parameters != null && getFlag(flags, M_PARAMETER_TYPES)) ? parameters.length : 0;

			for (int i = 0; i < nParams; i++) {
				if (i > 0) {
					buf.append(COMMA_STRING); //$NON-NLS-1$
					buf.append(" "); //$NON-NLS-1$
				}
				if (getFlag(flags, M_PARAMETER_TYPES)) {
					String t = parameters[i].getClassType();
					if (t == null) {
						t = ""; //$NON-NLS-1$
					} else {
						t += " "; //$NON-NLS-1$
					}
					buf.append(t);
				}
				if (getFlag(flags, M_PARAMETER_NAMES)) {
					buf.append("$" + parameters[i].getName()); //$NON-NLS-1$
					String defaultValue = parameters[i].getDefaultValue();
					if (defaultValue != null && !defaultValue.equals("")) { //$NON-NLS-1$
						buf.append(" = " + defaultValue); //$NON-NLS-1$
					}
				}

			}
			buf.append(')');
		}

		// return type
		if (getFlag(flags, M_PRE_RETURNTYPE)) {
			String rt = method.getReturnType();
			buf.append(DECL_STRING);
			buf.append(rt);
		}

		//			if (getFlag(flags, M_EXCEPTIONS) && method.exists()) {
		//				String[] types= method.getExceptionTypes();
		//				if (types.length > 0) {
		//					buf.append(" throws "); //$NON-NLS-1$
		//					for (int i= 0; i < types.length; i++) {
		//						if (i > 0) {
		//							buf.append(COMMA_STRING);
		//						}
		//						buf.append(Signature.getSimpleName(Signature.toString(types[i])));
		//					}
		//				}
		//			}

		if (getFlag(flags, M_APP_RETURNTYPE)) {
			String rt = method.getReturnType();
			buf.append(DECL_STRING);
			buf.append(rt);
		}

		// post qualification
		if (getFlag(flags, M_POST_QUALIFIED)) {
			buf.append(CONCAT_STRING);
			PHPCodeData container = method.getContainer();
			PHPClassData containerClass = null;
			if (container != null && container instanceof PHPClassData) {
				containerClass = (PHPClassData) container;
			}
			getTypeLabel(containerClass, T_FULLY_QUALIFIED | (flags & P_COMPRESSED), buf);
		}

	}

