	/**
	 * Creates the text change for this proposal. This method is only called
	 * once and only when no text change has been passed in
	 * {@link #CUCorrectionProposal(String, ISourceModule, TextChange, int, Image)}
	 * .
	 * 
	 * @return returns the created text change.
	 * @throws CoreException
	 *             thrown if the creation of the text change failed.
	 */
	protected TextChange createTextChange() throws CoreException {
		ISourceModule cu = getCompilationUnit();
		String name = getName();
		TextChange change;
		if (!cu.getResource().exists()) {
			IDocument doc = null;
			Enumeration openBuffers = BufferManager.getDefaultBufferManager().getOpenBuffers();
			while (openBuffers.hasMoreElements()) {
				Object nextElement = openBuffers.nextElement();
				if (nextElement instanceof DocumentAdapter) {
					DocumentAdapter adapt = (DocumentAdapter) nextElement;
					if (adapt.getOwner().equals(cu)) {
						doc = adapt.getDocument();
						break;
					}
				}
			}

			if (doc == null) {
				String source;
				try {
					source = cu.getSource();
				} catch (ModelException e) {
					PHPUiPlugin.log(e);
					source = ""; //$NON-NLS-1$ // empty
				}
				doc = new Document(source);
				((Document) doc).setInitialLineDelimiter(StubUtility.getLineDelimiterUsed(cu.getScriptProject()));
			}

			change = new DocumentChange(name, doc);
		} else {
			SourceModuleChange cuChange = new SourceModuleChange(name, cu);
			cuChange.setSaveMode(TextFileChange.LEAVE_DIRTY);
			change = cuChange;
		}
		TextEdit rootEdit = new MultiTextEdit();
		change.setEdit(rootEdit);

		// initialize text change
		IDocument document = change.getCurrentDocument(new NullProgressMonitor());
		addEdits(document, rootEdit);
		return change;
	}

