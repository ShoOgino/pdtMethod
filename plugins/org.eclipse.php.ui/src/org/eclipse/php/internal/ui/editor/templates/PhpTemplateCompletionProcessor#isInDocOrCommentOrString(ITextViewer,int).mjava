	private boolean isInDocOrCommentOrString(ITextViewer viewer, int offset) {
		IModelManager modelManager = StructuredModelManager.getModelManager();
		if (modelManager != null) {
			IStructuredModel structuredModel = null;
			structuredModel = modelManager.getExistingModelForRead(viewer
					.getDocument());
			if (structuredModel != null) {
				try {
					DOMModelForPHP domModelForPHP = (DOMModelForPHP) structuredModel;
					try {
						// Find the structured document region:
						IStructuredDocument document = (IStructuredDocument) domModelForPHP
								.getDocument().getStructuredDocument();
						IStructuredDocumentRegion sdRegion = document
								.getRegionAtCharacterOffset(offset);
						if (sdRegion == null) { // empty file case
							return false;
						}

						ITextRegion textRegion = sdRegion
								.getRegionAtCharacterOffset(offset);
						if (textRegion == null) {
							return false;
						}

						ITextRegionCollection container = sdRegion;

						if (textRegion instanceof ITextRegionContainer) {
							container = (ITextRegionContainer) textRegion;
							textRegion = container
									.getRegionAtCharacterOffset(offset);
						}

						if (textRegion.getType() == PHPRegionContext.PHP_CONTENT) {
							IPhpScriptRegion phpScriptRegion = (IPhpScriptRegion) textRegion;
							textRegion = phpScriptRegion.getPhpToken(offset
									- container.getStartOffset()
									- phpScriptRegion.getStart());
							String type = textRegion.getType();
							if (PHPPartitionTypes
									.isPHPMultiLineCommentState(type)
									|| PHPPartitionTypes.isPHPDocState(type)
									|| PHPPartitionTypes
											.isPHPLineCommentState(type)
									|| PHPPartitionTypes.isPHPQuotesState(type)) {
								return true;
							}
						}
					} catch (Exception e) {
						Logger.logException(e);
					}
				} finally {
					structuredModel.releaseFromRead();
				}
			}
		}
		return false;
	}

