	/**
	 * Adds the self function with the relevant data to the proposals array
	 * @param classes
	 * @param classData
	 * @return the updated proposals array
	 */
	private CodeData[] addSelfFunctionToProposals(CodeData[] classes, PHPClassData classData) {
		
		//  find the constructor between the class functions
		PHPFunctionData constructorData = null;
		PHPFunctionData[] classFunctions = classData.getFunctions();
		for (PHPFunctionData functionData : classFunctions) {
			if(functionData.getName() == classData.getName() || functionData.getName().equals("__construct")){
				constructorData = functionData;
				break;
			}
		}
		
		CodeData selfFunction = null;
		if(constructorData != null){
			PHPDocBlock docBlock = constructorData.getDocBlock();
			selfFunction = PHPCodeDataFactory.createPHPFuctionData("self", classData.getModifiers(), new PHPDocBlockImp(docBlock.getShortDescription(),docBlock.getLongDescription(), docBlock.getTagsAsArray()), classData.getUserData(), constructorData.getParameters(), "void");
		} else {
			selfFunction = PHPCodeDataFactory.createPHPFuctionData("self", classData.getModifiers(), new PHPDocBlockImp("","",new PHPDocTag[0]) , classData.getUserData(), new PHPFunctionParameter[0], null);
		}
		 
		CodeData[] proposalArray = new CodeData[classes.length + 1];
		System.arraycopy(classes, 0, proposalArray, 0, classes.length);
		proposalArray[classes.length] = selfFunction;

		Arrays.sort(proposalArray);
		return proposalArray;
	}

