	private void autoIndentBeforeCurlyOpen(IStructuredDocument document,
			DocumentCommand command) {

		int startOffset = command.offset;
		int endOffset = startOffset + command.length;
		helpBuffer.setLength(0);
		try {
			IRegion startlineInfo = document
					.getLineInformationOfOffset(startOffset);
			IRegion endlineInfo = null;

			if (startlineInfo.getOffset() + startlineInfo.getLength() < endOffset) {
				// meaning the begin and the end of the selection is not in the
				// same line.
				endlineInfo = document.getLineInformationOfOffset(endOffset);
			} else {
				endlineInfo = startlineInfo;
			}
			int lineNumber = document.getLineOfOffset(startOffset);

			if (IndentationUtils.isBlanks(document, startlineInfo.getOffset(),
					endlineInfo.getOffset() + endlineInfo.getLength(),
					startOffset)) {
				placeMatchingBlanks(document, helpBuffer, lineNumber,
						startOffset);
				int endSelection = command.offset + command.length;
				command.offset = startlineInfo.getOffset();
				command.length = (command.length == 0) ? endOffset
						- command.offset : endSelection - command.offset;
			}
		} catch (BadLocationException e) {
			Logger.logException(e);
		}

		command.text = helpBuffer.toString() + command.text;

	}

