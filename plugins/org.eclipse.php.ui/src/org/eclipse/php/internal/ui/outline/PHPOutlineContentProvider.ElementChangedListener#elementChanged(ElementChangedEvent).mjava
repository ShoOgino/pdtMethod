		public void elementChanged(final ElementChangedEvent e) {
			final Control control = fOutlineViewer.getControl();
			if (control == null || control.isDisposed()) {
				return;
			}

			// filter event from different source module
			Set<ISourceModule> eventSources = new HashSet<ISourceModule>();
			collectSourceModules(e.getDelta(), eventSources);
			if (fInput == null || !eventSources.contains(fInput)) {
				return;
			}

			// update useStatements
			Job job = new Job(PHPUIMessages.PHPOutlineContentProvider_0) {

				@Override
				protected IStatus run(IProgressMonitor monitor) {
					fUseStatements = getUseStatements(fSourceModule);

					IWorkbenchWindow activeWorkbenchWindow = PlatformUI.getWorkbench().getActiveWorkbenchWindow();
					if (activeWorkbenchWindow != null) {
						IWorkbenchPage activePage = activeWorkbenchWindow.getActivePage();
						if (activePage != null) {
							IEditorPart activeEditor = activePage.getActiveEditor();
							if (activeEditor instanceof PHPStructuredEditor) {
								IModelElement base = ((PHPStructuredEditor) activeEditor).getModelElement();

								if (isNamespaceSupported(base)) {
									IModelElement[] useStatements = getUseStatements((ISourceModule) base);
									useStatementsCountNew = useStatements.length;
								}
							}
						}
					}
					final IModelElementDelta delta = findElement(fSourceModule, e.getDelta());
					if ((delta != null || e.getType() == ElementChangedEvent.POST_CHANGE) && fOutlineViewer != null
							&& fOutlineViewer.getControl() != null && !fOutlineViewer.getControl().isDisposed()) {
						Display d = control.getDisplay();
						if (d != null) {
							d.asyncExec(new Runnable() {
								public void run() {
									refresh(delta);
								}
							});
						}
					}
					return Status.OK_STATUS;
				}
			};
			job.setPriority(Job.DECORATE);
			job.setSystem(true);
			job.schedule();
		}

