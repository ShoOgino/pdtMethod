	/*
	 * @see
	 * org.eclipse.jface.text.hyperlink.IHyperlinkDetector#detectHyperlinks(
	 * org.eclipse.jface.text.ITextViewer, org.eclipse.jface.text.IRegion,
	 * boolean)
	 */
	public IHyperlink[] detectHyperlinks(ITextViewer textViewer, IRegion region, boolean canShowMultipleHyperlinks) {
		final PHPStructuredEditor editor = org.eclipse.php.internal.ui.util.EditorUtility.getPHPEditor(textViewer);
		if (editor == null) {
			return null;
		}

		if (region == null) {
			return null;
		}

		IModelElement input = EditorUtility.getEditorInputModelElement(editor, false);
		if (input == null) {
			return null;
		}

		PHPVersion phpVersion = ProjectOptions.getPhpVersion(input.getScriptProject().getProject());
		// PHP 5.3 and greater
		boolean namespacesSupported = phpVersion.isGreaterThan(PHPVersion.PHP5);

		IDocument document = textViewer.getDocument();
		int offset = region.getOffset();
		try {
			IRegion wordRegion = findWord(document, offset, namespacesSupported);
			if (wordRegion == null)
				return null;

			try {
				String text = document.get(wordRegion.getOffset(), wordRegion.getLength());
				if (text.equals(NEW)) {
					return null;
				}
			} catch (BadLocationException e) {
			}
			IModelElement[] elements = null;
			elements = ((ICodeAssist) input).codeSelect(wordRegion.getOffset(), wordRegion.getLength());
			if ((elements == null || elements.length == 0) && input instanceof ISourceModule) {
				elements = PHPModelUtils.getTypeInString((ISourceModule) input, wordRegion);

			}
			if (elements != null && elements.length > 0) {
				final IHyperlink link;
				if (elements.length == 1) {
					link = new ModelElementHyperlink(wordRegion, elements[0], new OpenAction(editor));
				} else {
					link = new ModelElementHyperlink(wordRegion, new ModelElementArray(elements),
							new OpenAction(editor));
				}
				return new IHyperlink[] { link };
			}
		} catch (ModelException e) {
			return null;
		}

		return null;
	}

