	/**
	 * Computes the hover info.
	 * 
	 * @param elements
	 *            the resolved elements
	 * @param constantValue
	 *            a constant value iff result contains exactly 1 constant field,
	 *            or <code>null</code>
	 * @param previousInput
	 *            the previous input, or <code>null</code>
	 * @return the HTML hover info for the given element(s) or <code>null</code>
	 *         if no information is available
	 * @since 3.4
	 */
	private static PHPDocumentationBrowserInformationControlInput getHoverInfo(
			IModelElement[] elements, String constantValue,
			PHPDocumentationBrowserInformationControlInput previousInput) {
		StringBuffer buffer = new StringBuffer();
		boolean hasContents = false;
		IModelElement element = null;
		int leadingImageWidth = 20;
		for (int i = 0; i < elements.length; i++) {
			element = elements[i];
			if (element instanceof IMember) {
				IMember member = (IMember) element;
				HTMLPrinter.addSmallHeader(buffer, getInfoText(member,
						constantValue, true, i == 0));
				Reader reader = null;
				try {
					reader = getHTMLContent(member);
				} catch (ModelException e) {
				}

				if (reader != null) {
					HTMLPrinter.addParagraph(buffer, reader);
				}
				if (i != elements.length - 1) {
					buffer.append("<hr>");
				}
				hasContents = true;
			} else if (element.getElementType() == IModelElement.FIELD) {
				HTMLPrinter.addSmallHeader(buffer, getInfoText(element,
						constantValue, true, i == 0));
				hasContents = true;
			}
		}

		if (!hasContents)
			return null;

		if (buffer.length() > 0) {
			HTMLPrinter.insertPageProlog(buffer, 0, getStyleSheet());
			HTMLPrinter.addPageEpilog(buffer);
			return new PHPDocumentationBrowserInformationControlInput(
					previousInput, element, buffer.toString(),
					leadingImageWidth);
		}

		return null;
	}

