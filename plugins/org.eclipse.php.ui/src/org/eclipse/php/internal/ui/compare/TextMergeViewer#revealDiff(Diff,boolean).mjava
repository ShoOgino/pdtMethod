	/*
	 * Smart determines whether
	 */
	private void revealDiff(Diff d, boolean smart) {

		boolean ancestorIsVisible = false;
		boolean leftIsVisible = false;
		boolean rightIsVisible = false;

		if (smart) {
			Point region = new Point(0, 0);
			// find the starting line of the diff in all text widgets
			int ls = fLeft
					.getLineRange(d.getPosition(LEFT_CONTRIBUTOR), region).x;
			int rs = fRight.getLineRange(d.getPosition(RIGHT_CONTRIBUTOR),
					region).x;

			if (isThreeWay() && !isIgnoreAncestor()) {
				int as = fAncestor.getLineRange(d
						.getPosition(ANCESTOR_CONTRIBUTOR), region).x;
				if (as >= fAncestor.getTopIndex()
						&& as <= fAncestor.getBottomIndex())
					ancestorIsVisible = true;
			}

			if (ls >= fLeft.getTopIndex() && ls <= fLeft.getBottomIndex())
				leftIsVisible = true;

			if (rs >= fRight.getTopIndex() && rs <= fRight.getBottomIndex())
				rightIsVisible = true;
		}

		// vertical scrolling
		if (!leftIsVisible || !rightIsVisible) {
			int avpos = 0, lvpos = 0, rvpos = 0;

			MergeSourceViewer allButThis = null;
			if (leftIsVisible) {
				avpos = lvpos = rvpos = realToVirtualPosition(LEFT_CONTRIBUTOR,
						fLeft.getTopIndex());
				allButThis = fLeft;
			} else if (rightIsVisible) {
				avpos = lvpos = rvpos = realToVirtualPosition(
						RIGHT_CONTRIBUTOR, fRight.getTopIndex());
				allButThis = fRight;
			} else if (ancestorIsVisible) {
				avpos = lvpos = rvpos = realToVirtualPosition(
						ANCESTOR_CONTRIBUTOR, fAncestor.getTopIndex());
				allButThis = fAncestor;
			} else {
				int vpos = 0;
				for (Iterator iterator = fMerger.rangesIterator(); iterator
						.hasNext();) {
					Diff diff = (Diff) iterator.next();
					if (diff == d)
						break;
					if (fSynchronizedScrolling) {
						vpos += diff.getMaxDiffHeight();
					} else {
						avpos += diff.getAncestorHeight();
						lvpos += diff.getLeftHeight();
						rvpos += diff.getRightHeight();
					}
				}
				if (fSynchronizedScrolling)
					avpos = lvpos = rvpos = vpos;
				int delta = fRight.getViewportLines() / 4;
				avpos -= delta;
				if (avpos < 0)
					avpos = 0;
				lvpos -= delta;
				if (lvpos < 0)
					lvpos = 0;
				rvpos -= delta;
				if (rvpos < 0)
					rvpos = 0;
			}

			scrollVertical(avpos, lvpos, rvpos, allButThis);

			if (fVScrollBar != null)
				fVScrollBar.setSelection(avpos);
		}

		// horizontal scrolling
		if (d.isToken()) {
			// we only scroll horizontally for token diffs
			reveal(fAncestor, d.getPosition(ANCESTOR_CONTRIBUTOR));
			reveal(fLeft, d.getPosition(LEFT_CONTRIBUTOR));
			reveal(fRight, d.getPosition(RIGHT_CONTRIBUTOR));
		} else {
			// in all other cases we reset the horizontal offset
			hscroll(fAncestor);
			hscroll(fLeft);
			hscroll(fRight);
		}
	}

