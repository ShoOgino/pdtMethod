	private void initializeCheckedState() {

		BusyIndicator.showWhile(getShell().getDisplay(), () -> {
			Object[] elements;
			if (fWorkingSet == null) {
				// Use current part's selection for initialization
				IWorkbenchPage page = DLTKUIPlugin.getActivePage();
				if (page == null) {
					return;
				}

				IWorkbenchPart part = DLTKUIPlugin.getActivePage().getActivePart();
				if (part == null) {
					return;
				}

				try {
					elements = SelectionConverter.getStructuredSelection(part).toArray();
					for (int i1 = 0; i1 < elements.length; i1++) {
						if (elements[i1] instanceof IResource) {
							IModelElement je = ((IResource) elements[i1]).getAdapter(IModelElement.class);
							if (je != null && je.exists()
									&& je.getScriptProject().isOnBuildpath((IResource) elements[i1])) {
								elements[i1] = je;
							}
						}
					}
				} catch (ModelException e) {
					return;
				}
			} else {
				elements = fWorkingSet.getElements();
			}

			// Use closed project for elements in closed project
			for (int i2 = 0; i2 < elements.length; i2++) {
				Object element1 = elements[i2];
				if (element1 instanceof IResource) {
					IProject project = ((IResource) element1).getProject();
					if (!project.isAccessible()) {
						elements[i2] = project;
					}
				}
				if (element1 instanceof IModelElement) {
					IScriptProject jProject = ((IModelElement) element1).getScriptProject();
					if (jProject != null && !jProject.getProject().isAccessible()) {
						elements[i2] = jProject.getProject();
					}
				}
			}

			fTree.setCheckedElements(elements);
			for (int i3 = 0; i3 < elements.length; i3++) {
				Object element2 = elements[i3];
				if (isExpandable(element2)) {
					setSubtreeChecked(element2, true, true);
				}

				updateParentState(element2, true);
			}
		});
	}

