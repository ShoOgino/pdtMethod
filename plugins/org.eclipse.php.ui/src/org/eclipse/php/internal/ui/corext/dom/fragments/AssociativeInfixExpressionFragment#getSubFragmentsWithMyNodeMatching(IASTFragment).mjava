	private IASTFragment[] getSubFragmentsWithMyNodeMatching(IASTFragment toMatch) {
		if (toMatch.getClass() != getClass())
			return new IASTFragment[0];

		AssociativeInfixExpressionFragment kinToMatch = (AssociativeInfixExpressionFragment) toMatch;
		if (kinToMatch.getOperator() != getOperator())
			return new IASTFragment[0];

		List<List> matchingSubsequences = getMatchingContiguousNodeSubsequences(getOperands(),
				kinToMatch.getOperands());

		IASTFragment[] matches = new IASTFragment[matchingSubsequences.size()];
		for (int i = 0; i < matchingSubsequences.size(); i++) {
			IASTFragment match = new AssociativeInfixExpressionFragment(fGroupRoot, matchingSubsequences.get(i));
			Assert.isTrue(match.matches(toMatch) || toMatch.matches(match));
			matches[i] = match;
		}
		return matches;
	}

