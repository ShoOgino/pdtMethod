	private void updateControls() {
		
		boolean leftToRight= false;
		boolean rightToLeft= false;
		
		updateStatus(fCurrentDiff);
		updateResolveStatus();

		if (fCurrentDiff != null) {
			IMergeViewerContentProvider cp= getMergeContentProvider();
			if (cp != null) {
				if (!isPatchHunk()) {
					rightToLeft= cp.isLeftEditable(getInput());
					leftToRight= cp.isRightEditable(getInput());
				}
			}			
		}
		
		if (fDirectionLabel != null) {
			if (fHighlightRanges && fCurrentDiff != null && isThreeWay() && !isIgnoreAncestor()) {
				fDirectionLabel.setImage(fCurrentDiff.getImage());
			} else {
				fDirectionLabel.setImage(null);
			}
		}
		
		if (fCopyDiffLeftToRightItem != null)
			((Action)fCopyDiffLeftToRightItem.getAction()).setEnabled(leftToRight);
		if (fCopyDiffRightToLeftItem != null)
			((Action)fCopyDiffRightToLeftItem.getAction()).setEnabled(rightToLeft);
			
		boolean enableNavigation= isNavigationPossible();

		if (fNextDiff != null) {
			IAction a= fNextDiff.getAction();
			a.setEnabled(enableNavigation || hasNextElement(true));
		}
		if (fPreviousDiff != null) {
			IAction a= fPreviousDiff.getAction();
			a.setEnabled(enableNavigation || hasNextElement(false));
		}
		if (fNextChange != null) {
			IAction a= fNextChange.getAction();
			a.setEnabled(enableNavigation);
		}
		if (fPreviousChange != null) {
			IAction a= fPreviousChange.getAction();
			a.setEnabled(enableNavigation);
		}
	}

