	/**
	 * Computes and returns the invocation offset given a new position, the
	 * initial offset and the best invocation offset found so far.
	 * <p>
	 * The closest offset to the left of the initial offset is the best. If
	 * there is no offset on the left, the closest on the right is the best.
	 * </p>
	 * 
	 * @param newOffset
	 *            the offset to llok at
	 * @param invocationLocation
	 *            the invocation location
	 * @param bestOffset
	 *            the current best offset
	 * @return -1 is returned if the given offset is not closer or the new best
	 *         offset
	 */
	private static int computeBestOffset(int newOffset, int invocationLocation, int bestOffset) {
		if (newOffset <= invocationLocation) {
			if (bestOffset > invocationLocation) {
				return newOffset; // closest was on the right, prefer on the
									// left
			} else if (bestOffset <= newOffset) {
				return newOffset; // we are closer or equal
			}
			return -1; // further away
		}

		if (newOffset <= bestOffset)
			return newOffset; // we are closer or equal

		return -1; // further away
	}

