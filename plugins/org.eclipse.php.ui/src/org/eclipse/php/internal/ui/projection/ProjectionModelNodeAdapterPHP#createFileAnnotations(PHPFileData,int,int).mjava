	private void createFileAnnotations(PHPFileData fileData, int startOffset, int endOffset) {
		assert getAdapterFactory() != null : "provider can't be null - see setProvider()";
		PHPClassData[] classes = fileData.getClasses();
		for (PHPClassData classData : classes) {
			if (getAdapterFactory().isFoldingClasses()) {
				createCodeDataAnnotations(classData, startOffset, endOffset);
				if (getAdapterFactory().isFoldingPhpDoc()) {
					createDocBlockAnnotations(classData.getDocBlock(), startOffset, endOffset);
				}

			}
			PHPFunctionData[] methods = classData.getFunctions();
			for (PHPFunctionData methodData : methods) {
				if (getAdapterFactory().isFoldingFunctions()) {
					createCodeDataAnnotations(methodData, startOffset, endOffset);
				}
				if (getAdapterFactory().isFoldingPhpDoc()) {
					createDocBlockAnnotations(methodData.getDocBlock(), startOffset, endOffset);
				}
			}
			if (getAdapterFactory().isFoldingPhpDoc()) {
				PHPClassVarData[] variables = classData.getVars();
				for (PHPClassVarData variableData : variables) {
					createDocBlockAnnotations(variableData.getDocBlock(), startOffset, endOffset);
				}

				PHPClassConstData[] constants = classData.getConsts();
				for (PHPClassConstData variableData : constants) {
					createDocBlockAnnotations(variableData.getDocBlock(), startOffset, endOffset);
				}
			}
		}

		PHPFunctionData[] functions = fileData.getFunctions();
		for (PHPFunctionData functionData : functions) {
			if (getAdapterFactory().isFoldingFunctions()) {
				createCodeDataAnnotations(functionData, startOffset, endOffset);
			}
			if (getAdapterFactory().isFoldingPhpDoc()) {
				createDocBlockAnnotations(functionData.getDocBlock(), startOffset, endOffset);
			}
		}

		if (getAdapterFactory().isFoldingPhpDoc()) {
			createDocBlockAnnotations(fileData.getDocBlock(), startOffset, endOffset);
		}
	}

