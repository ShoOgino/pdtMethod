	@Override
	protected boolean updateReplacementString(IDocument document, char trigger, int offset)
			throws CoreException, BadLocationException {

		Document recovered = new Document(document.get());

		int index = offset - 1;
		while (index >= 0 && Character.isJavaIdentifierPart(recovered.getChar(index)))
			index--;
		final int length = offset - index - 1;
		recovered.replace(index + 1, length, " "); //$NON-NLS-1$

		Program program = getAST(index, recovered);
		ASTNode node = NodeFinder.perform(program.getRoot(), index, 1);
		node = ASTResolving.findParentType(node);
		ImportRewrite importRewrite = ImportRewrite.create(program, true);
		ImportRewriteContext context = new ImportRewriteContext() {

			@Override
			public int findInContext(NamespaceDeclaration namespace, String qualifier, String name, int kind) {
				return RES_NAME_CONFLICT;
			}
		};
		ITypeBinding declaringType = null;
		Block descriptor = null;
		if (node instanceof AnonymousClassDeclaration) {
			declaringType = ((AnonymousClassDeclaration) node).resolveTypeBinding();
			descriptor = ((AnonymousClassDeclaration) node).getBody();
		} else if (node instanceof TypeDeclaration) {
			declaringType = ((TypeDeclaration) node).resolveTypeBinding();
			descriptor = ((TypeDeclaration) node).getBody();
		}
		if (declaringType != null) {
			ASTRewrite rewrite = ASTRewrite.create(program.getAST());
			IMethodBinding methodToOverride = Bindings.findMethodInHierarchy(declaringType, fMethodName);
			if (methodToOverride != null) {
				final CodeGenerationSettings settings = PHPPreferencesSettings
						.getCodeGenerationSettings(fScriptProject.getProject());
				settings.createComments = true;
				MethodDeclaration stub = CodeGenerationUtils.createImplementationStub(program, rewrite,
						methodToOverride, declaringType.getName(), settings, declaringType.isInterface());
				ListRewrite rewriter = rewrite.getListRewrite(descriptor, Block.STATEMENTS_PROPERTY);
				rewriter.insertFirst(stub, null); // $NON-NLS-1$

				ITrackedNodePosition position = rewrite.track(stub);
				rewrite.rewriteAST(recovered, null).apply(recovered);
				String generatedCode = recovered.get(position.getStartPosition(), position.getLength());
				int generatedIndent = IndentManipulation.measureIndentUnits(
						getIndentAt(recovered, position.getStartPosition(), settings), settings.tabWidth,
						settings.indentWidth);

				String indent = getIndentAt(document, getReplacementOffset(), settings);
				setReplacementString(IndentManipulation.changeIndent(generatedCode, generatedIndent, settings.tabWidth,
						settings.indentWidth, indent, TextUtilities.getDefaultLineDelimiter(document)));
				int replacementLength = getReplacementLength();
				if (document.get(getReplacementOffset() + replacementLength, 1).equals(")")) { //$NON-NLS-1$
					setReplacementLength(replacementLength + 1);
				}
			}
		}
		return true;
	}

