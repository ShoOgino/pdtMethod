	private void updateInputForCurrentEditor(final IEditorPart editorPart) {
		Job updateInput = new UIJob("Loading functions") { //$NON-NLS-1$

			@Override
			public IStatus runInUIThread(IProgressMonitor monitor) {
				monitor.beginTask(getName(), 1);

				try {
					// retrieves the project and the content
					IScriptProject scriptProject = getCurrentScriptProject();
					if (scriptProject == null || !(scriptProject instanceof ScriptProject)) {
						return Status.CANCEL_STATUS;
					}

					Object newInput;
					try {
						IBuildpathContainer languageContainer = DLTKCore.getBuildpathContainer(
								new Path(LanguageModelInitializer.CONTAINER_PATH), scriptProject);
						if (languageContainer == null) {
							Logger.log(Logger.ERROR, "project \"" + scriptProject.getProject().getName() //$NON-NLS-1$
									+ "\" has php nature but has no language container"); //$NON-NLS-1$ 
							return Status.CANCEL_STATUS;
						}
						IBuildpathEntry[] buildpathEntries = languageContainer.getBuildpathEntries();
						List<IProjectFragment> fragments = new LinkedList<>();
						for (IBuildpathEntry buildpathEntry : buildpathEntries) {
							IProjectFragment fragment = ((ScriptProject) scriptProject)
									.getProjectFragment(buildpathEntry.getPath());
							if (fragment != null) {
								fragments.add(fragment);
							}
						}
						newInput = fragments.toArray(new IProjectFragment[fragments.size()]);

					} catch (ModelException e) {
						return Status.CANCEL_STATUS;
					}

					Object currentInput = fViewer.getInput();

					// set the language settings as input to the content
					// provider
					if (!newInput.equals(currentInput) && fViewer.getContentProvider() != null) {
						fViewer.setInput(newInput);
					}
					return Status.OK_STATUS;

				} catch (Exception e) {
					Logger.logException(e);
					return Status.CANCEL_STATUS;
				} finally {
					monitor.done();
				}
			}

			/**
			 * Gets the project: either by searching the current open editor or
			 * (if there is no open editor) by searching for the first opened
			 * php project
			 * 
			 * @return the selected project
			 * @throws CoreException
			 */
			private final IScriptProject getCurrentScriptProject() throws CoreException {
				final PHPStructuredEditor phpEditor = EditorUtility.getPHPStructuredEditor(editorPart);
				if (phpEditor != null) {
					return phpEditor.getProject();
				}

				final IProject[] projects = ResourcesPlugin.getWorkspace().getRoot().getProjects();
				for (IProject project : projects) {
					if (PHPToolkitUtil.isPHPProject(project)) {
						return DLTKCore.create(project);
					}
				}
				return null;
			}

		};
		updateInput.schedule();
	}

