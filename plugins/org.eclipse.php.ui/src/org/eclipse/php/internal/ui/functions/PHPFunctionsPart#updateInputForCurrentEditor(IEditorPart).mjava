	private void updateInputForCurrentEditor(final IEditorPart editorPart) {
		Job updateInput = new UIJob("Loading functions") { //$NON-NLS-1$ 

			@Override
			public IStatus runInUIThread(IProgressMonitor monitor) {
				monitor.beginTask(getName(), 1);

				try {
					// retrieves the project and the content 
					IScriptProject project = getCurrentScriptProject();
					if (project == null) {
						return Status.CANCEL_STATUS;
					}
					Object currentInput = fViewer.getInput();
					IProjectFragment[] projectFragments = project.getProjectFragments();

					if (projectFragments == null || projectFragments.length <= 1) {
						return Status.CANCEL_STATUS;
					}

					// set the language settings as input to the content provider
					Object newInput = projectFragments[1];
					if (!newInput.equals(currentInput) && fViewer.getContentProvider() != null) {
						fViewer.setInput(newInput);
					}
					return Status.OK_STATUS;

				} catch (Exception e) {
					Logger.logException(e);
					return Status.CANCEL_STATUS;
				} finally {
					monitor.done();
				}
			}

			/**
			 * Gets the project: either by searching the current open editor or (if there is no open editor) 
			 * by searching for the first opened php project 
			 * @return the selected project 
			 * @throws CoreException
			 */
			private final IScriptProject getCurrentScriptProject() throws CoreException {
				final PHPStructuredEditor phpEditor = EditorUtility.getPHPStructuredEditor(editorPart);
				if (phpEditor != null) {
					return phpEditor.getProject();
				}

				final IProject[] projects = ResourcesPlugin.getWorkspace().getRoot().getProjects();
				for (IProject project : projects) {
					if (PHPModelUtil.isPhpProject(project)) {
						return DLTKCore.create(project);
					}
				}
				return null;
			}

		};
		updateInput.schedule();
	}

