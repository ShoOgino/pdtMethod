	/**
	 * This method is overridden to set additional validation specific to html
	 * files.
	 */
	protected boolean validatePage() {
		setMessage(null);
		setErrorMessage(null);

		if (!super.validatePage()) {
			return false;
		}
		IPath fullPath = getContainerFullPath();
		final String fileName = getFileName();

		if (fullPath == null) {
			setErrorMessage(PHPUIMessages.PHPFileCreationWizardPage_10);
			return false;
		}
		final IContainer containerFolder = getContainer(fullPath);
		if (containerFolder == null || !containerFolder.exists()) {
			setErrorMessage(PHPUIMessages.PHPFileCreationWizardPage_11);
			return false;
		}
		if (!containerFolder.getProject().isOpen()) {
			setErrorMessage(PHPUIMessages.PHPFileCreationWizardPage_12);
			return false;
		}
		if (fileName == null) {
			setErrorMessage(PHPUIMessages.PHPFileCreationWizardPage_15);
			return false;
		}
		if (!fileName.equals("") && containerFolder.getFile(new Path(fileName)).exists()) { //$NON-NLS-1$
			setErrorMessage(PHPUIMessages.PHPFileCreationWizardPage_14);
			return false;
		}

		int dotIndex = fileName.lastIndexOf('.');
		if (fileName.length() == 0 || dotIndex == 0) {
			setErrorMessage(PHPUIMessages.PHPFileCreationWizardPage_15);
			return false;
		}

		if (dotIndex != -1) {
			String fileNameWithoutExtention = fileName.substring(0, dotIndex);
			for (int i = 0; i < fileNameWithoutExtention.length(); i++) {
				char ch = fileNameWithoutExtention.charAt(i);
				if (!(Character.isJavaIdentifierPart(ch) || ch == '.' || ch == '-')) {
					setErrorMessage(PHPUIMessages.PHPFileCreationWizardPage_16);
					return false;
				}
			}
		}

		final IContentType contentType = Platform.getContentTypeManager()
				.getContentType(ContentTypeIdForPHP.ContentTypeID_PHP);
		if (!contentType.isAssociatedWith(fileName)) {
			// fixed bug 195274
			// get the extensions from content type
			final String[] fileExtensions = contentType.getFileSpecs(IContentType.FILE_EXTENSION_SPEC);
			StringBuffer buffer = new StringBuffer(PHPUIMessages.PHPFileCreationWizardPage_17);
			buffer.append(fileExtensions[0]);
			for (String extension : fileExtensions) {
				buffer.append(", ").append(extension); //$NON-NLS-1$
			}
			buffer.append("]"); //$NON-NLS-1$
			setErrorMessage(buffer.toString());
			return false;
		}

		return true;
	}

