	private static List<Expression> findSubGroupForSourceRange(List<Expression> group, ISourceRange range) {
		Assert.isTrue(!group.isEmpty());

		List<Expression> subGroup = new ArrayList<>();

		boolean entered = false, exited = false;
		if (range.getOffset() == ((ASTNode) group.get(0)).getStart()) {
			entered = true;
		}
		for (int i = 0; i < group.size() - 1; i++) {
			Expression member = group.get(i);
			Expression nextMember = group.get(i + 1);

			if (entered) {
				subGroup.add(member);
				if (rangeEndsBetween(range, member, nextMember)) {
					exited = true;
					break;
				}

			} else {
				if (rangeStartsBetween(range, member, nextMember)) {
					entered = true;
				}
			}
		}
		Expression lastGroupMember = group.get(group.size() - 1);
		if (Util.getEndExclusive(range) == Util
				.getEndExclusive(new SourceRange(lastGroupMember.getStart(), lastGroupMember.getLength()))) {
			subGroup.add(lastGroupMember);
			exited = true;
		}

		if (!exited) {
			return new ArrayList<>(0);
		}
		return subGroup;
	}

