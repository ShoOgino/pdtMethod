	protected IScriptCompletionProposal createTypeProposal(
			final CompletionProposal typeProposal) {

		String completion = new String(typeProposal.getCompletion());
		int replaceStart = typeProposal.getReplaceStart();
		// int length = typeProposal.getReplaceEnd()
		// - typeProposal.getReplaceStart() + 1;
		int length = getLength(typeProposal);
		Image image = getImage(((PHPCompletionProposalLabelProvider) getLabelProvider())
				.createTypeImageDescriptor(typeProposal));

		String displayString = ((PHPCompletionProposalLabelProvider) getLabelProvider())
				.createTypeProposalLabel(typeProposal);

		// return new PHPCompletionProposal(completion, replaceStart, length,
		// image, displayString, 0);
		ScriptCompletionProposal scriptProposal = new PHPCompletionProposal(
				completion, replaceStart, length, image, displayString, 0) {
			private boolean fReplacementStringComputed = false;

			public String getReplacementString() {
				if (!fReplacementStringComputed)
					setReplacementString(computeReplacementString());
				return super.getReplacementString();
			}

			private String computeReplacementString() {
				fReplacementStringComputed = true;
				IType type = (IType) typeProposal.getModelElement();

				if (ProposalExtraInfo.isClassInNamespace(typeProposal
						.getExtraInfo())) {
					return PHPModelUtils.getFullName(type);
				}

				String prefix = "";
				try {
					int flags = type.getFlags();
					IType currentNamespace = PHPModelUtils
							.getCurrentNamespaceIfAny(getSourceModule(),
									getReplacementOffset());
					IType namespace = PHPModelUtils.getCurrentNamespace(type);
					if (!PHPFlags.isNamespace(flags)
							&& namespace == null
							&& currentNamespace != null
							&& !ProjectOptions.getPhpVersion(
									PHPCompletionProposalCollector.this
											.getScriptProject().getProject())
									.isLessThan(PHPVersion.PHP5_3)
							&& PHPCompletionProposalCollector.this.document
									.getChar(getReplacementOffset() - 1) != NamespaceReference.NAMESPACE_SEPARATOR) {
						prefix = prefix
								+ NamespaceReference.NAMESPACE_SEPARATOR;
					}
				} catch (ModelException e) {
					PHPUiPlugin.log(e);
				} catch (BadLocationException e) {
					PHPUiPlugin.log(e);
				}
				String suffix = getSuffix(type);
				String replacementString = null;
				if (typeProposal.getModelElement() instanceof AliasType) {
					replacementString = ((AliasType) typeProposal
							.getModelElement()).getAlias();
				} else {
					replacementString = super.getReplacementString();
				}
				return prefix + replacementString + suffix;
			}

			public String getSuffix(IType type) {
				String defaultResult = EMPTY_STRING;
				if (type instanceof AliasType) {
				}
				if (ProposalExtraInfo.isTypeOnly(typeProposal.getExtraInfo())
						|| !PHPModelUtils.hasStaticOrConstMember(type)) {
					return defaultResult;
				}
				String nextWord = null;
				try {
					nextWord = document.get(getReplacementOffset(), 2);// "::".length()
				} catch (BadLocationException e) {
				}
				return DOUBLE_COLON.equals(nextWord) ? defaultResult
						: DOUBLE_COLON;
			}

			@Override
			public Object getExtraInfo() {
				return typeProposal.getExtraInfo();
			}
		};

		scriptProposal.setRelevance(computeRelevance(typeProposal));
		scriptProposal.setProposalInfo(new TypeProposalInfo(getSourceModule()
				.getScriptProject(), typeProposal));
		return scriptProposal;

	}

