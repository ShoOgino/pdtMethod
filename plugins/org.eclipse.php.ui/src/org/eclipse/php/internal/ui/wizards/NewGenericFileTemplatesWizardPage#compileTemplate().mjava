	/**
	 * Returns template string to insert.
	 *
	 * @return String to insert or null if none is to be inserted
	 */
	public CompiledTemplate compileTemplate() {
		String string = null;
		int offset = 0;
		Template template = getSelectedTemplate();
		if (template != null) {
			TemplateContextType contextType = getTemplatesContextTypeRegistry().getContextType(getTemplateContextTypeId());
			IDocument document = new Document();
			TemplateContext context = new DocumentTemplateContext(contextType, document, 0, 0);
			try {
				TemplateBuffer buffer = context.evaluate(template);
				string = buffer.getString();
				TemplateVariable[] variables = buffer.getVariables();
				boolean hasPositions = false;
				for (int i = 0; i != variables.length; i++) {
					TemplateVariable variable = variables[i];
					if ("cursor".equals(variable.getName())) {
						offset = variable.getOffsets()[0];
					}
				}

			} catch (Exception e) {
				Logger.log(Logger.WARNING_DEBUG, "Could not create template for new PHP", e); //$NON-NLS-1$
			}
		}

		return new CompiledTemplate(string, offset);
	}

