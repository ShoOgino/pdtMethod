	/**
	 * Computes current annotations on given CodeDatas.
	 * @param startOffset
	 * @param endOffset
	 * @param collapse
	 * @param fileData
	 * @param codeDatas
	 */
	private void createDocBlockAnnotations(Element parentElement, PHPCodeData codeData, Map<ProjectionAnnotation, Position> currentAnnotations, Map<ProjectionAnnotation, Position> addedAnnotations, int startOffset, int endOffset, boolean collapse) {
		final PHPDocBlock docBlock = codeData.getDocBlock();
		// no need to add an empty doc block
		if (docBlock == null) {
			return;
		}

		int codeStartOffset = docBlock.getStartPosition();
		int codeEndOffset = docBlock.getEndPosition();
		if (document.getLineOfOffset(codeStartOffset) >= document.getLineOfOffset(codeEndOffset)) {
			return;
		}

		if (codeStartOffset > startOffset && codeStartOffset < endOffset) {
			// element may start in one PHP block and end in another.
			// false - when adding new annotation - don't fold
			final Position newPosition = createCommentPosition(codeStartOffset, docBlock.getEndPosition(), document);
			final ElementProjectionAnnotation newAnnotation = new ElementProjectionAnnotation(parentElement, docBlock, shouldAutoCollapseAnnotations ? collapse : false);
			final ElementProjectionAnnotation existingAnnotation = getExistingAnnotation(newAnnotation);
			if (existingAnnotation == null) {
				// add to map containing all annotations for this
				// adapter
				currentAnnotations.put(newAnnotation, newPosition);
				// add to map containing annotations to add
				addedAnnotations.put(newAnnotation, newPosition);
			} else {
				// add to map containing all annotations for this
				// adapter
				currentAnnotations.put(existingAnnotation, newPosition);
				// remove from map containing annotations to delete
				previousAnnotations.remove(existingAnnotation);
			}
		}
	}

