	void processAction(ITextEditor textEditor, IDocument document, ITextSelection textSelection) {

		int selectionOffset = textSelection.getOffset();
		int selectionLength = textSelection.getLength();

		IStructuredModel model = StructuredModelManager.getModelManager().getExistingModelForEdit(document);
		if (model != null) {
			try {
				model.beginRecording(this, PHPUIMessages.RemoveBlockComment_tooltip);
				model.aboutToChangeModel();

				if (document instanceof IStructuredDocument) {
					IStructuredDocument sDoc = (IStructuredDocument) document;
					IStructuredDocumentRegion regionAtCharacterOffset = sDoc
							.getRegionAtCharacterOffset(selectionOffset);
					int docRegionOffset = regionAtCharacterOffset.getStart();
					ITextRegion textRegion = regionAtCharacterOffset.getRegionAtCharacterOffset(selectionOffset);

					Stack<TextLocation> phpCommentLocationStack = new Stack<TextLocation>(); // stack
																								// of
																								// ITextRegion
																								// including
																								// only
																								// Comments'
																								// Start
																								// and
																								// End
																								// tokens
																								// locations

					try {
						int textRegionOffset = textRegion.getStart();
						int normelizedOffset = textRegionOffset + docRegionOffset;
						ITextRegion[] phpTokens = ((PhpScriptRegion) textRegion)
								.getPhpTokens(selectionOffset - normelizedOffset, selectionLength);

						int lastOffsetParsed = -1;

						for (ITextRegion token : phpTokens) {
							if (lastOffsetParsed >= token.getEnd()) // in order
																	// to save
																	// some
																	// redundant
																	// computation
																	// cycles...
								continue;

							if (PHPPartitionTypes.isPHPMultiLineCommentState(token.getType())) {
								// if we are somewhere within a comment
								// (start/end/body), this will find the start
								// and end tokens
								ITextRegion startToken = findCommentStartToken(token, (PhpScriptRegion) textRegion);
								TextLocation commentOffsets = new TextLocation(startToken.getStart() + normelizedOffset,
										startToken.getEnd() + normelizedOffset);
								boolean result = validateAndPushLocation(phpCommentLocationStack, commentOffsets);
								assert (result);
								lastOffsetParsed = commentOffsets.endOffset - normelizedOffset;

								ITextRegion endToken = findCommentEndToken(token, (PhpScriptRegion) textRegion);
								commentOffsets = new TextLocation(endToken.getStart() + normelizedOffset,
										endToken.getEnd() + normelizedOffset);
								result = validateAndPushLocation(phpCommentLocationStack, commentOffsets);
								assert (result);
								lastOffsetParsed = commentOffsets.endOffset - normelizedOffset;

							}
						}
						for (int i = phpCommentLocationStack.size(); i > 0; i--) {
							TextLocation location = phpCommentLocationStack.pop();
							document.replace(location.startOffset, location.endOffset - location.startOffset, ""); //$NON-NLS-1$
						}

					} catch (BadLocationException e) {
						Logger.log(Logger.WARNING_DEBUG, e.getMessage(), e);
					}

				}

			} finally {
				model.changedModel();
				model.endRecording(this);
				model.releaseFromEdit();
			}
		}
	}

