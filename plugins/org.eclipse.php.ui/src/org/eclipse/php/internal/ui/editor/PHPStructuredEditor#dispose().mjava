	@Override
	public void dispose() {
		if (fContextMenuGroup != null) {
			fContextMenuGroup.dispose();
			fContextMenuGroup = null;
		}
		if (fActionGroups != null) {
			fActionGroups.dispose();
			fActionGroups = null;
		}
		if (fInformationPresenter != null) {
			fInformationPresenter.dispose();
			fInformationPresenter = null;
		}
		if (fPhpVersionListener != null) {
			PhpVersionChangedHandler.getInstance()
					.removePhpVersionChangedListener(fPhpVersionListener);
			fPhpVersionListener = null;
		}
		if (fPreferencesListener != null) {
			InstanceScope.INSTANCE.getNode(PHPCorePlugin.ID)
					.removePreferenceChangeListener(fPreferencesListener);
		}

		if (fActivationListener != null) {
			PlatformUI.getWorkbench().removeWindowListener(fActivationListener);
			fActivationListener = null;
		}
		// some things in the configuration need to clean
		// up after themselves
		if (fPHPOutlinePage != null) {
			if (fPHPOutlinePage instanceof ConfigurableContentOutlinePage
					&& fPHPOutlinePageListener != null) {
				((ConfigurableContentOutlinePage) fPHPOutlinePage)
						.removeDoubleClickListener(fPHPOutlinePageListener);
			}
			if (fPHPOutlinePageListener != null) {
				fPHPOutlinePageListener.uninstall(fPHPOutlinePage);
			}
		}
		uninstallOccurrencesFinder();
		uninstallOverrideIndicator();

		// remove the listener we added in createAction method

		if (getSelectionProvider() instanceof IPostSelectionProvider) {
			IPostSelectionProvider psp = (IPostSelectionProvider) getSelectionProvider();
			try {
				IAction action = getAction(
						IPHPEditorActionDefinitionIds.OPEN_TYPE_HIERARCHY);
				if (action instanceof ISelectionChangedListener) {
					psp.removePostSelectionChangedListener(
							(ISelectionChangedListener) action);
				}
				action = getAction(
						IPHPEditorActionDefinitionIds.OPEN_CALL_HIERARCHY);
				if (action instanceof ISelectionChangedListener) {
					psp.removePostSelectionChangedListener(
							(ISelectionChangedListener) action);
				}
			} catch (NullPointerException ex) {
				// NPE thrown by getAction in case when class has already been
				// disposed but dispose is called again.
			}
		}

		if (fProjectionModelUpdater != null) {
			fProjectionModelUpdater.uninstall();
			fProjectionModelUpdater = null;
		}
		super.dispose();
	}

