	@Override
	public void dispose() {

		ISourceViewer sourceViewer = getSourceViewer();
		if (sourceViewer instanceof ITextViewerExtension) {
			((ITextViewerExtension) sourceViewer).removeVerifyKeyListener(fBracketInserter);
		}

		if (fContextMenuGroup != null) {
			fContextMenuGroup.dispose();
			fContextMenuGroup = null;
		}
		if (fActionGroups != null) {
			fActionGroups.dispose();
			fActionGroups = null;
		}
		if (fInformationPresenter != null) {
			fInformationPresenter.dispose();
			fInformationPresenter = null;
		}
		if (fPhpVersionListener != null) {
			PHPVersionChangedHandler.getInstance().removePHPVersionChangedListener(fPhpVersionListener);
			fPhpVersionListener = null;
		}
		if (fFormatterProfileListener != null) {
			// workaround for bug 409116
			PreferencesPropagator propagator = PreferencePropagatorFactory.getPreferencePropagator(FORMATTER_PLUGIN_ID);
			propagator.removePropagatorListener(fFormatterProfileListener,
					"org.eclipse.php.formatter.core.formatter.tabulation.size"); //$NON-NLS-1$
			propagator.removePropagatorListener(fFormatterProfileListener, "formatterProfile"); //$NON-NLS-1$
			fFormatterProfileListener = null;
		}
		if (fPreferencesListener != null) {
			InstanceScope.INSTANCE.getNode(PHPCorePlugin.ID).removePreferenceChangeListener(fPreferencesListener);
		}

		if (fActivationListener != null) {
			PlatformUI.getWorkbench().removeWindowListener(fActivationListener);
			fActivationListener = null;
		}
		// some things in the configuration need to clean
		// up after themselves
		if (fPHPOutlinePage != null) {
			if (fPHPOutlinePage instanceof ConfigurableContentOutlinePage && fPHPOutlinePageListener != null) {
				((ConfigurableContentOutlinePage) fPHPOutlinePage).removeDoubleClickListener(fPHPOutlinePageListener);
			}
			if (fPHPOutlinePageListener != null) {
				fPHPOutlinePageListener.uninstall(fPHPOutlinePage);
			}
		}
		uninstallOccurrencesFinder();
		uninstallOverrideIndicator();

		// remove the listener we added in createAction method

		if (getSelectionProvider() instanceof IPostSelectionProvider) {
			IPostSelectionProvider psp = (IPostSelectionProvider) getSelectionProvider();
			try {
				IAction action = getAction(IPHPEditorActionDefinitionIds.OPEN_TYPE_HIERARCHY);
				if (action instanceof ISelectionChangedListener) {
					psp.removePostSelectionChangedListener((ISelectionChangedListener) action);
				}
				action = getAction(IPHPEditorActionDefinitionIds.OPEN_CALL_HIERARCHY);
				if (action instanceof ISelectionChangedListener) {
					psp.removePostSelectionChangedListener((ISelectionChangedListener) action);
				}
			} catch (NullPointerException ex) {
				// NPE thrown by getAction in case when class has already been
				// disposed but dispose is called again.
			}
		}

		if (fProjectionModelUpdater != null) {
			fProjectionModelUpdater.uninstall();
			fProjectionModelUpdater = null;
		}

		if (fPHPEditorErrorTickUpdater != null) {
			fPHPEditorErrorTickUpdater.dispose();
			fPHPEditorErrorTickUpdater = null;
		}
		super.dispose();
	}

