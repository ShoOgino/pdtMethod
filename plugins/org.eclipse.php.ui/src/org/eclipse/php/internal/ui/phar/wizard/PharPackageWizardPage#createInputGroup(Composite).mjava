	/**
	 * Creates the checkbox tree and list for selecting resources.
	 * 
	 * @param parent
	 *            the parent control
	 */
	protected void createInputGroup(Composite parent) {
		// int labelFlags= JavaElementLabelProvider.SHOW_BASICS
		// | JavaElementLabelProvider.SHOW_OVERLAY_ICONS
		// | JavaElementLabelProvider.SHOW_SMALL_ICONS;

		ScriptExplorerContentProvider treeContentProvider = createContentProvider();
		final DecoratingLabelProvider provider = new DecoratingLabelProvider(
				new PHPExplorerLabelProvider(treeContentProvider, null), new ProblemsLabelDecorator(null));
		fInputGroup = new CheckboxTreeAndListGroup(parent, DLTKCore.create(ResourcesPlugin.getWorkspace().getRoot()),
				treeContentProvider, provider, new StandardModelElementContentProvider(), provider, SWT.NONE,
				SIZING_SELECTION_WIDGET_WIDTH, SIZING_SELECTION_WIDGET_HEIGHT) {

			protected void setTreeChecked(final Object element, final boolean state) {
				if (fInitiallySelecting && element instanceof IResource) {
					final IResource resource = (IResource) element;
					if (resource.getName().charAt(0) == '.')
						return;
				}
				super.setTreeChecked(element, state);
			}
		};
		fInputGroup.addTreeFilter(new EmptyInnerPackageFilter());
		ModelElementSorter comparator = new ModelElementSorter();
		comparator.setInnerElements(false);
		fInputGroup.setTreeComparator(comparator);
		fInputGroup.setListComparator(comparator);
		fInputGroup.addTreeFilter(new ContainerFilter(ContainerFilter.FILTER_NON_CONTAINERS));
		fInputGroup.addTreeFilter(new ViewerFilter() {
			public boolean select(Viewer viewer, Object p, Object element) {
				if (element instanceof IProjectFragment) {
					IProjectFragment root = (IProjectFragment) element;
					return !root.isArchive() && !root.isExternal();
				}
				return true;
			}
		});
		fInputGroup.addListFilter(new ContainerFilter(ContainerFilter.FILTER_CONTAINERS));
		fInputGroup.getTree().addListener(SWT.MouseUp, this);
		fInputGroup.getTable().addListener(SWT.MouseUp, this);

		// setAccessibilityText(fInputGroup.getTree(), "");
		// setAccessibilityText(fInputGroup.getTable(), "");

		ICheckStateListener listener = new ICheckStateListener() {
			public void checkStateChanged(CheckStateChangedEvent event) {
				update();
			}
		};

		fInputGroup.addCheckStateListener(listener);
	}

