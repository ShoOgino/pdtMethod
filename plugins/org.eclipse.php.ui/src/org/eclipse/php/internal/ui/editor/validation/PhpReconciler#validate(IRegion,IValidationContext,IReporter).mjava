	public void validate(IRegion dirtyRegion, IValidationContext helper, IReporter reporter) {
		if (firstLoad ) {
			install(helper);
			firstLoad = false;
		}
		
		if (fEditorInput == null) {
			return;
		}
		
		final ISourceModule unit = fManager.getWorkingCopy(fEditorInput);

		if (unit == null) {
			return;
		}

		try {
			SafeRunner.run(new ISafeRunnable() {
				public void run() {
					try {
						/* fix for missing cancel flag communication */
						IProblemRequestorExtension extension = getProblemRequestorExtension();
						if (extension != null) {
							extension.setProgressMonitor(fProgressMonitor);
							extension.setIsActive(true);
						}

						try {
							// reconcile
							synchronized (unit) {
								unit.reconcile(true, null, fProgressMonitor);
							}
						} catch (OperationCanceledException ex) {
							Assert.isTrue(fProgressMonitor == null || fProgressMonitor.isCanceled());
						} finally {
							/* fix for missing cancel flag communication */
							if (extension != null) {
								extension.setProgressMonitor(null);
								extension.setIsActive(false);
							}
						}
					} catch (ModelException ex) {
						handleException(ex);
					}
				}

				public void handleException(Throwable ex) {
					IStatus status = new Status(IStatus.ERROR, DLTKUIPlugin.PLUGIN_ID, IStatus.OK, "Error in DLTK Core during reconcile", ex); //$NON-NLS-1$
					DLTKUIPlugin.getDefault().getLog().log(status);
				}
			});
		} finally {
			// Always notify listeners, see https://bugs.eclipse.org/bugs/show_bug.cgi?id=55969 for the final solution
			try {
				if (fIsScriptReconcilingListener) {
					IProgressMonitor pm = fProgressMonitor;
					if (pm == null)
						pm = new NullProgressMonitor();
					fJavaReconcilingListener.reconciled(unit, !fNotify, pm);
				}
			} finally {
				fNotify = true;
			}
		}
	}

