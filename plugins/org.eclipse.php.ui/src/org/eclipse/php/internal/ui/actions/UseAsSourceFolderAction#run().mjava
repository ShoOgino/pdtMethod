	@Override
	public void run() {
		boolean askForConfirmation = false;
		Collection<IResource> explicitlyDisabledFolders = new HashSet<>();
		LibraryFolderManager lfm = LibraryFolderManager.getInstance();

		// check if any of the selected library folders is an explicitly
		// disabled library folder
		for (IFolder folder : fFolders) {
			IFolder explicitlyDisabledParent = lfm.getExplicitlyDisabledParent(folder);
			explicitlyDisabledFolders.add(explicitlyDisabledParent);

			if (!folder.equals(explicitlyDisabledParent)) {
				// there is a selected folder which is not an explicitly
				// disabled library folder, so ask the user for confirmation to
				// mark the explicitly disabled parent library folder as source
				// folder
				askForConfirmation = true;
			}
		}

		final IFolder[] folders = explicitlyDisabledFolders.toArray(new IFolder[explicitlyDisabledFolders.size()]);

		if (askForConfirmation) {
			// show the confirmation dialog
			String title = Messages.LibraryFolderAction_Dialog_title;
			String message = NLS.bind(Messages.LibraryFolderAction_Dialog_description,
					StringUtils.join(getSortedPaths(folders), ",\n\t")); //$NON-NLS-1$

			if (!MessageDialog.openConfirm(fSite.getShell(), title, message)) {
				// the user clicked the Cancel button - abort the action
				return;
			}
		}

		// execute the action in a WorkspaceModifyOperation to batch the
		// resource change events and avoid unnecessary triggering build jobs
		WorkspaceModifyOperation op = new WorkspaceModifyOperation() {
			@Override
			protected void execute(IProgressMonitor monitor)
					throws CoreException, InvocationTargetException, InterruptedException {
				LibraryFolderManager.getInstance().useAsSourceFolder(folders, monitor);
			}
		};

		try {
			PlatformUI.getWorkbench().getProgressService().busyCursorWhile(op);
		} catch (Exception e) {
			PHPUiPlugin.log(e);
		}

	}

