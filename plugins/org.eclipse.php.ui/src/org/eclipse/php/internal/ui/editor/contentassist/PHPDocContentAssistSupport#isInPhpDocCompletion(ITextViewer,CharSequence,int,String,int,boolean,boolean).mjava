	private boolean isInPhpDocCompletion( ITextViewer viewer, CharSequence statmentText, int offset, String tagName, int selectionLength, boolean hasSpacesAtEnd, boolean explicit) {
		if (hasSpacesAtEnd) {
			return false;
		}
		int startPosition = statmentText.length() - tagName.length();
		if (startPosition <= 0 || statmentText.charAt(startPosition - 1) != TAG_SIGN) {
			return false; // this is not a tag
		}

		startPosition--;
		// verify that only whitespaces and '*' before the tag
		boolean founeX = false;
		for (; startPosition > 0; startPosition--) {
			if (!Character.isWhitespace(statmentText.charAt(startPosition - 1))) {
				if (founeX || statmentText.charAt(startPosition - 1) != '*') {
					break;
				}
				founeX = true;
			}
		}

		CodeData[] tags = PHPDocLanguageModel.getPHPDocTags(tagName);
		phpDocCompletionProposalGroup.setData(offset, tags, tagName, selectionLength);
		completionProposalGroup = phpDocCompletionProposalGroup;
		if(explicit){
			templateProposals = getTemplates(viewer, offset);
		}
		return true;
	}

