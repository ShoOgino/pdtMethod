	public boolean prepareTextRegions(IStructuredDocumentRegion structuredDocumentRegion, int partitionStartOffset,
			int partitionLength, Collection<StyleRange> holdResults) {
		if (structuredDocumentRegion == null) {
			return false;
		}

		assert structuredDocumentRegion.getLength() > 0 && partitionStartOffset >= 0 && partitionLength >= 0
				&& holdResults != null;

		if (partitionLength == 0) {
			return true;
		}

		boolean handled = false;
		final int partitionEndOffset = partitionStartOffset + partitionLength;

		while (structuredDocumentRegion != null && structuredDocumentRegion.getStartOffset() < partitionEndOffset) {
			ITextRegion region = null;
			ITextRegionList regions = structuredDocumentRegion.getRegions();
			int nRegions = regions.size();
			StyleRange styleRange = null;
			TextAttribute previousAttr = null;
			TextAttribute attr = null;
			int previousEndOffset = -1;

			for (int i = 0; i < nRegions; i++) {
				region = regions.get(i);
				final int startOffset = structuredDocumentRegion.getStartOffset(region);
				if (startOffset >= partitionEndOffset)
					break;
				if (structuredDocumentRegion.getEndOffset(region) <= partitionStartOffset)
					continue;

				if (region instanceof ITextRegionCollection) {
					handled = prepareTextRegion((ITextRegionCollection) region, partitionStartOffset, partitionLength,
							holdResults);
					previousAttr = null;
					styleRange = null;
					previousEndOffset = -1;
				} else {

					if (region.getType() == PHPRegionContext.PHP_CONTENT) {
						handled = preparePhpRegions(holdResults, (IPhpScriptRegion) region, startOffset,
								partitionStartOffset, partitionLength);
						previousAttr = null;
						styleRange = null;
						previousEndOffset = -1;
					} else {

						attr = getAttributeFor(region);
						if (attr != null) {
							handled = true;
							// if this region's attr is the same as previous
							// one, then just adjust the previous style range
							// instead of creating a new instance of one
							// note: to use 'equals' in this case is important,
							// since sometimes different instances of attributes
							// are associated with a region, even if the
							// attribute has the same values.
							// TODO: this needs to be improved to handle
							// readonly regions correctly
							if (styleRange != null && previousAttr != null && previousAttr.equals(attr)
									&& previousEndOffset == startOffset) {
								// extends the prev styleRange with the current
								// region length
								styleRange.length += region.getLength();
								if (styleRange.start + styleRange.length > partitionEndOffset) {
									styleRange.length -= styleRange.start + styleRange.length - partitionEndOffset;
								}
							} else {
								styleRange = createStyleRange(structuredDocumentRegion, region, attr,
										partitionStartOffset, partitionLength);
								holdResults.add(styleRange);
							}
							previousAttr = attr;
							previousEndOffset = structuredDocumentRegion.getEndOffset(region);
						} else {
							previousAttr = null;
							styleRange = null;
							previousEndOffset = -1;
						}
					}
				}

				if (Debug.syntaxHighlighting) {
					if (!handled) {
						System.out.println("not handled in prepareRegions"); //$NON-NLS-1$
					}
				}
			}
			structuredDocumentRegion = structuredDocumentRegion.getNext();
		}
		return handled;
	}

