	/*
	 * List<IModelElement> modelElements
	 */
	private static Change createDeleteChange(ISourceModule cu,
			List modelElements, TextChangeManager manager) throws CoreException {
		// SourceModule cuNode= RefactoringASTParser.parseWithASTProvider(cu,
		// false, null);
		// SourceModuleRewrite rewriter= new SourceModuleRewrite(cu, cuNode);
		Assert.isNotNull(cu);
		Assert.isNotNull(modelElements);
		Assert.isNotNull(manager);
		TextFileChange textFileChange = null;
		if (cu.getResource() instanceof IFile) {
			textFileChange = new TextFileChange(cu.getElementName(),
					(IFile) cu.getResource());
			MultiTextEdit fileChangeRootEdit = new MultiTextEdit();
			textFileChange.setEdit(fileChangeRootEdit);

			manager.manage(cu, textFileChange);

			IModelElement[] elements = (IModelElement[]) modelElements
					.toArray(new IModelElement[modelElements.size()]);

			for (int cnt = 0, max = elements.length; cnt < max; cnt++) {
				ISourceRange sourceRange = null;
				if (elements[cnt] instanceof IMember) {
					IMember type = (IMember) elements[cnt];
					sourceRange = type.getSourceRange();
				}
				if (sourceRange != null) {
					IStructuredDocument document = determineDocument(cu);
					int suffixLength = getSuffixLength(document,
							sourceRange.getOffset() + sourceRange.getLength(),
							';');
					int length = sourceRange.getLength() + suffixLength;
					if (sourceRange.getOffset() + length > document.getLength()) {
						length = document.getLength() - sourceRange.getOffset();
					}
					DeleteEdit edit = new DeleteEdit(sourceRange.getOffset(),
							length);

					fileChangeRootEdit.addChild(edit);
					if (cu.isWorkingCopy()) {
						textFileChange.setSaveMode(TextFileChange.LEAVE_DIRTY);
					}

				}
			}
		}

		// ASTNodeDeleteUtil.markAsDeleted(elements, rewriter, null);
		// return addTextEditFromRewrite(manager, cu, rewriter.getASTRewrite());
		return textFileChange;
	}

