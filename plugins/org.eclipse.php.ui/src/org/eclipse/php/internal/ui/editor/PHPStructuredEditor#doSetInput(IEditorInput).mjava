	protected void doSetInput(IEditorInput input) throws CoreException {
		IResource resource = null;
		IPath externalPath = null;

		// Replace input received from Eclipse platform with WST-compatible:
		if (input instanceof FileStoreEditorInput) {
			input = new LocalFileStorageEditorInput(new LocalFileStorage(new File(((FileStoreEditorInput)input).getURI())));
		}

		if (input instanceof IFileEditorInput) {
			final IFileEditorInput fileInput = (IFileEditorInput) input;
			resource = fileInput.getFile();
		} else if (input instanceof IStorageEditorInput) {
			final IStorageEditorInput editorInput = (IStorageEditorInput) input;
			final IStorage storage = editorInput.getStorage();

			if (storage instanceof ZipEntryStorage) {
				resource = ((ZipEntryStorage) storage).getProject();
			} else if (storage instanceof LocalFileStorage && ((LocalFileStorage) storage).getProject() != null) {
				resource = ((LocalFileStorage) storage).getProject();
			}
			// Suppose that it's a external storage (or remote).
			// If something goes wrong in some case - add another "if" above.
			else {
				externalPath = storage.getFullPath();
				resource = ExternalFileDecorator.createFile(externalPath.toString());

				if (!(input instanceof StorageEditorInput)) {
					input = new StorageEditorInput(storage) {
						public boolean exists() {
							return false;
						}
					};
				}
			}
		}

		if (resource instanceof IFile) {
			if (PHPModelUtil.isPhpFile((IFile) resource)) {
				if (externalPath != null && (resource instanceof ExternalFileDecorator)) {
					ExternalFilesRegistry.getInstance().addFileEntry(externalPath.toString(), (ExternalFileDecorator) resource);
				}
				PhpSourceParser.editFile.set(resource);
				super.doSetInput(input);
			} else {
				close(false);
			}
		} else {
			super.doSetInput(input);
		}
	}

