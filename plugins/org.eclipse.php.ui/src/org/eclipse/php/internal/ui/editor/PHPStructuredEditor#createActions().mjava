	protected void createActions() {
		super.createActions();

		// add handlers to handler service
		IHandlerService handlerService = (IHandlerService) getSite()
				.getService(IHandlerService.class);
		IHandler toggleCommentHandler = new PHPToggleLineCommentHandler();
		handlerService.activateHandler(ActionDefinitionIds.TOGGLE_COMMENT,
				toggleCommentHandler);
		final ResourceBundle resourceBundle = PHPUIMessages.getResourceBundle();

		Action action = new GotoMatchingBracketAction(this);
		action.setActionDefinitionId(IPHPEditorActionDefinitionIds.GOTO_MATCHING_BRACKET);
		setAction(GotoMatchingBracketAction.GOTO_MATCHING_BRACKET, action);

		action = new OpenFunctionsManualAction(resourceBundle, this);
		action.setActionDefinitionId(IPHPEditorActionDefinitionIds.OPEN_PHP_MANUAL); //$NON-NLS-1$
		setAction(ORG_ECLIPSE_PHP_UI_ACTIONS_OPEN_FUNCTIONS_MANUAL_ACTION,
				action);
		markAsCursorDependentAction(
				ORG_ECLIPSE_PHP_UI_ACTIONS_OPEN_FUNCTIONS_MANUAL_ACTION, true);

		action = new OpenDeclarationAction(resourceBundle, this);
		action.setActionDefinitionId(IPHPEditorActionDefinitionIds.OPEN_DECLARATION); //$NON-NLS-1$
		setAction(IPHPEditorActionDefinitionIds.OPEN_DECLARATION, action);
		markAsCursorDependentAction(
				IPHPEditorActionDefinitionIds.OPEN_DECLARATION, true);

		action = new OpenTypeHierarchyAction(this);
		action.setActionDefinitionId(IPHPEditorActionDefinitionIds.OPEN_TYPE_HIERARCHY); //$NON-NLS-1$
		setAction(IPHPEditorActionDefinitionIds.OPEN_TYPE_HIERARCHY, action);
		markAsCursorDependentAction(
				IPHPEditorActionDefinitionIds.OPEN_TYPE_HIERARCHY, true);
		// add selection changed listener for updating enabled status
		if (getSelectionProvider() instanceof IPostSelectionProvider) {
			IPostSelectionProvider psp = (IPostSelectionProvider) getSelectionProvider();
			psp.addPostSelectionChangedListener((OpenTypeHierarchyAction) action);
		}

		action = new OpenCallHierarchyAction(this);
		action.setActionDefinitionId(IPHPEditorActionDefinitionIds.OPEN_CALL_HIERARCHY); //$NON-NLS-1$
		setAction(IPHPEditorActionDefinitionIds.OPEN_CALL_HIERARCHY, action);
		markAsCursorDependentAction(
				IPHPEditorActionDefinitionIds.OPEN_CALL_HIERARCHY, true);
		// add selection changed listener for updating enabled status
		if (getSelectionProvider() instanceof IPostSelectionProvider) {
			IPostSelectionProvider psp = (IPostSelectionProvider) getSelectionProvider();
			psp.addPostSelectionChangedListener((OpenCallHierarchyAction) action);
		}

		action = new TextOperationAction(
				DLTKEditorMessages.getBundleForConstructedKeys(),
				"OpenHierarchy.", this, PHPStructuredTextViewer.SHOW_HIERARCHY, true); //$NON-NLS-1$
		action.setActionDefinitionId(IScriptEditorActionDefinitionIds.OPEN_HIERARCHY);
		setAction(IScriptEditorActionDefinitionIds.OPEN_HIERARCHY, action);
		markAsCursorDependentAction(
				IScriptEditorActionDefinitionIds.OPEN_HIERARCHY, true);

		ResourceAction resAction = new TextOperationAction(
				DLTKEditorMessages.getBundleForConstructedKeys(),
				"ShowPHPDoc.", this, ISourceViewer.INFORMATION, true); //$NON-NLS-1$
		resAction = new InformationDispatchAction(
				DLTKEditorMessages.getBundleForConstructedKeys(),
				"ShowPHPDoc.", (TextOperationAction) resAction); //$NON-NLS-1$
		resAction
				.setActionDefinitionId(IPHPEditorActionDefinitionIds.SHOW_PHPDOC);
		setAction("ShowPHPDoc", resAction); //$NON-NLS-1$

		resAction = new TextOperationAction(
				DLTKEditorMessages.getBundleForConstructedKeys(),
				"ShowOutline.", this, PHPStructuredTextViewer.SHOW_OUTLINE, true); //$NON-NLS-1$
		resAction
				.setActionDefinitionId(IScriptEditorActionDefinitionIds.SHOW_OUTLINE); //$NON-NLS-1$
		setAction(IScriptEditorActionDefinitionIds.SHOW_OUTLINE, resAction);

		// workaround for https://bugs.eclipse.org/bugs/show_bug.cgi?id=305786
		// collapse by shortcut does not work
		resAction = new TextOperationAction(
				FoldingMessages.getResourceBundle(),
				"Projection.Expand.", this, ProjectionViewer.EXPAND, true); //$NON-NLS-1$
		resAction.setActionDefinitionId(IFoldingCommandIds.FOLDING_EXPAND);
		setAction("FoldingExpand", resAction); //$NON-NLS-1$
		resAction.setEnabled(true);

		resAction = new TextOperationAction(
				FoldingMessages.getResourceBundle(),
				"Projection.Collapse.", this, ProjectionViewer.COLLAPSE, true); //$NON-NLS-1$
		resAction.setActionDefinitionId(IFoldingCommandIds.FOLDING_COLLAPSE);
		setAction("FoldingCollapse", resAction); //$NON-NLS-1$
		resAction.setEnabled(true);
		// workaround end

		if (isExternal) {
			// Override the way breakpoints are set on external files.
			action = new ToggleExternalBreakpointAction(this,
					getVerticalRuler());
			setAction(ActionDefinitionIds.TOGGLE_BREAKPOINTS, action);
			// StructuredTextEditor Action - manage breakpoints
			action = new ManageExternalBreakpointAction(this,
					getVerticalRuler());
			setAction(ActionDefinitionIds.MANAGE_BREAKPOINTS, action);
			// StructuredTextEditor Action - edit breakpoints
			action = new EditExternalBreakpointAction(this, getVerticalRuler());
			setAction(ActionDefinitionIds.EDIT_BREAKPOINTS, action);

			// Set the ruler double-click behavior.
			setAction(ITextEditorActionConstants.RULER_DOUBLE_CLICK,
					new ToggleExternalBreakpointAction(this,
							getVerticalRuler(), null));
		}

		// ActionGroup rg = new RefactorActionGroup(this,
		// ITextEditorActionConstants.GROUP_EDIT);
		ActionGroup jsg = new PHPSearchActionGroup(this);

		// We have to keep the context menu group separate to have better
		// control over positioning
		fActionGroups = new CompositeActionGroup(new ActionGroup[] { jsg });
		fContextMenuGroup = new CompositeActionGroup(new ActionGroup[] { jsg });
	}

