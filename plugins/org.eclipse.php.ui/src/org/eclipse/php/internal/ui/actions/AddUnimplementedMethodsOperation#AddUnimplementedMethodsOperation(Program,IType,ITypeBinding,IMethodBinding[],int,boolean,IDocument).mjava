	/**
	 * Creates a new add unimplemented methods operation.
	 * 
	 * @param astRoot
	 *            the compilation unit AST node
	 * @param type
	 *            the type to add the methods to
	 * @param methodsToImplement
	 *            the method bindings to implement or <code>null</code> to implement
	 *            all unimplemented methods
	 * @param insertPos
	 *            the insertion point, or <code>-1</code>
	 * @param imports
	 *            <code>true</code> if the import edits should be applied,
	 *            <code>false</code> otherwise
	 * @param apply
	 *            <code>true</code> if the resulting edit should be applied,
	 *            <code>false</code> otherwise
	 * @param save
	 *            <code>true</code> if the changed compilation unit should be saved,
	 *            <code>false</code> otherwise
	 * @param doc
	 */
	public AddUnimplementedMethodsOperation(Program astRoot, IType element, ITypeBinding type,
			IMethodBinding[] methodsToImplement, int insertPos, final boolean apply, IDocument doc) {
		if (astRoot == null) {
			throw new IllegalArgumentException("AST must not be null and has to be created from a ICompilationUnit"); //$NON-NLS-1$
		}
		if (type == null) {
			throw new IllegalArgumentException("The type must not be null"); //$NON-NLS-1$
		}

		fDocument = doc;
		fType = type;
		fInsertPos = insertPos;
		fASTRoot = astRoot;
		fMethodsToImplement = methodsToImplement;
		fApply = apply;
		fElement = element;
	}

