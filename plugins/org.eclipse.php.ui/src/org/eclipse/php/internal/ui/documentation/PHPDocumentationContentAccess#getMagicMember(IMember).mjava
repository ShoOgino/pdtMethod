	private static MagicMember getMagicMember(IMember member) {
		if (!(member instanceof IMethod || member instanceof IField)) {
			return null;
		}

		IType type = member.getDeclaringType();
		PHPDocBlock doc = PHPModelUtils.getDocBlock(type);
		if (doc == null) {
			return null;
		}

		Pattern WHITESPACE_SEPERATOR = MagicMemberUtil.WHITESPACE_SEPERATOR;
		final PHPDocTag[] tags = doc.getTags();
		for (PHPDocTag docTag : tags) {
			final TagKind tagKind = docTag.getTagKind();
			if (member instanceof IMethod && tagKind == TagKind.METHOD) {
				// http://manual.phpdoc.org/HTMLSmartyConverter/HandS/phpDocumentor/tutorial_tags.method.pkg.html
				String docTagValue = docTag.getValue().trim();
				int index = docTagValue.indexOf('('); // $NON-NLS-1$
				if (index != -1) {
					String[] split = WHITESPACE_SEPERATOR.split(docTagValue.substring(0, index).trim());
					if (split.length == 1) {
						docTagValue = new StringBuilder(MagicMemberUtil.VOID_RETURN_TYPE).append(Constants.SPACE)
								.append(docTagValue).toString();
					} else if (split.length == 2 && Constants.STATIC.equals(split[0])) {
						StringBuilder sb = new StringBuilder(Constants.STATIC);
						sb.append(Constants.SPACE).append(MagicMemberUtil.VOID_RETURN_TYPE);
						sb.append(docTagValue.substring(6));
						docTagValue = sb.toString();
					}
				}
				String[] split = WHITESPACE_SEPERATOR.split(docTagValue);
				if (split.length < 2) {
					continue;
				}
				if (Constants.STATIC.equals(split[0])) {
					if (split.length < 3) {
						break;
					}
					split = Arrays.copyOfRange(split, 1, split.length);
					docTagValue = docTagValue.substring(7);
				}

				if (MagicMemberUtil.removeParenthesis(split).equals(member.getElementName())) {
					return MagicMemberUtil.getMagicMethod(docTagValue);
				} else if (MagicMemberUtil.removeParenthesis2(split).equals(member.getElementName())) {
					return MagicMemberUtil.getMagicMethod2(docTagValue);
				}
			} else if (member instanceof IField) {
				// http://manual.phpdoc.org/HTMLSmartyConverter/HandS/phpDocumentor/tutorial_tags.property.pkg.html
				final MagicField magicField = MagicMemberUtil.getMagicPropertiesField(docTag);
				if (magicField == null) {
					// it's not a @property, @property-read or @property-write
					// tag
					continue;
				}

				if (member.getElementName().equals(magicField.name)) {
					return magicField;
				}
			}
		}

		return null;
	}

