	/**
	 * Prepares php regions for the line highlighter
	 * 
	 * @param holdResults
	 *            - results
	 * @param region
	 *            - php region
	 * @param regionStart
	 * @param partitionStartOffset
	 * @param partitionLength
	 */
	private boolean preparePhpRegions(Collection<StyleRange> holdResults, IPhpScriptRegion region, int regionStart,
			int partitionStartOffset, int partitionLength) {
		assert region.getType() == PHPRegionContext.PHP_CONTENT;
		assert region.getLength() > 0 && regionStart >= 0 && partitionStartOffset >= 0 && partitionLength > 0;

		StyleRange styleRange = null;
		TextAttribute attr;
		TextAttribute previousAttr = null;

		ITextRegion[] phpTokens = null;
		try {

			if (!region.isFullReparsed() && (regionStart == partitionStartOffset)) {
				phpTokens = region.getUpdatedPhpTokens();
				int from = region.getUpdatedTokensStart();
				partitionStartOffset = from + regionStart;
				partitionLength = region.getUpdatedTokensLength();
				assert from >= 0 && partitionStartOffset >= 0 && partitionLength > 0;
			} else {
				// compute interval intersection between region and partition
				int from = Math.max(0, partitionStartOffset - regionStart);
				int length = Math.min(regionStart + region.getLength(), partitionStartOffset + partitionLength)
						- Math.max(regionStart, partitionStartOffset);
				if (length == 0) {
					// empty region and partition intersection, there's nothing
					// to do (happens when partitionLength is = 0, so we should
					// never land here)
					return true;
				}
				// if length < 0 (i.e. when partitionLength < 0), we'll throw a
				// BadLocationException
				phpTokens = region.getPhpTokens(from, length);
			}

			ITextRegion prevElement = null;
			for (int i = 0; i < phpTokens.length; i++) {
				ITextRegion element = phpTokens[i];
				attr = getAttributeFor(element);
				// Check that the elements are different, otherwise the
				// coloring is not valid
				if (prevElement == element) {
					continue;
				}
				if (styleRange != null && previousAttr != null && previousAttr.equals(attr) && prevElement != null
						&& prevElement.getStart() + prevElement.getLength() == element.getStart()) {
					// extends the prev styleRange with the current element
					// length
					styleRange.length += element.getLength();
					if (styleRange.start + styleRange.length > partitionStartOffset + partitionLength) {
						styleRange.length -= styleRange.start + styleRange.length
								- (partitionStartOffset + partitionLength);
					}
				} else {
					// create new styleRange
					int styleStart = regionStart + element.getStart();
					int styleLength = element.getLength();
					int blankStart = regionStart + element.getTextEnd();
					int blankLength = element.getEnd() - element.getTextEnd();
					assert styleStart + styleLength == blankStart + blankLength;
					if (styleStart >= partitionStartOffset + partitionLength) {
						// if the range starts after the requested partition,
						// stop now
						break;
					} else if (styleStart + styleLength <= partitionStartOffset) {
						// if the range ends before the requested
						// starting position, ignore it
						continue;
					} else if (styleStart < partitionStartOffset) {
						// if the region starts before the requested
						// starting position, adjust the style start
						// position
						styleLength -= (partitionStartOffset - styleStart);
						styleStart = partitionStartOffset;
						if (blankStart < partitionStartOffset) {
							blankLength -= partitionStartOffset - blankStart;
						}
					} else if (styleStart + styleLength > partitionStartOffset + partitionLength) {
						// if the region ends after the requested end position,
						// making it shorter
						styleLength -= styleStart + styleLength - (partitionStartOffset + partitionLength);
						if (blankStart < partitionStartOffset + partitionLength) {
							blankLength = partitionStartOffset + partitionLength - blankStart;
						} else {
							blankLength = 0;
						}
					}
					if (attr.getBackground() != null && element.getTextEnd() != element.getEnd()) {
						// in case of background color make sure the
						// highlighting will not paint the whitespaces
						styleRange = new StyleRange(styleStart, styleLength - blankLength, attr.getForeground(),
								attr.getBackground(), attr.getStyle());
						if ((attr.getStyle() & TextAttribute.UNDERLINE) != 0) {
							styleRange.underline = true;
							styleRange.fontStyle &= ~TextAttribute.UNDERLINE;
						}
						if ((attr.getStyle() & TextAttribute.STRIKETHROUGH) != 0) {
							styleRange.strikeout = true;
							styleRange.fontStyle &= ~TextAttribute.STRIKETHROUGH;
						}
						holdResults.add(styleRange);
						previousAttr = attr;
						if (blankLength > 0) {
							// apply style to the whitespace (important for
							// the refresh of the specific range
							styleRange = new StyleRange(styleStart + styleLength - blankLength, blankLength,
									attr.getForeground(), null, attr.getStyle());
							holdResults.add(styleRange);
							previousAttr = null;
						}
					} else {
						styleRange = new StyleRange(styleStart, styleLength, attr.getForeground(), attr.getBackground(),
								attr.getStyle());
						if ((attr.getStyle() & TextAttribute.UNDERLINE) != 0) {
							styleRange.underline = true;
							styleRange.fontStyle &= ~TextAttribute.UNDERLINE;
						}
						if ((attr.getStyle() & TextAttribute.STRIKETHROUGH) != 0) {
							styleRange.strikeout = true;
							styleRange.fontStyle &= ~TextAttribute.STRIKETHROUGH;
						}
						holdResults.add(styleRange);
						previousAttr = attr;
					}
				}
				prevElement = element;
			}
			return true;
		} catch (BadLocationException e) {
			Logger.logException(e);
			return false;
		}
	}

