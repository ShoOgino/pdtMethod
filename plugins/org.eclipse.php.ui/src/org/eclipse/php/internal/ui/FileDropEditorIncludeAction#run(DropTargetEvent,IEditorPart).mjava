	public boolean run(DropTargetEvent event, IEditorPart targetEditor) {

		if (!(targetEditor instanceof PHPStructuredEditor))
			return super.run(event, targetEditor);

		final String[] fileNames = (String[]) event.data;
		if (fileNames == null || fileNames.length == 0) {
			return false;
		}
		IModelElement editorElement = ((PHPStructuredEditor) targetEditor).getModelElement();
		if (editorElement != null) {
			ISourceModule sourceModule = ((ModelElement) editorElement).getSourceModule();
			ASTParser parser = ASTParser.newParser(sourceModule);

			Program program;
			try {
				program = parser.createAST(null);
				program.recordModifications();

				AST ast = program.getAST();
				IDocument document = ((PHPStructuredEditor) targetEditor).getDocument();
				for (int i = 0; i < fileNames.length; ++i) {

					// resolve the relative path from include path
					String relativeLocationFromIncludePath = getFileName(fileNames[i], sourceModule);

					if (relativeLocationFromIncludePath != null) {
						Include include = ast.newInclude(
								ast.newScalar("'" //$NON-NLS-1$
										+ relativeLocationFromIncludePath.toString() + "'"), //$NON-NLS-1$
								Include.IT_REQUIRE_ONCE);
						program.statements().add(i, ast.newExpressionStatement(include));
						TextEdit edits = program.rewrite(document, null);
						edits.apply(document);
					}

				}

			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		// return false means the following drop action will be executed.
		return false;
	}

