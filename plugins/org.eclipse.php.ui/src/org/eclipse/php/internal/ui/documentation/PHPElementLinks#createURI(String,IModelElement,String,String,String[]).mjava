	/**
	 * Creates an {@link URI} with the given scheme based on the given element. The
	 * additional arguments specify a member referenced from the given element.
	 * 
	 * @param scheme
	 *            a scheme
	 * @param element
	 *            the declaring element
	 * @param refTypeName
	 *            a (possibly qualified) type name, can be <code>null</code>
	 * @param refMemberName
	 *            a member name, can be <code>null</code>
	 * @param refParameterTypes
	 *            a (possibly empty) array of (possibly qualified) parameter type
	 *            names, can be <code>null</code>
	 * @return an {@link URI}, encoded as {@link URI#toASCIIString() ASCII} string,
	 *         ready to be used as <code>href</code> attribute in an
	 *         <code>&lt;a&gt;</code> tag
	 * @throws URISyntaxException
	 *             if the arguments were invalid
	 */
	public static String createURI(String scheme, IModelElement element, String refTypeName, String refMemberName,
			String[] refParameterTypes) throws URISyntaxException {
		/*
		 * We use an opaque URI, not ssp and fragments (to work around Safari bug
		 * https://bugs.eclipse.org/bugs/show_bug.cgi?id=212527 (wrongly encodes #)).
		 */

		StringBuilder ssp = new StringBuilder(60);
		ssp.append(LINK_SEPARATOR); // make sure first character is not a /
									// (would be hierarchical URI)

		// replace '[' manually, since URI confuses it for an IPv6 address as
		// per RFC 2732:
		ssp.append(element.getHandleIdentifier().replace('[', LINK_BRACKET_REPLACEMENT)); // segments[1]

		if (refTypeName != null) {
			ssp.append(LINK_SEPARATOR);
			ssp.append(refTypeName); // segments[2]

			if (refMemberName != null) {
				ssp.append(LINK_SEPARATOR);
				ssp.append(refMemberName); // segments[3]

				if (refParameterTypes != null) {
					ssp.append(LINK_SEPARATOR);
					for (int i = 0; i < refParameterTypes.length; i++) {
						ssp.append(refParameterTypes[i]); // segments[4|5|..]
						if (i != refParameterTypes.length - 1) {
							ssp.append(LINK_SEPARATOR);
						}
					}
				}
			}
		}
		return new URI(scheme, ssp.toString(), null).toASCIIString();
	}

