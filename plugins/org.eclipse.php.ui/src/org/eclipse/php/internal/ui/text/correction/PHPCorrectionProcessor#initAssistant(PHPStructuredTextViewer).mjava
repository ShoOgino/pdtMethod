	protected void initAssistant(PHPStructuredTextViewer textViewer) {
		if (fAssistant != null) {
			return;
		}

		fAssistant = (PHPCorrectionAssistant) textViewer.getQuickAssistAssistant();

		fAssistant.addCompletionListener(new ICompletionListener() {

			@Override
			public void assistSessionEnded(ContentAssistEvent event) {
				fAssistant.setStatusLineVisible(false);
			}

			@Override
			public void assistSessionStarted(ContentAssistEvent event) {
				fAssistant.setStatusLineVisible(true);
				fAssistant.setStatusMessage(getJumpHintStatusLineMessage());
			}

			@Override
			public void selectionChanged(ICompletionProposal proposal, boolean smartToggle) {
				if (proposal instanceof IStatusLineProposal) {
					IStatusLineProposal statusLineProposal = (IStatusLineProposal) proposal;
					String message = statusLineProposal.getStatusMessage();
					if (message != null) {
						fAssistant.setStatusMessage(message);
						return;
					}
				}
				fAssistant.setStatusMessage(getJumpHintStatusLineMessage());
			}

			private String getJumpHintStatusLineMessage() {
				if (fAssistant.isUpdatedOffset()) {
					String key = getQuickAssistBinding();
					if (key == null) {
						return CorrectionMessages.JavaCorrectionProcessor_go_to_original_using_menu;
					} else {
						return NLS.bind(CorrectionMessages.JavaCorrectionProcessor_go_to_original_using_key, key);
					}
				} else if (fAssistant.isProblemLocationAvailable()) {
					String key = getQuickAssistBinding();
					if (key == null) {
						return CorrectionMessages.JavaCorrectionProcessor_go_to_closest_using_menu;
					} else {
						return NLS.bind(CorrectionMessages.JavaCorrectionProcessor_go_to_closest_using_key, key);
					}
				} else {
					return ""; //$NON-NLS-1$
				}
			}

			private String getQuickAssistBinding() {
				final IBindingService bindingSvc = PlatformUI.getWorkbench().getAdapter(IBindingService.class);
				return bindingSvc.getBestActiveBindingFormattedFor(ITextEditorActionDefinitionIds.QUICK_ASSIST);
			}
		});
	}

