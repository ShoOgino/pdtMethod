	static Change createDeleteChange(TextChangeManager manager, IResource[] resources, IModelElement[] modelElements,
			String changeName, List packageDeletes) throws CoreException {
		// final DynamicValidationStateChange result= new
		// DynamicValidationStateChange(changeName) {
		// public Change perform(IProgressMonitor pm) throws CoreException {
		// super.perform(pm);
		// return null;
		// }
		// };
		DynamicValidationStateChange result;
		if (packageDeletes.size() > 0) {
			result = new UndoablePackageDeleteChange(changeName, packageDeletes);
		} else {
			result = new DynamicValidationStateChange(changeName);
		}
		for (int i = 0; i < modelElements.length; i++) {
			IModelElement element = modelElements[i];
			if (!ReorgUtils.isInsideSourceModule(element))
				result.add(createDeleteChange(element));
		}

		for (int i = 0; i < resources.length; i++) {
			result.add(createDeleteChange(resources[i]));
		}

		Map grouped = ReorgUtils.groupBySourceModule(getElementsSmallerThanCu(modelElements));
		if (grouped.size() != 0) {
			Assert.isNotNull(manager);
			for (Entry entry : (Set<Entry>) grouped.entrySet()) {
				Change change = createDeleteChange((ISourceModule) entry.getKey(), (List) entry.getValue(), manager);
				if (change != null) {
					result.add(change);
				}
			}
		}

		return result;
	}

