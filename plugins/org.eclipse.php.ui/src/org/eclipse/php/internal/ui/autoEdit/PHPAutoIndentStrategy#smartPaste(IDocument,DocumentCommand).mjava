	/**
	 * Set the indent of a bracket based on the command provided in the supplied
	 * document.
	 * 
	 * @param document
	 *            - the document being parsed
	 * @param command
	 *            - the command being performed
	 */
	protected void smartPaste(IDocument document, DocumentCommand command) {
		if (command.offset == -1 || document.getLength() == 0) {
			return;
		}
		IndentationObject indentationObject = null;
		char fakeFirstCharAfterCommandText = '#';
		try {
			if (document instanceof IStructuredDocument) {
				indentationObject = new IndentationObject((IStructuredDocument) document);
				IRegion region = document.getLineInformation(document.getLineOfOffset(command.offset));

				if (command.offset == region.getOffset()) {
					// nothing to do
				} else if (StringUtils.isBlank(document.get(region.getOffset(), command.offset - region.getOffset()))) {
					// adjust the length
					command.length += command.offset - region.getOffset();
					// and finally adjust the offset
					command.offset = region.getOffset();
				} else {
					// https://bugs.eclipse.org/bugs/show_bug.cgi?id=495295
					// there are non-blank characters before cursor position,
					// we can't apply auto-indenting in this case
					return;
				}

				// be smart and remove remaining blank characters after
				// selection
				int selectionEndOffset = command.offset + command.length;
				region = document.getLineInformation(document.getLineOfOffset(selectionEndOffset));
				int i = selectionEndOffset;
				int lineEndOffset = region.getOffset() + region.getLength();
				for (; i < lineEndOffset && (document.getChar(i) == ' ' || document.getChar(i) == '\t'); i++) {
				}
				// adjust the length to include the blank characters
				command.length += i - selectionEndOffset;
				if (i < lineEndOffset) {
					// we need later to add first non-blank line character to
					// the command selection so we can correctly calculate
					// last line indentation
					fakeFirstCharAfterCommandText = document.getChar(i);
				}
			}

			JobSafeStructuredDocument newdocument = new JobSafeStructuredDocument(new PhpSourceParser());
			StringBuilder tempsb = new StringBuilder(command.offset + command.text.length() + 1);
			tempsb.append(document.get(0, command.offset)).append(command.text).append(fakeFirstCharAfterCommandText);
			newdocument.set(tempsb.toString());
			PhpIndentationFormatter formatter = new PhpIndentationFormatter(command.offset, command.text.length(),
					indentationObject);
			formatter.format(newdocument.getRegionAtCharacterOffset(command.offset));

			if (newdocument.getChar(newdocument.getLength() - 1) == fakeFirstCharAfterCommandText) {
				// fakeFirstCharAfterCommandText should always be the last
				// character of newdocument...
				command.text = newdocument.get(command.offset, newdocument.getLength() - command.offset - 1);
			} else {
				// ... or we have to look after it
				command.text = newdocument.get(command.offset, newdocument.getLength() - command.offset);
				command.text = command.text.substring(0, command.text.lastIndexOf(fakeFirstCharAfterCommandText));
			}
		} catch (BadLocationException e) {
			PHPUiPlugin.log(e);
		}
	}

