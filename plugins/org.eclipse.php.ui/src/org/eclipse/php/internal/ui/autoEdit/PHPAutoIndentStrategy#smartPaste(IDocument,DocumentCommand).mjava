	/**
	 * Set the indent of a bracket based on the command provided in the supplied
	 * document.
	 * 
	 * @param document
	 *            - the document being parsed
	 * @param command
	 *            - the command being performed
	 */
	protected void smartPaste(IDocument document, DocumentCommand command) {
		if (command.offset == -1 || document.getLength() == 0)
			return;
		StringBuffer helpBuffer = new StringBuffer();
		IndentationObject indentationObject = null;
		try {
			if (document instanceof IStructuredDocument) {
				indentationObject = new IndentationObject((IStructuredDocument) document);
				defaultStrategy.placeMatchingBlanksForStructuredDocument((IStructuredDocument) document, helpBuffer,
						document.getLineOfOffset(command.offset), command.offset);
				IRegion region = document.getLineInformation(document.getLineOfOffset(command.offset));

				if (StringUtils.isBlank(document.get(region.getOffset(), region.getLength()))) {
					if (command.offset != region.getOffset()) {
						document.replace(region.getOffset(), region.getLength(), ""); //$NON-NLS-1$
						// adjust the offset
						command.offset = region.getOffset();
					}
				}
			}
		} catch (BadLocationException e) {
			PHPUiPlugin.log(e);
		}

		String newline = PHPModelUtils.getLineSeparator(null);
		IStructuredModel structuredModel = null;
		try {
			IProject project = null;
			structuredModel = StructuredModelManager.getModelManager().getExistingModelForRead(document);
			DOMModelForPHP doModelForPHP = (DOMModelForPHP) structuredModel;
			project = getProject(doModelForPHP);
			newline = PHPModelUtils.getLineSeparator(project);
		} catch (Exception e) {
			PHPUiPlugin.log(e);
		} finally {
			if (structuredModel != null) {
				structuredModel.releaseFromRead();
			}
		}
		Document tempdocument = new Document(command.text);
		int lines = tempdocument.getNumberOfLines();
		// starting empty lines of pasted code.
		int startingEmptyLines = 0;
		StringBuilder tempsb = new StringBuilder();
		try {
			for (int i = 0; i < lines; i++) {
				IRegion region = tempdocument.getLineInformation(i);
				if (tempsb.length() > 0) {
					tempsb.append(newline);
				}
				String currentLine = tempdocument.get(region.getOffset(), region.getLength());
				if (tempsb.length() == 0) {
					if (StringUtils.isBlank(currentLine)) {
						startingEmptyLines++;
					} else {
						tempsb.append(currentLine.trim());
					}

				} else {
					tempsb.append(tempdocument.get(region.getOffset(), region.getLength()));
				}
			}
		} catch (BadLocationException e) {
			PHPUiPlugin.log(e);
		}
		JobSafeStructuredDocument newdocument = new JobSafeStructuredDocument(new PhpSourceParser());
		String start = "<?php"; //$NON-NLS-1$
		newdocument.set(start + newline + tempsb.toString());
		PhpIndentationFormatter formatter = new PhpIndentationFormatter(0, newdocument.getLength(), indentationObject);
		formatter.format(newdocument.getFirstStructuredDocumentRegion());

		List<String> list = new ArrayList<String>();
		try {
			int lineNumber = newdocument.getNumberOfLines();
			for (int i = 0; i < lineNumber; i++) {
				if (i == 0) {
					continue;
				}
				IRegion region = newdocument.getLineInformation(i);
				String line = newdocument.get(region.getOffset(), region.getLength());
				list.add(line);
			}
		} catch (BadLocationException e) {
		}
		StringBuilder sb = new StringBuilder();
		for (int i = 0; i < startingEmptyLines; i++) {
			String lineDelimiter = null;
			try {
				lineDelimiter = tempdocument.getLineDelimiter(i);
			} catch (BadLocationException e) {
			}
			if (lineDelimiter == null) {
				lineDelimiter = newline;
			}
			sb.append(lineDelimiter);
		}
		for (int i = 0; i < list.size(); i++) {
			if (!formatter.getIgnoreLines().contains(i + 1)) {
				sb.append(helpBuffer);
			}
			sb.append(list.get(i));
			if (i == list.size() - 1) {
			} else {
				String lineDelimiter = null;
				try {
					lineDelimiter = tempdocument.getLineDelimiter(startingEmptyLines + i);
				} catch (BadLocationException e) {
				}
				if (lineDelimiter == null) {
					lineDelimiter = newline;
				}
				sb.append(lineDelimiter);
			}

		}
		command.text = sb.toString();
	}

