	/**
	 * Set the indent of a bracket based on the command provided in the supplied
	 * document.
	 * 
	 * @param document
	 *            - the document being parsed
	 * @param command
	 *            - the command being performed
	 */
	protected void smartPaste(IDocument document, DocumentCommand command) {
		if (command.offset == -1 || document.getLength() == 0)
			return;
		StringBuffer helpBuffer = new StringBuffer();
		try {
			if (document instanceof IStructuredDocument) {
				DefaultIndentationStrategy
						.placeMatchingBlanksForStructuredDocument(
								(IStructuredDocument) document, helpBuffer,
								document.getLineOfOffset(command.offset),
								command.offset);
				IRegion region = document.getLineInformation(document
						.getLineOfOffset(command.offset));
				if (document.get(region.getOffset(), region.getLength()).trim()
						.length() == 0) {// blank line
					if (command.offset != region.getOffset()) {
						document.replace(region.getOffset(),
								region.getLength(), "");
						// adjust the offset
						command.offset = region.getOffset();
					}
				} else {
					return;
				}
			}
		} catch (BadLocationException e) {
		}
		IStructuredModel structuredModel = null;
		try {
			IProject project = null;
			IContentFormatter contentFormatter = PHPFormatProcessorProxy
					.getFormatter();
			if (contentFormatter instanceof IFormatterProcessorFactory) {
				structuredModel = StructuredModelManager.getModelManager()
						.getExistingModelForRead(document);
				DOMModelForPHP doModelForPHP = (DOMModelForPHP) structuredModel;
				project = getProject(doModelForPHP);
				((IFormatterProcessorFactory) contentFormatter)
						.setDefaultProject(project);
				((IFormatterProcessorFactory) contentFormatter)
						.setIsPasting(true);
			}
			String lineSeparator = PHPModelUtils.getLineSeparator(project);
			String beforeText = document.get(0, command.offset);
			beforeText = beforeText.trim() + lineSeparator;
			String afterText = lineSeparator
					+ document.get(command.offset,
							document.getLength() - command.offset).trim();
			String newPhpText = beforeText + command.text + afterText;
			JobSafeStructuredDocument newdocument = new JobSafeStructuredDocument(
					new PhpSourceParser());
			newdocument.set(newPhpText);
			contentFormatter.format(newdocument, new Region(beforeText.length()
					- lineSeparator.length(), command.text.length()
					+ lineSeparator.length()));
			command.text = newdocument.get(
					beforeText.length(),
					newdocument.getLength()
							- (beforeText.length() + afterText.length()));
		} catch (Exception e1) {
			e1.printStackTrace();
		} finally {
			if (structuredModel != null) {
				structuredModel.releaseFromRead();
			}
		}
	}

