		@Override
		public void endVisit(Program program) {
			if (program.getAST() == null || program.getAST().apiLevel().isLessThan(PHPVersion.PHP5_3)) {
				// use statements don't seem to be supported
				return;
			}
			// Sort in reverse order:
			reversedNamespaceDeclarations.sort(new Comparator<NamespaceDeclaration>() {
				@Override
				public int compare(NamespaceDeclaration o1, NamespaceDeclaration o2) {
					return o2.getStart() - o1.getStart();
				}
			});
			// Extract all type references from all available comments and
			// convert them as NamespaceNames. Each NamespaceName parent will
			// either be the NamespaceDeclaration containing the comment (where
			// the NamespaceName was found) or be the Program itself (if
			// applicable).
			ISourceModule sourceModule = program.getSourceModule();
			ModuleDeclaration moduleDeclaration = SourceParserUtil.getModuleDeclaration(sourceModule, null);
			if (moduleDeclaration instanceof PHPModuleDeclaration) {
				for (PHPDocBlock docBlock : ((PHPModuleDeclaration) moduleDeclaration).getPHPDocBlocks()) {
					for (PHPDocTag tag : docBlock.getTags()) {
						for (TypeReference reference : tag.getTypeReferences()) {
							visitComment(createNamespaceName(reference.start(), reference.end(), program.getAST(),
									reference.getStringRepresentation(), program));
						}
					}
				}
				for (VarComment varComment : ((PHPModuleDeclaration) moduleDeclaration).getVarComments()) {
					for (TypeReference reference : varComment.getTypeReferences()) {
						visitComment(createNamespaceName(reference.start(), reference.end(), program.getAST(),
								reference.getStringRepresentation(), program));
					}
				}
			}
		}

