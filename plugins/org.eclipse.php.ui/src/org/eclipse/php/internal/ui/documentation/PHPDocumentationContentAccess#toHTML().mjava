	private String toHTML() {
		fBuf = new StringBuffer();

		if (appendBuiltinDoc(fMember, fBuf)) {
			return fBuf.toString();
		}

		// After first loop, non-null entries in the following two lists are
		// missing and need to be inherited:
		List<String> parameterNames = initParameterNames();
		List<String> exceptionNames = new ArrayList<String>();

		PHPDocTag deprecatedTag = null;
		PHPDocTag returnTag = null;
		PHPDocTag namespaceTag = null;
		List<PHPDocTag> parameters = new ArrayList<PHPDocTag>();
		List<PHPDocTag> exceptions = new ArrayList<PHPDocTag>();
		List<PHPDocTag> versions = new ArrayList<PHPDocTag>();
		List<PHPDocTag> authors = new ArrayList<PHPDocTag>();
		List<PHPDocTag> sees = new ArrayList<PHPDocTag>();
		List<PHPDocTag> since = new ArrayList<PHPDocTag>();
		List<PHPDocTag> rest = new ArrayList<PHPDocTag>();
		String shortDescription = fJavadoc.getShortDescription();
		String longDescription = fJavadoc.getLongDescription();
		PHPDocTag[] tags = fJavadoc.getTags();
		for (PHPDocTag tag : tags) {
			if (TagKind.PARAM == tag.getTagKind()) {
				parameters.add(tag);
				if (!tag.isValidParamTag()) {
					if (parameterNames.size() > parameters.indexOf(tag))
						parameterNames.set(parameters.indexOf(tag), null);
				} else {
					int paramIndex = parameterNames.indexOf(tag.getVariableReference().getName());
					if (paramIndex != -1) {
						parameterNames.set(paramIndex, null);
					}
				}
			} else if (TagKind.RETURN == tag.getTagKind()) {
				if (returnTag == null)
					returnTag = tag; // the Javadoc tool only shows the first
				// return tag

			} else if (TagKind.NAMESPACE == tag.getTagKind()) {
				if (namespaceTag == null)
					namespaceTag = tag;

			} else if (TagKind.THROWS == tag.getTagKind()) {
				exceptions.add(tag);
				List<TypeReference> fragments = tag.getTypeReferences();
				if (fragments.size() > 0) {
					exceptionNames.add(fragments.get(0).getName());
				}

			} else if (TagKind.SINCE == tag.getTagKind()) {
				since.add(tag);
			} else if (TagKind.VERSION == tag.getTagKind()) {
				versions.add(tag);
			} else if (TagKind.AUTHOR == tag.getTagKind()) {
				authors.add(tag);
			} else if (TagKind.SEE == tag.getTagKind()) {
				sees.add(tag);
			} else if (TagKind.DEPRECATED == tag.getTagKind()) {
				if (deprecatedTag == null)
					deprecatedTag = tag; // the Javadoc tool only shows the
				// first deprecated tag
			} else {
				rest.add(tag);
			}
		}

		if (deprecatedTag != null)
			handleDeprecatedTag(deprecatedTag);
		if (shortDescription != null && shortDescription.length() > 0)
			fBuf.append(shortDescription);
		if (longDescription != null && longDescription.length() > 0) {
			fBuf.append("<p>"); //$NON-NLS-1$
			longDescription = longDescription.replaceAll("(\r\n){2,}|\n{2,}|\r{2,}", "</p><p>"); //$NON-NLS-1$ //$NON-NLS-2$
			fBuf.append(longDescription);
			fBuf.append("</p>"); //$NON-NLS-1$
		} else if (fMethod != null) {
			CharSequence inherited = fJavadocLookup.getInheritedMainDescription(fMethod);
			handleInherited(inherited);
		}
		handleInlineLinks();

		CharSequence[] parameterDescriptions = new CharSequence[parameterNames.size()];
		CharSequence[] parameterTypes = new CharSequence[parameterNames.size()];
		boolean hasInheritedParameters = inheritParameterDescriptions(parameterNames, parameterDescriptions,
				parameterTypes);
		boolean hasParameters = parameters.size() > 0 || hasInheritedParameters;

		CharSequence returnDescription = null;
		if (returnTag == null)
			returnDescription = fJavadocLookup.getInheritedReturnDescription(fMethod);
		boolean hasReturnTag = returnTag != null || returnDescription != null;

		// https://bugs.eclipse.org/bugs/show_bug.cgi?id=418890
		// http://phpdoc.org/docs/latest/guides/inheritance.html
		if (fMethod != null && exceptions.size() == 0) {
			List<PHPDocTag> inheritedExceptions = fJavadocLookup.getInheritedExceptions(fMethod);
			if (inheritedExceptions != null) {
				exceptions.addAll(inheritedExceptions);
			}
		}
		CharSequence[] exceptionDescriptions = new CharSequence[exceptionNames.size()];
		boolean hasInheritedExceptions = inheritExceptionDescriptions(exceptionNames, exceptionDescriptions);
		boolean hasExceptions = exceptions.size() > 0 || hasInheritedExceptions;
		boolean hasNamespace = namespaceTag != null;

		if (hasParameters || hasReturnTag || hasExceptions || hasNamespace || versions.size() > 0 || authors.size() > 0
				|| since.size() > 0 || sees.size() > 0 || rest.size() > 0
				|| (fBuf.length() > 0 && (parameterDescriptions.length > 0 || exceptionDescriptions.length > 0))) {
			handleSuperMethodReferences();
			fBuf.append(BLOCK_TAG_START);
			handleParameterTags(parameters, parameterNames, parameterTypes, parameterDescriptions);
			handleReturnTag(returnTag, returnDescription);
			handleNamespaceTag(namespaceTag);
			handleExceptionTags(exceptions, exceptionNames, exceptionDescriptions);
			handleBlockTags(PHPDocumentationMessages.JavaDoc2HTMLTextReader_since_section, since);
			handleBlockTags(PHPDocumentationMessages.JavaDoc2HTMLTextReader_version_section, versions);
			handleBlockTags(PHPDocumentationMessages.JavaDoc2HTMLTextReader_author_section, authors);
			handleBlockTags(PHPDocumentationMessages.JavaDoc2HTMLTextReader_see_section, sees);
			handleBlockTags(rest);
			fBuf.append(BLOCK_TAG_END);

		} else if (fBuf.length() > 0) {
			handleSuperMethodReferences();
		}

		String result = fBuf.toString();
		fBuf = null;
		return result;
	}

