	private String handleElement(ITextEditor textEditor, IModelElement modelElem, IDocument document) {
		if (textEditor instanceof PHPStructuredEditor) {
			PHPStructuredEditor editor = (PHPStructuredEditor) textEditor;
			if (editor.getTextViewer() != null && !editor.getTextViewer().isEditable()) {
				return null;
			}
		}
		if (modelElem instanceof ISourceModule) {
			handleFileDocBlock((ISourceModule) modelElem, (IStructuredDocument) document);
			return null;
		}

		try {
			startPosition = getCodeDataOffset(modelElem);
		} catch (ModelException e) {
			Logger.logException(e);
			return null;
		}

		// Calculating indentation need to be added
		String indentString = null;
		try {
			indentString = getIndentString(document, modelElem);
		} catch (BadLocationException e) {
			Logger.logException(e);
			return null;
		}

		if (!textEditor.isEditable()) {
			return null;
		}
		int type = modelElem != null ? modelElem.getElementType() : -1;
		if (type != IModelElement.METHOD && type != IModelElement.TYPE && type != IModelElement.FIELD) {
			assert false;
			return null;
		}
		String comment = null;
		try {
			switch (type) {
			case IModelElement.TYPE:
				if (PHPModelUtils.getDocBlock((IType) modelElem) != null) {
					return null;
				}
				comment = createTypeComment((IType) modelElem, lineDelim);
				break;
			case IModelElement.FIELD:
				if (!isParameter((IField) modelElem)) {
					if (PHPModelUtils.getDocBlock((IField) modelElem) != null) {
						return null;
					}
					comment = createFieldComment((IField) modelElem, lineDelim);
					break;
				} else if (modelElem != null) {
					// If the element is a parameter in the function
					// declaration,
					// get the parent element and go to method case.
					modelElem = modelElem.getParent();
					// reset the position to the beginning of the method
					startPosition = getCodeDataOffset(modelElem);

					try {
						// reset the indent level to the method.
						indentString = getIndentString(document, modelElem);
					} catch (BadLocationException e) {
						Logger.logException(e);
						return null;
					}
				}
			case IModelElement.METHOD:
				if (PHPModelUtils.getDocBlock((IMethod) modelElem) != null) {
					return null;
				}
				comment = createMethodComment((IMethod) modelElem, lineDelim);
				break;
			default:
				comment = createDefaultComment(lineDelim);
			}
		} catch (CoreException e) {
			Logger.logException(e);
		}

		if (comment == null) {
			comment = createDefaultComment(lineDelim);
		}

		docBlock = indentPattern(comment, indentString, lineDelim);

		String docBlockText = insertDocBlock(document, startPosition, docBlock);

		return docBlockText;
	}

