	private CodeData[] getClassCall(PHPProjectModel projectModel, String fileName, int offset, String className, String startWith, boolean isInstanceOf) {
		CodeData function = projectModel.getClassFunctionData(fileName, className, startWith);
		CodeData variable = projectModel.getClassVariablesData(fileName, className, startWith);
		CodeData constant = projectModel.getClassConstsData(fileName, className, startWith);
		CodeData[] result = null;
		if (function != null) {
			result = ModelSupport.merge(new CodeData[] { function }, result);
		}
		if (variable != null) {
			result = ModelSupport.merge(new CodeData[] { variable }, result);
		}
		if (constant != null) {
			result = ModelSupport.merge(new CodeData[] { constant }, result);
		}
		result = ModelSupport.getFilteredCodeData(result, getAccessLevelFilter(projectModel, fileName, className, offset, isInstanceOf));

		return result;
	}

