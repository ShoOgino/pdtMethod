	/**
	 * Computes and returns the source reference that includes the caret and
	 * serves as provider for the outline page selection and the editor range
	 * indication.
	 * 
	 * @return the computed source reference
	 */
	public ISourceReference computeHighlightRangeSourceReference() {
		ISourceViewer sourceViewer = getSourceViewer();
		if (sourceViewer == null) {
			return null;
		}
		final StyledText styledText = sourceViewer.getTextWidget();
		if (styledText == null) {
			return null;
		}
		final int[] caret = new int[1];
		if (sourceViewer instanceof ITextViewerExtension5) {
			final ITextViewerExtension5 extension = (ITextViewerExtension5) sourceViewer;
			Runnable caretRunnable = () -> {
				if (!styledText.isDisposed()) {
					caret[0] = extension.widgetOffset2ModelOffset(styledText.getCaretOffset());
				}
			};
			if (Display.getCurrent() != null) {
				caretRunnable.run();
			} else {
				Display.getDefault().syncExec(caretRunnable);
			}
		} else {
			int offset = sourceViewer.getVisibleRegion().getOffset();
			caret[0] = offset + styledText.getCaretOffset();
		}
		IModelElement element = getElementAt(caret[0], false);
		// IModelElement element = getElementAt(caret[0], true);
		if (!(element instanceof ISourceReference)) {
			return null;
		}
		return (ISourceReference) element;
	}

