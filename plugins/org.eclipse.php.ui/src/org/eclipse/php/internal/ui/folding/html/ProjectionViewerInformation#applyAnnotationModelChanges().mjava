	/**
	 * Applies the pending projection annotation model changes to the projection
	 * annotation model.
	 */
	void applyAnnotationModelChanges() {
		List<ProjectionAnnotationModelChanges> changesToApply = new ArrayList<>();

		List<ProjectionAnnotationModelChanges> queuedChanges = getQueuedAnnotationChanges();
		// Copy of changes to apply. Original list is cleared.
		synchronized (queuedChanges) {
			changesToApply.addAll(queuedChanges);
			queuedChanges.clear();
		}
		queuedChanges = null;
		// go through all the pending annotation changes and apply
		// them to
		// the projection annotation model

		if (changesToApply.size() > 1) {
			Set<Annotation> deletions = new HashSet<>();
			Map<Annotation, Position> additions = new HashMap<>();
			Set<Annotation> modifications = new HashSet<>();
			while (!changesToApply.isEmpty()) {
				ProjectionAnnotationModelChanges changes = changesToApply.remove(0);
				if (changes.getDeletions() != null) {
					for (Annotation el : changes.getDeletions()) {
						if (additions.containsKey(el)) {
							additions.remove(el);
						} else {
							deletions.add(el);
						}

						if (modifications.contains(el)) {
							modifications.remove(el);
						}
					}
				}
				if (changes.getAdditions() != null) {
					Iterator<?> iterator = changes.getAdditions().entrySet().iterator();
					while (iterator.hasNext()) {
						Entry<?, ?> entry = (Entry<?, ?>) iterator.next();
						Annotation key = (Annotation) entry.getKey();
						Position pos = (Position) entry.getValue();
						if (deletions.contains(key)) {
							deletions.remove(key);
						}
						additions.put(key, pos);
					}
				}
				if (changes.getModifications() != null) {
					for (Annotation el : changes.getModifications()) {
						if (deletions.contains(el)) {
							deletions.remove(el);
						}
						if (!additions.containsKey(el)) {
							modifications.add(el);
						}
					}
				}
			}
			try {
				fProjectionAnnotationModel.modifyAnnotations(deletions.toArray(new Annotation[deletions.size()]),
						additions, modifications.toArray(new Annotation[modifications.size()]));
			} catch (Exception e) {
				// if anything goes wrong, log it and continue
				Logger.log(Logger.WARNING_DEBUG, e.getMessage(), e);
			}
		} else {
			while (!changesToApply.isEmpty()) {
				ProjectionAnnotationModelChanges changes = changesToApply.remove(0);
				try {
					fProjectionAnnotationModel.modifyAnnotations(changes.getDeletions(), changes.getAdditions(),
							changes.getModifications());
				} catch (Exception e) {
					// if anything goes wrong, log it and continue
					Logger.log(Logger.WARNING_DEBUG, e.getMessage(), e);
				}
			}
		}
	}

