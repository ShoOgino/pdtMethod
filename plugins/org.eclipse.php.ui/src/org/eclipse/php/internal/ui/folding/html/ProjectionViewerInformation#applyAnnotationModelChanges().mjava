	/**
	 * Applies the pending projection annotation model changes to the projection
	 * annotation model.
	 */
	void applyAnnotationModelChanges() {
		List<ProjectionAnnotationModelChanges> queuedChanges = getQueuedAnnotationChanges();
		// go through all the pending annotation changes and apply
		// them to
		// the projection annotation model
		synchronized (queuedChanges) {
			while (!queuedChanges.isEmpty()) {
				ProjectionAnnotationModelChanges changes = queuedChanges
						.remove(0);
				try {
					fProjectionAnnotationModel.modifyAnnotations(
							changes.getDeletions(), changes.getAdditions(),
							changes.getModifications());
				} catch (Exception e) {
					// if anything goes wrong, log it and continue
					Logger.log(Logger.WARNING_DEBUG, e.getMessage(), e);
				}
			}
		}
	}

