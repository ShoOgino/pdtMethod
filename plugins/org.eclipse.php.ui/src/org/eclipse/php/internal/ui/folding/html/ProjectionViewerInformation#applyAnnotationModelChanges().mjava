	/**
	 * Applies the pending projection annotation model changes to the projection
	 * annotation model.
	 */
	void applyAnnotationModelChanges() {
		List<ProjectionAnnotationModelChanges> changesToApply = new ArrayList<ProjectionAnnotationModelChanges>();

		List<ProjectionAnnotationModelChanges> queuedChanges = getQueuedAnnotationChanges();
		// Copy of changes to apply. Original list is cleared.
		synchronized (queuedChanges) {
			changesToApply.addAll(queuedChanges);
			queuedChanges.clear();
		}
		queuedChanges = null;
		// go through all the pending annotation changes and apply
		// them to
		// the projection annotation model
		while (!changesToApply.isEmpty()) {
			ProjectionAnnotationModelChanges changes = changesToApply.remove(0);
			try {
				fProjectionAnnotationModel.modifyAnnotations(
						changes.getDeletions(), changes.getAdditions(),
						changes.getModifications());
			} catch (Exception e) {
				// if anything goes wrong, log it and continue
				Logger.log(Logger.WARNING_DEBUG, e.getMessage(), e);
			}
		}
	}

