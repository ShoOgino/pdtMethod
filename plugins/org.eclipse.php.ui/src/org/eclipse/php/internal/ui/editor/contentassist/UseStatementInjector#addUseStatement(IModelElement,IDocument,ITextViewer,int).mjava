	private int addUseStatement(IModelElement modelElement, IDocument document,
			ITextViewer textViewer, int offset) {
		// add use statement if needed:
		IType namespace = PHPModelUtils.getCurrentNamespace(modelElement);
		if (namespace == null) {
			return offset;
		}

		// find source module of the current editor:
		if (!(textViewer instanceof PHPStructuredTextViewer)) {
			return offset;
		}
		ITextEditor textEditor = ((PHPStructuredTextViewer) textViewer)
				.getTextEditor();
		if (!(textEditor instanceof PHPStructuredEditor)) {
			return offset;

		}
		IModelElement editorElement = ((PHPStructuredEditor) textEditor)
				.getModelElement();
		if (editorElement == null) {
			return offset;
		}
		ISourceModule sourceModule = ((ModelElement) editorElement)
				.getSourceModule();

		try {
			String namespaceName = namespace.getElementName();
			String usePartName = namespaceName;
			boolean useAlias = !Platform
					.getPreferencesService()
					.getBoolean(
							PHPCorePlugin.ID,
							PHPCoreConstants.CODEASSIST_INSERT_FULL_QUALIFIED_NAME_FOR_NAMESPACE,
							true, null);
			if (!useAlias) {
				usePartName = usePartName
						+ NamespaceReference.NAMESPACE_SEPARATOR
						+ modelElement.getElementName();
			}
			ModuleDeclaration moduleDeclaration = SourceParserUtil
					.getModuleDeclaration(sourceModule);

			ASTParser parser = ASTParser.newParser(sourceModule);
			parser.setSource(document.get().toCharArray());
			Program program = parser.createAST(null);

			// don't insert USE statement for current namespace
			if (isSameNamespace(namespaceName, program, sourceModule, offset)) {
				return offset;
			}

			// find existing use statement:
			UsePart usePart = ASTUtils.findUseStatementByNamespace(
					moduleDeclaration, usePartName, offset);

			List<String> importedTypeName = getImportedTypeName(
					moduleDeclaration, offset);
			String typeName = ""; //$NON-NLS-1$
			if (!useAlias) {
				typeName = modelElement.getElementName().toLowerCase();
			} else {
				if (usePart != null && usePart.getAlias() != null
						&& usePart.getAlias().getName() != null) {
					typeName = usePart.getAlias().getName();
				} else {
					typeName = PHPModelUtils.extractElementName(namespaceName)
							.toLowerCase();
				}
			}

			PHPVersion phpVersion = ProjectOptions.getPhpVersion(modelElement);
			// if the class/namesapce has not been imported
			// add use statement
			if (!importedTypeName.contains(typeName)
					&& canInsertUseStatement(getUseStatementType(modelElement),
							phpVersion)) {
				program.recordModifications();
				AST ast = program.getAST();
				NamespaceName newNamespaceName = ast.newNamespaceName(
						createIdentifiers(ast, usePartName), false, false);
				UseStatementPart newUseStatementPart = ast.newUseStatementPart(
						newNamespaceName, null);
				int type = getUseStatementType(modelElement);
				UseStatement newUseStatement = ast
						.newUseStatement(
								Arrays.asList(new UseStatementPart[] { newUseStatementPart }),
								type);

				NamespaceDeclaration currentNamespace = getCurrentNamespace(
						program, sourceModule, offset - 1);
				if (currentNamespace != null) {
					List<Statement> statements = currentNamespace.getBody()
							.statements();
					// insert in the beginning of the current
					// namespace:
					insertUseStatement(offset, newUseStatement, statements,
							document);
				} else {
					insertUseStatement(offset, newUseStatement,
							program.statements(), document);
				}

				ast.setInsertUseStatement(true);
				TextEdit edits = program.rewrite(document,
						createOptions(modelElement));
				edits.apply(document);
				ast.setInsertUseStatement(false);

				if (useAlias && needsAliasPrepend(modelElement)) {

					// update replacement string: add namespace
					// alias prefix
					String namespacePrefix = typeName
							+ NamespaceReference.NAMESPACE_SEPARATOR;
					String replacementString = proposal.getReplacementString();

					String existingNamespacePrefix = readNamespacePrefix(
							sourceModule, document, offset, phpVersion);

					// Add alias to the replacement string:
					if (!usePartName.equals(existingNamespacePrefix)) {
						replacementString = namespacePrefix + replacementString;
					}
					proposal.setReplacementString(replacementString);
				}

				int replacementOffset = proposal.getReplacementOffset()
						+ edits.getLength();
				offset += edits.getLength();
				proposal.setReplacementOffset(replacementOffset);
			} else if (!useAlias
					&& (usePart == null || !usePartName.equals(usePart
							.getNamespace().getFullyQualifiedName()))) {
				// if the type name already exists, use fully
				// qualified name to replace
				proposal.setReplacementString(NamespaceReference.NAMESPACE_SEPARATOR
						+ namespaceName
						+ NamespaceReference.NAMESPACE_SEPARATOR
						+ proposal.getReplacementString());
			}

		} catch (Exception e) {
			PHPUiPlugin.log(e);
		}
		return offset;
	}

