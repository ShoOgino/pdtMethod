	private int addUseStatement(IModelElement modelElement, IDocument document, ITextViewer textViewer, int offset) {
		// add use statement if needed:
		IType namespace = PHPModelUtils.getCurrentNamespace(modelElement);
		if (namespace == null) {
			return offset;
		}

		// find source module of the current editor:
		if (!(textViewer instanceof PHPStructuredTextViewer)) {
			return offset;
		}
		ITextEditor textEditor = ((PHPStructuredTextViewer) textViewer).getTextEditor();
		if (!(textEditor instanceof PHPStructuredEditor)) {
			return offset;

		}
		IModelElement editorElement = ((PHPStructuredEditor) textEditor).getModelElement();
		if (editorElement == null) {
			return offset;
		}
		ISourceModule sourceModule = ((ModelElement) editorElement).getSourceModule();

		try {
			String namespaceName = namespace.getElementName();
			String usePartName = namespaceName;
			boolean useAlias = !Platform.getPreferencesService().getBoolean(PHPCorePlugin.ID,
					PHPCoreConstants.CODEASSIST_INSERT_FULL_QUALIFIED_NAME_FOR_NAMESPACE, true, null);
			if (!useAlias) {
				usePartName = usePartName + NamespaceReference.NAMESPACE_SEPARATOR + modelElement.getElementName();
			}
			ModuleDeclaration moduleDeclaration = SourceParserUtil.getModuleDeclaration(sourceModule);

			ASTParser parser = ASTParser.newParser(sourceModule);
			parser.setSource(document.get().toCharArray());
			Program program = parser.createAST(null);

			// Don't insert USE statement for current namespace.
			// "program != null" is a workaround for bug 465687.
			if (program != null && isSameNamespace(namespaceName, program, sourceModule, offset)) {
				return offset;
			}

			// find existing use statement:
			UsePart usePart = ASTUtils.findUseStatementByNamespace(moduleDeclaration, usePartName, offset);

			List<String> importedTypeName = getImportedTypeName(moduleDeclaration, offset);
			String typeName = ""; //$NON-NLS-1$
			if (!useAlias) {
				typeName = modelElement.getElementName().toLowerCase();
			} else {
				if (usePart != null && usePart.getAlias() != null && usePart.getAlias().getName() != null) {
					typeName = usePart.getAlias().getName();
				} else {
					String elementName = PHPModelUtils.extractElementName(namespaceName);
					if (elementName != null) {
						typeName = elementName.toLowerCase();
					}
				}
			}

			PHPVersion phpVersion = ProjectOptions.getPhpVersion(modelElement);
			// if the class/namespace has not been imported
			// add use statement
			if (program != null && !importedTypeName.contains(typeName)
					&& canInsertUseStatement(getUseStatementType(modelElement), phpVersion)) {
				program.recordModifications();
				AST ast = program.getAST();
				NamespaceName newNamespaceName = ast.newNamespaceName(createIdentifiers(ast, usePartName), false,
						false);
				UseStatementPart newUseStatementPart = ast.newUseStatementPart(newNamespaceName, null);
				int type = getUseStatementType(modelElement);
				UseStatement newUseStatement = ast
						.newUseStatement(Arrays.asList(new UseStatementPart[] { newUseStatementPart }), type);

				NamespaceDeclaration currentNamespace = getCurrentNamespace(program, sourceModule, offset - 1);
				List<Statement> statements = program.statements();
				if (currentNamespace != null) {
					// insert in the beginning of the current namespace:
					statements = currentNamespace.getBody().statements();
				}

				int index = getLastUsestatementIndex(statements, offset);
				addUseStatement(index, newUseStatement, statements, document);
				ast.setInsertUseStatement(true);

				TextEdit edits = program.rewrite(document, createOptions(modelElement));
				// workaround for bug 400976:
				// when current offset is in a php section that only contains
				// AstErrors, the use statements will be added at the beginning
				// of the previous php section.
				// If luckily there is a previous php section in the document,
				// we're good, otherwise we have to create one now at the
				// beginning of the document.
				// Text edits that will be correctly inserted in an existing
				// php section have all their offset > 0, so looking for text
				// edits having all their offset = 0 (and their length = 0)
				// should be enough to detect use statements that will be
				// wrongly inserted outside any existing php section...

				if (new Region(0, 0).equals(edits.getRegion())) {
					String lineDelim = TextUtilities.getDefaultLineDelimiter(document);
					// String lineDelim =
					// TextUtilities.getDefaultLineDelimiter(document);
					MultiTextEdit newEdits = new MultiTextEdit();
					newEdits.addChild(new InsertEdit(0, "<?php"));
					newEdits.addChild(new InsertEdit(0, lineDelim));
					for (TextEdit edit : edits.getChildren()) {
						// we have to copy the text edit to reset its parent
						newEdits.addChild(edit.copy());
					}
					newEdits.addChild(new InsertEdit(0, "?>"));
					newEdits.addChild(new InsertEdit(0, lineDelim));
					edits = newEdits;
				} else if (index == 0 && edits.getChildrenSize() == 2) {
					// workaround for bug 435134
					addBlankLineEdit(edits, document);
				}
				edits.apply(document);
				ast.setInsertUseStatement(false);

				if (useAlias && needsAliasPrepend(modelElement)) {

					// update replacement string: add namespace
					// alias prefix
					String namespacePrefix = typeName + NamespaceReference.NAMESPACE_SEPARATOR;
					String replacementString = proposal.getReplacementString();

					String existingNamespacePrefix = readNamespacePrefix(sourceModule, document, offset, phpVersion);

					// Add alias to the replacement string:
					if (existingNamespacePrefix == null
							|| !usePartName.toLowerCase().equals(existingNamespacePrefix.toLowerCase())) {
						replacementString = namespacePrefix + replacementString;
					}
					proposal.setReplacementString(replacementString);
				}

				int replacementOffset = proposal.getReplacementOffset() + edits.getLength();
				offset += edits.getLength();
				proposal.setReplacementOffset(replacementOffset);
			} else if (!useAlias
					&& (usePart == null || !usePartName.equals(usePart.getNamespace().getFullyQualifiedName()))) {
				String namespacePrefix = NamespaceReference.NAMESPACE_SEPARATOR + namespaceName
						+ NamespaceReference.NAMESPACE_SEPARATOR;
				String replacementString = proposal.getReplacementString();

				String existingNamespacePrefix = readNamespacePrefix(sourceModule, document, offset, phpVersion);

				// https://bugs.eclipse.org/bugs/show_bug.cgi?id=459306
				// if the type name already exists, use fully
				// qualified name to replace:
				if (existingNamespacePrefix == null
						|| !namespaceName.toLowerCase().equals(existingNamespacePrefix.toLowerCase())) {
					replacementString = namespacePrefix + replacementString;
				}
				proposal.setReplacementString(replacementString);
			}

		} catch (Exception e) {
			PHPUiPlugin.log(e);
		}
		return offset;
	}

