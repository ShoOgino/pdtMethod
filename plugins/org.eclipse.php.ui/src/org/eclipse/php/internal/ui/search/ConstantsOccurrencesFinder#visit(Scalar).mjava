	/**
	 * Visit the scalars in the program.
	 */
	public boolean visit(Scalar scalar) {
		String scalarValue = scalar.getStringValue();
		if (scalar.getScalarType() == Scalar.TYPE_STRING && scalarValue != null) {
			if (!isQuoted(scalarValue)) {
				if (checkEquality(scalarValue)) {
					// Usage of the scalar
					fResult.add(new OccurrenceLocation(scalar.getStart(), scalar.getLength(), getOccurrenceType(scalar), fDescription));
				}
			} else {
				// The scalar is quoted, so it might be in a 'define' or a 'constant' call.
				scalarValue = scalarValue.substring(1, scalarValue.length() - 1);
				if (checkEquality(scalarValue)) {
					ASTNode parent = scalar.getParent();
					if (parent.getType() == ASTNode.FUNCTION_INVOCATION) {
						// Check if this is the definition function of the scalar (define).
						FunctionInvocation functionInvocation = (FunctionInvocation) parent;
						Expression name = functionInvocation.getFunctionName().getName();
						if (name.getType() == ASTNode.IDENTIFIER) {
							String functionName = ((Identifier) name).getName();
							if ("define".equalsIgnoreCase(functionName)) {//$NON-NLS-1$
								defineFound = true;
								// check if the 'define' has a case sensitivity definition
								isCaseSensitiveConstant = isCaseSensitiveDefined(functionInvocation.parameters());
								if (!isCaseSensitiveConstant || isCaseSensitiveConstant && constantName.equals(scalarValue)) {
									String writeDescription = Messages.format(BASE_WRITE_DESCRIPTION, scalar.getStringValue());
									fResult.add(new OccurrenceLocation(scalar.getStart(), scalar.getLength(), IOccurrencesFinder.F_WRITE_OCCURRENCE, writeDescription));
								}
							} else if ("constant".equalsIgnoreCase(functionName)) { //$NON-NLS-1$
								if (!isCaseSensitiveConstant || isCaseSensitiveConstant && constantName.equals(scalarValue)) {
									fResult.add(new OccurrenceLocation(scalar.getStart(), scalar.getLength(), IOccurrencesFinder.F_READ_OCCURRENCE, fDescription));
								}
							}
						}
					}
				}
			}
		}
		return true;
	}

