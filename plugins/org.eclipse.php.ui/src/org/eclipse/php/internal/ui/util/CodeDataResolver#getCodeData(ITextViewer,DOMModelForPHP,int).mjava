	private CodeData getCodeData(ITextViewer viewer, DOMModelForPHP editorModel, int offset) throws BadLocationException {
		PHPFileData fileData = editorModel.getFileData();
		if (fileData == null) {
			return null;
		}

		IStructuredDocumentRegion sdRegion = ContentAssistUtils.getStructuredDocumentRegion((StructuredTextViewer) viewer, offset);
		ITextRegion textRegion = sdRegion.getRegionAtCharacterOffset(offset);
		if (textRegion == null) {
			return null;
		}

		ITextRegionCollection container = sdRegion;
		if (textRegion instanceof ITextRegionContainer) {
			container = (ITextRegionContainer) textRegion;
			textRegion = container.getRegionAtCharacterOffset(offset);
		}

		PhpScriptRegion phpScriptRegion;
		if (textRegion.getType() == PHPRegionContext.PHP_CONTENT) {
			phpScriptRegion = (PhpScriptRegion) textRegion;
			textRegion = phpScriptRegion.getPhpToken(offset - container.getStartOffset() - phpScriptRegion.getStart());
		} else {
			return null;
		}

		TextSequence statmentText = PHPTextSequenceUtilities.getStatment(container.getStartOffset() + phpScriptRegion.getStart() + textRegion.getEnd(), sdRegion, true);
		if (statmentText == null) {
			return null;
		}

		String fileName = fileData.getName();
		PHPProjectModel projectModel = editorModel.getProjectModel();
		CodeData resultCandidate;
		String type = textRegion.getType();
		if ((resultCandidate = getIfInArrayOptionQuotes(projectModel, fileName, type, offset, statmentText)) != null) {
			// the current position is inside quotes as a parameter for an array.
			return resultCandidate;
		}

		if (isPHPSingleQuote(sdRegion, textRegion) || PHPPartitionTypes.isPHPCommentState(type)) {
			// we dont have code completion inside single quotes.
			return null;
		}

		if ((resultCandidate = getIfInFunctionDeclaretion(projectModel, fileName, statmentText, offset)) != null) {
			// the current position is inside function declaretion.
			return resultCandidate;
		}

		if ((resultCandidate = getIfInClassDeclaretion(projectModel, fileName, statmentText, offset)) != null) {
			// the current position is inside class declaretion.
			return resultCandidate;
		}

		if ((resultCandidate = getIfInCatchStatment(projectModel, statmentText, offset)) != null) {
			// the current position is inside catch statment.
			return resultCandidate;
		}

		int totalLength = statmentText.length();

		int endPosition = PHPTextSequenceUtilities.readBackwardSpaces(statmentText, totalLength); // read whitespace
		int startPosition = PHPTextSequenceUtilities.readIdentifiarStartIndex(statmentText, endPosition, true);
		String lastWord = statmentText.subSequence(startPosition, endPosition).toString();
		boolean haveSpacesAtEnd = totalLength != endPosition;

		if (haveSpacesAtEnd && (resultCandidate = getIfNewOrInstanceofStatment(fileName, projectModel, lastWord, "", offset, type)) != null) {
			// the current position is inside new or instanceof statment.
			return resultCandidate;
		}

		int line = sdRegion.getParentDocument().getLineOfOffset(offset);
		if ((resultCandidate = getIfClassFunctionCompletion(projectModel, fileName, statmentText, offset, line, lastWord, startPosition, haveSpacesAtEnd)) != null) {
			// the current position is in class function.
			return resultCandidate;
		}

		endPosition = PHPTextSequenceUtilities.readBackwardSpaces(statmentText, startPosition); // read whitespace
		startPosition = PHPTextSequenceUtilities.readIdentifiarStartIndex(statmentText, endPosition, true);
		String firstWord = statmentText.subSequence(startPosition, endPosition).toString();

		if (!haveSpacesAtEnd && (resultCandidate = getIfNewOrInstanceofStatment(fileName, projectModel, firstWord, lastWord, offset, type)) != null) {
			// the current position is inside new or instanceof statment.
			return resultCandidate;
		}

		if ((resultCandidate = getIfInArrayOption(projectModel, fileName, haveSpacesAtEnd, firstWord, lastWord, startPosition, offset, statmentText)) != null) {
			// the current position is after '[' sign show special completion.
			return resultCandidate;
		}

		String elementName = lastWord;
		if (elementName.startsWith("$")) {
			if (PHPPartitionTypes.isPHPQuotesState(type)) {
				IStructuredDocument doc = sdRegion.getParentDocument();
				try {
					char charBefore = doc.get(offset - 2, 1).charAt(0);
					if (charBefore == '\\') {
						return null;
					}
				} catch (BadLocationException badLocationException) {
					Logger.logException(badLocationException);
				}
			}
			PHPCodeContext context = getContext(projectModel, fileName, offset - elementName.length());
			elementName = elementName.substring(1);
			CodeData[] variables = projectModel.getVariables(fileName, context, elementName, true);
			return filterExact(variables, elementName);
		}

		if (PHPPartitionTypes.isPHPQuotesState(type) || (type.equals(PHPRegionTypes.PHP_HEREDOC_TAG) && sdRegion.getStartOffset(textRegion) + textRegion.getLength() <= offset)) {
			return null;
		}
		if ("".equals(elementName)) {
			return null;
		}
		CodeData function = projectModel.getFunction(fileName, elementName);
		CodeData constant = projectModel.getConstant(fileName, elementName);
		CodeData classs = projectModel.getClass(fileName, elementName);
		CodeData[] keywords = projectModel.getKeywordData(elementName);

		CodeData[] mergeData = null;
		if (keywords != null && keywords.length > 0) {
			mergeData = ModelSupport.merge(keywords, mergeData);
		}
		if (classs != null) {
			mergeData = ModelSupport.merge(new CodeData[] { classs }, mergeData);
		}
		if (constant != null) {
			mergeData = ModelSupport.merge(new CodeData[] { constant }, mergeData);
		}
		if (function != null) {
			mergeData = ModelSupport.merge(new CodeData[] { function }, mergeData);
		}

		return filterExact(mergeData, elementName);
	}

