	public void fileDataChanged(PHPFileData fileData) {
		if (!fileData.getName().equals(currentFileName)) {
			return;
		}

		IPHPMarker[] markers = fileData.getMarkers();

		if (markers == null) {
			return;
		}
		List messages = new ArrayList();
		for (int i = 0; markers.length > i; i++) {
			IPHPMarker marker = markers[i];
			if (marker.getType().equals(IPHPMarker.TASK)) {
				continue;
			}
			String descr = marker.getDescription();
			LocalizedMessage mess = new LocalizedMessage(IMessage.HIGH_SEVERITY, descr);
			UserData userData = marker.getUserData();

			final int startPosition = userData.getStartPosition();
			final int length = userData.getEndPosition() - startPosition;

			mess.setOffset(startPosition);
			mess.setLength(length);
			messages.add(mess);
		}
		ReconcileStepForPHP reconcileStepForPHP = new ReconcileStepForPHP();
		Map annotations = createAnnotations(reconcileStepForPHP, messages);

		// get text viewer and set annotations
		StructuredTextViewer textViewer = getTextViewer();
	    
	    if (textViewer == null){
	    	return;
	    }
    	StructuredResourceMarkerAnnotationModel annotationModel = (StructuredResourceMarkerAnnotationModel) textViewer.getAnnotationModel();
    	// iterate the exist annotations and remove PHP annotations
    	Iterator annotationIt = annotationModel.getAnnotationIterator();
    	List annotationToRemove = new ArrayList();
    	while (annotationIt.hasNext()) {
			Annotation annotation = (Annotation) annotationIt.next();
			if (annotation instanceof TemporaryAnnotation) {
				TemporaryAnnotation temporaryAnnotation = (TemporaryAnnotation)annotation;
				if (isPhpViewerAnnotation(temporaryAnnotation)) {
					annotationToRemove.add(temporaryAnnotation);
				} 
			}
		}
    	annotationModel.replaceAnnotations((Annotation[]) annotationToRemove.toArray(new Annotation[0]), annotations);
	}

