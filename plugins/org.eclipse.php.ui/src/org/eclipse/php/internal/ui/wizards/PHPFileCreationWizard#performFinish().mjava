	/**
	 * This method is called when 'Finish' button is pressed in the wizard. We will
	 * create an operation and run it using wizard as execution context.
	 */
	@Override
	public boolean performFinish() {
		final String containerName = phpFileCreationWizardPage.getContainerFullPath().toString();
		final String fileName = phpFileCreationWizardPage.getFileName();
		newPhpTemplatesWizardPage.resetTableViewerInput();
		IScriptProject project = null;
		IWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot();
		IResource resource = root.findMember(phpFileCreationWizardPage.getContainerFullPath());
		if (!resource.exists() || !(resource instanceof IContainer)) {
			project = DLTKCore.create(resource.getProject());
		}
		final IFile file = phpFileCreationWizardPage.createNewFile();
		if (file == null) {
			return false;
		}

		String lineSeparator = Util.getLineSeparator(null, project);
		final PHPTemplateStore.CompiledTemplate template = this.newPhpTemplatesWizardPage.compileTemplate(containerName,
				fileName, lineSeparator);

		IRunnableWithProgress op = new IRunnableWithProgress() {
			@Override
			public void run(IProgressMonitor monitor) throws InvocationTargetException {
				try {
					new FileCreator().createFile(PHPFileCreationWizard.this, file, monitor, template.string,
							template.offset);
				} catch (CoreException e) {
					throw new InvocationTargetException(e);
				} finally {
					monitor.done();
				}
			}
		};
		try {
			getContainer().run(true, false, op);
		} catch (InterruptedException e) {
			return false;
		} catch (InvocationTargetException e) {
			Throwable realException = e.getTargetException();
			MessageDialog.openError(getShell(), PHPUIMessages.PHPFileCreationWizard_0, realException.getMessage());
			return false;
		}
		return true;
	}

