	/**
	 * Initializes the page with the project and default buildpath.
	 * <p>
	 * The default buildpath entries must correspond the given project.
	 * </p>
	 * <p>
	 * The caller of this method is responsible for creating the underlying
	 * project. The page will create the output, source and library folders if
	 * required.
	 * </p>
	 * <p>
	 * The project does not have to exist at the time of initialization, but
	 * must exist when executing the runnable obtained by
	 * <code>getRunnable()</code>.
	 * </p>
	 * 
	 * @param jproject
	 *            The script project.
	 * @param defaultOutputLocation
	 *            The default buildpath entries or <code>null</code> to let the
	 *            page choose the default
	 * @param defaultEntries
	 *            The folder to be taken as the default output path or
	 *            <code>null</code> to let the page choose the default
	 * @param defaultsOverrideExistingBuildpath
	 *            If set to <code>true</code>, an existing '.buildpath' file is
	 *            ignored. If set to <code>false</code> the given default
	 *            buildpath and output location is only used if no '.buildpath'
	 *            exists.
	 */
	public void init(IScriptProject jproject, IBuildpathEntry[] defaultEntries,
			boolean defaultsOverrideExistingBuildpath) {
		if (!defaultsOverrideExistingBuildpath && jproject.exists()
				&& jproject.getProject().getFile(".buildpath").exists()) { //$NON-NLS-1$			
			defaultEntries = null;
		}
		getBuildPathsBlock().init(jproject, defaultEntries);
		fScriptProject = jproject;
	}

