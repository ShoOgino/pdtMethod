	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.eclipse.dltk.internal.ui.actions.CompositeActionGroup#setGroups(org
	 * .eclipse.ui.actions.ActionGroup[])
	 */
	@Override
	protected void setGroups(ActionGroup[] groups) {
		// aggregate the PHP Explorer actions
		final ArrayList<ActionGroup> filtered = new ArrayList<ActionGroup>(
				groups.length - 1);
		for (int i = 0; i < groups.length; i++) {
			if (!(groups[i] instanceof LayoutActionGroup
					|| groups[i] instanceof GenerateActionGroup
					|| groups[i] instanceof RefactorActionGroup || groups[i] instanceof CCPActionGroup)) {
				// use pdt's NavigateActionGroup instead of dltk's
				if (groups[i] instanceof org.eclipse.dltk.internal.ui.actions.NavigateActionGroup) {
					groups[i].dispose();
					fNavigateActionGroup = new NavigateActionGroup(getPart());
					groups[i] = fNavigateActionGroup;
				}

				IPropertyChangeListener workingSetListener = new IPropertyChangeListener() {
					public void propertyChange(PropertyChangeEvent event) {
						doWorkingSetChanged(event);
					}
				};

				if (groups[i] instanceof org.eclipse.dltk.internal.ui.workingsets.ViewActionGroup) {
					groups[i].dispose();
					fViewActionGroup = new ViewActionGroup(getPart()
							.getRootMode(), workingSetListener, getPart()
							.getSite());

					fViewActionGroup.fillFilters(getPart().getTreeViewer());
					groups[i] = fViewActionGroup;
				}
				filtered.add(groups[i]);
			}
		}
		phpRefactorActionGroup = new PHPRefactorActionGroup(getPart());
		filtered.add(phpRefactorActionGroup);
		filtered.add(new GenerateIncludePathActionGroup(getPart()));
		filtered.add(new NamespaceGroupingActionGroup(getPart().getTreeViewer()));
		filtered.add(new PHPFileOperationActionGroup(getPart()));

		super.setGroups(filtered.toArray(new ActionGroup[filtered.size()]));
	}

