	/**
	 * Updates the occurrences annotations based on the current selection.
	 * 
	 * @param selection
	 *                      the text selection
	 * @param astRoot
	 *                      the compilation unit AST
	 * @since 3.0
	 */
	protected void updateOccurrenceAnnotations(final ITextSelection selection, final IModelElement sourceModule) {

		if (fOccurrencesFinderJob != null) {
			fOccurrencesFinderJob.cancel();
		}

		if (!fMarkOccurrenceAnnotations) {
			return;
		}

		String updatingOccurrencesJobName = "Updating occurrence annotations"; //$NON-NLS-1$

		IJobManager jobManager = Job.getJobManager();
		if (jobManager.find(updatingOccurrencesJobName).length > 0) {
			jobManager.cancel(updatingOccurrencesJobName);
		}
		Job job = new Job(updatingOccurrencesJobName) {

			@Override
			protected IStatus run(IProgressMonitor monitor) {
				Program astRoot = null;
				try {
					astRoot = SharedASTProvider.getAST((ISourceModule) sourceModule, SharedASTProvider.WAIT_ACTIVE_ONLY,
							new NullProgressMonitor());
				} catch (ModelException e) {
					Logger.logException(e);
				} catch (IOException e) {
					Logger.logException(e);
				}
				if (!monitor.isCanceled() && astRoot != null) {
					updateOccurrencesAnnotationsRunJob(selection, astRoot);
				}
				return Status.OK_STATUS;
			}

			@Override
			public boolean belongsTo(Object family) {
				return getName().equals(family);
			}
		};
		job.setSystem(true);
		job.setPriority(Job.DECORATE);
		job.schedule();

	}

