	/**
	 * Creates the element in the tree and creates/updates it's parents
	 * @param tree tree of the elements
	 * @param path path where the element should be placed
	 * @param data data to attach to the element
	 */
	private void treeRecursiveCreateElement(PHPProjectModel model, final ElementTree tree, final IPath path, final CodeData data) {
		if (path.segmentCount() == 1 && !tree.includes(path)) {
			tree.createElement(path, data);
			return;
		}
		final IPath parentPath = path.removeLastSegments(1);
		final IPath grandParentPath = parentPath.removeLastSegments(1);
		if (!tree.includes(parentPath)) {
			treeRecursiveCreateElement(model, tree, parentPath, null);
		}
		if (!tree.includes(path)) {
			if (data != null) {
				tree.createElement(path, data);
			} else {
				tree.createElement(path, null);
			}
		} else {
			if (data != null) {
				Object oldData = tree.getElementData(path);
				if (oldData instanceof LinkedHashSet) {
					((LinkedHashSet<CodeData>) oldData).add(data);
				} else {
					LinkedHashSet<CodeData> newData = new LinkedHashSet<CodeData>(2);
					newData.add((CodeData)oldData);
					newData.add(data);
					tree.setElementData(path, newData);
				}
			}
		}
	}

