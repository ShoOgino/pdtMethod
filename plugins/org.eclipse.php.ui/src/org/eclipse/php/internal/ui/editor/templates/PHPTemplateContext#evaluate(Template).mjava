	@Override
	public TemplateBuffer evaluate(Template template) throws BadLocationException, TemplateException {
		IFormatterCommonPreferences prefs = FormatterUtils.getFormatterCommonPreferences();
		boolean useTab = prefs.useTab(getDocument());
		if (!useTab) {
			int length = prefs.getIndentationSize(getDocument());
			StringBuilder sb = new StringBuilder();
			for (int i = 0; i < length; i++) {
				sb.append(prefs.getIndentationChar(getDocument())); // $NON-NLS-1$
			}
			String newPattern = TextUtils.replace(template.getPattern(), TAB, sb.toString());
			template = new Template(template.getName(), template.getDescription(), template.getContextTypeId(),
					newPattern, template.isAutoInsertable());

		}
		if (!canEvaluate(template))
			return null;

		final String[] lines = TextUtils.splitLines(template.getPattern());
		if (lines.length > 1) {
			String delimeter;
			if (fLineDelimiter == null) {
				delimeter = TextUtilities.getDefaultLineDelimiter(getDocument());
			} else {
				delimeter = fLineDelimiter;
			}
			final String indent = calculateIndent(getDocument(), getStart());
			final IScriptTemplateIndenter indenter = getIndenter();
			final StringBuffer buffer = new StringBuffer(lines[0]);

			// Except first line
			for (int i = 1; i < lines.length; i++) {
				buffer.append(delimeter);
				indenter.indentLine(buffer, indent, lines[i]);
			}

			template = new Template(template.getName(), template.getDescription(), template.getContextTypeId(),
					buffer.toString(), template.isAutoInsertable());
		}

		TemplateTranslator translator = new TemplateTranslator();
		TemplateBuffer buffer = translator.translate(template);

		getContextType().resolve(buffer, this);

		TemplateBuffer result = buffer;
		// 300533: Switching through template keys? in fore and forek template
		// is corrupter
		// https://bugs.eclipse.org/bugs/show_bug.cgi?id=300533
		// merge ${dollar}${variable} to single $variable to solve bug 300533
		TemplateVariable[] variables = result.getVariables();
		TemplateVariable dollarVariable = null;
		List<TemplateVariable> nonDollarVariables = new ArrayList<>();
		for (int i = 0; i < variables.length; i++) {
			if (isDollar(variables[i])) {
				dollarVariable = variables[i];
			} else {
				nonDollarVariables.add(variables[i]);
			}
		}
		List<TemplateVariable> templateVariables = new ArrayList<>();
		if (dollarVariable != null) {
			Set<Integer> dollarOffsetSet = new HashSet<>();
			for (int i = 0; i < dollarVariable.getOffsets().length; i++) {
				dollarOffsetSet.add(dollarVariable.getOffsets()[i]);
			}
			for (Iterator<TemplateVariable> iterator = nonDollarVariables.iterator(); iterator.hasNext();) {
				TemplateVariable templateVariable = iterator.next();
				if (templateVariable.getOffsets().length > 0 && isbehind(templateVariable, dollarOffsetSet)) {
					int[] offsets = new int[templateVariable.getOffsets().length];
					for (int i = 0; i < templateVariable.getOffsets().length; i++) {
						dollarOffsetSet.remove(templateVariable.getOffsets()[i] - 1);
						offsets[i] = templateVariable.getOffsets()[i] - 1;
					}
					String name = DOLLAR_SIGN + templateVariable.getName();
					String defaultValue = name;
					if (templateVariable.getDefaultValue() != null) {
						defaultValue = DOLLAR_SIGN + templateVariable.getDefaultValue();
					}
					templateVariable = new TemplateVariable(templateVariable.getVariableType(), name, defaultValue,
							offsets);
				}
				templateVariables.add(templateVariable);
			}
			if (!dollarOffsetSet.isEmpty()) {
				templateVariables.add(dollarVariable);
			}
			result.setContent(result.getString(),
					templateVariables.toArray(new TemplateVariable[templateVariables.size()]));
		}
		// end
		return result;
	}

