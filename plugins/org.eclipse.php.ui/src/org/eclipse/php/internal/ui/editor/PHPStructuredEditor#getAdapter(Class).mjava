	@Override
	public Object getAdapter(Class required) {

		if (required == IFoldingStructureProviderExtension.class && fProjectionModelUpdater != null) {
			IStructuredTextFoldingProvider foldingProvider = fProjectionModelUpdater.getFoldingProvider();
			if (foldingProvider instanceof IFoldingStructureProviderExtension) {
				return foldingProvider;
			}
		}

		if (required == IFoldingStructureProvider.class && fProjectionModelUpdater != null) {
			IStructuredTextFoldingProvider foldingProvider = fProjectionModelUpdater.getFoldingProvider();
			if (foldingProvider instanceof IFoldingStructureProvider) {
				return foldingProvider;
			}
		}

		Object adapter = super.getAdapter(required);

		// add selection listener to outline page
		// so that if outline selects model element, editor selects correct item
		if (adapter instanceof ConfigurableContentOutlinePage && IContentOutlinePage.class.equals(required)
				&& shouldOutlineViewBeLoaded()) {
			final ConfigurableContentOutlinePage outlinePage = (ConfigurableContentOutlinePage) adapter;
			if (fPHPOutlinePageListener == null) {
				fPHPOutlinePageListener = new OutlineSelectionChangedListener(outlinePage.getConfiguration());
				outlinePage.addDoubleClickListener(fPHPOutlinePageListener);
			}
			fPHPOutlinePageListener.install(outlinePage);
			fPHPOutlinePage = outlinePage;
			outlinePage.setInput(getModelElement());
		}
		return adapter;
	}

