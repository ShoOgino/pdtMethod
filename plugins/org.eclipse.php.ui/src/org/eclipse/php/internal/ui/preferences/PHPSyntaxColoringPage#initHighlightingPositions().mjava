	protected void initHighlightingPositions() {
		highlightingPositionMap = new HashMap<>();
		IPath stateLocation = PHPUiPlugin.getDefault().getStateLocation();
		IPath path = stateLocation.append("/_" + "PHPSyntax"); //$NON-NLS-1$ //$NON-NLS-2$
		IFileStore fileStore = EFS.getLocalFileSystem().getStore(path);

		NonExistingPHPFileEditorInput input = new NonExistingPHPFileEditorInput(fileStore, "PHPSyntax"); //$NON-NLS-1$

		File realFile = input.getPath(input).toFile();

		try {
			FileOutputStream fos = new FileOutputStream(realFile);
			fos.write(fDocument.get().getBytes());
			fos.close();
			DLTKUIPlugin.getDocumentProvider().connect(input);
			final ISourceModule sourceModule = DLTKUIPlugin.getDocumentProvider().getWorkingCopy(input);
			if (sourceModule != null) {
				ASTParser parser = ASTParser.newParser(PHPVersion.getLatestVersion(), false, true, sourceModule);
				parser.setSource(fDocument.get().toCharArray());

				final Program program = parser.createAST(null);
				List<AbstractSemanticHighlighting> highlightings = new ArrayList<>();

				highlightings.add(new StaticFieldHighlighting() {
					@Override
					protected Program getProgram(IStructuredDocumentRegion region) {
						return program;
					}

					@Override
					public ISourceModule getSourceModule() {
						return sourceModule;
					}

					@Override
					public String getPreferenceKey() {
						return StaticFieldHighlighting.class.getName();
					}
				});
				highlightings.add(new StaticMethodHighlighting() {
					@Override
					protected Program getProgram(IStructuredDocumentRegion region) {
						return program;
					}

					@Override
					public ISourceModule getSourceModule() {
						return sourceModule;
					}

					@Override
					public String getPreferenceKey() {
						return StaticMethodHighlighting.class.getName();
					}
				});
				highlightings.add(new ConstantHighlighting() {
					@Override
					protected Program getProgram(IStructuredDocumentRegion region) {
						return program;
					}

					@Override
					public ISourceModule getSourceModule() {
						return sourceModule;
					}

					@Override
					public String getPreferenceKey() {
						return ConstantHighlighting.class.getName();
					}
				});
				highlightings.add(new FieldHighlighting() {
					@Override
					protected Program getProgram(IStructuredDocumentRegion region) {
						return program;
					}

					@Override
					public ISourceModule getSourceModule() {
						return sourceModule;
					}

					@Override
					public String getPreferenceKey() {
						return FieldHighlighting.class.getName();
					}
				});
				highlightings.add(new FunctionHighlighting() {
					@Override
					protected Program getProgram(IStructuredDocumentRegion region) {
						return program;
					}

					@Override
					public ISourceModule getSourceModule() {
						return sourceModule;
					}

					@Override
					public String getPreferenceKey() {
						return FunctionHighlighting.class.getName();
					}
				});
				highlightings.add(new MethodHighlighting() {
					@Override
					protected Program getProgram(IStructuredDocumentRegion region) {
						return program;
					}

					@Override
					public ISourceModule getSourceModule() {
						return sourceModule;
					}

					@Override
					public String getPreferenceKey() {
						return MethodHighlighting.class.getName();
					}
				});
				highlightings.add(new ClassHighlighting() {
					@Override
					protected Program getProgram(IStructuredDocumentRegion region) {
						return program;
					}

					@Override
					public ISourceModule getSourceModule() {
						return sourceModule;
					}

					@Override
					public String getPreferenceKey() {
						return ClassHighlighting.class.getName();
					}
				});
				highlightings.add(new InternalClassHighlighting() {
					@Override
					protected Program getProgram(IStructuredDocumentRegion region) {
						return program;
					}

					@Override
					public ISourceModule getSourceModule() {
						return sourceModule;
					}

					@Override
					public String getPreferenceKey() {
						return InternalClassHighlighting.class.getName();
					}
				});
				highlightings.add(new InternalFunctionHighlighting() {
					@Override
					protected Program getProgram(IStructuredDocumentRegion region) {
						return program;
					}

					@Override
					public ISourceModule getSourceModule() {
						return sourceModule;
					}

					@Override
					public String getPreferenceKey() {
						return InternalFunctionHighlighting.class.getName();
					}
				});
				highlightings.add(new ParameterVariableHighlighting() {
					@Override
					protected Program getProgram(IStructuredDocumentRegion region) {
						return program;
					}

					@Override
					public ISourceModule getSourceModule() {
						return sourceModule;
					}

					@Override
					public String getPreferenceKey() {
						return ParameterVariableHighlighting.class.getName();
					}
				});
				highlightings.add(new SuperGlobalHighlighting() {
					@Override
					protected Program getProgram(IStructuredDocumentRegion region) {
						return program;
					}

					@Override
					public ISourceModule getSourceModule() {
						return sourceModule;
					}

					@Override
					public String getPreferenceKey() {
						return SuperGlobalHighlighting.class.getName();
					}
				});
				highlightings.add(new InternalConstantHighlighting() {
					@Override
					protected Program getProgram(IStructuredDocumentRegion region) {
						return program;
					}

					@Override
					public ISourceModule getSourceModule() {
						return sourceModule;
					}

					@Override
					public String getPreferenceKey() {
						return InternalConstantHighlighting.class.getName();
					}
				});
				highlightings.add(new DeprecatedHighlighting() {
					@Override
					protected Program getProgram(IStructuredDocumentRegion region) {
						return program;
					}

					@Override
					public ISourceModule getSourceModule() {
						return sourceModule;
					}

					@Override
					public String getPreferenceKey() {
						return DeprecatedHighlighting.class.getName();
					}
				});
				highlightings.add(new TaskTagHighlighting() {
					@Override
					protected Program getProgram(IStructuredDocumentRegion region) {
						return program;
					}

					@Override
					public ISourceModule getSourceModule() {
						return sourceModule;
					}

					@Override
					public String getPreferenceKey() {
						return TaskTagHighlighting.class.getName();
					}
				});
				highlightings.add(new VarDocCommentHighlighting() {
					@Override
					protected Program getProgram(IStructuredDocumentRegion region) {
						return program;
					}

					@Override
					public ISourceModule getSourceModule() {
						return sourceModule;
					}

					@Override
					public String getPreferenceKey() {
						return VarDocCommentHighlighting.class.getName();
					}
				});
				highlightings.add(new VarDocHighlighting() {
					@Override
					protected Program getProgram(IStructuredDocumentRegion region) {
						return program;
					}

					@Override
					public ISourceModule getSourceModule() {
						return sourceModule;
					}

					@Override
					public String getPreferenceKey() {
						return VarDocHighlighting.class.getName();
					}
				});

				Collections.sort(highlightings);

				for (Iterator<AbstractSemanticHighlighting> iterator = highlightings.iterator(); iterator.hasNext();) {
					AbstractSemanticHighlighting abstractSemanticHighlighting = iterator.next();
					Position[] positions = abstractSemanticHighlighting.consumes(program);

					if (positions != null && positions.length > 0) {
						highlightingPositionMap.put(abstractSemanticHighlighting.getPreferenceKey(), positions);

					}
				}
			}
			DLTKUIPlugin.getDocumentProvider().disconnect(input);
		} catch (CoreException e1) {
			e1.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}
		realFile.delete();
	}

