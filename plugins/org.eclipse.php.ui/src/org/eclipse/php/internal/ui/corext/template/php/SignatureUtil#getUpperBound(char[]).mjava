	/**
	 * Returns the upper bound of a type signature. Returns the signature of <code>java.lang.Object</code> if
	 * <code>signature</code> is a lower bound (<code>? super T</code>); returns
	 * the signature of the type <code>T</code> of an upper bound (<code>? extends T</code>)
	 * or <code>signature</code> itself if it is not a bound signature.
	 * 
	 * @param signature the signature
	 * @return the upper bound signature of <code>signature</code>
	 */
	public static char[] getUpperBound(char[] signature) {
		if (signature.length < 1)
			return signature;
		
		if (signature[0] == Signature.C_STAR)
			return OBJECT_SIGNATURE_ARRAY;
		
		int superIndex= indexOf(signature, Signature.C_SUPER);
		if (superIndex == 0)
			return OBJECT_SIGNATURE_ARRAY;
		
		if (superIndex != -1) {
			char afterSuper= signature[superIndex + 1];
			if (afterSuper == Signature.C_STAR) {
				char[] type= new char[signature.length - 1];
				System.arraycopy(signature, 0, type, 0, superIndex);
				type[superIndex]= Signature.C_STAR;
				System.arraycopy(signature, superIndex + 2, type, superIndex + 1, signature.length - superIndex - 2);
				return getUpperBound(type);
			}
				
			if (afterSuper == Signature.C_EXTENDS) {
				int typeEnd= typeEnd(signature, superIndex + 1);
				char[] type= new char[signature.length - (typeEnd - superIndex - 1)];
				System.arraycopy(signature, 0, type, 0, superIndex);
				type[superIndex]= Signature.C_STAR;
				System.arraycopy(signature, typeEnd, type, superIndex + 1, signature.length - typeEnd);
				return getUpperBound(type);
			}
				
		}
		
		if (signature[0] == Signature.C_EXTENDS) {
			char[] type= new char[signature.length - 1];
			System.arraycopy(signature, 1, type, 0, signature.length - 1);
			return type;
		}
		
		return signature;
	}

