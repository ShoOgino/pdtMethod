	public void run(IStructuredSelection selection) {
		final IProject[] projects = getProjectsFromSelection(selection);
		if (projects.length > 0) {
			WorkspaceJob convertJob = new WorkspaceJob(PHPUIMessages.getString("ConvertToPDTProjectAction_converting_project_job_title")) {
				public IStatus runInWorkspace(IProgressMonitor monitor) throws CoreException {
					
					for (int i = 0; i < projects.length; ++i) {
						IProject project = projects[i];
						IProjectDescription projectDescription = project.getDescription();
						
						// Configure builders:
						List newBuildSpec = new LinkedList();
						ICommand[] buildSpec = projectDescription.getBuildSpec();
						for (int c = 0; c < buildSpec.length; ++c) {
							if (!buildSpec[c].getBuilderName().equals(PHPECLIPSE_BUILDER)) {
								newBuildSpec.add(buildSpec[c]);
							}
						}
						ICommand command = projectDescription.newCommand();
						command.setBuilderName(PHPNature.VALIDATION_BUILDER_ID);
						newBuildSpec.add(command);
						
						command = projectDescription.newCommand();
						command.setBuilderName(PHPProjectOptions.BUILDER_ID);
						newBuildSpec.add(command);

						projectDescription.setBuildSpec((ICommand[]) newBuildSpec.toArray(new ICommand[newBuildSpec.size()]));
						
						// Configure natures:
						List newNatures = new LinkedList();
						String[] natures = projectDescription.getNatureIds();
						for (int c = 0; c < natures.length; ++c) {
							if (!natures[c].equals(PHPECLIPSE_NATURE)) {
								newNatures.add(natures[c]);
							}
						}
						newNatures.add(PHPNature.ID);
						projectDescription.setNatureIds((String[]) newNatures.toArray(new String[newNatures.size()]));
						
						// Save project description:
						project.setDescription(projectDescription, monitor);
					}
					return Status.OK_STATUS;
				}
			};
			convertJob.setUser(true);
			convertJob.setRule(ResourcesPlugin.getWorkspace().getRoot());
			convertJob.schedule();
		}
	}

