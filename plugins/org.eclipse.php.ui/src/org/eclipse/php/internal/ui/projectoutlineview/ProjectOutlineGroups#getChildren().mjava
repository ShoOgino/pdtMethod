	protected Object[] getChildren() {
		if (ProjectOutlineContentProvider.scripProject != null) {

			IProject project = ProjectOutlineContentProvider.scripProject.getProject();
			try {
				if (!project.isAccessible() || !project.hasNature(PHPNature.ID)) {
					return NO_CHILDREN;
				}
			} catch (CoreException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			IDLTKSearchScope scope = SearchEngine.createSearchScope(ProjectOutlineContentProvider.scripProject,
					IDLTKSearchScope.SOURCES);

			TreeSet<IModelElement> childrenList = new TreeSet<IModelElement>(new Comparator<IModelElement>() {
				@Override
				public int compare(IModelElement o1, IModelElement o2) {
					int res = o1.getElementName().compareTo(o2.getElementName());
					if (res == 0) {
						String label1 = ScriptElementLabels.getDefault().getElementLabel(o1,
								ScriptElementLabels.T_FULLY_QUALIFIED);
						String label2 = ScriptElementLabels.getDefault().getElementLabel(o2,
								ScriptElementLabels.T_FULLY_QUALIFIED);
						return label1.compareTo(label2);
					}
					return res;

				}
			});
			switch (this) {
			case GROUP_NAMESPACES:
				IType[] namespaces = PHPModelAccess.getDefault().findNamespaces(null, null, MatchRule.PREFIX, 0, 0,
						scope, null);
				Map<String, List<IType>> nsByName = new HashMap<String, List<IType>>();
				if (namespaces != null) {
					for (IType namespace : namespaces) {
						String namespaceName = namespace.getElementName();
						List<IType> nsList = nsByName.get(namespaceName);
						if (nsList == null) {
							nsList = new LinkedList<IType>();
							nsByName.put(namespaceName, nsList);
						}
						nsList.add(namespace);
					}
				}
				for (Entry<String, List<IType>> entry : nsByName.entrySet()) {
					childrenList.add(new NamespaceNode(ProjectOutlineContentProvider.scripProject, entry.getKey()));
				}

				break;

			case GROUP_CLASSES:
				IType[] findTypes = PHPModelAccess.getDefault().findTypes(null, MatchRule.PREFIX, 0,
						Modifiers.AccNameSpace, scope, null);
				if (findTypes != null) {
					childrenList.addAll(Arrays.asList(findTypes));
				}
				break;

			case GROUP_FUNCTIONS:
				IMethod[] findMethods = PHPModelAccess.getDefault().findFunctions(null, MatchRule.PREFIX,
						Modifiers.AccGlobal, 0, scope, null);
				if (findMethods != null) {
					childrenList.addAll(Arrays.asList(findMethods));
				}
				break;

			case GROUP_CONSTANTS:
				// find all constants
				IField[] findFields = PHPModelAccess.getDefault().findFields(null, MatchRule.PREFIX,
						Modifiers.AccConstant, 0, scope, null);
				if (findFields != null) {
					for (IField field : findFields) {
						try {
							IModelElement element = field;
							if (field.getParent() instanceof ISourceModule) {
								element = ((ISourceModule) field.getParent())
										.getElementAt(field.getNameRange().getOffset());
							}
							if (element != null && element.getParent() instanceof ISourceModule) {
								// display constants defined in GLOBAL scope
								childrenList.add(element);
							}
						} catch (ModelException e) {
						}
					}
				}
				break;
			}
			return childrenList.toArray();
		}

		return NO_CHILDREN;
	}

