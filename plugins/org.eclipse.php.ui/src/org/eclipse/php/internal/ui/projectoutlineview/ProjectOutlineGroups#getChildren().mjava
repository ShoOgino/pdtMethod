	protected Object[] getChildren() {
		if (ProjectOutlineContentProvider.scripProject != null) {

			IDLTKSearchScope scope = SearchEngine.createSearchScope(
					ProjectOutlineContentProvider.scripProject,
					IDLTKSearchScope.SOURCES);

			TreeSet<IModelElement> childrenList = new TreeSet<IModelElement>(
					new Comparator<IModelElement>() {
						public int compare(IModelElement o1, IModelElement o2) {
							int res = o1.getElementName().compareTo(
									o2.getElementName());
							if (res == 0) {
								String label1 = ScriptElementLabels
										.getDefault()
										.getElementLabel(
												o1,
												ScriptElementLabels.T_FULLY_QUALIFIED);
								String label2 = ScriptElementLabels
										.getDefault()
										.getElementLabel(
												o2,
												ScriptElementLabels.T_FULLY_QUALIFIED);
								return label1.compareTo(label2);
							}
							return res;

						}
					});
			switch (this) {
			case GROUP_NAMESPACES:
				IType[] namespaces = PhpModelAccess.getDefault().findTypes(
						null, MatchRule.PREFIX, Modifiers.AccNameSpace, 0,
						scope, null);
				Map<String, List<IType>> nsByName = new HashMap<String, List<IType>>();
				for (IType namespace : namespaces) {
					String namespaceName = namespace.getElementName();
					List<IType> nsList = nsByName.get(namespaceName);
					if (nsList == null) {
						nsList = new LinkedList<IType>();
						nsByName.put(namespaceName, nsList);
					}
					nsList.add(namespace);
				}
				for (String namespaceName : nsByName.keySet()) {
					List<IType> nsList = nsByName.get(namespaceName);
					childrenList.add(new NamespaceNode(
							ProjectOutlineContentProvider.scripProject,
							namespaceName, nsList.toArray(new IType[nsList
									.size()])));
				}
				break;

			case GROUP_CLASSES:
				childrenList.addAll(Arrays.asList(PhpModelAccess.getDefault()
						.findTypes(null, MatchRule.PREFIX, 0,
								Modifiers.AccNameSpace, scope, null)));
				break;

			case GROUP_FUNCTIONS:
				childrenList.addAll(Arrays.asList(PhpModelAccess.getDefault()
						.findMethods(null, MatchRule.PREFIX,
								Modifiers.AccGlobal, 0, scope, null)));
				break;

			case GROUP_CONSTANTS:
				childrenList.addAll(Arrays.asList(PhpModelAccess.getDefault()
						.findFields(null, MatchRule.PREFIX,
								Modifiers.AccConstant | Modifiers.AccGlobal, 0,
								scope, null)));
				break;
			}
			return childrenList.toArray();
		}

		return NO_CHILDREN;
	}

