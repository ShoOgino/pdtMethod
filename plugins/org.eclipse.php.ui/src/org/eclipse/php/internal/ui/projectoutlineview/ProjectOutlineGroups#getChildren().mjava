	protected Object[] getChildren() {
		if (ProjectOutlineContentProvider.scripProject != null) {

			IDLTKSearchScope scope = SearchEngine.createSearchScope(ProjectOutlineContentProvider.scripProject, IDLTKSearchScope.SOURCES);

			TreeSet<IModelElement> childrenList = new TreeSet<IModelElement>(new Comparator<IModelElement>() {
				public int compare(IModelElement o1, IModelElement o2) {
					if (0 != o1.getElementName().compareTo(o2.getElementName())) {
						return (o1.getPath().toOSString() + o1.getElementName()).compareTo(o2.getPath().toOSString() + o2.getElementName());
					}
					return 0;

				}
			});
			switch (this) {
				case GROUP_NAMESPACES:
					childrenList.addAll(Arrays.asList(PHPTypeInferenceUtils.getAllNamespaces(scope)));
					break;

				case GROUP_CLASSES:
					childrenList.addAll(Arrays.asList(PHPTypeInferenceUtils.getAllClassesAndInterfaces(scope)));
					break;

				case GROUP_FUNCTIONS:
					childrenList.addAll(Arrays.asList(PHPTypeInferenceUtils.getAllFunctions(scope)));
					break;

				case GROUP_CONSTANTS:
					IField[] fields = PHPTypeInferenceUtils.getAllFields(scope);
					for (IField iField : fields) {
						try {
							if (PHPFlags.isConstant(iField.getFlags())) {
								childrenList.add(iField);
							}
						} catch (ModelException e) {
							Logger.logException(e);
						}
					}
					break;
			}
			return childrenList.toArray();
		}

		return NO_CHILDREN;
	}

