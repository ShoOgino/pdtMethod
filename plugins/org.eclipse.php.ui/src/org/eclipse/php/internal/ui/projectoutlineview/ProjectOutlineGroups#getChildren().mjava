	protected Object[] getChildren() {
		if (ProjectOutlineContentProvider.scripProject != null) {
			ArrayList<IProjectFragment> projectFragments = new ArrayList<IProjectFragment>();

			// getting project's fragments
			try {
				for (IProjectFragment projectFragment : (((IScriptProject) ProjectOutlineContentProvider.scripProject).getProjectFragments())) {
					if (projectFragment != null && !projectFragment.isExternal()) { //adding only non-external resources
						projectFragments.add(projectFragment);
					}
				}
			} catch (ModelException e) {
				Logger.logException(e);
			}
			PHPMixinModel mixinModel = PHPMixinModel.getInstance((IScriptProject) ProjectOutlineContentProvider.scripProject);
			// foreach fragment getting its children, 
			// and then merging them into last fragments list

			TreeSet<IModelElement> childrenList = new TreeSet<IModelElement>(new Comparator<IModelElement>() {
				public int compare(IModelElement o1, IModelElement o2) {
					if (0 != o1.getElementName().compareTo(o2.getElementName())) {
						return (o1.getPath().toOSString() + o1.getElementName()).compareTo(o2.getPath().toOSString() + o2.getElementName());
					}
					return 0;

				}
			});

			for (IProjectFragment projectFragment : projectFragments) {
				IDLTKSearchScope scope = SearchEngine.createSearchScope(projectFragment);
				IModelElement[] children = null;

				switch (this) {
					case GROUP_CLASSES:
						children = mixinModel.getClass(ASTRIX_STRING, scope);
						break;

					case GROUP_FUNCTIONS:
						children = mixinModel.getFunction(ASTRIX_STRING, scope);
						break;

					case GROUP_CONSTANTS:
						children = mixinModel.getConstant(ASTRIX_STRING, null, scope);
						break;
				}

				childrenList.addAll(Arrays.asList(children));
			}

			return childrenList.toArray();
		}

		return NO_CHILDREN;
	}

