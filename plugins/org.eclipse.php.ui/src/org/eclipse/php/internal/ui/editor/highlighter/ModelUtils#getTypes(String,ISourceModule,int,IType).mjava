	static public IType[] getTypes(String typeName, ISourceModule sm, int offset, IType currentNamespace) {
		ModuleDeclaration moduleDeclaration = SourceParserUtil.getModuleDeclaration(sm, null);
		IContext context = ASTUtils.findContext(sm, moduleDeclaration, offset);
		if (currentNamespace != null) {
			if (typeName.indexOf(NamespaceReference.NAMESPACE_SEPARATOR) > 0) {
				// check if the first part is an alias,then get the full name
				String prefix = typeName.substring(0, typeName.indexOf(NamespaceReference.NAMESPACE_SEPARATOR));
				final Map<String, UsePart> result = PHPModelUtils.getAliasToNSMap(prefix, moduleDeclaration, offset,
						currentNamespace, true);
				if (result.containsKey(prefix)) {
					String fullName = result.get(prefix).getFullUseStatementName();
					typeName = typeName.replace(prefix, fullName);
					if (typeName.length() > 0 && typeName.charAt(0) != NamespaceReference.NAMESPACE_SEPARATOR) {
						typeName = NamespaceReference.NAMESPACE_SEPARATOR + typeName;
					}
				}
			} else if (typeName.indexOf(NamespaceReference.NAMESPACE_SEPARATOR) < 0) {

				String prefix = typeName;
				final Map<String, UsePart> result = PHPModelUtils.getAliasToNSMap(prefix, moduleDeclaration, offset,
						currentNamespace, true);
				if (result.containsKey(prefix)) {
					String fullName = result.get(prefix).getFullUseStatementName();
					typeName = fullName;
					if (typeName.length() > 0 && typeName.charAt(0) != NamespaceReference.NAMESPACE_SEPARATOR) {
						typeName = NamespaceReference.NAMESPACE_SEPARATOR + typeName;
					}
				}
			}
		}
		return PHPTypeInferenceUtils.getModelElements(new PHPClassType(typeName), (ISourceModuleContext) context,
				offset);
	}

