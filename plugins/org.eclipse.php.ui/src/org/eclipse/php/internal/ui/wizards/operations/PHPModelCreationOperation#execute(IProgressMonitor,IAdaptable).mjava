	public IStatus execute(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
		try {
			IProgressMonitor subMonitor = new SubProgressMonitor(monitor, IProgressMonitor.UNKNOWN);
			final IProjectDescription desc = (IProjectDescription) model.getProperty(PROJECT_DESCRIPTION);
			final IProject project = (IProject) model.getProperty(PROJECT);
			if (!project.exists()) {
				project.create(desc, subMonitor);
			}

			if (monitor.isCanceled())
				throw new OperationCanceledException();
			subMonitor = new SubProgressMonitor(monitor, IProgressMonitor.UNKNOWN);

			project.open(subMonitor);
			
			// set project properties prior to any job execution
			if (model.isPropertySet(Keys.PHP_VERSION)) {
				PHPVersion version = PHPVersion.byAlias(model.getStringProperty(Keys.PHP_VERSION));
				PhpVersionProjectPropertyHandler.setVersion(version, project);
				boolean useASPTags = model.getBooleanProperty(Keys.EDITOR_USE_ASP_TAGS);
				UseAspTagsHandler.setUseAspTagsAsPhp(useASPTags, project);
			}

			// For every page added to the projectCreationWizard, call its execute method
			// Here the project settings should be stored into the preferences
			// This action needs to happen here, after the project has been created and opened
			// and before setNatureIds is called

			// NOTE: project opening can take time if it's built from existing source (bug #205444)
			// Thus the next should run as the same type of workspace job.
			WorkspaceJob job = new WorkspaceJob("Saving project options") {

				@Override
				public IStatus runInWorkspace(IProgressMonitor monitor) throws CoreException {
					for (Iterator iter = wizardPageFactories.iterator(); iter.hasNext();) {
						WizardPageFactory pageFactory = (WizardPageFactory) iter.next();
						pageFactory.execute();
					}

					// add JS support if desired
					if(model.getBooleanProperty(PHPCoreConstants.ADD_JS_NATURE)) {
						String[] oldNatureIds = (String[])model.getProperty(PROJECT_NATURES);
						String[] newNatureIds = new String[oldNatureIds.length+1];
						newNatureIds[oldNatureIds.length]=JavaScriptCore.NATURE_ID;
						System.arraycopy(oldNatureIds, 0, newNatureIds, 0, oldNatureIds.length);
						model.setProperty(PROJECT_NATURES, newNatureIds);
					}
					
					String[] natureIds = (String[]) model.getProperty(PROJECT_NATURES);
					if (null != natureIds) {
						desc.setNatureIds(natureIds);
						project.setDescription(desc, monitor);
					}

					return Status.OK_STATUS;
				}

			};
			job.setRule(project.getWorkspace().getRoot());
			job.schedule();
			
			createDefaultProjectStructure(monitor, project);	
			
		} catch (CoreException e) {
			Logger.logException(e);
		} finally {
			monitor.done();
		}
		if (monitor.isCanceled())
			throw new OperationCanceledException();
		return OK_STATUS;
	}

