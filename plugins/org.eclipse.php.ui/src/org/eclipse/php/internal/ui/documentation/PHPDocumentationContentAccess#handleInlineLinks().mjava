	private void handleInlineLinks() {
		Matcher m = INLINE_LINK_PATTERN.matcher(fBuf);
		List<ReplaceEdit> replaceLinks = new ArrayList<ReplaceEdit>();
		while (m.find()) {
			String[] strs = m.group().split("[\\s]+", 3); //$NON-NLS-1$
			String url = removeLastRightCurlyBrace(strs[1]);
			String link = "";//$NON-NLS-1$
			if (url.toLowerCase().startsWith("http")) { //$NON-NLS-1$
				String description = ""; //$NON-NLS-1$
				if (strs.length == 3) {
					description = removeLastRightCurlyBrace(strs[2]);
				} else {
					description = url;
				}
				link = String.format("<a href=\"%s\">%s</a>", url, description); //$NON-NLS-1$
			} else {
				link = handleLinks(Arrays.asList(new TypeReference(0, 0, url))).toString();
			}
			replaceLinks.add(new ReplaceEdit(m.start(), m.end() - m.start(), link));
		}

		for (int i = replaceLinks.size() - 1; i >= 0; i--) {
			ReplaceEdit replaceLink = replaceLinks.get(i);
			fBuf.replace(replaceLink.getOffset(), replaceLink.getOffset() + replaceLink.getLength(),
					replaceLink.getText());
		}
	}

