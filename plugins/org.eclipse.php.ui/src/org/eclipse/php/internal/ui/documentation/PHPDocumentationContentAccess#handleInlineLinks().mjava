	private void handleInlineLinks() {
		Matcher m = INLINE_LINK_PATTERN.matcher(fBuf);
		StringBuffer sb = new StringBuffer();
		while (m.find()) {
			String[] strs = m.group().split("[\\s]+", 3); //$NON-NLS-1$
			String url = removeLastRightCurlyBrace(strs[1]);
			if (url.toLowerCase().startsWith("http")) { //$NON-NLS-1$
				String description = ""; //$NON-NLS-1$
				if (strs.length == 3) {
					description = removeLastRightCurlyBrace(strs[2]);
				} else {
					description = url;
				}
				String link = "<a href=\"" + url + "\">" + description + "</a>"; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
				// m.appendReplacement(sb, link);
				sb.append(fBuf.toString().replace(m.group(), link));
			} else {
				sb.append(fBuf.toString()
						.replace(
								m.group(),
								handleLink(Arrays.asList(new TypeReference(0,
										0, url)))));
				// try {
				// m.appendReplacement(
				// sb,
				// handleLink(
				// Arrays.asList(new TypeReference(0, 0, url)))
				// .toString());
				// } catch (Exception e) {
				// }
			}
		}
		// m.appendTail(sb);
		fBuf = sb;
		sb = null;
	}

