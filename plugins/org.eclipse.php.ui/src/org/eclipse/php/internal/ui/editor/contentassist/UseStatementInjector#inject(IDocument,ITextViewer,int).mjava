	/**
	 * Inserts USE statement into beginning of the document, or after the last
	 * USE statement.
	 * 
	 * @param document
	 * @param textViewer
	 * @param offset
	 * @return new offset
	 */
	public int inject(IDocument document, ITextViewer textViewer, int offset) {
		IModelElement modelElement = proposal.getModelElement();
		if (modelElement == null)
			return offset;
		try {
			if (modelElement.getElementType() == IModelElement.TYPE
					&& PHPFlags.isNamespace(((IType) modelElement).getFlags())) {
				return offset;
			}
			// quanlified namespace should return offset directly
			if (offset - proposal.getReplacementLength() > 0
					&& document.getChar(offset
							- proposal.getReplacementLength() - 1) == '\\') {
				return offset;
			}
			// class members should return offset directly
			if (modelElement.getElementType() != IModelElement.TYPE
					&& !(modelElement instanceof FakeConstructor)) {
				IModelElement type = modelElement
						.getAncestor(IModelElement.TYPE);
				if (type != null
						&& !PHPFlags.isNamespace(((IType) type).getFlags())) {
					return offset;
				}
			}
		} catch (ModelException e) {
			Logger.logException(e);
		} catch (BadLocationException e) {
			Logger.logException(e);
		}

		// add use statement if needed:
		IType namespace = PHPModelUtils.getCurrentNamespace(modelElement);
		if (namespace != null) {

			// find source module of the current editor:
			if (textViewer instanceof PHPStructuredTextViewer) {
				ITextEditor textEditor = ((PHPStructuredTextViewer) textViewer)
						.getTextEditor();
				if (textEditor instanceof PHPStructuredEditor) {
					IModelElement editorElement = ((PHPStructuredEditor) textEditor)
							.getModelElement();
					if (editorElement != null) {
						ISourceModule sourceModule = ((ModelElement) editorElement)
								.getSourceModule();

						try {
							String namespaceName = namespace.getElementName();
							String usePartName = namespaceName;
							boolean useAlias = !Platform
									.getPreferencesService()
									.getBoolean(
											PHPCorePlugin.ID,
											PHPCoreConstants.CODEASSIST_INSERT_FULL_QUALIFIED_NAME_FOR_NAMESPACE,
											true, null);
							if (!useAlias) {
								usePartName = usePartName
										+ NamespaceReference.NAMESPACE_SEPARATOR
										+ modelElement.getElementName();
							}
							ModuleDeclaration moduleDeclaration = SourceParserUtil
									.getModuleDeclaration(sourceModule);
							TextEdit edits = null;

							// find existing use statement:
							UsePart usePart = ASTUtils
									.findUseStatementByNamespace(
											moduleDeclaration, usePartName,
											offset);
							if (usePart == null) {
								ASTParser parser = ASTParser
										.newParser(sourceModule);
								parser.setSource(document.get().toCharArray());

								Program program = parser.createAST(null);
								program.recordModifications();

								AST ast = program.getAST();

								NamespaceName newNamespaceName = ast
										.newNamespaceName(createIdentifiers(
												ast, usePartName), false, false);
								UseStatementPart newUseStatementPart = ast
										.newUseStatementPart(newNamespaceName,
												null);
								org.eclipse.php.internal.core.ast.nodes.UseStatement newUseStatement = ast
										.newUseStatement(Arrays
												.asList(new UseStatementPart[] { newUseStatementPart }));

								NamespaceDeclaration currentNamespace = getCurrentNamespace(
										program, offset - 1);
								if (currentNamespace != null) {
									if (namespaceName
											.equals(getNamespaceName(currentNamespace))) {
										// don't insert USE statement for
										// current namespace
										return offset;
									}
									// insert in the beginning of the current
									// namespace:
									currentNamespace.getBody().statements()
											.add(0, newUseStatement);
								} else {
									// insert in the beginning of the document:
									program.statements()
											.add(0, newUseStatement);
								}
								Map options = new HashMap(PHPCorePlugin
										.getOptions());
								// TODO project may be null
								IScopeContext[] contents = new IScopeContext[] {
										new ProjectScope(modelElement
												.getScriptProject()
												.getProject()),
										new InstanceScope(), new DefaultScope() };
								for (int i = 0; i < contents.length; i++) {
									IScopeContext scopeContext = contents[i];
									IEclipsePreferences node = scopeContext
											.getNode(PHPCorePlugin.ID);
									if (node != null) {
										if (!options
												.containsKey(PHPCoreConstants.FORMATTER_USE_TABS)) {
											String useTabs = node
													.get(
															PHPCoreConstants.FORMATTER_USE_TABS,
															null);
											if (useTabs != null) {
												options.put(
														PHPCoreConstants.FORMATTER_USE_TABS,
														useTabs);
											}
										}
										if (!options
												.containsKey(PHPCoreConstants.FORMATTER_INDENTATION_SIZE)) {
											String size = node
													.get(
															PHPCoreConstants.FORMATTER_INDENTATION_SIZE,
															null);
											if (size != null) {
												options.put(
														PHPCoreConstants.FORMATTER_INDENTATION_SIZE,
														size);
											}
										}
									}
								}

								edits = program.rewrite(document, options);
								edits.apply(document);
							}

							if (useAlias && needsAliasPrepend(modelElement)) {
								// update replacement string: add namespace
								// alias prefix
								String alias;
								if (usePart != null
										&& usePart.getAlias() != null
										&& usePart.getAlias().getName() != null) {
									alias = usePart.getAlias().getName();
								} else {
									int i = usePartName
											.lastIndexOf(NamespaceReference.NAMESPACE_SEPARATOR);
									alias = usePartName;
									if (i != -1) {
										alias = usePartName.substring(i + 1);
									}
								}

								String namespacePrefix = alias
										+ NamespaceReference.NAMESPACE_SEPARATOR;
								String replacementString = proposal
										.getReplacementString();

								String existingNamespacePrefix = readNamespacePrefix(
										sourceModule, document, offset,
										ProjectOptions
												.getPhpVersion(editorElement));

								// Add alias to the replacement string:
								if (!usePartName
										.equals(existingNamespacePrefix)) {
									replacementString = namespacePrefix
											+ replacementString;
								}
								proposal.setReplacementString(replacementString);
							}

							if (edits != null) {
								int replacementOffset = proposal
										.getReplacementOffset()
										+ edits.getLength();
								offset += edits.getLength();
								proposal.setReplacementOffset(replacementOffset);
							}

						} catch (Exception e) {
							Logger.logException(e);
						}
					}
				}
			}
		}

		return offset;
	}

