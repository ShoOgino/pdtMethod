	/**
	 * Inserts USE statement into beginning of the document, or after the last
	 * USE statement.
	 * 
	 * @param document
	 * @param textViewer
	 * @param offset
	 * @return new offset
	 */
	public int inject(IDocument document, ITextViewer textViewer, int offset) {
		IModelElement modelElement = proposal.getModelElement();

		if (modelElement instanceof FakeConstructor) {
			FakeConstructor fc = (FakeConstructor) modelElement;
			if (fc.getParent() instanceof AliasType) {
				return offset;
			}

		} else if (modelElement instanceof AliasType || modelElement instanceof AliasMethod
				|| modelElement instanceof AliasField) {
			return offset;
		}
		try {
			if (modelElement.getElementType() == IModelElement.METHOD && (((IMethod) modelElement).isConstructor())) {
				modelElement = modelElement.getAncestor(IModelElement.TYPE);
			}
		} catch (ModelException e) {
			Logger.logException(e);
		}
		if (modelElement == null)
			return offset;
		if (proposal instanceof IPHPCompletionProposalExtension) {
			IPHPCompletionProposalExtension phpCompletionProposal = (IPHPCompletionProposalExtension) proposal;
			if (ProposalExtraInfo.isNotInsertUse(phpCompletionProposal.getExtraInfo())) {
				return offset;
			}
		}

		try {
			// qualified namespace should return offset directly
			if (proposal.getReplacementOffset() > 0 && document
					.getChar(proposal.getReplacementOffset() - 1) == NamespaceReference.NAMESPACE_SEPARATOR) {
				return offset;
			}
			if (modelElement.getElementType() == IModelElement.TYPE
					&& PHPFlags.isNamespace(((IType) modelElement).getFlags())) {
				if (offset > 0) {
					String prefix = document.get(proposal.getReplacementOffset(), proposal.getReplacementLength());
					String fullName = ((IType) modelElement).getElementName();
					if (fullName.startsWith(prefix) && prefix.indexOf(NamespaceReference.NAMESPACE_SEPARATOR) < 0) {
						// int
						ITextEditor textEditor = ((PHPStructuredTextViewer) textViewer).getTextEditor();
						if (textEditor instanceof PHPStructuredEditor) {
							IModelElement editorElement = ((PHPStructuredEditor) textEditor).getModelElement();
							if (editorElement != null) {
								ISourceModule sourceModule = ((ModelElement) editorElement).getSourceModule();

								String namespaceName = fullName;
								int nsSeparatorIndex = fullName.indexOf(NamespaceReference.NAMESPACE_SEPARATOR);
								if (nsSeparatorIndex > 0) {
									namespaceName = fullName.substring(0, nsSeparatorIndex);
								}
								String usePartName = namespaceName;
								boolean useAlias = !Platform.getPreferencesService().getBoolean(PHPCorePlugin.ID,
										PHPCoreConstants.CODEASSIST_INSERT_FULL_QUALIFIED_NAME_FOR_NAMESPACE, true,
										null);

								ModuleDeclaration moduleDeclaration = SourceParserUtil
										.getModuleDeclaration(sourceModule);

								ASTParser parser = ASTParser.newParser(sourceModule);
								parser.setSource(document.get().toCharArray());
								Program program = parser.createAST(null);

								// Don't insert USE statement for current
								// namespace.
								// "program != null" is a workaround for bug
								// 465687.
								if (program != null && isSameNamespace(namespaceName, program, sourceModule, offset)) {
									return offset;
								}

								// find existing use statement:
								UsePart usePart = ASTUtils.findUseStatementByNamespace(moduleDeclaration, usePartName,
										offset);

								List<String> importedTypeName = getImportedTypeName(moduleDeclaration, offset);
								String typeName = namespaceName;

								// if the class/namespace has not been imported
								// add use statement
								if (program != null && !importedTypeName.contains(typeName)) {

									program.recordModifications();
									AST ast = program.getAST();
									NamespaceName newNamespaceName = ast
											.newNamespaceName(createIdentifiers(ast, usePartName), false, false);
									UseStatementPart newUseStatementPart = ast.newUseStatementPart(newNamespaceName,
											null);
									UseStatement newUseStatement = ast.newUseStatement(
											Arrays.asList(new UseStatementPart[] { newUseStatementPart }),
											UseStatement.T_NONE);

									NamespaceDeclaration currentNamespace = getCurrentNamespace(program, sourceModule,
											offset - 1);
									List<Statement> statements = program.statements();
									if (currentNamespace != null) {
										// insert in the beginning of the
										// current namespace:
										statements = currentNamespace.getBody().statements();
									}

									int index = getLastUsestatementIndex(statements, offset);
									addUseStatement(index, newUseStatement, statements, document);
									ast.setInsertUseStatement(true);

									TextEdit edits = program.rewrite(document, createOptions(modelElement));
									// workaround for bug 400976:
									// when current offset is in a php section
									// that only contains AstErrors, the use
									// statements will be added at the beginning
									// of the previous php section.
									// If luckily there is a previous php
									// section in the document, we're good,
									// otherwise we have to create one now at
									// the beginning of the document.
									// Text edits that will be correctly
									// inserted in an existing php section have
									// all their offset > 0, so looking for text
									// edits having all their offset = 0 (and
									// their length = 0) should be enough to
									// detect use statements that will be
									// wrongly inserted outside any existing php
									// section...
									if (new Region(0, 0).equals(edits.getRegion())) {
										String lineDelim = TextUtilities.getDefaultLineDelimiter(document);
										MultiTextEdit newEdits = new MultiTextEdit();
										newEdits.addChild(new InsertEdit(0, "<?php"));
										newEdits.addChild(new InsertEdit(0, lineDelim));
										for (TextEdit edit : edits.getChildren()) {
											// we have to copy the text edit to
											// reset its parent
											newEdits.addChild(edit.copy());
										}
										newEdits.addChild(new InsertEdit(0, "?>"));
										newEdits.addChild(new InsertEdit(0, lineDelim));
										edits = newEdits;
									} else if (index == 0 && edits.getChildrenSize() == 2) {
										// workaround for bug 435134
										addBlankLineEdit(edits, document);
									}

									edits.apply(document);
									ast.setInsertUseStatement(false);

									int replacementOffset = proposal.getReplacementOffset() + edits.getLength();
									offset += edits.getLength();
									proposal.setReplacementOffset(replacementOffset);
								} else if (!useAlias && (usePart == null
										|| !usePartName.equals(usePart.getNamespace().getFullyQualifiedName()))) {
									// if the type name already exists, use
									// fully
									// qualified name to replace
									proposal.setReplacementString(NamespaceReference.NAMESPACE_SEPARATOR + fullName);
								}
							}
						}

					}
					return offset;
				}
				return offset;
			} else
			// class members should return offset directly
			if (modelElement.getElementType() != IModelElement.TYPE && !(modelElement instanceof FakeConstructor)) {
				IModelElement type = modelElement.getAncestor(IModelElement.TYPE);
				if (type != null && !PHPFlags.isNamespace(((IType) type).getFlags())) {
					return offset;
				}
			}
		} catch (Exception e) {
			PHPUiPlugin.log(e);
		}

		return addUseStatement(modelElement, document, textViewer, offset);
	}

