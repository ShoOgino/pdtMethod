	/**
	 * Inserts USE statement into beginning of the document, or after the last
	 * USE statement.
	 * 
	 * @param document
	 * @param textViewer
	 * @param offset
	 * @return new offset
	 */
	public int inject(IDocument document, ITextViewer textViewer, int offset) {
		IModelElement modelElement = proposal.getModelElement();

		try {
			if (modelElement.getElementType() == IModelElement.TYPE
					&& PHPFlags.isNamespace(((IType) modelElement).getFlags())) {
				return offset;
			}
		} catch (ModelException e) {
			Logger.logException(e);
		}

		// add use statement if needed:
		IType namespace = PHPModelUtils.getCurrentNamespace(modelElement);
		if (namespace != null) {

			// find source module of the current editor:
			if (textViewer instanceof PHPStructuredTextViewer) {
				ITextEditor textEditor = ((PHPStructuredTextViewer) textViewer)
						.getTextEditor();
				if (textEditor instanceof PHPStructuredEditor) {
					IModelElement editorElement = ((PHPStructuredEditor) textEditor)
							.getModelElement();
					if (editorElement != null) {
						ISourceModule sourceModule = ((ModelElement) editorElement)
								.getSourceModule();

						try {
							String namespaceName = namespace.getElementName();
							ModuleDeclaration moduleDeclaration = SourceParserUtil
									.getModuleDeclaration(sourceModule);
							TextEdit edits = null;

							// find existing use statement:
							UsePart usePart = ASTUtils
									.findUseStatementByNamespace(
											moduleDeclaration, namespaceName,
											offset);
							if (usePart == null) {
								ASTParser parser = ASTParser
										.newParser(sourceModule);
								parser.setSource(document.get().toCharArray());

								Program program = parser.createAST(null);
								program.recordModifications();

								AST ast = program.getAST();

								NamespaceName newNamespaceName = ast
										.newNamespaceName(createIdentifiers(
												ast, namespaceName), false,
												false);
								UseStatementPart newUseStatementPart = ast
										.newUseStatementPart(newNamespaceName,
												null);
								org.eclipse.php.internal.core.ast.nodes.UseStatement newUseStatement = ast
										.newUseStatement(Arrays
												.asList(new UseStatementPart[] { newUseStatementPart }));

								NamespaceDeclaration currentNamespace = getCurrentNamespace(
										program, offset - 1);
								if (currentNamespace != null) {
									if (namespaceName
											.equals(getNamespaceName(currentNamespace))) {
										// don't insert USE statement for
										// current namespace
										return offset;
									}
									// insert in the beginning of the current
									// namespace:
									currentNamespace.getBody().statements()
											.add(0, newUseStatement);
								} else {
									// insert in the beginning of the document:
									program.statements()
											.add(0, newUseStatement);
								}
								edits = program.rewrite(document, null);
								edits.apply(document);
							}

							if (needsAliasPrepend(modelElement)) {
								// update replacement string: add namespace
								// alias prefix
								String alias;
								if (usePart != null
										&& usePart.getAlias() != null
										&& usePart.getAlias().getName() != null) {
									alias = usePart.getAlias().getName();
								} else {
									int i = namespaceName
											.lastIndexOf(NamespaceReference.NAMESPACE_SEPARATOR);
									alias = namespaceName;
									if (i != -1) {
										alias = namespaceName.substring(i + 1);
									}
								}

								String namespacePrefix = alias
										+ NamespaceReference.NAMESPACE_SEPARATOR;
								String replacementString = proposal
										.getReplacementString();

								String existingNamespacePrefix = readNamespacePrefix(
										sourceModule, document, offset,
										ProjectOptions
												.getPhpVersion(editorElement));

								// Add alias to the replacement string:
								if (!namespaceName
										.equals(existingNamespacePrefix)) {
									replacementString = namespacePrefix
											+ replacementString;
								}
								proposal
										.setReplacementString(replacementString);
							}

							if (edits != null) {
								int replacementOffset = proposal
										.getReplacementOffset()
										+ edits.getLength();
								offset += edits.getLength();
								proposal
										.setReplacementOffset(replacementOffset);
							}

						} catch (Exception e) {
							Logger.logException(e);
						}
					}
				}
			}
		}

		return offset;
	}

