		/**
		 * Creates the variable comment for given type
		 */
		private TextEdit createTextEditForType(IDocument document, IModelElement selectedType)
				throws BadLocationException, ModelException {

			String typeName = selectedType.getElementName();
			IModelElement parent = selectedType.getParent();
			if (parent instanceof IMember && PHPFlags.isNamespace(((IMember) parent).getFlags())) {
				typeName = parent.getElementName() + '\\' + typeName;
			}

			typeName = typeName.trim();
			if (typeName.length() > 0) {
				typeName = '\\' + typeName;
			}

			int varOffset = variableNode.getStart();
			int varLength = variableNode.getLength();
			String varName = document.get(varOffset, varLength);

			// inserts type hint
			int selectionStartLine = document.getLineOfOffset(varOffset);
			int selectionLineOffset = document.getLineOffset(selectionStartLine);
			IRegion selectionLineInfo = document.getLineInformation(selectionStartLine);
			int selectionLineLength = selectionLineInfo.getLength();
			String selectionLineText = document.get(selectionLineOffset, selectionLineLength);

			Matcher nonSpaceMatch = noneSpacePattern.matcher(selectionLineText);
			StringBuilder varTypeHint = new StringBuilder(); // $NON-NLS-1$
			if (nonSpaceMatch.find()) {
				varTypeHint.append(selectionLineText.substring(0, nonSpaceMatch.start()));
			}

			varTypeHint.append("/** @var "); //$NON-NLS-1$
			varTypeHint.append(typeName);
			varTypeHint.append(" "); //$NON-NLS-1$
			varTypeHint.append(varName);
			varTypeHint.append(" */"); //$NON-NLS-1$
			varTypeHint.append(TextUtilities.getDefaultLineDelimiter(document));

			return new InsertEdit(selectionLineOffset, varTypeHint.toString());
		}

