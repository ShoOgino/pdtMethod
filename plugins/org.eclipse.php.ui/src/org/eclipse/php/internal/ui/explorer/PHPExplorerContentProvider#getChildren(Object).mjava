	public Object[] getChildren(Object parentElement) {

		// include path node
		if (parentElement instanceof IncludePath) {
			final Object entry = ((IncludePath) parentElement).getEntry();
			if (entry instanceof IBuildpathEntry) {
				return getBuildPathEntryChildren(parentElement, entry);
			}
		}

		// JavaScript nodes
		if (parentElement instanceof ProjectLibraryRoot) {
			return ((ProjectLibraryRoot) parentElement).getChildren();
		}
		if (parentElement instanceof PackageFragmentRootContainer) {
			return getContainerPackageFragmentRoots(
					(PackageFragmentRootContainer) parentElement, true);
		}

		try {
			// don't show local method variables:
			if (parentElement instanceof IMethod) {
				return NO_CHILDREN;
			}

			// aggregate php projects and non php projects (includes closed
			// ones)
			if (parentElement instanceof IScriptModel) {
				return StandardModelElementContentProvider.concatenate(
						getScriptProjects((IScriptModel) parentElement),
						getNonPhpProjects((IScriptModel) parentElement));
			}

			// Handles SourceModule and downwards as well as
			// ExternalProjectFragments (i.e language model)
			if (parentElement instanceof ISourceModule
					|| !(parentElement instanceof IOpenable)
					|| parentElement instanceof ExternalProjectFragment) {
				if (parentElement instanceof IFolder) {
					return ((IFolder) parentElement).members();
				}
				return super.getChildren(parentElement);
			}

			if (parentElement instanceof IOpenable) {
				if (parentElement instanceof ExternalScriptFolder) {
					return super.getChildren(parentElement);
				}

				IResource resource = ((IOpenable) parentElement).getResource();
				if (resource instanceof IContainer) {

					// contributed by Toshihiro Izumi
					if (!resource.isAccessible()) {
						return NO_CHILDREN;
					}

					ArrayList<Object> returnChlidren = new ArrayList<Object>();

					boolean groupByNamespace = PHPUiPlugin
							.getDefault()
							.getPreferenceStore()
							.getBoolean(
									PreferenceConstants.EXPLORER_GROUP_BY_NAMESPACES);
					if (groupByNamespace
							&& parentElement instanceof IScriptProject
							&& supportsNamespaces((IScriptProject) parentElement)) {
						returnChlidren.add(new GlobalNamespace(
								(IScriptProject) parentElement));
						returnChlidren
								.addAll(Arrays
										.asList(getAllNamespaces((IScriptProject) parentElement)));
					} else {
						IResource[] resChildren = ((IContainer) resource)
								.members();
						for (IResource resource2 : resChildren) {
							IModelElement modelElement = DLTKCore
									.create(resource2);
							if (modelElement != null) {
								returnChlidren.add(modelElement);
							} else {
								returnChlidren.add(resource2);
							}
						}
					}

					// Adding External libraries to the treeview :
					if (parentElement instanceof IScriptProject) {
						IScriptProject scriptProject = (IScriptProject) parentElement;
						IProject project = scriptProject.getProject();

						// Add include path node
						IncludePath[] includePaths = IncludePathManager
								.getInstance().getIncludePaths(project);
						IncludePathContainer incPathContainer = new IncludePathContainer(
								scriptProject, includePaths);
						returnChlidren.add(incPathContainer);

						// Add the language library
						Object[] projectChildren = getProjectFragments(scriptProject);
						for (Object modelElement : projectChildren) {
							if (modelElement instanceof BuildPathContainer
									&& ((BuildPathContainer) modelElement)
											.getBuildpathEntry()
											.getPath()
											.equals(
													LanguageModelInitializer.LANGUAGE_CONTAINER_PATH)) {
								returnChlidren.add(modelElement);
							}
						}

						boolean hasJsNature = JsNature.hasNature(project);
						if (hasJsNature) {
							ProjectLibraryRoot projectLibs = new ProjectLibraryRoot(
									JavaScriptCore.create(project));
							returnChlidren.add(projectLibs);
						}
					}
					return returnChlidren.toArray();
				}
			}
		} catch (CoreException e) {
			Logger.logException(e);
		}

		return NO_CHILDREN;
	}

