	@Override
	public Object[] getChildren(Object parentElement) {
		if (parentElement instanceof IPath) {
			IPath path = (IPath) parentElement;
			IWorkspace workspace = ResourcesPlugin.getWorkspace();
			IResource iesource = workspace.getRoot().findMember(path);
			if (iesource instanceof IProject) {
				IProject project = (IProject) iesource;
				IScriptProject sp = DLTKCore.create(project);
				if (sp instanceof ScriptProject) {
					ScriptProject scriptProject = (ScriptProject) sp;
					try {
						return scriptProject.getAllProjectFragments();
					} catch (ModelException e) {
						Logger.logException(e);
					}
				}
			}
		}
		// include path node
		if (parentElement instanceof IncludePath) {
			final Object entry = ((IncludePath) parentElement).getEntry();
			if (entry instanceof IBuildpathEntry) {
				int entryKind = ((IBuildpathEntry) entry).getEntryKind();
				if (entryKind == IBuildpathEntry.BPE_CONTAINER || entryKind == IBuildpathEntry.BPE_LIBRARY) {
					return getBuildPathEntryChildren(parentElement, entry);
				}
			}
		}

		// JavaScript nodes
		if (parentElement instanceof ProjectLibraryRoot) {
			return ((ProjectLibraryRoot) parentElement).getChildren();
		}
		if (parentElement instanceof PackageFragmentRootContainer) {
			return getContainerPackageFragmentRoots((PackageFragmentRootContainer) parentElement, true);
		}

		if (parentElement instanceof org.eclipse.wst.jsdt.core.IJavaScriptElement) {
			return jsContentProvider.getChildren(parentElement);
		}

		try {
			// don't show local method variables:
			if (parentElement instanceof IMethod) {
				IMethod method = (IMethod) parentElement;
				return OutlineFilter.filterChildrenForOutline(method, method.getChildren());
			}

			// aggregate php projects and non php projects (includes closed
			// ones)
			if (parentElement instanceof IScriptModel) {
				return StandardModelElementContentProvider.concatenate(getScriptProjects((IScriptModel) parentElement),
						getNonPHPProjects((IScriptModel) parentElement));
			}

			// Handles SourceModule and downwards as well as
			// ExternalProjectFragments (i.e language model)
			if (parentElement instanceof ISourceModule || !(parentElement instanceof IOpenable)
					|| parentElement instanceof ExternalProjectFragment) {
				if (parentElement instanceof IFolder) {
					IResource[] members = ((IFolder) parentElement).members();
					ArrayList<Object> returnChlidren = new ArrayList<>();
					for (IResource resource2 : members) {
						IModelElement modelElement = DLTKCore.create(resource2);
						if (modelElement != null && isSourceFolder(modelElement)) {
							returnChlidren.add(modelElement);
						} else {
							returnChlidren.add(resource2);
						}
					}
					return (Object[]) returnChlidren.toArray(new Object[returnChlidren.size()]);
				}

				for (ITreeContentProvider provider : TreeContentProviderRegistry.getInstance().getTreeProviders()) {

					Object[] providerChildren = provider.getChildren(parentElement);
					if (providerChildren != null) {
						return providerChildren;
					}
				}

				return super.getChildren(parentElement);
			}

			if (parentElement instanceof IOpenable) {
				if (parentElement instanceof ExternalScriptFolder) {
					return super.getChildren(parentElement);
				}

				IResource resource = ((IOpenable) parentElement).getResource();
				if (resource instanceof IContainer) {

					// contributed by Toshihiro Izumi
					if (!resource.isAccessible()) {
						return NO_CHILDREN;
					}

					ArrayList<Object> returnChildren = new ArrayList<>();

					boolean groupByNamespace = PHPUiPlugin.getDefault().getPreferenceStore()
							.getBoolean(PreferenceConstants.EXPLORER_GROUP_BY_NAMESPACES);
					if (groupByNamespace && parentElement instanceof IModelElement
							&& isSourceFolder(DLTKCore.create(resource))
							&& supportsNamespaces(((IOpenable) parentElement).getScriptProject())) {
						if (hasGlobals((IModelElement) parentElement)) {
							returnChildren.add(new GlobalNamespace((IModelElement) parentElement));
						}

						returnChildren.addAll(collectNamespaces(DLTKCore.create(resource)));

						IResource[] resChildren = ((IContainer) resource).members();
						for (IResource resource2 : resChildren) {
							IModelElement modelElement = DLTKCore.create(resource2);
							if (modelElement == null || !isInSourceFolder(modelElement)) {
								returnChildren.add(resource2);
							}
						}
					} else {
						IResource[] resChildren = ((IContainer) resource).members();
						for (IResource resource2 : resChildren) {
							IModelElement modelElement = DLTKCore.create(resource2);
							if (modelElement != null && isInSourceFolder(modelElement)) {
								returnChildren.add(modelElement);
							} else {
								returnChildren.add(resource2);
							}
						}
					}

					// Adding External libraries to the treeview :
					if (parentElement instanceof IScriptProject) {
						IScriptProject scriptProject = (IScriptProject) parentElement;
						IProject project = scriptProject.getProject();

						boolean hasJsNature = JsNature.hasNature(project);
						if (hasJsNature) {
							ProjectLibraryRoot projectLibs = new ProjectLibraryRoot(JavaScriptCore.create(project));
							returnChildren.add(projectLibs);
						}

						returnChildren.addAll(getScriptProjectContent(scriptProject));
					}
					return returnChildren.toArray();
				}
			}
		} catch (CoreException e) {
			Logger.logException(e);
		}

		if (parentElement instanceof ArchiveProjectFragment || parentElement instanceof ArchiveFolder) {
			return super.getChildren(parentElement);
		}

		return NO_CHILDREN;
	}

