	private void initializePatternAndMatchKind(String pattern) {
		int length = pattern.length();
		if (length == 0) {
			fMatchKind = SearchPattern.R_EXACT_MATCH;
			fPattern = pattern;
			return;
		}
		char last = pattern.charAt(length - 1);

		if (pattern.indexOf('*') != -1 || pattern.indexOf('?') != -1) {
			fMatchKind = SearchPattern.R_PATTERN_MATCH;
			switch (last) {
			case END_SYMBOL:
			case BLANK:
				fPattern = pattern.substring(0, length - 1);
				break;
			case ANY_STRING:
				fPattern = pattern;
				break;
			default:
				fPattern = pattern + ANY_STRING;
			}
			return;
		}

		if (last == END_SYMBOL || last == BLANK) {
			fPattern = pattern.substring(0, length - 1);
			if (SearchPattern.validateMatchRule(fPattern,
					SearchPattern.R_CAMELCASE_SAME_PART_COUNT_MATCH) == SearchPattern.R_CAMELCASE_SAME_PART_COUNT_MATCH) {
				fMatchKind = SearchPattern.R_CAMELCASE_SAME_PART_COUNT_MATCH;
			} else {
				fMatchKind = SearchPattern.R_EXACT_MATCH;
			}
			return;
		}

		if (SearchUtils.isCamelCasePattern(pattern)) {
			fMatchKind = SearchPattern.R_CAMELCASE_MATCH;
			fPattern = pattern;
			return;
		}

		fMatchKind = SearchPattern.R_PREFIX_MATCH;
		fPattern = pattern;
	}

