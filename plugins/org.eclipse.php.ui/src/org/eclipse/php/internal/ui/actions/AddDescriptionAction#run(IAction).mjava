	@Override
	public void run(IAction action) {
		final IModelElement[] modelElement = getModelElement();
		if (modelElement == null) {
			return;
		}

		// Sorting the PHP code elements array by "first-line" position.
		// this will enable "right" order of iteration

		Arrays.sort(modelElement, new modelElementComparatorImplementation());

		// iterating the functions that need to add 'PHP Doc' bottoms-up - to
		// eliminate mutual interference
		for (int i = modelElement.length - 1; i >= 0; i--) {

			IModelElement modelElem = modelElement[i];
			if (null == modelElem) {
				continue; // if we got to null pointer, skipping it
			}

			IEditorInput input;
			try {
				input = org.eclipse.php.internal.ui.util.EditorUtility.getEditorInput(modelElem);
			} catch (ModelException e) {
				Logger.logException(e);
				return;
			}

			IWorkbenchPage page = PHPUiPlugin.getActivePage();
			IEditorPart editorPart;
			try {
				editorPart = IDE.openEditor(page, input, PHPUiConstants.PHP_EDITOR_ID);
			} catch (PartInitException e) {
				Logger.logException(e);
				return;
			}

			if (editorPart instanceof ITextEditor) {
				ITextEditor textEditor = (ITextEditor) editorPart;
				IEditorInput editorInput = editorPart.getEditorInput();
				IDocument document = textEditor.getDocumentProvider().getDocument(editorInput);
				this.lineDelim = TextUtilities.getDefaultLineDelimiter(document);

				String docBlockText = handleElement(textEditor, modelElem, document);
				if (docBlockText == null) {
					return;
				}

				EditorUtility.revealInEditor(textEditor, startPosition, docBlock.length());
			}
		}
	}

