	public void run(IAction action) {
		final IModelElement[] modelElement = getModelElement();
		if (modelElement == null) {
			return;
		}

		// Sorting the PHP code elements array by "first-line" position.
		// this will enable "right" order of iteration

		Arrays.sort(modelElement, new modelElementComparatorImplementation());

		// iterating the functions that need to add 'PHP Doc' bottoms-up - to eliminate mutual interference
		for (int i = modelElement.length - 1; i >= 0; i--) {
			IModelElement modelElem = modelElement[i];
			if (null == modelElem) {
				continue; // if we got to null pointer, skipping it
			}
			IEditorPart editorPart;
			IEditorInput input = EditorUtility.getEditorInput(modelElem);
			IWorkbenchPage page = PHPUiPlugin.getActivePage();
			try {
				editorPart = IDE.openEditor(page, input, PHPUiConstants.PHP_EDITOR_ID);
			} catch (PartInitException e) {
				Logger.logException(e);
				return;
			}
			ITextEditor textEditor = EditorUtility.getPHPStructuredEditor(editorPart);
			IEditorInput editorInput = editorPart.getEditorInput();
			IDocument document = textEditor.getDocumentProvider().getDocument(editorInput);
			
			String docBlockText = handleElement(modelElem, document);
			if (docBlockText == null) {
				assert false;
				return;
			}
			
			EditorUtility.revealInEditor(textEditor, startPosition, docBlock.length());
		}
	}

