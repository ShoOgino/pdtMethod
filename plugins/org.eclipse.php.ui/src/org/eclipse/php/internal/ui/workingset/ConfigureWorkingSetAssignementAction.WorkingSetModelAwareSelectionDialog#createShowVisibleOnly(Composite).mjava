		private void createShowVisibleOnly(Composite parent) {
			ScriptExplorerPart activePart = getActivePackageExplorer();
			if (fWorkingSetModel == null
					|| activePart != null && activePart.getRootMode() == ScriptExplorerPart.PROJECTS_AS_ROOTS) {
				return;
			}

			final Button showVisibleOnly = new Button(parent, SWT.CHECK);
			showVisibleOnly.setText(WorkingSetMessages.ConfigureWorkingSetAssignementAction_OnlyShowVisible_check);
			showVisibleOnly.setSelection(fShowVisibleOnly);
			showVisibleOnly.setLayoutData(new GridData(SWT.LEAD, SWT.CENTER, true, false));
			showVisibleOnly.addSelectionListener(new SelectionAdapter() {
				@Override
				public void widgetSelected(SelectionEvent e) {
					fShowVisibleOnly = showVisibleOnly.getSelection();

					fTableViewer.refresh();

					fTableViewer.setCheckedElements(fModel.getChecked());
					fTableViewer.setGrayedElements(fModel.getGrayed());
				}
			});

			Link ppwsLink = new Link(parent, SWT.NONE);
			ppwsLink.setText(WorkingSetMessages.ConfigureWorkingSetAssignementAction_OnlyShowVisible_link);
			ppwsLink.setLayoutData(new GridData(SWT.LEAD, SWT.CENTER, true, false));
			ppwsLink.addSelectionListener(new SelectionAdapter() {

				@Override
				public void widgetSelected(SelectionEvent e) {

					List<IWorkingSet> workingSets = new ArrayList<>(
							Arrays.asList(fWorkingSetModel.getAllWorkingSets()));
					List<IWorkingSet> activeWorkingSets = new ArrayList<>(
							Arrays.asList(fWorkingSetModel.getActiveWorkingSets()));
					WorkingSetConfigurationDialog dialog = new WorkingSetConfigurationDialog(getShell(),
							workingSets.toArray(new IWorkingSet[workingSets.size()]),
							activeWorkingSets.toArray(new IWorkingSet[activeWorkingSets.size()]));
					dialog.setSelection(fWorkingSetModel.getActiveWorkingSets());
					if (dialog.open() == IDialogConstants.OK_ID) {
						fWorkingSetModel.setActiveWorkingSets(dialog.getSelection());
					}

					recalculateCheckedState(dialog.getNewlyAddedWorkingSets());
				}
			});
		}

