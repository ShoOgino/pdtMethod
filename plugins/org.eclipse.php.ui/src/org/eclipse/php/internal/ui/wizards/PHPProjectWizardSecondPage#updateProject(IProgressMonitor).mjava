	protected void updateProject(IProgressMonitor monitor) throws CoreException, InterruptedException {

		fCurrProject = fFirstPage.getProjectHandle();
		fCurrProjectLocation = getProjectLocationURI();

		if (monitor == null) {
			monitor = new NullProgressMonitor();
		}
		try {
			monitor.beginTask(NewWizardMessages.ScriptProjectWizardSecondPage_operation_initialize, 70);
			if (monitor.isCanceled()) {
				throw new OperationCanceledException();
			}

			URI realLocation = fCurrProjectLocation;
			if (fCurrProjectLocation == null) { // inside workspace
				try {
					URI rootLocation = ResourcesPlugin.getWorkspace().getRoot().getLocationURI();
					realLocation = new URI(rootLocation.getScheme(), null, Path.fromPortableString(rootLocation.getPath()).append(fCurrProject.getName()).toString(), null);
				} catch (URISyntaxException e) {
					Assert.isTrue(false, "Can't happen"); //$NON-NLS-1$
				}
			}

			rememberExistingFiles(realLocation);

			createProject(fCurrProject, fCurrProjectLocation, new SubProgressMonitor(monitor, 20));

			IBuildpathEntry[] entries = null;
			IncludePath[] includepathEntries = null;

			if (fFirstPage.getDetect()) {
				if (!fCurrProject.getFile(FILENAME_BUILDPATH).exists()) {

					IDLTKLanguageToolkit toolkit = DLTKLanguageManager.getLanguageToolkit(getScriptNature());
					final BuildpathDetector detector = createBuildpathDetector(monitor, toolkit);
					entries = detector.getBuildpath();

				} else {
					monitor.worked(20);
				}
			} else if (fFirstPage.isSrc()) {
				IPreferenceStore store = getPreferenceStore();
				IPath srcPath = new Path(store.getString(PreferenceConstants.SRCBIN_SRCNAME));
				IPath binPath = new Path(store.getString(PreferenceConstants.SRCBIN_BINNAME));

				if (srcPath.segmentCount() > 0) {
					IFolder folder = fCurrProject.getFolder(srcPath);
					CoreUtility.createFolder(folder, true, true, new SubProgressMonitor(monitor, 10));
				} else {
					monitor.worked(10);
				}

				if (binPath.segmentCount() > 0) {
					IFolder folder = fCurrProject.getFolder(binPath);
					CoreUtility.createFolder(folder, true, true, new SubProgressMonitor(monitor, 10));
				} else {
					monitor.worked(10);
				}

				final IPath projectPath = fCurrProject.getFullPath();

				// configure the buildpath entries, including the default
				// InterpreterEnvironment library.
				List cpEntries = new ArrayList();
				cpEntries.add(DLTKCore.newSourceEntry(projectPath.append(srcPath)));

				entries = (IBuildpathEntry[]) cpEntries.toArray(new IBuildpathEntry[cpEntries.size()]);
				includepathEntries = new IncludePath[] { new IncludePath(fCurrProject.getFolder(srcPath), fCurrProject) };
			} else {
				IPath projectPath = fCurrProject.getFullPath();
				List cpEntries = new ArrayList();
				cpEntries.add(DLTKCore.newSourceEntry(projectPath));

				entries = (IBuildpathEntry[]) cpEntries.toArray(new IBuildpathEntry[cpEntries.size()]);
				includepathEntries = new IncludePath[] { new IncludePath(fCurrProject, fCurrProject) };

				monitor.worked(20);
			}
			if (monitor.isCanceled()) {
				throw new OperationCanceledException();
			}
			
			init(DLTKCore.create(fCurrProject), entries, false);
			configureScriptProject(new SubProgressMonitor(monitor, 30));		

			//Adding natures other then PHP which is addedas default
			if (fFirstPage.fJavaScriptSupportGroup.shouldSupportJavaScript()) {
				JsWebNature.addJsNature(fCurrProject, new SubProgressMonitor(monitor, 1));
			}

			//adding build paths:
			getScriptProject().setRawBuildpath(entries, new NullProgressMonitor());
			//adding include paths:
			IncludePathManager.getInstance().setIncludePath(fCurrProject, includepathEntries);

		} finally {
			monitor.done();
		}
	}

