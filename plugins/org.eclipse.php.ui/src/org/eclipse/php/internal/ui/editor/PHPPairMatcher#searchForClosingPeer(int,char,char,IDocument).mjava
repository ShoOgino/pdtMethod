	private int searchForClosingPeer(int offset, char openingPeer, char closingPeer, IDocument document)
			throws BadLocationException {
		boolean useGenericsHeuristic = openingPeer == '<';
		if (useGenericsHeuristic && !fHighlightAngularBrackets)
			return -1;
		PHPHeuristicScanner scanner = PHPHeuristicScanner.createHeuristicScanner(document, offset, false);
		if (useGenericsHeuristic && !isTypeParameterBracket(offset, document, scanner))
			return -1;

		int closedAt = scanner.findClosingPeer(offset + 1, openingPeer, closingPeer);

		if (closedAt != PHPHeuristicScanner.NOT_FOUND) {
			// bug 493134 , detect mismatch, like call(function() {});
			for (int i = 0; i < fPairs.length; i += 2) {
				if (fPairs[i] == openingPeer) {
					continue;
				}
				int depth = 0;
				int pos = offset + 1;
				char[] pair = new char[] { fPairs[i], fPairs[i + 1] };
				do {
					int tmp = scanner.scanForward(pos, closedAt, pair);
					if (tmp == PHPHeuristicScanner.NOT_FOUND) {
						break;
					}
					if (document.getChar(tmp) == pair[0]) {
						depth++;
					} else {
						depth--;
					}
					pos = tmp + 1;
				} while (pos < closedAt);
				if (depth != 0) {
					return PHPHeuristicScanner.NOT_FOUND;
				}

			}
		}

		return closedAt;
	}

