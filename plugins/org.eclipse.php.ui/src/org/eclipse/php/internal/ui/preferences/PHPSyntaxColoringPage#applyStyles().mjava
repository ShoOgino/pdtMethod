	/**
	 * Color the text in the sample area according to the current preferences
	 */
	void applyStyles() {
		if (fText == null || fText.isDisposed())
			return;

		fStyleProvider.loadColors();

		IStructuredDocumentRegion documentRegion = fDocument.getFirstStructuredDocumentRegion();
		while (documentRegion != null) {
			final Collection<StyleRange> holdResults = new ArrayList<>();
			fStyleProvider.prepareTextRegions(documentRegion, 0, documentRegion.getEnd(), holdResults);

			for (Iterator<StyleRange> iter = holdResults.iterator(); iter.hasNext();) {
				StyleRange element = iter.next();

				fText.setStyleRange(element);
			}

			for (Iterator<String> iterator = SemanticHighlightingManager.getInstance().getSemanticHighlightings()
					.keySet().iterator(); iterator.hasNext();) {
				String type = iterator.next();

				HighlightingStyle highlightingStyle = highlightingStyleMap.get(type);
				if (highlightingStyle.isEnabled()) {
					Position[] positions = highlightingPositionMap.get(type);
					if (positions != null) {
						for (int i = 0; i < positions.length; i++) {
							Position position = positions[i];
							StyleRange styleRange = createStyleRange(highlightingStyle.getTextAttribute(), position);
							fText.setStyleRange(styleRange);
						}
					}
				}

			}
			documentRegion = documentRegion.getNext();
		}
	}

