	/**
	 * Creates a new compilation unit AST.
	 * 
	 * @param input
	 *            the Java element for which to create the AST
	 * @param progressMonitor
	 *            the progress monitor
	 * @return AST
	 */
	private static Program createAST(final ISourceModule input, final IProgressMonitor progressMonitor) {
		if (!hasSource(input)) {
			return null;
		}

		if (progressMonitor != null && progressMonitor.isCanceled()) {
			return null;
		}

		final ASTParser parser = ASTParser.newParser(SHARED_AST_LEVEL, input);
		if (parser == null) {
			return null;
		}

		if (progressMonitor != null && progressMonitor.isCanceled()) {
			return null;
		}

		final Program root[] = new Program[1];

		SafeRunner.run(new ISafeRunnable() {
			public void run() {
				try {
					if (progressMonitor != null && progressMonitor.isCanceled()) {
						return;
					}
					if (DEBUG) {
						System.err.println(
								getThreadName() + " - " + DEBUG_PREFIX + "creating AST for: " + input.getElementName()); //$NON-NLS-1$ //$NON-NLS-2$
					}
					root[0] = (Program) parser.createAST(progressMonitor);

					// mark as unmodifiable
					ASTNodes.setFlagsToAST(root[0], ASTNode.PROTECT);
				} catch (OperationCanceledException ex) {
					return;
				} catch (Exception e) {
					PHPUiPlugin.log(e);
					return;
				}
			}

			public void handleException(Throwable ex) {
				IStatus status = new Status(IStatus.ERROR, PHPUiPlugin.ID, IStatus.OK,
						"Error in PDT UI during AST creation", ex); //$NON-NLS-1$
				PHPUiPlugin.log(status);
			}
		});
		return root[0];
	}

