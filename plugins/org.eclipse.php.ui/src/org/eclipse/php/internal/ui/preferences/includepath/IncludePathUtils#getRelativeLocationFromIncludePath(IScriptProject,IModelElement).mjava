	/**
	 * Resolves the model element entry include path relative to the project
	 * include path configuration.
	 * 
	 * @param project
	 * @param modelElement
	 * @return the resolved include path or {@link Path#EMPTY} if not found
	 */
	public static IPath getRelativeLocationFromIncludePath(
			IScriptProject project, IModelElement modelElement) {
		// workspace resource
		if (modelElement.getResource() != null) {
			return getRelativeLocationFromIncludePath(project, modelElement
					.getPath());
		}

		// built in element
		final IProjectFragment projectFragment = ScriptModelUtil
				.getProjectFragment(modelElement);
		final IScriptProject elementProject = modelElement.getScriptProject();
		if (elementProject != null && !elementProject.equals(project)
				&& !projectFragment.isExternal()) {
			// TODO add project dependency
			return Path.EMPTY;
		}

		// library element
		ISourceModule sourceModule = (ISourceModule) modelElement
				.getAncestor(IModelElement.SOURCE_MODULE);
		IScriptFolder folder = (IScriptFolder) modelElement
				.getAncestor(IModelElement.SCRIPT_FOLDER);
		if (sourceModule != null && folder != null) {
			String folderElementName = folder.getElementName();
			StringBuilder sb = new StringBuilder();
			if (folderElementName.length() != 0) {
				sb.append(folderElementName).append("/");
			}
			sb.append(sourceModule.getElementName());
			return new Path(sb.toString());
		}
		return Path.EMPTY;
	}

