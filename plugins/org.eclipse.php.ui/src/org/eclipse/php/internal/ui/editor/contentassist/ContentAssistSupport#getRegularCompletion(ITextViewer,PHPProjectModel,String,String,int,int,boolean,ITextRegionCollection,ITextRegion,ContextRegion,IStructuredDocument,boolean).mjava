	protected void getRegularCompletion(final ITextViewer viewer, final PHPProjectModel projectModel, final String fileName, String startsWith, final int offset, final int selectionLength, boolean explicit, final ITextRegionCollection sdRegion, final ITextRegion tRegion,
			final ContextRegion internalPhpRegion, IStructuredDocument document, boolean isStrict) {
		if (!explicit && startsWith.length() == 0)
			return;

		if (internalPhpRegion != null) {
			final String type = internalPhpRegion.getType();

			if (startsWith.startsWith("$")) {
				if (!explicit && !autoShowVariables)
					return;
				try {
					//if we're right next to a letter, in an implicit scenario, we don't want it to complete the variables name. 
					if (!explicit && startsWith.equals("$") && document.getLength() != offset && Character.isLetter(document.getChar(offset))) {
						return;
					}
				} catch (BadLocationException e) {
				}
				if (PHPPartitionTypes.isPHPQuotesState(type)) {
					final IStructuredDocument doc = document;
					try {
						final char charBefore = doc.get(offset - 2, 1).charAt(0);
						if (charBefore == '\\')
							return;
					} catch (final BadLocationException badLocationException) {
						Logger.logException(badLocationException);
					}
				}
				final PHPCodeContext context = getContext(projectModel, fileName, offset - startsWith.length());

				startsWith = startsWith.substring(1);
				CodeData[] variables = projectModel.getVariables(fileName, context, startsWith, showVariablesFromOtherFiles);
				completionProposalGroup = phpCompletionProposalGroup;
				completionProposalGroup.setData(offset, variables, startsWith, selectionLength, isStrict);
				return;
			}

			if (PHPPartitionTypes.isPHPQuotesState(type) || type.equals(PHPRegionTypes.PHP_HEREDOC_TAG) && sdRegion.getStartOffset(tRegion) + tRegion.getLength() <= offset) {
				completionProposalGroup = regularPHPCompletionProposalGroup;
				completionProposalGroup.setData(offset, null, startsWith, selectionLength, isStrict);
				return;
			}
		}

		CodeData[] functions = null;
		CodeData[] constants = null;
		CodeData[] keywords = null;

		if (explicit || autoShowFunctionsKeywordsConstants) {
			if (startsWith.length() == 0)
				functions = projectModel.getFunctions();
			else {
				functions = projectModel.getFunctions(startsWith);
			}

			if (!disableConstants)
				if (startsWith.length() == 0)
					constants = projectModel.getConstants();
				else {
					constants = projectModel.getConstants(startsWith, constantCaseSensitive);
				}

			keywords = projectModel.getKeywordData();
		}

		CodeData[] classes = null;
		if (showClassNamesInGlobalList)
			if (explicit || autoShowClassNames)
				classes = projectModel.getClasses();

		CodeData[] mergeData = null;
		if (shouldAddPHPTag(document, offset, startsWith))
			mergeData = phpTagDataArray;

		mergeData = ModelSupport.merge(keywords, mergeData);
		mergeData = ModelSupport.merge(classes, mergeData);
		mergeData = ModelSupport.merge(constants, mergeData);
		mergeData = ModelSupport.merge(functions, mergeData);

		completionProposalGroup = regularPHPCompletionProposalGroup;
		completionProposalGroup.setData(offset, mergeData, startsWith, selectionLength, isStrict);

		templateProposals = getTemplates(viewer, offset);

		return;
	}

