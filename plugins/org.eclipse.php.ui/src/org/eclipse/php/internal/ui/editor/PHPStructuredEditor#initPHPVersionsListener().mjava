	private void initPHPVersionsListener() {
		if (fPhpVersionListener != null) {
			return;
		}

		fPhpVersionListener = new IPreferencesPropagatorListener() {
			@Override
			public void preferencesEventOccured(PreferencesPropagatorEvent event) {
				// get the structured document and go over its regions
				// in case of PhpScriptRegion reparse the region text
				StructuredTextViewer textViewer = getTextViewer();
				if (textViewer instanceof PHPStructuredTextViewer) {
					DocumentModelUtils.reparseAndReconcileDocument((PHPStructuredTextViewer) textViewer, getProject());
				} else {
					IDocumentProvider documentProvider = getDocumentProvider();
					IDocument doc = documentProvider != null ? documentProvider.getDocument(getEditorInput()) : null;
					DocumentModelUtils.reparseDocument(doc, getProject());
				}
			}

			@Override
			public IProject getProject() {
				IScriptProject scriptProject = PHPStructuredEditor.this.getProject();
				if (scriptProject != null) {
					return scriptProject.getProject();
				}
				return null;
			}
		};

		PHPVersionChangedHandler.getInstance().addPHPVersionChangedListener(fPhpVersionListener);

		fPreferencesListener = new IPreferenceChangeListener() {

			@Override
			public void preferenceChange(PreferenceChangeEvent event) {
				String property = event.getKey();
				if (PHPCoreConstants.CODEASSIST_AUTOACTIVATION.equals(property)
						|| PHPCoreConstants.CODEASSIST_AUTOACTIVATION_DELAY.equals(property)
						|| PHPCoreConstants.CODEASSIST_AUTOINSERT.equals(property)) {
					ISourceViewer sourceViewer = getSourceViewer();
					if (sourceViewer != null) {
						PHPStructuredTextViewerConfiguration configuration = (PHPStructuredTextViewerConfiguration) getSourceViewerConfiguration();
						if (configuration != null) {
							StructuredContentAssistant contentAssistant = (StructuredContentAssistant) configuration
									.getPHPContentAssistant(sourceViewer);

							IPreferencesService preferencesService = Platform.getPreferencesService();
							contentAssistant.enableAutoActivation(preferencesService.getBoolean(PHPCorePlugin.ID,
									PHPCoreConstants.CODEASSIST_AUTOACTIVATION, false, null));
							contentAssistant.setAutoActivationDelay(preferencesService.getInt(PHPCorePlugin.ID,
									PHPCoreConstants.CODEASSIST_AUTOACTIVATION_DELAY, 0, null));
							contentAssistant.enableAutoInsert(preferencesService.getBoolean(PHPCorePlugin.ID,
									PHPCoreConstants.CODEASSIST_AUTOINSERT, false, null));
						}
					}
				}
			}
		};

		InstanceScope.INSTANCE.getNode(PHPCorePlugin.ID).addPreferenceChangeListener(fPreferencesListener);
	}

