	private void initPHPVersionsListener() {
		if (phpVersionListener != null) {
			return;
		}

		phpVersionListener = new IPreferencesPropagatorListener() {
			public void preferencesEventOccured(PreferencesPropagatorEvent event) {
				try {
					// get the structured document and go over its regions
					// in case of PhpScriptRegion reparse the region text
					IDocument doc = getDocumentProvider().getDocument(getEditorInput());
					if (doc instanceof IStructuredDocument) {
						IStructuredDocumentRegion[] sdRegions = ((IStructuredDocument) doc).getStructuredDocumentRegions();
						for (IStructuredDocumentRegion element : sdRegions) {
							Iterator regionsIt = element.getRegions().iterator();
							reparseRegion(doc, regionsIt, element.getStartOffset());
						}
						PHPStructuredTextViewer textViewer = (PHPStructuredTextViewer) getTextViewer();
						textViewer.reconcile();
					}
				} catch (BadLocationException e) {
				}
			}

			public IProject getProject() {
				IScriptProject scriptProject = PHPStructuredEditor.this.getProject();
				if (scriptProject != null) {
					return scriptProject.getProject();
				}
				return null;
			}
		};

		PhpVersionChangedHandler.getInstance().addPhpVersionChangedListener(phpVersionListener);

		propertyChangeListener = new IPropertyChangeListener() {
			public void propertyChange(org.eclipse.core.runtime.Preferences.PropertyChangeEvent event) {
				String property = event.getProperty();
				if (PHPCoreConstants.CODEASSIST_AUTOACTIVATION.equals(property) || PHPCoreConstants.CODEASSIST_AUTOACTIVATION_DELAY.equals(property) || PHPCoreConstants.CODEASSIST_AUTOINSERT.equals(property)) {
					ISourceViewer sourceViewer = getSourceViewer();
					if (sourceViewer != null) {
						PHPStructuredTextViewerConfiguration configuration = (PHPStructuredTextViewerConfiguration) getSourceViewerConfiguration();
						if (configuration != null) {
							StructuredContentAssistant contentAssistant = (StructuredContentAssistant) configuration.getPHPContentAssistant(sourceViewer);
							Preferences preferences = PHPCorePlugin.getDefault().getPluginPreferences();
							contentAssistant.enableAutoActivation(preferences.getBoolean(PHPCoreConstants.CODEASSIST_AUTOACTIVATION));
							contentAssistant.setAutoActivationDelay(preferences.getInt(PHPCoreConstants.CODEASSIST_AUTOACTIVATION_DELAY));
							contentAssistant.enableAutoInsert(preferences.getBoolean(PHPCoreConstants.CODEASSIST_AUTOINSERT));
						}
					}
				}
			}
		};

		PHPCorePlugin.getDefault().getPluginPreferences().addPropertyChangeListener(propertyChangeListener);
	}

