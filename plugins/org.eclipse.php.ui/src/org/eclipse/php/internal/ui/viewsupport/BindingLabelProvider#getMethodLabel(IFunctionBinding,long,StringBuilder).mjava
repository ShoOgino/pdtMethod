	private static void getMethodLabel(IFunctionBinding binding, long flags, StringBuilder buffer) {
		// return type
		// if ((flags & ScriptElementLabels.M_PRE_TYPE_PARAMETERS) != 0) {
		// if (binding.isGenericMethod()) {
		// ITypeBinding[] typeParameters= binding.getTypeParameters();
		// if (typeParameters.length > 0) {
		// getTypeParametersLabel(typeParameters, buffer);
		// buffer.append(' ');
		// }
		// }
		// }
		// return type
		IMethodBinding methodBinding = binding instanceof IMethodBinding ? (IMethodBinding) binding : null;
		ITypeBinding[] returnTypes = null;
		if ((flags & ScriptElementLabels.M_PRE_RETURNTYPE) != 0) {
			returnTypes = binding.getReturnType();
			for (ITypeBinding returnType : returnTypes) {
				if ((methodBinding == null || !methodBinding.isConstructor())) {
					getTypeLabel(returnType, (flags & ScriptElementLabels.T_TYPE_PARAMETERS), buffer);
					buffer.append('|');
				}
			}
		}

		// qualification
		if ((flags & ScriptElementLabels.M_FULLY_QUALIFIED) != 0 && methodBinding != null) {
			getTypeLabel(methodBinding.getDeclaringClass(),
					ScriptElementLabels.T_FULLY_QUALIFIED | (flags & ScriptElementLabels.P_COMPRESSED), buffer);
			buffer.append('.');
		}
		buffer.append(binding.getName());
		if ((flags & ScriptElementLabels.M_APP_TYPE_PARAMETERS) != 0) {
			// if (binding.isParameterizedMethod()) {
			// ITypeBinding[] typeArguments= binding.getTypeArguments();
			// if (typeArguments.length > 0) {
			// buffer.append(' ');
			// getTypeArgumentsLabel(typeArguments, (flags &
			// ScriptElementLabels.T_TYPE_PARAMETERS), buffer);
			// }
			// }
		}

		// parameters
		buffer.append('(');
		if ((flags & ScriptElementLabels.M_PARAMETER_TYPES | ScriptElementLabels.M_PARAMETER_NAMES) != 0) {
			ITypeBinding[] parameters = ((flags & ScriptElementLabels.M_PARAMETER_TYPES) != 0)
					? binding.getParameterTypes()
					: null;
			if (parameters != null) {
				for (int index = 0; index < parameters.length; index++) {
					if (index > 0) {
						buffer.append(ScriptElementLabels.COMMA_STRING);
					}
					ITypeBinding paramType = parameters[index];
					if (binding.isVarargs() && (index == parameters.length - 1)) {
						getTypeLabel(paramType.getElementType(), (flags & ScriptElementLabels.T_TYPE_PARAMETERS),
								buffer);
						appendDimensions(paramType.getDimensions() - 1, buffer);
						buffer.append(ScriptElementLabels.ELLIPSIS_STRING);
					} else {
						getTypeLabel(paramType, (flags & ScriptElementLabels.T_TYPE_PARAMETERS), buffer);
					}
				}
			}
		} else {
			if (binding.getParameterTypes().length > 0) {
				buffer.append(ScriptElementLabels.ELLIPSIS_STRING);
			}
		}
		buffer.append(')');

		if ((flags & ScriptElementLabels.M_EXCEPTIONS) != 0) {
			ITypeBinding[] exceptions = binding.getExceptionTypes();
			if (exceptions.length > 0) {
				buffer.append(" throws "); //$NON-NLS-1$
				for (int index = 0; index < exceptions.length; index++) {
					if (index > 0) {
						buffer.append(ScriptElementLabels.COMMA_STRING);
					}
					getTypeLabel(exceptions[index], (flags & ScriptElementLabels.T_TYPE_PARAMETERS), buffer);
				}
			}
		}
		if ((flags & ScriptElementLabels.M_APP_TYPE_PARAMETERS) != 0) {
			// if (binding.isGenericMethod()) {
			ITypeBinding[] typeParameters = binding.getParameterTypes();
			if (typeParameters.length > 0) {
				buffer.append(' ');
				getTypeParametersLabel(typeParameters, buffer);
			}
			// }
		}
		if (((flags & ScriptElementLabels.M_APP_RETURNTYPE) != 0)
				&& (methodBinding == null || !methodBinding.isConstructor())) {
			if (returnTypes == null) {
				returnTypes = binding.getReturnType();
			}
			buffer.append(ScriptElementLabels.DECL_STRING);
			for (ITypeBinding returnType : returnTypes) {
				getTypeLabel(returnType, (flags & ScriptElementLabels.T_TYPE_PARAMETERS), buffer);
			}
		}
		// post qualification
		if ((flags & ScriptElementLabels.M_POST_QUALIFIED) != 0 && methodBinding != null) {
			buffer.append(ScriptElementLabels.CONCAT_STRING);
			getTypeLabel(methodBinding.getDeclaringClass(),
					ScriptElementLabels.T_FULLY_QUALIFIED | (flags & ScriptElementLabels.P_COMPRESSED), buffer);
		}
	}

