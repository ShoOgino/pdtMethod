	public boolean performFinish() {
		if (currentFragment != null)
			currentFragment.exit();

		final WizardFragment cFragment = currentFragment;

		final List list = getAllWizardFragments();
		IWorkspaceRunnable runnable = new IWorkspaceRunnable() {
			public void run(IProgressMonitor monitor) throws CoreException {
				// enter & exit the remaining pages
				int index = list.indexOf(cFragment);
				while (index > 0 && index < list.size() - 1) {
					final WizardFragment fragment = (WizardFragment) list
							.get(++index);
					try {
						Display.getDefault().syncExec(new Runnable() {
							public void run() {
								fragment.enter();
								fragment.exit();
							}
						});
					} catch (Exception e) {
						PHPUiPlugin.log(new Status(IStatus.ERROR,
								PHPUiPlugin.ID, 0,
								"Could not enter/exit page", e)); //$NON-NLS-1$
					}
				}

				if (useJob()) {
					class FinishWizardJob extends Job {
						public FinishWizardJob() {
							super(getJobTitle());
						}

						public boolean belongsTo(Object family) {
							return "org.eclipse.wst.server.ui.family".equals(family); //$NON-NLS-1$
						}

						public IStatus run(IProgressMonitor monitor2) {
							try {
								Iterator iterator = list.iterator();
								while (iterator.hasNext())
									executeTask((WizardFragment) iterator
											.next(), FINISH, monitor2);
							} catch (CoreException ce) {
								Status status = new Status(IStatus.ERROR,
										PHPUiPlugin.ID, 0, ce
												.getLocalizedMessage(), null);
								PHPUiPlugin.log(status);
								return status;
							}
							return Status.OK_STATUS;
						}
					}

					FinishWizardJob job = new FinishWizardJob();
					job.setUser(true);
					job.schedule();
				} else {
					Iterator iterator = list.iterator();
					while (iterator.hasNext())
						executeTask((WizardFragment) iterator.next(), FINISH,
								monitor);
				}
			}
		};

		Throwable t = null;
		try {
			if (getContainer() != null)
				getContainer().run(true, true,
						new WorkspaceRunnableAdapter(runnable));
			else
				runnable.run(new NullProgressMonitor());
			return true;
		} catch (InvocationTargetException te) {
			PHPUiPlugin.log(new Status(IStatus.ERROR, PHPUiPlugin.ID, 0,
					"Error finishing task wizard", te)); //$NON-NLS-1$
			t = te.getCause();
		} catch (Exception e) {
			PHPUiPlugin.log(new Status(IStatus.ERROR, PHPUiPlugin.ID, 0,
					"Error finishing task wizard 2", e)); //$NON-NLS-1$
			t = e;
		}
		if (t instanceof CoreException) {
			openError(t.getLocalizedMessage(), ((CoreException) t).getStatus());
		} else if (t instanceof NullPointerException)
			openError("NullPointerException"); //$NON-NLS-1$
		else
			openError(t.getLocalizedMessage());

		return false;
	}

