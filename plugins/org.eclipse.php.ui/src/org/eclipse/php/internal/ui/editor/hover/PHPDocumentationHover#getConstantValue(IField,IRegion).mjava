	/**
	 * Returns the constant value for the given field.
	 * 
	 * @param field
	 *            the field
	 * @param hoverRegion
	 *            the hover region
	 * @return the constant value for the given field or <code>null</code> if none
	 * @since 3.4
	 */
	private String getConstantValue(IField field, IRegion hoverRegion) {
		if (!isFinal(field)) {
			return null;
		}

		ISourceModule typeRoot = getEditorInputModelElement();
		if (typeRoot == null) {
			return null;
		}

		Object constantValue = null;
		if (field != null && field.exists()) {
			try {
				Program unit = SharedASTProvider.getAST(field.getSourceModule(), SharedASTProvider.WAIT_YES, null);
				ASTNode node = unit != null
						? NodeFinder.perform(unit, field.getNameRange().getOffset(), field.getNameRange().getLength())
						: null;
				if (node != null) {
					if (node instanceof Identifier && node.getParent() instanceof ConstantDeclaration) {
						ConstantDeclaration decl = (ConstantDeclaration) node.getParent();
						if (decl.initializers().size() == 1 && decl.initializers().get(0) instanceof Scalar) {
							Scalar scalar = (Scalar) decl.initializers().get(0);
							constantValue = scalar.getStringValue();
						}
					} else if (node instanceof Scalar && node.getParent() instanceof FunctionInvocation) {
						FunctionInvocation invocation = (FunctionInvocation) node.getParent();
						Expression function = invocation.getFunctionName().getName();
						String functionName = ""; //$NON-NLS-1$
						// for PHP5.3
						if (function instanceof NamespaceName) {
							// global function
							if (((NamespaceName) function).isGlobal()) {
								functionName = ((NamespaceName) function).getName();
								if (functionName.charAt(0) == '\\') {
									functionName = functionName.substring(1);
								}
							} else {
								ModuleDeclaration parsedUnit = SourceParserUtil
										.getModuleDeclaration(field.getSourceModule(), null);
								org.eclipse.dltk.ast.ASTNode func = ASTUtils.findMinimalNode(parsedUnit,
										function.getStart(), function.getEnd());

								if (func instanceof FullyQualifiedReference) {
									functionName = ((FullyQualifiedReference) func).getFullyQualifiedName();
								}
								// look for the element in current namespace
								if (functionName.indexOf('\\') == -1) {
									IType currentNamespace = PHPModelUtils.getCurrentNamespace(field.getSourceModule(),
											function.getStart());
									String fullyQualifiedFuncName = ""; //$NON-NLS-1$
									if (currentNamespace != null) {
										fullyQualifiedFuncName = "\\" //$NON-NLS-1$
												+ currentNamespace.getElementName() + "\\" + functionName; //$NON-NLS-1$
									} else {
										fullyQualifiedFuncName = functionName;
									}

									IMethod[] methods = PHPModelUtils.getFunctions(fullyQualifiedFuncName,
											field.getSourceModule(), function.getStart(), null);
									if (methods != null && methods.length > 0) {
										functionName = fullyQualifiedFuncName;
									}
								}
							}
						} else if (function instanceof Identifier) {
							functionName = ((Identifier) function).getName();
						}
						if (functionName.equalsIgnoreCase("define") //$NON-NLS-1$
								&& invocation.parameters().size() >= 2
								&& invocation.parameters().get(1) instanceof Scalar) {
							constantValue = ((Scalar) invocation.parameters().get(1)).getStringValue();
						}
					}
				}
			} catch (ModelException e) {
			} catch (IOException e) {
			}
		}

		if (constantValue == null) {
			return null;
		}

		if (constantValue instanceof String) {
			StringBuilder result = new StringBuilder();
			String stringConstant = (String) constantValue;
			if (stringConstant.length() > 80) {
				result.append(stringConstant.substring(0, 80));
				result.append(ScriptElementLabels.ELLIPSIS_STRING);
			} else {
				result.append(stringConstant);
			}
			return result.toString();

		} else if (constantValue instanceof Integer) {
			int intValue = ((Integer) constantValue).intValue();
			return formatWithHexValue(constantValue, "0x" + Integer.toHexString(intValue)); //$NON-NLS-1$
		} else {
			return constantValue.toString();
		}
	}

