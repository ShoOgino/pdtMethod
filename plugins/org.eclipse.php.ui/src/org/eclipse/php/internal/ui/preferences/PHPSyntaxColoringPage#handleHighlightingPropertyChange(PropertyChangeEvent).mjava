	/**
	 * Handles property change events for individual semantic highlightings.
	 * 
	 * @param event
	 */
	private void handleHighlightingPropertyChange(PropertyChangeEvent event) {
		String property = event.getProperty();
		if (property == null)
			return;
		for (Iterator<?> iterator = SemanticHighlightingManager.getInstance().getSemanticHighlightings().keySet()
				.iterator(); iterator.hasNext();) {
			String type = (String) iterator.next();
			ISemanticHighlighting highlighting = SemanticHighlightingManager.getInstance().getSemanticHighlightings()
					.get(type);
			HighlightingStyle style = highlightingStyleMap.get(type);
			if (property.equals(highlighting.getBoldPreferenceKey())) {
				adaptToTextStyleChange(style, event, SWT.BOLD);
			} else if (property.equals(highlighting.getColorPreferenceKey())) {
				adaptToTextForegroundChange(style, event);
			} else if ((highlighting instanceof ISemanticHighlightingExtension2) && property
					.equals(((ISemanticHighlightingExtension2) highlighting).getBackgroundColorPreferenceKey())) {
				adaptToTextBackgroundChange(style, event);
			} else if (property.equals(highlighting.getEnabledPreferenceKey())) {
				adaptToEnablementChange(style, event);
			} else if (property.equals(highlighting.getItalicPreferenceKey())) {
				adaptToTextStyleChange(style, event, SWT.ITALIC);
			} else if (property.equals(highlighting.getStrikethroughPreferenceKey())) {
				adaptToTextStyleChange(style, event, TextAttribute.STRIKETHROUGH);
			} else if (property.equals(highlighting.getUnderlinePreferenceKey())) {
				adaptToTextStyleChange(style, event, TextAttribute.UNDERLINE);
			}
		}
	}

