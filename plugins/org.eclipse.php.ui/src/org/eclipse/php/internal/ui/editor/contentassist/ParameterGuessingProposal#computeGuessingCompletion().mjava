	/**
	 * Creates the completion string. Offsets and Lengths are set to the offsets
	 * and lengths of the parameters.
	 * 
	 * @return the completion string
	 * @throws ModelException
	 *             if parameter guessing failed
	 */
	private String computeGuessingCompletion() throws ModelException {

		StringBuffer buffer = new StringBuffer();
		appendMethodNameReplacement(buffer);

		setCursorPosition(buffer.length());
		// show method parameter names:
		IParameter[] parameters = method.getParameters();
		List<String> paramList = new ArrayList<String>();
		if (parameters != null) {
			for (int i = 0; i < parameters.length; i++) {
				IParameter parameter = parameters[i];
				if (parameter.getDefaultValue() == null) {
					paramList.add(parameter.getName());
				}
			}
		}
		char[][] parameterNames = new char[paramList.size()][];
		for (int i = 0; i < paramList.size(); ++i) {
			parameterNames[i] = paramList.get(i).toCharArray();
		}
		// if (parameterNames == null) {
		// parameterNames = new char[0][0];
		// String[] params = null;
		// try {
		// params = method.getParameterNames();
		// } catch (ModelException e) {
		// PHPUiPlugin.log(e);
		// }
		// if (params != null && params.length > 0) {
		// parameterNames = new char[params.length][];
		// for (int i = 0; i < params.length; ++i) {
		// parameterNames[i] = params[i].toCharArray();
		// }
		// }
		// }

		fChoices = guessParameters(parameterNames);
		int count = fChoices.length;
		int replacementOffset = getReplacementOffset();

		for (int i = 0; i < count; i++) {
			if (i != 0) {
				buffer.append(COMMA);
			}

			ICompletionProposal proposal = fChoices[i][0];
			String argument = proposal.getDisplayString();

			Position position = fPositions[i];
			position.setOffset(replacementOffset + buffer.length());
			position.setLength(argument.length());

			buffer.append(argument);
		}

		buffer.append(RPAREN);

		return buffer.toString();
	}

