	private String getNamedStyleAtOffset(int offset) {
		// ensure the offset is clean
		if (offset >= fDocument.getLength()) {
			return getNamedStyleAtOffset(fDocument.getLength() - 1);
		} else if (offset < 0) {
			return getNamedStyleAtOffset(0);
		}

		if (highlightingPositionMap == null) {
			initHighlightingPositions();
		}
		String found = null;
		loop: for (Entry<String, Position[]> entry : highlightingPositionMap.entrySet()) {
			Position[] positions = entry.getValue();
			for (int i = 0; i < positions.length; i++) {
				if (offset >= positions[i].offset && offset < positions[i].offset + positions[i].length) {
					found = entry.getKey();
					break loop;
				}
			}
		}
		if (found != null) {
			return found;
		}

		IStructuredDocumentRegion documentRegion = fDocument.getFirstStructuredDocumentRegion();
		while (documentRegion != null && !documentRegion.containsOffset(offset)) {
			documentRegion = documentRegion.getNext();
		}

		if (documentRegion != null) {
			String regionContext;
			ITextRegion interest = documentRegion.getRegionAtCharacterOffset(offset);

			ITextRegionCollection container = documentRegion;
			if (interest instanceof ITextRegionContainer) {
				container = (ITextRegionContainer) interest;
				interest = container.getRegionAtCharacterOffset(offset);
			}

			if (interest.getType() == PHPRegionContext.PHP_CONTENT) {
				IPHPScriptRegion phpScript = (IPHPScriptRegion) interest;
				try {
					regionContext = phpScript
							.getPHPTokenType(offset - container.getStartOffset() - phpScript.getStart());
				} catch (BadLocationException e) {
					assert false;
					return null;
				}
			} else if (interest.getType() == PHPRegionContext.PHP_OPEN) {
				regionContext = PHPRegionTypes.PHP_OPENTAG;
			} else if (interest.getType() == PHPRegionContext.PHP_CLOSE) {
				regionContext = PHPRegionTypes.PHP_CLOSETAG;
			} else {
				regionContext = interest.getType();
			}

			// find the named style (internal/selectable name) for that
			// context
			String namedStyle = fContextToStyleMap.get(regionContext);
			return namedStyle;
		}
		return null;
	}

