	private void initializeCheckedState() {

		BusyIndicator.showWhile(getShell().getDisplay(), new Runnable() {
			public void run() {
				Object[] elements;
				if (fWorkingSet == null) {
					// Use current part's selection for initialization
					IWorkbenchPage page = DLTKUIPlugin.getActivePage();
					if (page == null)
						return;

					IWorkbenchPart part = DLTKUIPlugin.getActivePage()
							.getActivePart();
					if (part == null)
						return;

					try {
						elements = SelectionConverter.getStructuredSelection(
								part).toArray();
						for (int i = 0; i < elements.length; i++) {
							if (elements[i] instanceof IResource) {
								IModelElement je = (IModelElement) ((IResource) elements[i])
										.getAdapter(IModelElement.class);
								if (je != null
										&& je.exists()
										&& je.getScriptProject().isOnBuildpath(
												(IResource) elements[i]))
									elements[i] = je;
							}
						}
					} catch (ModelException e) {
						return;
					}
				} else
					elements = fWorkingSet.getElements();

				// Use closed project for elements in closed project
				for (int i = 0; i < elements.length; i++) {
					Object element = elements[i];
					if (element instanceof IResource) {
						IProject project = ((IResource) element).getProject();
						if (!project.isAccessible())
							elements[i] = project;
					}
					if (element instanceof IModelElement) {
						IScriptProject jProject = ((IModelElement) element)
								.getScriptProject();
						if (jProject != null
								&& !jProject.getProject().isAccessible())
							elements[i] = jProject.getProject();
					}
				}

				fTree.setCheckedElements(elements);
				for (int i = 0; i < elements.length; i++) {
					Object element = elements[i];
					if (isExpandable(element))
						setSubtreeChecked(element, true, true);

					updateParentState(element, true);
				}
			}
		});
	}

