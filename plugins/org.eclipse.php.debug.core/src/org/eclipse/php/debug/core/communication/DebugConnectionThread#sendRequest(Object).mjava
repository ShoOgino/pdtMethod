	/**
	 * Deliver a request & wait for a response
	 *
	 * @param request The delivered Request message.
	 * @return A response for the delivered request.
	 */
	public Object sendRequest(Object request) throws Exception {
		try {
			IDebugRequestMessage theMsg = (IDebugRequestMessage) request;
			synchronized (byteArrayOutputStream) {
				byteArrayOutputStream.reset();
				theMsg.setID(lastRequestID++);
				theMsg.serialize(dataOutputStream);

				int messageSize = byteArrayOutputStream.size();

				if (isDebugMode) {
					System.out.println("sending message request size=" + messageSize);
				}
				synchronized (out) {
					requestsTable.put(theMsg.getID(), theMsg);
					//System.out.println("Request table has " +requestsTable.size() +" items");
					out.writeInt(messageSize);
					byteArrayOutputStream.writeTo(out);
					out.flush();
				}
			}

			IDebugResponseMessage response = null;
			while (response == null && isConnected()) {
				synchronized (request) {
					response = (IDebugResponseMessage) responseTable.remove(theMsg.getID());
					if (response == null) {
						request.wait(peerResponseTimeout);
					} else if (isDebugMode) {
						System.out.println("waiting for response " + response.getID());
					}
				}
				if (response == null) {
					response = (IDebugResponseMessage) responseTable.remove(theMsg.getID());
				}

				// if the responce is null. it meens that there is no answer from the server.
				// This can be because on the peerResponseTimeout.
				if (response == null && isConnected()) {
					if (isDebugMode) {
						System.out.println("Communication problems");
					}
					// Handle time out will stop the communication if need to stop.
					//System.out.println("handleto");
					handlePeerResponseTimeout();
					if (!isConnected())
						break;
					//System.out.println("rewaiting");
				}
			}
			if (isDebugMode) {
				System.out.println("response received by client: " + response);
			}
			return response;

		} catch (IOException exc) { // retrun null for any exception
			//Log.writeLog("No Connection");
			//Log.writeLog(exc);

		} catch (InterruptedException exc) {// retrun null for any exception
			//Log.writeLog(exc);
		}
		return null;
	}

