	/**
	 * Hook the debug session to the currect ILaunch that started it. 
	 * In case there is no such launch, the user will have to fill in some of the detailes needed to start a debug
	 * session currectly.
	 *  
	 * @param debugSessionStartedNotification
	 * @return True, if the debug session hook was successful; False, otherwise.
	 */
	protected boolean hookDebugSession(DebugSessionStartedNotification debugSessionStartedNotification) throws CoreException {
		String query = debugSessionStartedNotification.getQuery();
		int sessionID = getSessionID(query);
		// Get the launch, but keep it in the mapper for any other debug requests that are 
		// related to the debug session id.
		// The launch is mapped until the launches are cleared.
		ILaunch launch = PHPSessionLaunchMapper.get(sessionID);
		if (launch == null) {
			// We cannot find a launch the we can associate to the given session id (if any)
			// Try to take the first launch that is terminated and has a 'Debug all Pages' attribute.
			ILaunch[] launchs = DebugPlugin.getDefault().getLaunchManager().getLaunches();
			for (int i = 0; i < launchs.length; i++) {
				ILaunch aLaunch = launchs[i];
				String debugType = aLaunch.getAttribute(IPHPConstants.DEBUGGING_PAGES);
				if (aLaunch.isTerminated() && (IPHPConstants.DEBUGGING_ALL_PAGES.equals(debugType) || IPHPConstants.DEBUGGING_START_FROM.equals(debugType))) {
					launch = aLaunch;
					break;
				}
			}
		}
		if (launch != null) {
			// Remove any debug targets and processes that were terminated.
			IDebugTarget[] debugTargets = launch.getDebugTargets();
			IProcess[] processes = launch.getProcesses();
			for (int i = 0; i < debugTargets.length; i++) {
				if (debugTargets[i].isTerminated()) {
					launch.removeDebugTarget(debugTargets[i]);
				}
			}
			for (int i = 0; i < processes.length; i++) {
				if (processes[i].isTerminated()) {
					launch.removeProcess(processes[i]);
				}
			}

			if (launch instanceof PHPServerLaunchDecorator || Boolean.toString(true).equals(launch.getAttribute(IDebugParametersKeys.WEB_SERVER_DEBUGGER))) {
				hookServerDebug(launch);
			} else {
				hookPHPExeDebug(launch);
			}
			return true;
		} else {
			return handleHookError("No session id");
		}
	}

