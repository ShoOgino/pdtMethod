	/*
	 * (non-Javadoc)
	 * @see org.eclipse.php.server.core.launch.IHTTPServerLaunch#launch(org.eclipse.debug.core.ILaunchConfiguration, java.lang.String, org.eclipse.debug.core.ILaunch, org.eclipse.core.runtime.IProgressMonitor)
	 */
	public void launch(ILaunchConfiguration configuration, String mode, ILaunch launch, IProgressMonitor monitor) throws CoreException {
		PHPLaunchUtilities.showDebugView();
		if (!PHPLaunchUtilities.checkDebugAllPages(configuration, launch)) {
			monitor.setCanceled(true);
			monitor.done();
			return;
		}
		boolean runWithDebug = configuration.getAttribute("run_with_debug", true);
		this.launch = launch;
		if (mode.equals(ILaunchManager.RUN_MODE) && !runWithDebug) {
			httpServerDelegate.doLaunch(configuration, mode, launch, monitor);
			return;
		}

		Server server = ServersManager.getServer(configuration.getAttribute(Server.NAME, ""));
		if (server == null) {
			Logger.log(Logger.ERROR, "Launch configuration could not find server");
			terminated();
			// throw CoreException();
			return;
		}
		String fileName = configuration.getAttribute(Server.FILE_NAME, (String) null);
		// Get the project from the file name
		IPath filePath = new Path(fileName);
		IProject proj = null;
		try {
			proj = ResourcesPlugin.getWorkspace().getRoot().getProject(filePath.segment(0));
		} catch (Throwable t) {
		}
		if (proj == null) {
			Logger.log(Logger.ERROR, "Could not execute the debug (Project is null).");
			return;
		}

		boolean publish = configuration.getAttribute(Server.PUBLISH, false);
		if (publish) {
			if (!FileUtil.publish(server, proj, configuration, DeployFilter.getFilterMap(), monitor)) {
				// Return if the publish failed.
				terminated();
				return;
			}
		}
		ILaunchConfigurationWorkingCopy wc = configuration.getWorkingCopy();
		String project = proj.getFullPath().toString();
		wc.setAttribute(IPHPConstants.PHP_Project, project);

		// Set transfer encoding:
		wc.setAttribute(IDebugParametersKeys.TRANSFER_ENCODING, PHPProjectPreferences.getTransferEncoding(proj));
		wc.doSave();

		String URL = configuration.getAttribute(Server.BASE_URL, "");
		if (mode.equals(ILaunchManager.DEBUG_MODE) || runWithDebug == true) {
			boolean stopAtFirstLine = false;
			if (wc.getAttribute(IDebugParametersKeys.OVERRIDE_FIRST_LINE_BREAKPOINT, false)) {
				stopAtFirstLine = wc.getAttribute(IDebugParametersKeys.FIRST_LINE_BREAKPOINT, false);
			} else {
				stopAtFirstLine = PHPProjectPreferences.getStopAtFirstLine(proj);
			}
			int requestPort = PHPProjectPreferences.getDebugPort(proj);

			// Generate a session id for this launch and put it in the map
			int sessionID = DebugSessionIdGenerator.generateSessionID();
			PHPSessionLaunchMapper.put(sessionID, new PHPServerLaunchDecorator(launch, proj));

			// Fill all debug attributes:
			launch.setAttribute(IDebugParametersKeys.PORT, Integer.toString(requestPort));
			launch.setAttribute(IDebugParametersKeys.WEB_SERVER_DEBUGGER, Boolean.toString(true));
			launch.setAttribute(IDebugParametersKeys.FIRST_LINE_BREAKPOINT, Boolean.toString(stopAtFirstLine));
			launch.setAttribute(IDebugParametersKeys.ORIGINAL_URL, URL);
			launch.setAttribute(IDebugParametersKeys.SESSION_ID, Integer.toString(sessionID));

			// Trigger the debug session by initiating a debug requset to the debug server
			runDispatch = new RunDispatchJobWebServer(launch);
			runDispatch.schedule();
		}
	}

