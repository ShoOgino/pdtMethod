	private void loadExtensions() {
		IExtensionRegistry registry = Platform.getExtensionRegistry();
		IConfigurationElement[] elements = registry.getConfigurationElementsFor(PHPDebugPlugin.getID(), EXTENSION_POINT_NAME);
		
		String myOS = null;
		String OS = System.getProperty("os.name").toLowerCase();
		if (OS.startsWith("windows")) {
			myOS = "Windows";
		} else if (OS.startsWith("linux")) {
			myOS = "Linux";
		} else if (OS.startsWith("mac")) {
			myOS = "Mac";
		}
		
		for (int i = 0; i < elements.length; i++) {
			final IConfigurationElement element = elements[i];
			if (PHPEXE_TAG.equals(element.getName())) {
				String name = element.getAttribute(NAME_ATTRIBUTE);
				String location = element.getAttribute(LOCATION_ATTRIBUTE);
				String version = element.getAttribute(VERSION_ATTRIBUTE);
				boolean isDefault = "true".equalsIgnoreCase(element.getAttribute(DEFAULT_ATTRIBUTE));
				
				if (myOS != null) {
					String os = element.getAttribute(OS_ATTRIBUTE);
					if (os != null && !os.equals(myOS)) {
						continue; // Skip current PHP, since its OS doesn't match ours
					}
				}

				String pluginId = element.getDeclaringExtension().getDeclaringPluginDescriptor().getUniqueIdentifier();
				StringBuffer buff = new StringBuffer("platform:/plugin/");
				buff.append(pluginId);

				if (!location.startsWith("/"))
					buff.append('/');

				buff.append(location);
				URL url;
				try {
					url = new URL(buff.toString());
					url = Platform.resolve(url);
					String filename = url.getFile();
//					if (filename.startsWith("/"))
//						filename = filename.substring(1);
					File file = new File(filename);
					if (file.exists()) {
						PHPexeItem newItem = new PHPexeItem(name, file,false);
						newItem.setVersion(version);
						items.put(name, newItem);
						if (isDefault)
							defaultItem = newItem;
					} else
						PHPDebugPlugin.getDefault().getLog().log(new Status(1, PHPDebugPlugin.getID(), 1001, "php exe " + location + " not found in plugin " + pluginId, null));
				} catch (MalformedURLException e) {
					PHPDebugPlugin.getDefault().getLog().log(new Status(1, PHPDebugPlugin.getID(), 1001, "php exe " + location + " not found in plugin " + pluginId, e));
				} catch (IOException e) {
					PHPDebugPlugin.getDefault().getLog().log(new Status(1, PHPDebugPlugin.getID(), 1001, "php exe " + location + " not found in plugin " + pluginId, e));
				}
			}
		}
	}

