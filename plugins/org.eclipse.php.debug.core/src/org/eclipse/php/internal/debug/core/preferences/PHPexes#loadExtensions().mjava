	/**
	 * Load the PHP executables that were defined in the extensions.
	 */
	private void loadExtensions() {
		final IExtensionRegistry registry = Platform.getExtensionRegistry();
		final IConfigurationElement[] elements = registry
				.getConfigurationElementsFor(PHPDebugPlugin.getID(),
						EXTENSION_POINT_NAME);

		boolean isWindows = System
				.getProperty("os.name").toLowerCase().startsWith("windows"); //$NON-NLS-1$ //$NON-NLS-2$

		for (final IConfigurationElement element : elements) {
			if (PHPEXE_TAG.equals(element.getName())) {
				final String name = element.getAttribute(NAME_ATTRIBUTE);
				String location = element.getAttribute(LOCATION_ATTRIBUTE);
				final String version = element.getAttribute(VERSION_ATTRIBUTE);
				String debuggerID = element.getAttribute(DEBUGGER_ID_ATTRIBUTE);
				if (debuggerID == null || debuggerID.equals("")) { //$NON-NLS-1$
					// The debugger id is an optional field, so in case that
					// none was entered assign the debugger to Zend.
					debuggerID = DebuggerCommunicationDaemon.ZEND_DEBUGGER_ID;
				}
				final boolean isDefault = "true".equalsIgnoreCase(element //$NON-NLS-1$
						.getAttribute(DEFAULT_ATTRIBUTE));

				if (isWindows)
					location = location + ".exe"; //$NON-NLS-1$

				final String pluginId = element.getDeclaringExtension()
						.getNamespaceIdentifier();
				final String finalDebuggerID = debuggerID;
				// Filter the executable if needed.
				boolean filterItem = WorkbenchActivityHelper
						.filterItem(new IPluginContribution() {
							public String getLocalId() {
								return finalDebuggerID;
							}

							public String getPluginId() {
								return PHPDebugPlugin.ID;
							}
						});
				if (filterItem) {
					continue;
				}
				URL url = FileLocator.find(Platform.getBundle(pluginId),
						new Path(location), new HashMap());
				boolean itemFound = false;
				if (url != null)
					try {
						url = FileLocator.resolve(url);
						final String filename = url.getFile();
						final File file = new File(filename);
						if (file.exists()) {
							final PHPexeItem newItem = new PHPexeItem(name,
									file, null, debuggerID, false);
							if (null == newItem
									|| null == newItem.getExecutable()
									|| newItem.getVersion() == null)
								continue; // not adding "problematic"
							// executables
							if (version != null) {
								newItem.setVersion(version);
							}
							addItem(newItem);
							if (isDefault) {
								setDefaultItem(newItem);
							}
							itemFound = true;
						}
					} catch (final IOException e) {
					}
				if (!itemFound)
					PHPDebugPlugin
							.getDefault()
							.getLog()
							.log(new Status(
									1,
									PHPDebugPlugin.getID(),
									1001,
									"PHP executable " //$NON-NLS-1$
											+ location
											+ " not found neither in plugin " //$NON-NLS-1$
											+ pluginId
											+ " nor in fragments attached to it", //$NON-NLS-1$
									null));
			}
		}
	}

