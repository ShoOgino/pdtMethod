	/**
	 * Saves the original settings with the use of provided working copy. This
	 * method should always be used by a clients whenever original settings
	 * should be saved to fire up the appropriate events.
	 * 
	 * @param settingsWorkingCopy
	 */
	public void save(IDebuggerSettingsWorkingCopy settingsWorkingCopy) {
		// Find the differences to send change notifications
		IDebuggerSettings settings = settingsWorkingCopy.getOriginal();
		Map<String, String> attributes = settings.getAttributes();
		Map<String, String> attributesCopy = settingsWorkingCopy.getAttributes();
		List<PropertyChangeEvent> events = new ArrayList<>();
		// Check if there are some new ones that were not in original
		for (String key : attributesCopy.keySet()) {
			if (!attributes.keySet().contains(key)) {
				PropertyChangeEvent event = new PropertyChangeEvent(settings, key, null, attributesCopy.get(key));
				events.add(event);
			}
		}
		// Check & compare original attributes with the ones from WC
		for (String key : attributes.keySet()) {
			if (!attributes.get(key).equals(attributesCopy.get(key))) {
				PropertyChangeEvent event = new PropertyChangeEvent(settings, key, attributes.get(key),
						attributesCopy.get(key));
				events.add(event);
			}
		}
		// Go out if there are no changes
		if (events.isEmpty()) {
			return;
		}
		// Update original settings
		((AbstractDebuggerSettings) settings).update(settingsWorkingCopy);
		// Delegate saving of persistent data to related provider
		save(settings);
		// Send change notifications
		(new EventNotifier()).fireChanged(events);
	}

