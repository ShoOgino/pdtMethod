		/*
		 * (non-Javadoc)
		 * 
		 * @see org.eclipse.core.runtime.jobs.Job#run(org.eclipse.core.runtime.
		 * IProgressMonitor)
		 */
		@Override
		public IStatus run(IProgressMonitor monitor) {
			// 'while(true)' is OK here since we use blocking read
			while (true) {
				try {
					if (monitor.isCanceled())
						return Status.OK_STATUS;
					// Reads the length
					int length = connectionIn.readInt();
					if (length < 0) {
						String message = "Socket error (length is negative): possibly Server is SSL, Client is not."; //$NON-NLS-1$
						Logger.debugMSG(message);
						Logger.log(Logger.ERROR, message);
						shutdown();
						continue;
					}
					// We have a new message. process it !!.
					int messageType = connectionIn.readShort();
					/*
					 * If this is the first message, the protocol is still held
					 * as invalid. Check that the first message has the
					 * DebugSessionStartedNotification type. If not, then we can
					 * assume that the remote debugger protocol has a different
					 * version then expected.
					 */
					if (!isValidProtocol && messageType != START_MESSAGE_ID) {
						showProtocolError();
						shutdown();
						continue;
					}
					isValidProtocol = true;
					// Create message with the use of registry
					IDebugMessage message = DebugMessagesRegistry.getMessage(messageType);
					if (message != null) {
						if (message instanceof OutputNotification) {
							message.setTransferEncoding(outputEncoding);
						} else {
							message.setTransferEncoding(transferEncoding);
						}
					}
					// Handle the incoming message
					if (message instanceof IDebugNotificationMessage) {
						message.deserialize(connectionIn);
						// PUT NOTIFICATION TO NOTIFICATION QUEUE
						messageHandler.queueIn(message);
					} else if (message instanceof IDebugResponseMessage) {
						message.deserialize(connectionIn);
						int messageId = ((IDebugResponseMessage) message).getID();
						/*
						 * INSERT RESPONSE TO TABLE AND RELEASE THE THREAD
						 * WAITING FOR THE REQUEST
						 */
						// Find the handler.
						ResponseHandler handler = responseHandlers.get(Integer.valueOf(messageId));
						if (handler == null) {
							responseTable.put(/* requestId */messageId, message);
							// Find the request.
							IDebugRequestMessage request = (IDebugRequestMessage) requestsTable.remove(messageId);
							if (request != null) {
								// Notify the RESPONSE is here.
								synchronized (request) {
									request.notifyAll();
								}
							} else {
								// Remove this message.
								responseTable.remove(messageId);
							}
						} else {
							messageHandler.queueIn(message);
						}
					}
					// This is a request.
					else if (message instanceof IDebugRequestMessage) {
						message.deserialize(connectionIn);
						messageHandler.queueIn(message);
					}
				} catch (IOException e) {
					// Probably, the connection was dumped
					shutdown();
					continue;
				} catch (Exception e) {
					PHPDebugPlugin.log(e);
					shutdown();
				}
			}
		}

