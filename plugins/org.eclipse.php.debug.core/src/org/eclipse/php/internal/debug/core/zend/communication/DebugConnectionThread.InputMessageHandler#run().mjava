		public void run() {

			while (isAlive) {

				while (!inWork && isAlive) {
					try {
						synchronized (WAIT) {
							synchronized (READY_FOR_RESTART_LOCK) {
								READY_FOR_RESTART_LOCK.notify(); // release one thread.
							}
							WAIT.wait();
						}

					} catch (InterruptedException e) {
					}
				}

				if (!isAlive)
					break;

				try {
					IDebugMessage newInputMessage = (IDebugMessage)inputMessageQueue.queueOut();

					// do not stop until the message is processed.
					synchronized (this) {
						try {
							// first debug message has received - create debug target
							if (newInputMessage instanceof DebugSessionStartedNotification) {
								hookDebugSession((DebugSessionStartedNotification)newInputMessage);
							}

							// creation of debug session has succeeded
							if (debugTarget != null) {

								// try to find relevant handler for the message:
								IDebugMessageHandler messageHandler = createMessageHandler(newInputMessage);

								if (messageHandler != null) {
									// handle the request
									messageHandler.handle(newInputMessage, debugTarget);

									if (messageHandler instanceof IDebugRequestHandler) {
										// create response
										IDebugResponseMessage response = ((IDebugRequestHandler) messageHandler).getResponseMessage();

										// send response
										byteArray.reset();
										response.serialize(outArray);

										synchronized (out) {
											out.writeInt(byteArray.size());
											byteArray.writeTo(out);
											out.flush();
										}
									}
								}
								else if (newInputMessage instanceof IDebugResponseMessage) {
									IDebugResponseMessage r = (IDebugResponseMessage) newInputMessage;
									int requestId = r.getID(); // take the request ID from the response.
									IDebugRequestMessage req = (IDebugRequestMessage) requestsTable.remove(requestId); // find the request.
									ResponseHandler handler = responseHandlers.remove(new Integer(requestId)); // find the handler.
									handler.handleResponse(req, r);
								}
								else if (newInputMessage == STOP_MSG) {
									synchronized (STOP_MSG) {
										inWork = false;
										STOP_MSG.notifyAll();
										if (shouldExit) {
											isAlive = false;
											inputMessageQueue.releaseReaders(); // why do we need this??
											//notifyAll();
										}
									}
								}
								else if (newInputMessage == CONNECTION_CLOSED_MSG) {
									handleConnectionClosed();
								}
							}
							else { // no debug target - probably creation of debug session hasn't succeeded
								handleConnectionClosed();
							}
						} catch (Exception exc) { // error processing the current message.
							PHPDebugPlugin.log(exc);
						}
					}

				} catch (Exception exc) {
					PHPDebugPlugin.log(exc);
				}
			}
		}

