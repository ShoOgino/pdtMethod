	private void createPartitions() {
		int numChild = fCurrentVariables.length;
		int partitions = (int) Math.ceil(numChild / (double) 100);
		fPreviousPartitions = fCurrentPartitions;
		fCurrentPartitions = new LinkedHashMap<>();
		for (int i = 0; i < partitions; i++) {
			int startIndex = i * ARRAY_PARTITION_BOUNDARY;
			int endIndex = (i + 1) * ARRAY_PARTITION_BOUNDARY - 1;
			if (endIndex > numChild) {
				endIndex = numChild - 1;
			}
			final IVariable[] vars = Arrays.copyOfRange(fCurrentVariables, startIndex, endIndex + 1);
			IVariableProvider variableProvider = new IVariableProvider() {
				@Override
				public IVariable[] getVariables() throws DebugException {
					return vars;
				}
			};
			String partitionId = String.valueOf(startIndex) + '-' + String.valueOf(endIndex);
			IVirtualPartition partition = fPreviousPartitions.get(partitionId);
			if (partition != null) {
				partition.setProvider(variableProvider);
				fCurrentPartitions.put(partitionId, partition);
			} else {
				fCurrentPartitions.put(partitionId, new VirtualPartition(this, variableProvider, startIndex, endIndex));
			}
		}
	}

