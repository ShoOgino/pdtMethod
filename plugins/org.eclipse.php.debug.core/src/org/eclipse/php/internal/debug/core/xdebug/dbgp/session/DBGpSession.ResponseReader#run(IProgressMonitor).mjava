		@Override
		protected IStatus run(IProgressMonitor monitor) {
			byte[] response = null;
			while (sessionActive) {
				/*
				 * Here we need to block waiting for a response then process
				 * that response by related handler.
				 */
				try {
					response = readResponse();
					if (response != null) {
						DBGpResponse parsedResponse = new DBGpResponse();
						parsedResponse.parseResponse(response);
						int respErrorCode = parsedResponse.getErrorCode();
						/*
						 * We have received something back from the debugger so
						 * first we try to process a stop or break async
						 * response, even if the response was invalid.
						 */
						if (respErrorCode == DBGpResponse.ERROR_OK
								|| respErrorCode == DBGpResponse.ERROR_INVALID_RESPONSE) {
							int respType = parsedResponse.getType();
							if (respType == DBGpResponse.RESPONSE) {
								if (parsedResponse.getStatus().equals(DBGpResponse.STATUS_STOPPED)) {
									(new ResponseHandler()).perform(ResponseHandlerAction.HANDLE_STOP, parsedResponse);
								} else if (parsedResponse.getStatus().equals(DBGpResponse.STATUS_BREAK)) {
									(new ResponseHandler()).perform(ResponseHandlerAction.HANDLE_BREAK, parsedResponse);
								} else if (parsedResponse.getStatus().equals(DBGpResponse.STATUS_STOPPING)) {
									(new ResponseHandler()).perform(ResponseHandlerAction.HANDLE_STOPPING,
											parsedResponse);
								}
							} else if (respType == DBGpResponse.STREAM
									&& respErrorCode != DBGpResponse.ERROR_INVALID_RESPONSE) {
								(new ResponseHandler()).perform(ResponseHandlerAction.HANDLE_STREAM, parsedResponse);
							} else {
								DBGpLogger.logWarning("Unknown type of XML: " //$NON-NLS-1$
										+ response, DBGpSession.this, null);
							}
						}
						/*
						 * Unblock any Sync caller who might be waiting
						 * regardless of what we got back.
						 */
						unblockSyncCaller(parsedResponse);
					}
				} catch (Throwable t) {
					DBGpLogger.logException("Unexpected exception. Terminating the debug session", //$NON-NLS-1$
							this, t);
				}
			}
			/*
			 * If the socket is closed or the session terminated then we inform
			 * the debug target.
			 */
			try {
				/*
				 * Wait a very brief period to ensure console displays
				 * everything before stating the debug session has ended.
				 */
				Thread.sleep(50);
			} catch (InterruptedException e) {
			}
			/*
			 * End the session here as we most likely terminated cleanly. It
			 * doesn't matter if endSession is called multiple times.
			 */
			endSession();
			return Status.OK_STATUS;
		}

