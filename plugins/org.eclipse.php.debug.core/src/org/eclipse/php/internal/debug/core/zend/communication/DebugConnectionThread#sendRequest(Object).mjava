	/**
	 * Deliver a request & wait for a response
	 * 
	 * @param request
	 *            The delivered Request message.
	 * @return A response for the delivered request.
	 */
	public Object sendRequest(Object request) throws Exception {
		if (PHPDebugPlugin.DEBUG) {
			System.out.println("Sending syncrhonic request: " + request); //$NON-NLS-1$
		}
		try {
			IDebugRequestMessage theMsg = (IDebugRequestMessage) request;
			synchronized (byteArrayOutputStream) {
				byteArrayOutputStream.reset();
				theMsg.setID(lastRequestID++);
				theMsg.serialize(dataOutputStream);

				int messageSize = byteArrayOutputStream.size();
				synchronized (connectionOut) {
					requestsTable.put(theMsg.getID(), theMsg);
					connectionOut.writeInt(messageSize);
					byteArrayOutputStream.writeTo(connectionOut);
					connectionOut.flush();
				}
			}

			IDebugResponseMessage response = null;
			int timeoutTick = 500; // 0.5 of second
			int waitedTime = 0;
			while (response == null && isConnected()) {
				synchronized (request) {
					response = (IDebugResponseMessage) responseTable
							.remove(theMsg.getID());
					if (response == null) {
						if (PHPDebugPlugin.DEBUG) {
							System.out
									.println("Response is null. Waiting " + waitedTime + " milliseconds"); //$NON-NLS-1$ //$NON-NLS-2$
						}
						if (waitedTime > debugResponseTimeout / 4) { // Display
																		// a
																		// progress
																		// dialog
																		// after
																		// a
																		// quarter
																		// of
																		// the
																		// assigned
																		// time
																		// have
																		// passed.
							// Display a message that we are waiting for the
							// server response.
							// In case that the response finally arrives, remove
							// the message.
							// In case we have a timeout, close the connection
							// and display a different message.
							PHPLaunchUtilities.showWaitForDebuggerMessage(this);
						}
						request.wait(timeoutTick);
					}
				}
				if (response == null) {
					response = (IDebugResponseMessage) responseTable
							.remove(theMsg.getID());
				}

				// if the response is null. it means that there is no answer
				// from the server.
				// This can be because on the peerResponseTimeout.
				if (response == null && isConnected()) {
					if (PHPDebugPlugin.DEBUG) {
						System.out
								.println("Communication problems (response is null)"); //$NON-NLS-1$
					}
					// Handle time out will stop the communication if need to
					// stop.

					if (waitedTime < debugResponseTimeout - timeoutTick) {
						waitedTime += timeoutTick;
						handlePeerResponseTimeout();
					} else {
						closeConnection();
						PHPLaunchUtilities.hideWaitForDebuggerMessage();
						PHPLaunchUtilities.showLaunchErrorMessage();
					}
					if (!isConnected())
						break;
				}
			}
			PHPLaunchUtilities.hideWaitForDebuggerMessage();
			if (PHPDebugPlugin.DEBUG) {
				System.out.println("Received response: " + response); //$NON-NLS-1$
			}
			return response;

		} catch (IOException e) { // Return null for any exception
			PHPDebugPlugin.log(e);
		} catch (InterruptedException e) {// Return null for any exception
			PHPDebugPlugin.log(e);
		}
		return null;
	}

