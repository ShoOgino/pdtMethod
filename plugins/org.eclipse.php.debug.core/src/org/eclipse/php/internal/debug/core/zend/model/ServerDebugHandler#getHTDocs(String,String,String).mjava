	/**
	 * Resolve and return the HTDocs folder.
	 * @param fileName 
	 * @param systemFileName 
	 * @param uri 
	 * @param htdocs
	 */
	protected String getHTDocs(String fileName, String systemFileName, String uri) {
		int index;
		// clean any additional slashes in the file name and the uri
		uri = uri.replaceAll("/+", "/");
		systemFileName = systemFileName.replaceAll("/+", "/");
		// check for Windows, since case isn't always returned correctly
		if (fileName.startsWith(":\\", 1)) {
			index = systemFileName.toLowerCase().lastIndexOf(uri.toLowerCase());
			fDebugTarget.setServerWindows(true);
		} else {
			if (uri.startsWith("/~")) {
				int iUDir = uri.indexOf("/", 1);
				uri = uri.substring(iUDir);
			}
			index = systemFileName.lastIndexOf(uri);
		}
		if (index > -1) {
			return systemFileName.substring(0, index);
		}
		// We have a server mapping directive that cause the htdocs calculation
		// to fail. Calc the document root according to the mapping.

		// Set the context root to the path separator.
		fDebugTarget.setContextRoot(String.valueOf(IPath.SEPARATOR));
		// traverse the paths till we extract the document root (which includes the context root)
		IPath uriPath = Path.fromOSString(uri);
		IPath filePath = Path.fromOSString(systemFileName);
		String lastUrlSegment = null;
		for (int i = uriPath.segmentCount() - 1; i >= 0; i--) {
			lastUrlSegment = uriPath.segment(i);
			String filePathLastSegment = filePath.lastSegment();
			if (lastUrlSegment.equals(filePathLastSegment)) {
				filePath = filePath.removeLastSegments(1);
			} else {
				return filePath.toString();
			}
		}
		if (lastUrlSegment == null) {
			return "";
		}
		return filePath.toString() + IPath.SEPARATOR + lastUrlSegment;
	}

