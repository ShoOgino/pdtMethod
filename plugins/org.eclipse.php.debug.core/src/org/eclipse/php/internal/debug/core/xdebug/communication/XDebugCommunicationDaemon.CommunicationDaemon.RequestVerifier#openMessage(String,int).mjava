			private void openMessage(final String message, final int messageType) {
				PlatformUI.getWorkbench().getDisplay().syncExec(new Runnable() {
					@Override
					public void run() {
						final Shell shell = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();
						final MessageDialog dialog = new LinkMessageDialog(shell,
								PHPDebugCoreMessages.XDebugCommunicationDaemon_XDebug_remote_session_title, null,
								message, messageType, new String[] { IDialogConstants.OK_LABEL }, 0) {
							@Override
							protected void linkActivated() {
								AbstractDebuggerConfiguration configuration = PHPDebuggersRegistry
										.getDebuggerConfiguration(XDEBUG_DEBUGGER_ID);
								configuration.openConfigurationDialog(getShell());
							}

							@Override
							protected Control createDialogArea(Composite composite) {
								Control control = super.createDialogArea(composite);
								final Button button = new Button(composite, SWT.CHECK);
								final GridData gridData = new GridData(SWT.FILL, SWT.FILL, true, true, 2, 1);
								button.setLayoutData(gridData);
								button.setText(
										PHPDebugCoreMessages.XDebugCommunicationDaemon_Dont_show_this_message_again);
								button.addSelectionListener(new SelectionAdapter() {
									@Override
									public void widgetSelected(SelectionEvent e) {
										IEclipsePreferences preferences = InstanceScope.INSTANCE
												.getNode(PHPDebugPlugin.ID);
										preferences.putBoolean(
												XDebugPreferenceMgr.XDEBUG_PREF_WARN_NO_LOCALHOST_SESSION,
												!button.getSelection());
										try {
											preferences.flush();
										} catch (BackingStoreException e1) {
										}
									}
								});
								return control;
							}
						};
						if (shell != null) {
							shell.forceActive();
							shell.setActive();
						}
						dialog.open();
					}
				});
			}

