	/**
	 * Detects various things like: type, version, default configuration file, etc. from the PHP binary
	 */
	protected void detectFromPHPExe() {
		if (executable == null) {
			throw new IllegalStateException("PHP executable path is null"); //$NON-NLS-1$
		}
		try {
			// Create temporary directory:
			File tempDir = File.createTempFile("phpexe", null); //$NON-NLS-1$
			tempDir.delete();
			tempDir.mkdir();

			// Create empty configuration file:
			File tempPHPIni = new File(tempDir, "php.ini"); //$NON-NLS-1$
			tempPHPIni.createNewFile();

			try {
				// Detect version and type:
				String output = exec(executable.getAbsolutePath(), "-c", tempDir.getAbsolutePath(), "-v");
				Matcher m = PHP_VERSION.matcher(output);
				if (m.find()) {
					version = m.group(1);
					String type = m.group(2);
					if (type.startsWith("cgi")) { //$NON-NLS-1$
						sapiType = SAPI_CGI;
					} else if (type.startsWith("cli")) { //$NON-NLS-1$
						sapiType = SAPI_CLI;
					} else {
						DebugPlugin.logDebugMessage("Can't determine type of the PHP executable"); //$NON-NLS-1$
						return;
					}

					if (name == null) {
						name = "PHP " + version + " (" + sapiType + ")"; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
					}
				} else {
					DebugPlugin.logDebugMessage("CanconfigFile't determine version of the PHP executable"); //$NON-NLS-1$
					return;
				}

				// Detect default PHP.ini location:
				if (config == null) {
					output = exec(executable.getAbsolutePath(), "-c", tempDir.getAbsolutePath(), "-i");
					if (sapiType == SAPI_CLI) {
						m = PHP_CLI_CONFIG.matcher(output);
					} else if (sapiType == SAPI_CGI) {
						m = PHP_CGI_CONFIG.matcher(output);
					}
					if (m.find()) {
						String configDir = m.group(1);
						config = new File(configDir.trim(), "php.ini");
					} else {
						DebugPlugin.logDebugMessage("Can't determine PHP.ini location of the PHP executable"); //$NON-NLS-1$
						return;
					}
				}
			} finally {
				tempPHPIni.delete();
				tempDir.delete();
			}
		} catch (IOException e) {
			DebugPlugin.log(e);
		}
	}

