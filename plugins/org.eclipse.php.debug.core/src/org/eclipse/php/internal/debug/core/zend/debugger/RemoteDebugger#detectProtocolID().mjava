	/**
	 * This method is used for detecting protocol version of Debugger
	 * 
	 * @return <code>true</code> if succeeded to detect, otherwise
	 *         <code>false</code>
	 */
	protected boolean detectProtocolID() {
		boolean isUseNewProtocol = false;
		try {
			ILaunchConfiguration config = getDebugHandler().getDebugTarget().getLaunch().getLaunchConfiguration();
			String debuggerId = config.getAttribute(PHPDebugCorePreferenceNames.PHP_DEBUGGER_ID,
					DebuggerCommunicationDaemon.ZEND_DEBUGGER_ID);
			if (DebuggerCommunicationDaemon.ZEND_DEBUGGER_ID.equals(debuggerId)) {
				ZendDebuggerConfiguration debuggerConfiguration = (ZendDebuggerConfiguration) PHPDebuggersRegistry
						.getDebuggerConfiguration(debuggerId);
				isUseNewProtocol = debuggerConfiguration.isUseNewProtocol();
			}
		} catch (CoreException e) {
			PHPDebugPlugin.log(e);
		}
		// check whether debugger is using the latest protocol ID:
		if (isUseNewProtocol && setProtocol(PROTOCOL_ID_LATEST)) {
			return true;
		}
		// check whether debugger is using one of older protocol ID:
		if (setProtocol(PROTOCOL_ID_2006040705)) {
			return true;
		}
		// check whether debugger is using one of older protocol ID:
		if (setProtocol(PROTOCOL_ID_2006040703)) {
			// warn user that he is using an old debugger
			warnOlderDebugVersion();
			return true;
		}
		// check whether debugger is using one of older protocol ID:
		if (setProtocol(PROTOCOL_ID_2006040701)) {
			// warn user that he is using an old debugger
			warnOlderDebugVersion();
			return true;
		}
		// All of above failed, check if the connection is active (it could be
		// terminated in the meantime by the user i.e.)
		if (!isActive())
			return true;
		// user is using an incompatible version of debugger:
		getDebugHandler().wrongDebugServer();
		return false;
	}

