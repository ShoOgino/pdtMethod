	/**
	 * This method is used for detecting protocol version of Debugger
	 * 
	 * @return <code>true</code> if succeeded to detect, otherwise
	 *         <code>false</code>
	 */
	protected boolean detectProtocolID() {
		String isWebServerLaunch = getDebugHandler().getDebugTarget().getLaunch()
				.getAttribute(IDebugParametersKeys.WEB_SERVER_DEBUGGER);
		boolean isWebDebug = (isWebServerLaunch != null && Boolean.valueOf(isWebServerLaunch).booleanValue());
		boolean isUseNewProtocol = true;
		try {
			ILaunchConfiguration config = getDebugHandler().getDebugTarget().getLaunch().getLaunchConfiguration();
			String debuggerId = config.getAttribute(PHPDebugCorePreferenceNames.PHP_DEBUGGER_ID,
					DebuggerCommunicationDaemon.ZEND_DEBUGGER_ID);
			if (DebuggerCommunicationDaemon.ZEND_DEBUGGER_ID.equals(debuggerId)) {
				ZendDebuggerConfiguration debuggerConfiguration = (ZendDebuggerConfiguration) PHPDebuggersRegistry
						.getDebuggerConfiguration(debuggerId);
				isUseNewProtocol = debuggerConfiguration.isUseNewProtocol();
			}
		} catch (CoreException e) {
			Logger.logException(e);
		}

		if (isWebDebug && PHPDebugUtil.isSystem5()) {
			if (setProtocol(COMMERCIAL_I5_PROTOCOL_ID_LATEST)) {
				return true;
			}
			if (setProtocol(COMMERCIAL_PROTOCOL_ID_2006040905)) {
				warnOlderDebugVersion();
				return true;
			}
			if (setProtocol(COMMERCIAL_I5_PROTOCOL_ID_2006040904)) {
				warnOlderDebugVersion();
				return true;
			}
			if (setProtocol(COMMERCIAL_I5_PROTOCOL_ID_2006040902)) {
				warnOlderDebugVersion();
				return true;
			}
			// Debugger is not an i5 edition
			warnNonI5Debugger();
			finish();
		} else {
			// check whether debugger is using the latest protocol ID:
			if (isUseNewProtocol && setProtocol(COMMERCIAL_PROTOCOL_ID_LATEST)) {
				return true;
			}
			if (setProtocol(COMMERCIAL_PROTOCOL_ID_2006040905)) {
				// do not warn that it is old, it does not support Add Files
				// only
				return true;
			}
			if (setProtocol(COMMERCIAL_PROTOCOL_ID_2006040903)) {
				warnOlderDebugVersion();
				return true;
			}
			// check whether debugger is using one of older protocol ID:
			if (setProtocol(COMMERCIAL_PROTOCOL_ID_2006040901)) {
				// warn user that he is using an old debugger
				warnOlderDebugVersion();
				return true;
			}
			// All of above failed, check if the connection is active (it could
			// be
			// terminated in the meantime by the user i.e.)
			if (!isActive()) {
				return true;
			}
			// user is using an incompatible version of debugger:
			getDebugHandler().wrongDebugServer();
		}
		return false;
	}

