	protected void update(Node descriptor) {
		DBGpTarget target = (DBGpTarget) getDebugTarget();
		// Set up descriptor
		fDescriptor = descriptor;
		// Set name
		fName = DBGpResponse.getAttribute(fDescriptor, "name", //$NON-NLS-1$
				target.getUseExtendedProperties() != 0 ? target.getBinaryEncoding() : null);
		// Set full name (elements chain)
		fFullName = DBGpResponse.getAttribute(fDescriptor, "fullname", //$NON-NLS-1$
				target.getUseExtendedProperties() != 0 ? target.getBinaryEncoding() : null);
		// Set address
		fAddress = DBGpResponse.getAttribute(fDescriptor, "address"); //$NON-NLS-1$
		// Set facets
		String facets = DBGpResponse.getAttribute(fDescriptor, "facet"); //$NON-NLS-1$
		if (facets.contains("static")) { //$NON-NLS-1$
			addFacets(Facet.MOD_STATIC);
		}
		if (facets.contains("public")) { //$NON-NLS-1$
			addFacets(Facet.MOD_PUBLIC);
		} else if (facets.contains("protected")) { //$NON-NLS-1$
			addFacets(Facet.MOD_PROTECTED);
		} else if (facets.contains("private")) { //$NON-NLS-1$
			addFacets(Facet.MOD_PRIVATE);
		}
		// Adjust name
		if (hasFacet(KIND_ARRAY_MEMBER)) {
			fName = '[' + fName + ']';
		} else if (hasFacet(Facet.MOD_STATIC) && fName.startsWith(":")) { //$NON-NLS-1$
			fName = fName.substring(fName.lastIndexOf(':') + 1);
		} else if (fName.equals("::")) { //$NON-NLS-1$
			fName = VariablesUtil.CLASS_INDICATOR;
		}
		// Hopefully this will put the $ at appropriate point in the name
		if (fFullName.length() > 1 && fName.equals(fFullName.substring(1))) {
			fName = fFullName;
		}
		// Build value
		String type = DBGpResponse.getAttribute(fDescriptor, "type"); //$NON-NLS-1$
		// Catch previous value string if there is any
		String previousValueString = null;
		if (fValue != null) {
			previousValueString = fValue.fValueString;
		}
		fDataType = DataType.find(type);
		if (fValue != null && fValue.getDataType() == fDataType) {
			fValue.update(fDescriptor);
		} else {
			fValue = (new DBGpValueBuilder()).build(this);
		}
		// Check if value has changed
		if (previousValueString != null) {
			fHasValueChanged = !previousValueString.equals(fValue.fValueString);
		}
	}

