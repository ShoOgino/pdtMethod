	public void breakpointRemoved(IBreakpoint breakpoint, boolean onlyHandleEnabledBreakpoints) {
		if (supportsBreakpoint(breakpoint)) {
			try {
				if (onlyHandleEnabledBreakpoints
						// Since eclipse 4.10, breakpoint.isEnabled() is always
						// false when disabling the breakpoint using
						// CTRL-SHIFT-B, so add getMarker().exists() check.
						&& breakpoint.getMarker().exists() && !breakpoint.isEnabled()) {
					// https://bugs.eclipse.org/bugs/show_bug.cgi?id=538315
					// XXX: the breakpoint removal was already handled by
					// breakpointChanged(IBreakpoint, IMarkerDelta), stop
					// here...
					// ... except that getMarker().exists() will be false when
					// deleting an already-disabled breakpoint using
					// CTRL-SHIFT-B.
					return;
				}
			} catch (CoreException e) {
				Logger.logException("PHPDebugTarget: Exception Removing Breakpoint", e); //$NON-NLS-1$
				return;
			}
			fLastcmd = "breakpointRemoved"; //$NON-NLS-1$
			PHPLineBreakpoint bp = (PHPLineBreakpoint) breakpoint;
			Breakpoint runtimeBreakpoint = bp.getRuntimeBreakpoint();
			Logger.debugMSG("PHPDebugTarget: Removing Breakpoint - File " //$NON-NLS-1$
					+ runtimeBreakpoint.getFileName() + " Line Number " //$NON-NLS-1$
					+ runtimeBreakpoint.getLineNumber());
			fStatus = debugger.removeBreakpoint(runtimeBreakpoint, fBreakpointRemovedResponseHandler);
			if (!fStatus && debugger.isActive()) {
				Logger.log(Logger.ERROR, "PHPDebugTarget: debugger.removeBreakpoint return false"); //$NON-NLS-1$
			}
		}
	}

