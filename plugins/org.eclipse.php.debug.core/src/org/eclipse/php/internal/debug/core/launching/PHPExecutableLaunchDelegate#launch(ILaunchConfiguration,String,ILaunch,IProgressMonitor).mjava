	public void launch(ILaunchConfiguration configuration, String mode,
			ILaunch launch, IProgressMonitor monitor) throws CoreException {
		// Check for previous launches.
		if (!PHPLaunchUtilities.notifyPreviousLaunches(launch)) {
			monitor.setCanceled(true);
			monitor.done();
			return;
		}
		PHPLaunchUtilities.showDebugView();
		IProgressMonitor subMonitor; // the total of monitor is 100
		if (monitor.isCanceled()) {
			return;
		}
		PHPexeItem phpExeItem = PHPLaunchUtilities.getPHPExe(configuration);
		if (phpExeItem == null) {
			Logger.log(Logger.ERROR,
					"Launch configuration could not find PHP exe item"); //$NON-NLS-1$
			monitor.setCanceled(true);
			monitor.done();
			return;
		}
		String phpExeString = configuration.getAttribute(
				IPHPDebugConstants.ATTR_EXECUTABLE_LOCATION, (String) null);
		String phpIniPath = configuration.getAttribute(
				IPHPDebugConstants.ATTR_INI_LOCATION, (String) null);
		String fileName = configuration.getAttribute(
				IPHPDebugConstants.ATTR_FILE_FULL_PATH, (String) null);
		boolean runWithDebugInfo = configuration.getAttribute(
				IPHPDebugConstants.RUN_WITH_DEBUG_INFO, true);

		IProject project = null;
		String file = configuration.getAttribute(IPHPDebugConstants.ATTR_FILE,
				(String) null);
		if (file != null) {
			IResource resource = ResourcesPlugin.getWorkspace().getRoot()
					.findMember(file);
			if (resource != null) {
				project = resource.getProject();
			} else {
				String projectName = configuration.getAttribute(
						IPHPDebugConstants.ATTR_PROJECT_NAME, (String) null);
				if (projectName != null) {
					IProject resolved = ResourcesPlugin.getWorkspace()
							.getRoot().getProject(projectName);
					if (resolved != null && resolved.isAccessible()) {
						project = resolved;
					}
				}
			}
		}

		if (monitor.isCanceled()) {
			return;
		}

		if (fileName == null || fileName.equals("")) { //$NON-NLS-1$
			displayErrorMessage(PHPDebugCoreMessages.PHPExecutableLaunchDelegate_0);
			return;
		}

		if (phpExeString == null) {
			displayErrorMessage(PHPDebugCoreMessages.PHPExecutableLaunchDelegate_4);
			return;
		}

		subMonitor = new SubProgressMonitor(monitor, 10); // 10 of 100

		// Locate the php.ini by using the attribute. If the attribute was null,
		// try to locate an php.ini that exists next to the executable.
		File phpIni = (phpIniPath != null && new File(phpIniPath).exists()) ? new File(
				phpIniPath) : PHPINIUtil.findPHPIni(phpExeString);
		File tempIni = PHPINIUtil.prepareBeforeDebug(phpIni, phpExeString,
				project);
		launch.setAttribute(IDebugParametersKeys.PHP_INI_LOCATION,
				tempIni.getAbsolutePath());

		if (mode.equals(ILaunchManager.DEBUG_MODE) || runWithDebugInfo == true) {
			boolean stopAtFirstLine = configuration.getAttribute(
					IDebugParametersKeys.FIRST_LINE_BREAKPOINT,
					PHPProjectPreferences.getStopAtFirstLine(project));

			int requestPort = getDebugPort(phpExeItem);

			ILaunchConfigurationWorkingCopy wc;
			if (configuration.isWorkingCopy()) {
				wc = (ILaunchConfigurationWorkingCopy) configuration;
			} else {
				wc = configuration.getWorkingCopy();
			}

			// Set Project Name
			if (project != null) {
				wc.setAttribute(IPHPDebugConstants.PHP_Project, project
						.getFullPath().toString());
			}

			// Set transfer encoding:
			wc.setAttribute(IDebugParametersKeys.TRANSFER_ENCODING,
					PHPProjectPreferences.getTransferEncoding(project));
			wc.setAttribute(IDebugParametersKeys.OUTPUT_ENCODING,
					PHPProjectPreferences.getOutputEncoding(project));
			wc.setAttribute(IDebugParametersKeys.PHP_DEBUG_TYPE,
					IDebugParametersKeys.PHP_EXE_SCRIPT_DEBUG);
			wc.doSave();

			if (monitor.isCanceled()) {
				return;
			}

			// Generate a session id for this launch and put it in the map
			int sessionID = DebugSessionIdGenerator.generateSessionID();
			PHPSessionLaunchMapper.put(sessionID, launch);

			// Define all needed debug attributes:
			launch.setAttribute(IDebugParametersKeys.PORT,
					Integer.toString(requestPort));
			launch.setAttribute(IDebugParametersKeys.FIRST_LINE_BREAKPOINT,
					Boolean.toString(stopAtFirstLine));
			launch.setAttribute(IDebugParametersKeys.SESSION_ID,
					Integer.toString(sessionID));

			// Check that the debug daemon is functional
			// DEBUGGER - Make sure that the active debugger id is indeed Zend's
			// debugger
			if (!PHPLaunchUtilities.isDebugDaemonActive(requestPort,
					DebuggerCommunicationDaemon.ZEND_DEBUGGER_ID)) {
				PHPLaunchUtilities
						.showLaunchErrorMessage(NLS
								.bind(PHPDebugCoreMessages.ExeLaunchConfigurationDelegate_PortInUse,
										requestPort, phpExeItem.getName()));
				monitor.setCanceled(true);
				monitor.done();
				return;
			}

			// Trigger the debug session by initiating a debug requset to the
			// php.exe
			debugPHPExecutable(launch, phpExeString, fileName);

		} else {
			// resolve location
			IPath phpExe = new Path(phpExeString);

			String[] envp = DebugPlugin.getDefault().getLaunchManager()
					.getEnvironment(configuration);
			File phpExeFile = new File(phpExeString);
			String phpIniLocation = launch
					.getAttribute(IDebugParametersKeys.PHP_INI_LOCATION);

			// Determine PHP configuration file location:
			String phpConfigDir = phpExeFile.getParent();
			if (phpIniLocation != null && !phpIniLocation.equals("")) { //$NON-NLS-1$
				phpConfigDir = new File(phpIniLocation).getParent();
			}

			// Detect PHP SAPI type:
			String sapiType = null;
			String phpV = null;
			PHPexeItem[] items = PHPexes.getInstance().getAllItems();
			for (PHPexeItem item : items) {
				if (item.getExecutable().equals(phpExeFile)) {
					sapiType = item.getSapiType();
					phpV = item.getVersion();
					break;
				}
			}

			String[] args = PHPLaunchUtilities.getProgramArguments(launch
					.getLaunchConfiguration());
			String[] cmdLine = PHPLaunchUtilities.getCommandLine(
					launch.getLaunchConfiguration(), phpExeString,
					phpConfigDir, fileName,
					PHPexeItem.SAPI_CLI.equals(sapiType) ? args : null, phpV);

			// Set library search path:
			String libPath = PHPLaunchUtilities
					.getLibrarySearchPathEnv(phpExeFile.getParentFile());
			if (libPath != null) {
				String[] envpNew = new String[envp == null ? 1
						: envp.length + 1];
				if (envp != null) {
					System.arraycopy(envp, 0, envpNew, 0, envp.length);
				}
				envpNew[envpNew.length - 1] = libPath;
				envp = envpNew;
			}

			if (monitor.isCanceled()) {
				return;
			}

			File workingDir = new File(fileName).getParentFile();
			Process p = workingDir.exists() ? DebugPlugin.exec(cmdLine,
					workingDir, envp) : DebugPlugin.exec(cmdLine, null, envp);

			// Attach a crash detector
			new Thread(new ProcessCrashDetector(launch, p)).start();

			IProcess process = null;

			// add process type to process attributes
			Map<String, String> processAttributes = new HashMap<String, String>();
			String programName = phpExe.lastSegment();
			String extension = phpExe.getFileExtension();

			if (extension != null) {
				programName = programName.substring(0, programName.length()
						- (extension.length() + 1));
			}

			programName = programName.toLowerCase();
			processAttributes.put(IProcess.ATTR_PROCESS_TYPE, programName);

			if (p != null) {
				subMonitor = new SubProgressMonitor(monitor, 80); // 10+80 of
																	// 100;
				subMonitor
						.beginTask(
								MessageFormat
										.format("start launch", new Object[] { configuration.getName() }), IProgressMonitor.UNKNOWN); //$NON-NLS-1$
				process = DebugPlugin.newProcess(launch, p,
						phpExe.toOSString(), processAttributes);
				if (process == null) {
					p.destroy();
					throw new CoreException(new Status(IStatus.ERROR,
							PHPDebugPlugin.getID(), 0, null, null));
				}
				subMonitor.done();
			}
			process.setAttribute(IProcess.ATTR_CMDLINE, fileName);

			if (CommonTab.isLaunchInBackground(configuration)) {
				// refresh resources after process finishes
				/*
				 * if (RefreshTab.getRefreshScope(configuration) != null) {
				 * BackgroundResourceRefresher refresher = new
				 * BackgroundResourceRefresher(configuration, process);
				 * refresher.startBackgroundRefresh(); }
				 */
			} else {
				// wait for process to exit
				while (!process.isTerminated()) {
					try {
						if (monitor.isCanceled()) {
							process.terminate();
							break;
						}
						Thread.sleep(50);
					} catch (InterruptedException e) {
					}
				}

				// refresh resources
				subMonitor = new SubProgressMonitor(monitor, 10); // 10+80+10 of
																	// 100;
				RefreshTab.refreshResources(configuration, subMonitor);
			}
		}
	}

