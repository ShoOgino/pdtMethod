		/**
		 * @see java.lang.Thread#run()
		 */
		public void run() {
			while (isAlive) {

				while (!inWork && isAlive) {
					try {
						synchronized (this) {
							synchronized (READY_FOR_RESTART_LOCK) {
								READY_FOR_RESTART_LOCK.notify(); // release one
																	// thread.

							}
							wait();
							// This way we will start working until the
							// connectionCreator
							// has finished updating the in + out.
							synchronized (in) {
							}
						}
					} catch (InterruptedException e) {
						if (PHPDebugPlugin.DEBUG) {
							System.out
									.println("interrupted: inWork = " + inWork + ", isAlive = " + isAlive); //$NON-NLS-1$ //$NON-NLS-2$
						}
					}
				}

				try {

					if (!isAlive) {
						break;
					}

					// reads the length
					int num = in.readInt();
					if (num < 0) {
						shutDown();
						if (PHPDebugPlugin.DEBUG) {
							System.out
									.println("Socket error (length is negative): possibly Server is SSL, Client is not."); //$NON-NLS-1$
						}
						Logger.log(Logger.ERROR,
								"Socket error (length is negative): possibly Server is SSL, Client is not."); //$NON-NLS-1$
					}

					// We have a new message. process it !!.
					// This part is synchronized since we do not want the thread
					// to be stopped
					// when in processing of a message.
					synchronized (this) {
						int messageType = getMessageType(in);
						// If this is the first message, the protocol is still
						// held as invalid.
						// Check that the first message has the
						// DebugSessionStartedNotification type. If not, then we
						// can assume that the remote debugger protocol has a
						// different version then expected.
						if (!validProtocol && messageType != startMessageId) {
							// display an error message that the protocol in
							// used is wrong.
							final String errorMessage = MessageFormat
									.format(
											PHPDebugCoreMessages.Debugger_Incompatible_Protocol,
											new Object[] { String
													.valueOf(RemoteDebugger.PROTOCOL_ID_LATEST) });
							Status status = new Status(IStatus.ERROR,
									PHPDebugPlugin.getID(),
									IPHPDebugConstants.INTERNAL_ERROR,
									errorMessage, null);
							DebugPlugin.log(status);
							Display.getDefault().asyncExec(new Runnable() {
								public void run() {
									MessageDialog.openError(Display
											.getDefault().getActiveShell(),
											"Debugger Error", errorMessage); //$NON-NLS-1$
								}
							});
							shutDown();
							return;
						}
						validProtocol = true;

						IDebugMessage message = DebugMessagesRegistry
								.getMessage(messageType);
						if (message != null) {
							if (message instanceof OutputNotification) {
								message.setTransferEncoding(outputEncoding);
							} else {
								message.setTransferEncoding(transferEncoding);
							}
						}

						// handle the message
						if (message instanceof IDebugNotificationMessage) {
							message.deserialize(in);
							// getCommunicationClient().handleNotification((Notification)message);
							// PUT NOTIFICATION TO NOTIFICATION QUEUE
							inputMessageHandler.queueIn(message);
						} else if (message instanceof IDebugResponseMessage) {
							message.deserialize(in);
							int idd = ((IDebugResponseMessage) message).getID();
							// responseQueue.queueIn(message);
							// INSERT RESPONSE TO TABLE AND RELEASE THE THREAD
							// WAITING FOR THE REQUEST
							ResponseHandler handler = responseHandlers
									.get(new Integer(idd)); // find the handler.
							if (handler == null) {
								responseTable.put(/* requestId */idd, message);
								IDebugRequestMessage req = (IDebugRequestMessage) requestsTable
										.remove(idd); // find the request.
								if (req != null) {
									synchronized (req) {
										req.notifyAll(); // Notify the response
															// is here.
									}
								} else {
									// Remove this message.
									responseTable.remove(idd);
								}
							} else {
								inputMessageHandler.queueIn(message);
							}
						} else if (message instanceof IDebugRequestMessage) { // this
																				// is
																				// a
																				// request.
							message.deserialize(in);
							// Response response =
							// getCommunicationClient().handleRequest((Request)message);
							inputMessageHandler.queueIn(message);
						}
					} // end of synchronized part.

				} catch (IOException e) {
					// PHPDebugPlugin.log(e);
					shutDown();
				} catch (Exception e) {
					PHPDebugPlugin.log(e);
				}
			}
		}

