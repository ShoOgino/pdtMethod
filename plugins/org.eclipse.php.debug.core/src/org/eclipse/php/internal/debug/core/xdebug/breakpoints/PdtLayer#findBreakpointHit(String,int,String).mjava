	@Override
	public IBreakpoint findBreakpointHit(String sourceFileLocation, int lineno, String exception) {
		IBreakpoint bpFound = null;
		IBreakpoint[] breakpoints = DebugPlugin.getDefault().getBreakpointManager()
				.getBreakpoints(getBreakpointModelID());
		for (int i = 0; i < breakpoints.length; i++) {
			IBreakpoint breakpoint = breakpoints[i];
			if (supportsBreakpoint(breakpoint)) {
				if (breakpoint instanceof PHPLineBreakpoint && exception.isEmpty()) {
					PHPLineBreakpoint lineBreakpoint = (PHPLineBreakpoint) breakpoint;
					Breakpoint zBP = lineBreakpoint.getRuntimeBreakpoint();
					String bpFileLocation = zBP.getFileName();
					int bLineNumber = zBP.getLineNumber();
					try {
						if (bLineNumber == lineno && FileUtils.isSameFile(bpFileLocation, sourceFileLocation)) {
							bpFound = breakpoint;
							if (DBGpLogger.debugBP()) {
								DBGpLogger.debug("breakpoint at " + sourceFileLocation + "(" //$NON-NLS-1$ //$NON-NLS-2$
										+ lineno + ") found"); //$NON-NLS-1$
							}
						}
					} catch (Exception e) {
						/*
						 * Ignore as some path descriptors might be illegal for this check e.g. DLTK
						 * external library scripts (see next step).
						 */
					}
					// TODO - support for DLTK external libraries
				} else if (breakpoint instanceof IPHPExceptionBreakpoint) {
					IPHPExceptionBreakpoint exBreakpoint = (IPHPExceptionBreakpoint) breakpoint;
					if (exBreakpoint.getExceptionName().equals(exception)) {
						bpFound = exBreakpoint;
						if (DBGpLogger.debugBP()) {
							DBGpLogger.debug("exception breakpoint at " + sourceFileLocation + "(" //$NON-NLS-1$ //$NON-NLS-2$
									+ lineno + ") found"); //$NON-NLS-1$
						}
					}
				}
			}
		}
		return bpFound;
	}

