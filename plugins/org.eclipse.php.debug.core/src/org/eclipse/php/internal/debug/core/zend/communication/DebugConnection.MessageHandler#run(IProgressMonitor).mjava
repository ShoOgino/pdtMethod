		/*
		 * (non-Javadoc)
		 * 
		 * @see org.eclipse.core.runtime.jobs.Job#run(org.eclipse.core.runtime.
		 * IProgressMonitor)
		 */
		public IStatus run(IProgressMonitor monitor) {
			// 'while(true)' is OK here since we have blocking queue
			while (true) {
				if (monitor.isCanceled())
					return Status.OK_STATUS;
				try {
					IDebugMessage incomingMessage = (IDebugMessage) inputMessageQueue.queueOut();
					Logger.debugMSG("NEW MESSAGE RECEIVED: " + incomingMessage); //$NON-NLS-1$
					try {
						boolean isDebugConnectionTest = false;
						// First debug message has arrived (SESSION STARTED)
						if (incomingMessage instanceof DebugSessionStartedNotification) {
							DebugSessionStartedNotification sessionStartedMessage = (DebugSessionStartedNotification) incomingMessage;
							setResponseTimeout(sessionStartedMessage);
							isDebugConnectionTest = sessionStartedMessage.getQuery()
									.indexOf("testConnection=true") != -1; //$NON-NLS-1$
							// This is a connection test...
							if (isDebugConnectionTest) {
								String sourceHost = DebugConnection.this.socket.getInetAddress().getHostAddress();
								// Notify success
								if (verifyProtocolID(sessionStartedMessage.getServerProtocolID())) {
									sendRequest(new StartRequest());
									DebugServerTestController.getInstance().notifyTestListener(
											new DebugServerTestEvent(sourceHost, DebugServerTestEvent.TEST_SUCCEEDED));
								} else {
									DebugServerTestController.getInstance().notifyTestListener(new DebugServerTestEvent(
											sourceHost, DebugServerTestEvent.TEST_FAILED_DEBUGER_VERSION));
								}
							}
							// START DEBUG (create debug target)
							else {
								hookDebugSession(sessionStartedMessage);
							}
						}
						// Creation of debug session has succeeded
						if (debugTarget != null) {
							// Try to find relevant handler for the message:
							IDebugMessageHandler messageHandler = createMessageHandler(incomingMessage);
							if (messageHandler != null) {
								Logger.debugMSG("CREATING MESSAGE HANDLER: " //$NON-NLS-1$
										+ messageHandler.getClass().getName().replaceFirst(".*\\.", "")); //$NON-NLS-1$ //$NON-NLS-2$
								// Handle the request
								messageHandler.handle(incomingMessage, debugTarget);
								if (messageHandler instanceof IDebugRequestHandler) {
									// Create response
									IDebugResponseMessage response = ((IDebugRequestHandler) messageHandler)
											.getResponseMessage();
									// Send response
									synchronized (connectionOut) {
										byteArray.reset();
										response.serialize(outArray);
										connectionOut.writeInt(byteArray.size());
										byteArray.writeTo(connectionOut);
										connectionOut.flush();
									}
								}
							}
							// Handle the response
							else if (incomingMessage instanceof IDebugResponseMessage) {
								IDebugResponseMessage r = (IDebugResponseMessage) incomingMessage;
								// Take the request ID from the response.
								int requestId = r.getID();
								// Find the request.
								IDebugRequestMessage req = (IDebugRequestMessage) requestsTable.remove(requestId);
								// Find the handler.
								ResponseHandler handler = responseHandlers.remove(Integer.valueOf(requestId));
								handler.handleResponse(req, r);
							}
							// Handle dummy connection close
							else if (incomingMessage == CONNECTION_CLOSED) {
								handleClosed();
							}
						}
						// No debug target?
						else {
							handleClosed();
						}
					}
					// Error processing the current message.
					catch (Exception e) {
						PHPDebugPlugin.log(e);
					}
				} catch (Exception e) {
					PHPDebugPlugin.log(e);
					shutdown();
				}
			}
		}

