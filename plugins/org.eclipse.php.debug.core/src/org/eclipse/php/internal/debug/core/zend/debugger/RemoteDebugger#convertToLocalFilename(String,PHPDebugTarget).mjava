	/**
	 * Returns local file name corresponding to the given remote path
	 * @param remoteFile
	 * @return local file, or remoteFile as is in case of resolving failure
	 */
	public static String convertToLocalFilename(String remoteFile, PHPDebugTarget debugTarget) {
		if (debugTarget.getContextManager().isResolveBlacklisted(remoteFile)) {
			return remoteFile;
		}

		if (debugTarget.isPHPCGI() && new File(remoteFile).exists()) {
			IFile wsFile = ResourcesPlugin.getWorkspace().getRoot().getFileForLocation(new Path(remoteFile));
			if (wsFile != null) {
				return wsFile.getFullPath().toString();
			}
			return remoteFile;
		}

		try {
			String previousScript = debugTarget.resolvePreviousScript();
			String currentScriptDir = "";
			if (previousScript != null) {
				currentScriptDir = new Path(previousScript).removeLastSegments(1).toString();
			}

			String cwd = getCurrentWorkingDirectory(debugTarget);
			PathEntry pathEntry = DebugSearchEngine.find(remoteFile, debugTarget, cwd == null ? "" : cwd, currentScriptDir);
			if (pathEntry != null) {
				return pathEntry.getResolvedPath();
			}
		} catch (InterruptedException e) {
		} catch (CoreException e) {
			Logger.logException(e);
		}
		return remoteFile; // in case of failure
	}

