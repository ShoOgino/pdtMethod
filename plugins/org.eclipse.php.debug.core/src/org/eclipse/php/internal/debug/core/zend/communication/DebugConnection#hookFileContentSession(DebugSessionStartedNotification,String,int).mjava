	/**
	 * Hook a session that should handle a file content request only when the Zend
	 * Platform GUI is asking to display the source code of the script that caused
	 * an event.
	 * 
	 * @param fileName
	 *            The requested file.
	 * @param lineNumber
	 *            Line number
	 */
	protected void hookFileContentSession(DebugSessionStartedNotification notification, String fileName,
			int lineNumber) {
		try {
			FileContentDebugHandler handler = new FileContentDebugHandler(this);
			IRemoteDebugger debugger = handler.getRemoteDebugger();
			if (!debugger.isActive()) {
				throw new IllegalStateException(
						"Could not read the content of the file. The debugger is not connected."); //$NON-NLS-1$
			}
			try {
				if (PHPDebugUtil.isSystem5()) {
					debugger.setProtocol(RemoteDebugger.COMMERCIAL_I5_PROTOCOL_ID_LATEST);
				} else {
					debugger.setProtocol(RemoteDebugger.COMMERCIAL_PROTOCOL_ID_LATEST);
				}
				try {
					fileName = URLDecoder.decode(fileName, "UTF-8"); //$NON-NLS-1$
				} catch (UnsupportedEncodingException e) {
				}
				byte[] content = debugger.getFileContent(fileName);
				if (content == null) {
					content = new byte[0];
				}
				String serverAddress = extractParameterFromQuery(notification.getOptions(), "server_address"); //$NON-NLS-1$
				String originalURL = notification.getUri();
				IRemoteFileContentRequestor requestor = RemoteFileContentRequestorsRegistry.getInstance()
						.removeRequestor(fileName, lineNumber);
				if (requestor == null) {
					RemoteFileContentRequestorsRegistry.getInstance().handleExternalRequest(content, serverAddress,
							originalURL, fileName, lineNumber);
					return;
				}
				requestor.fileContentReceived(content, serverAddress, originalURL, fileName, lineNumber);
			} finally {
				debugger.closeDebugSession();
			}
		} catch (Exception e) {
			Logger.logException(e);
		}
	}

