	/**
	 * Returns a SSHTunnel instance in case defined in the given launch
	 * configuration. The returned SSHTunnel may be null in case the given
	 * configuration is not defined to use one. Also, the returned instance
	 * might be shared between other launches as well, and might already be in a
	 * connected state.
	 * 
	 * @param configuration
	 * @return An SSHTunnel instance; Null, in case the configuration does not
	 *         need one.
	 */
	public static SSHTunnel getSSHTunnel(ILaunchConfiguration configuration) {
		try {
			if (configuration.getAttribute(IPHPDebugConstants.USE_SSH_TUNNEL,
					false)) {
				String remoteHost = PHPLaunchUtilities
						.getDebugHost(configuration);
				int port = PHPLaunchUtilities.getDebugPort(configuration);
				if (remoteHost != null && remoteHost.length() > 0
						&& port > -1) {
					String userName = configuration.getAttribute(
							IPHPDebugConstants.SSH_TUNNEL_USER_NAME, "");//$NON-NLS-1$
					String password = PHPLaunchUtilities
							.getSecurePreferences(remoteHost).get(userName, "");//$NON-NLS-1$
					return SSHTunnelFactory.getSSHTunnel(remoteHost, userName,
							password, port, port);
				}
			}
		} catch (CoreException e) {
			Logger.logException("Error obtaining an SSHTunnel instance", e);//$NON-NLS-1$
		} catch (StorageException e) {
			Logger.logException(
					"Error accessing the secured storage for the debug SSH tunnel", //$NON-NLS-1$
					e);
		}
		return null;
	}

