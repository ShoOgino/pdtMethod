	/**
	 * Creates and returns a command line invocation string for the execution of
	 * the PHP script.
	 * 
	 * @param configuration
	 *            Launch configuration
	 * @param phpExe
	 *            PHP Executable path
	 * @param phpConfigDir
	 *            PHP configuration file location (directory where php.ini
	 *            resides)
	 * @param scriptPath
	 *            Script path
	 * @param phpIniLocation
	 *            PHP configuration file path
	 * @param args
	 *            Command line arguments, if using PHP CLI, otherwise -
	 *            <code>null</code>
	 * @param phpVersion
	 * @return commands array
	 * @throws CoreException
	 */
	public static String[] getCommandLine(ILaunchConfiguration configuration,
			String phpExe, String phpConfigDir, String scriptPath,
			String[] args, String phpVersion) throws CoreException {
		// Check if we should treat ASP tags as PHP tags
		IProject project = getProject(configuration);
		String aspTags = ProjectOptions.isSupportingAspTags(project) ? "on" //$NON-NLS-1$
				: "off"; //$NON-NLS-1$
		String shortOpenTag = ProjectOptions.useShortTags(project) ? "on" //$NON-NLS-1$
				: "off"; //$NON-NLS-1$

		List<String> cmdLineList = new LinkedList<String>();
		cmdLineList.addAll(Arrays.asList(new String[] { phpExe, "-c", //$NON-NLS-1$
				phpConfigDir, "-d", "asp_tags=" + aspTags, "-d", //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
				"short_open_tag=" + shortOpenTag, scriptPath })); //$NON-NLS-1$
		if (args != null) {
			cmdLineList.addAll(Arrays.asList(args));
		}
		return cmdLineList.toArray(new String[cmdLineList.size()]);
	}

