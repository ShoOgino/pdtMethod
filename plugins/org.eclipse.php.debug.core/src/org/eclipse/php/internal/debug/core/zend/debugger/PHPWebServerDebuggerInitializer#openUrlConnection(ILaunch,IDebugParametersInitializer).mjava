	/**
	 * Issue the request to the debug server using URL connection mechanism
	 * 
	 * @param launch
	 * @param parametersInitializer
	 * @throws DebugException
	 */
	protected void openUrlConnection(ILaunch launch,
			IDebugParametersInitializer parametersInitializer)
			throws DebugException {
		URL requestURL = parametersInitializer.getRequestURL(launch);
		try {
			// We only support this kind of debug session initializer here:
			if (parametersInitializer instanceof IWebDebugParametersInitializer) {
				IWebDebugParametersInitializer webParametersInitializer = (IWebDebugParametersInitializer) parametersInitializer;

				StringBuilder getParams = new StringBuilder("?");

				// Initialize debug parameters (using cookies):
				Hashtable<String, String> debugParameters = parametersInitializer
						.getDebugParameters(launch);
				if (debugParameters != null) {
					Enumeration<String> k = debugParameters.keys();
					while (k.hasMoreElements()) {
						String key = k.nextElement();
						String value = debugParameters.get(key);
						getParams.append(URLEncoder.encode(key, URL_ENCODING))
								.append('=').append(
										URLEncoder.encode(value, URL_ENCODING));
						if (k.hasMoreElements()) {
							getParams.append('&');
						}
					}
				}

				// Initialize with additional GET parameters
				String requestMethod = webParametersInitializer
						.getRequestMethod(launch);
				if (IWebDebugParametersInitializer.GET_METHOD
						.equals(requestMethod)) {
					Hashtable<String, String> requestParameters = webParametersInitializer
							.getRequestParameters(launch);
					if (requestParameters != null) {
						Enumeration<String> k = requestParameters.keys();
						while (k.hasMoreElements()) {
							String key = k.nextElement();
							String value = requestParameters.get(key);
							getParams.append('&');
							getParams.append(
									URLEncoder.encode(key, URL_ENCODING))
									.append('=').append(
											URLEncoder.encode(value,
													URL_ENCODING));
						}
					}
				}

				requestURL = new URL(requestURL.getProtocol(), requestURL
						.getHost(), requestURL.getPort(), requestURL.getPath()
						+ getParams.toString());

				// Open the connection:
				if (PHPDebugPlugin.DEBUG) {
					System.out.println("Opening URL connection: "
							+ requestURL.toString());
				}
				HttpURLConnection urlConection = (HttpURLConnection) requestURL
						.openConnection();
				urlConection.setDoInput(true);
				urlConection.setDoOutput(true);

				if (requestMethod != null) {
					urlConection.setRequestMethod(requestMethod);
				}

				// Add additional headers
				Hashtable<String, String> headers = webParametersInitializer
						.getRequestHeaders(launch);
				if (headers != null) {
					Enumeration<String> k = headers.keys();
					while (k.hasMoreElements()) {
						String key = k.nextElement();
						String value = URLEncoder.encode(headers.get(key),
								URL_ENCODING);
						if (PHPDebugPlugin.DEBUG) {
							System.out.println("Adding HTTP header: " + key
									+ "=" + value);
						}
						urlConection.addRequestProperty(key, value);
					}
				}

				// Set cookies
				Hashtable<String, String> cookies = webParametersInitializer
						.getRequestCookies(launch);
				if (cookies != null) {
					StringBuilder cookieBuf = new StringBuilder();
					Enumeration<String> k = cookies.keys();
					while (k.hasMoreElements()) {
						String key = k.nextElement();
						String value = cookies.get(key);
						cookieBuf.append(URLEncoder.encode(key, URL_ENCODING))
								.append('=').append(
										URLEncoder.encode(value, URL_ENCODING));
						if (k.hasMoreElements()) {
							cookieBuf.append("; ");
						}
					}
					if (PHPDebugPlugin.DEBUG) {
						System.out.println("Setting cookies: "
								+ cookieBuf.toString());
					}
					urlConection.addRequestProperty("Cookie", cookieBuf
							.toString());
				}

				DataOutputStream outputStream = new DataOutputStream(
						urlConection.getOutputStream());
				try {
					// Initialize with additional POST parameters
					if (requestMethod == IWebDebugParametersInitializer.POST_METHOD) {
						Hashtable<String, String> requestParameters = webParametersInitializer
								.getRequestParameters(launch);
						if (requestParameters != null) {
							StringBuilder postParams = new StringBuilder();
							Enumeration<String> k = requestParameters.keys();
							while (k.hasMoreElements()) {
								String key = k.nextElement();
								String value = requestParameters.get(key);
								postParams.append(
										URLEncoder.encode(key, URL_ENCODING))
										.append('=').append(
												URLEncoder.encode(value,
														URL_ENCODING));
								if (k.hasMoreElements()) {
									postParams.append('&');
								}
							}
							outputStream.writeBytes(postParams.toString());
						}
					}

					// Add raw data
					String rawData = webParametersInitializer
							.getRequestRawData(launch);
					if (rawData != null) {
						outputStream.writeBytes(rawData);
					}
				} finally {
					outputStream.flush();
					outputStream.close();
				}

				String headerKey = urlConection.getHeaderFieldKey(1);
				if (headerKey == null) {
					Logger
							.log(Logger.WARNING,
									"No HeaderKey returned by server. Most likely not started");
					String errorMessage = PHPDebugCoreMessages.DebuggerConnection_Problem_1;
					throw new DebugException(new Status(IStatus.ERROR,
							PHPDebugPlugin.getID(),
							IPHPDebugConstants.INTERNAL_ERROR, errorMessage,
							null));
				}

				for (int i = 1; (headerKey = urlConection.getHeaderFieldKey(i)) != null; i++) {
					if (headerKey.equals("X-Zend-Debug-Server")) {
						String headerValue = urlConection
								.getHeaderField(headerKey);
						if (!headerValue.equals("OK")) {
							Logger.log(Logger.WARNING,
									"Unexpected Header Value returned by Server. "
											+ headerValue);
							String errorMessage = PHPDebugCoreMessages.DebuggerConnection_Problem_2
									+ " - " + headerValue;
							throw new DebugException(new Status(IStatus.ERROR,
									PHPDebugPlugin.getID(),
									IPHPDebugConstants.INTERNAL_ERROR,
									errorMessage, null));
						}
						break;
					}
				}

				InputStream inputStream = urlConection.getInputStream();
				while (inputStream.read() != -1) {
					// do nothing on the content returned by standard stream
				}
				inputStream.close();
			}
		} catch (UnknownHostException e) {
			Logger.logException("Unknown host: " + requestURL.getHost(), e);
		} catch (ConnectException e) {
			Logger.logException("Unable to connect to URL " + requestURL, e);
		} catch (IOException e) {
			Logger.logException("Unable to connect to URL " + requestURL, e);
		} catch (Exception e) {
			Logger.logException(
					"Unexpected exception communicating with Web server", e);
			String errorMessage = e.getMessage();
			throw new DebugException(new Status(IStatus.ERROR, PHPDebugPlugin
					.getID(), IPHPDebugConstants.INTERNAL_ERROR, errorMessage,
					e));
		}
	}

