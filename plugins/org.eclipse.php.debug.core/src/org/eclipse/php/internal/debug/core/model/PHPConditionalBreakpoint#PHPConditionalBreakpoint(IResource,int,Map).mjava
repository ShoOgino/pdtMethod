    /**
     * Constructs a line breakpoint on the given resource at the given line
     * number.
     * 
     * @param resource
     *            file on which to set the breakpoint
     * @param lineNumber
     *            1-based line number of the breakpoint
     * @throws CoreException
     *             if unable to create the breakpoint
     */
    public PHPConditionalBreakpoint(final IResource resource, final int lineNumber, final Map attributes) throws CoreException {
        IWorkspaceRunnable runnable = new IWorkspaceRunnable() {
            public void run(IProgressMonitor monitor) throws CoreException {
                IMarker marker = resource.createMarker("org.eclipse.php.debug.core.PHPConditionalBreakpointMarker");
/*                marker.setAttribute(IBreakpoint.ENABLED, Boolean.TRUE);
                marker.setAttribute(IBreakpoint.ID, getModelIdentifier());
                marker.setAttribute(IMarker.MESSAGE, MessageFormat.format(PHPDebugCoreMessages.LineBreakPointMessage_1, new String[] { resource.getName(), Integer.toString(lineNumber) }));
                marker.setAttribute(IPHPConstants.ConditionEnabled, Boolean.FALSE);
                marker.setAttribute(IPHPConstants.Condition, "");
                marker.setAttribute(IBreakpoint.PERSISTED, true);
                marker.setAttribute(IMarker.LINE_NUMBER, lineNumber);*/
                
        
                attributes.put(IBreakpoint.ENABLED, Boolean.TRUE);
                attributes.put(IBreakpoint.ID, getModelIdentifier());
                attributes.put(IMarker.MESSAGE, MessageFormat.format(PHPDebugCoreMessages.LineBreakPointMessage_1, new String[] { resource.getName(), Integer.toString(lineNumber) }));
                attributes.put(IPHPConstants.ConditionEnabled, Boolean.FALSE);
                attributes.put(IPHPConstants.Condition, "");
                attributes.put(IBreakpoint.PERSISTED, Boolean.FALSE);
                attributes.put(IMarker.LINE_NUMBER, new Integer(lineNumber));
                marker.setAttributes(attributes);
//                if (attributes != null) {
//                    Object attribute = attributes.get(IPHPConstants.Include_Storage);
//                    marker.setAttribute(IPHPConstants.Include_Storage, attribute);
//                    attribute = attributes.get("org.eclipse.wst.sse.ui.extensions.breakpoint.path");
//                    marker.setAttribute("org.eclipse.wst.sse.ui.extensions.breakpoint.path", attribute);
//                }
                setMarker(marker);
                setEnabled(true);
                register(true);
                setPersisted(true);
            }
        };
        resource.getWorkspace().run(runnable, null,IWorkspace.AVOID_UPDATE, null);
    }

