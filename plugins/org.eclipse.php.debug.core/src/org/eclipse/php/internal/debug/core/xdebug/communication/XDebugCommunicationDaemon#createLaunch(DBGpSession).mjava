	/**
	 * create a launch and appropriate debug targets to automate launch
	 * initiation. If any problems occurred, we can throw the session away using session.endSession();
	 * @param session the DBGpSession.
	 */
	private void createLaunch(DBGpSession session) {
		boolean stopAtFirstLine = PHPProjectPreferences.getStopAtFirstLine(null);
		DBGpTarget target = null;
		PathMapper mapper = null;
		PHPSourceLookupDirector srcLocator = new PHPSourceLookupDirector();
		srcLocator.initializeParticipants();
		
		ILaunch remoteLaunch = new Launch(null, ILaunchManager.DEBUG_MODE, srcLocator);
		boolean multiSession = XDebugPreferenceMgr.useMultiSession();

		if (session.getSessionId() == null && !multiSession) {
			// web launch
			target = new DBGpTarget(remoteLaunch, null, null, session.getIdeKey(), stopAtFirstLine, null);						
			Server server = null;
			Server[] servers = ServersManager.getServers();
			for (int i = 0; i < servers.length; i++) {
				if (servers[i].getPort() == session.getRemotePort() && 
					servers[i].getHost().equalsIgnoreCase(session.getRemoteHostname())) {
					server = servers[i];
					break;
				}
			}
			if (server != null) {
				mapper = PathMapperRegistry.getByServer(server);						
			}
			else {
				mapper = new PathMapper(); // create a temporary path mapper, we may look to holding these via the pathmapper registry in the future
				// but they would be persisted. We may try and find one for the particular server or create a temporary one.						
			}
			// need to add ourselves as a session listener for future sessions
			DBGpSessionHandler.getInstance().addSessionListener((IDBGpSessionListener)target);
		}
		else {
			// cli launch or multisession launch create a single shot target
			// The Launch Configuration, Source Locator.
			target = new DBGpTarget(remoteLaunch, null /*no script name*/, session.getIdeKey(), session.getSessionId(), stopAtFirstLine);
			//PathMapper p = PathMapperRegistry.getByPHPExe(null);
			mapper = new PathMapper(); // create a temporary path mapper, we may look to holding these via the pathmapper registry in the future
			// but they currently would be persisted.
		}

		// if we are multisession and the session was not picked up then we need a 
		// multisession target started and added to the launch and listening for more sessions. 
		if (multiSession) {
			DBGpMultiSessionTarget multiSessionTarget = new DBGpMultiSessionTarget(remoteLaunch, null, null, session.getIdeKey(), stopAtFirstLine, null);
			DBGpSessionHandler.getInstance().addSessionListener((IDBGpSessionListener)multiSessionTarget);			
			multiSessionTarget.addDebugTarget(target);
			remoteLaunch.addDebugTarget(multiSessionTarget);
		}

		target.setPathMapper(mapper);
		target.setSession(session);
		session.setDebugTarget(target);
		remoteLaunch.addDebugTarget(target);
		
		DebugPlugin.getDefault().getLaunchManager().addLaunch(remoteLaunch);
		target.sessionReceived((DBGpBreakpointFacade) IDELayerFactory.getIDELayer(), XDebugPreferenceMgr.createSessionPreferences());
		//probably could do waitForInitialSession as session has already been set.
		
		//org.eclipse.php.debug.ui.PHPDebugPerspective
		//org.eclipse.debug.ui.DebugPerspective
		//also look at the PHPLaunchUtilities
		Display.getDefault().asyncExec(new Runnable() {

			public void run() {
				IWorkbenchWindow window = PlatformUI.getWorkbench().getActiveWorkbenchWindow();
				//code the debug perspectives.
				if (!PerspectiveManager.isCurrentPerspective(window, "org.eclipse.php.debug.ui.PHPDebugPerspective")) {
					if(PerspectiveManager.shouldSwitchPerspective(window, "org.eclipse.php.debug.ui.PHPDebugPerspective")) {
						PerspectiveManager.switchToPerspective(window, "org.eclipse.php.debug.ui.PHPDebugPerspective");
					}
				}
			}
			
		});
	}

