	/**
	 * Called by DBGpSession when the session terminates. The session terminates
	 * if we explicitly stop the session, or the script completes process then
	 * it will be a remote server version, so we don't want to terminate the
	 * debug target, but the session will have ended. This target needs to
	 * either be terminated manually or wait for another debug session to be
	 * attached.
	 */
	public void sessionEnded() {
		boolean unexpectedTermination = false;

		synchronized (sessionMutex) {
			session = null;
			if (hasState(STATE_TERMINATING)) {
				// we are terminating, if we are a web launch, we need to issue
				// the stop URL, then terminate the debug target.
				if (isWebLaunch() && !isMultiSessionManaged()) {
					sendStopDebugURL();
				}
				terminateDebugTarget(true);
			} else {

				// if we were suspended and we are now terminating then
				// something
				// has caused debug to end, most likely a bad eval.
				unexpectedTermination = isSuspended();

				// we were not terminating and the session ended. If we are a
				// web
				// launch, then we need to wait for the next session. Otherwise
				// we
				// terminate the debug target.
				if (isWebLaunch() && !isMultiSessionManaged()) {
					if (isSuspended() && DebugPlugin.getDefault() != null) {
						// if we are suspended, then inform eclipse we have
						// resumed
						// so all the user can do is terminate or disconnect
						// while
						// waiting for the next session.
						fireResumeEvent(DebugEvent.RESUME);
						langThread.fireResumeEvent(DebugEvent.RESUME);
					}
					stepping = false;
					setState(STATE_STARTED_SESSION_WAIT);
					langThread.setBreakpoints(null);
				} else {
					terminateDebugTarget(true);
				}
			}
		}

		if (unexpectedTermination && DebugPlugin.getDefault() != null) {
			// an unexpected termination occurred, so put out a message.
			final String errorMessage = PHPDebugCoreMessages.XDebugMessage_unexpectedTermination;
			Status status = new Status(IStatus.ERROR, PHPDebugPlugin.getID(), IPHPDebugConstants.INTERNAL_ERROR,
					errorMessage, null);
			DebugPlugin.log(status);
			if (!Display.getDefault().isDisposed()) {
				Display.getDefault().asyncExec(new Runnable() {
					@Override
					public void run() {
						MessageDialog.openError(Display.getDefault().getActiveShell(),
								PHPDebugCoreMessages.XDebugMessage_debugError, errorMessage);
					}
				});
			}

		}
	}

