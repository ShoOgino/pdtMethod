	/**
	 * Initialize the php executable debugger.
	 * 
	 * @param phpExe
	 * @param fileName
	 * @param workingDir
	 * @param query
	 * @param envVariables
	 * @param phpIniLocation
	 */
	public void initializeDebug(String phpExe, String fileName, String workingDir, String query,
			Map<String, String> envVariables, String phpIniLocation) {
		try {
			File phpExeFile = new File(phpExe);

			// Determine configuration file directory:
			String phpConfigDir = phpExeFile.getParent();
			if (phpIniLocation != null && !phpIniLocation.equals("")) { //$NON-NLS-1$
				phpConfigDir = new File(phpIniLocation).getParent();
			}

			// Detect PHP SAPI type:
			String sapiType = null;
			String phpV = null;
			PHPexeItem[] items = PHPexes.getInstance().getAllItems();
			for (PHPexeItem item : items) {
				if (item.getExecutable().equals(phpExeFile)) {
					sapiType = item.getSapiType();
					phpV = item.getVersion();
					break;
				}
			}

			String[] args = PHPLaunchUtilities.getProgramArguments(launch.getLaunchConfiguration());

			// Prepare the environment
			Map<String, String> additionalLaunchEnvironment = PHPLaunchUtilities.getPHPCGILaunchEnvironment(fileName,
					query, phpConfigDir, phpExeFile.getParent(), sapiType == PHPexeItem.SAPI_CGI ? args : null);
			if (envVariables == null) {
				envVariables = additionalLaunchEnvironment;
			} else {
				additionalLaunchEnvironment.putAll(envVariables);
				envVariables = additionalLaunchEnvironment;
			}
			String[] environmetVars = PHPLaunchUtilities.getEnvironment(launch.getLaunchConfiguration(),
					asAttributesArray(envVariables));

			// Prepare the command line.
			String[] phpCmdArray = PHPLaunchUtilities.getCommandLine(launch.getLaunchConfiguration(), phpExe,
					phpConfigDir, fileName, sapiType == PHPexeItem.SAPI_CLI ? args : null, phpV);

			// Make sure that we have executable permissions on the file.
			PHPexes.changePermissions(new File(phpCmdArray[0]));

			if (PHPDebugPlugin.DEBUG) {
				System.out.println("Executing: " + Arrays.toString(phpCmdArray)); //$NON-NLS-1$
				System.out.println("Process environment: " //$NON-NLS-1$
						+ Arrays.toString(environmetVars));
			}

			DaemonPlugin.getDefault().makeSureDebuggerInitialized(null);
			// Execute the command line.
			Process p;
			File workingDirFile = new File(workingDir);
			if (workingDirFile.exists()) {
				if (PHPDebugPlugin.DEBUG) {
					System.out.println("Working directory: " + workingDir); //$NON-NLS-1$
				}
				p = Runtime.getRuntime().exec(phpCmdArray, environmetVars, workingDirFile);
			} else {
				p = Runtime.getRuntime().exec(phpCmdArray, environmetVars);
			}

			// Attach a crash detector
			new Thread(new ProcessCrashDetector2(launch, p)).start();

		} catch (final Exception e) {
			final Display display = Display.getDefault();
			display.asyncExec(new Runnable() {
				@Override
				public void run() {
					String message = e.getLocalizedMessage();
					if (message != null) {
						message = message.replaceFirst(e.getClass().getName() + ": ", ""); //$NON-NLS-1$ //$NON-NLS-2$
						MessageDialog.openError(display.getActiveShell(),
								PHPDebugCoreMessages.PHPExecutableDebuggerInitializer_6,
								NLS.bind(PHPDebugCoreMessages.PHPExecutableDebuggerInitializer_7, message));
					}
				}
			});
			DebugPlugin.log(e);
		} finally {
			// Remove temporary directory
			if (phpIniLocation != null) {
				File phpIniFile = new File(phpIniLocation);
				phpIniFile.deleteOnExit();
				phpIniFile.getParentFile().deleteOnExit();
			}
		}
	}

