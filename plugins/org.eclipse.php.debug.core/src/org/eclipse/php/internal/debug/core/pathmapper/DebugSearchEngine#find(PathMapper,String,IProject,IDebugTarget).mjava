	/**
	 * Searches for all local resources that match provided remote file, and
	 * returns it in best match order.
	 * 
	 * @param pathMapper
	 *            Path mapper to look at
	 * @param remoteFile
	 *            Path of the file on server. This argument must not be
	 *            <code>null</code>.
	 * @param debugTarget
	 *            Current debug target
	 * @return path entry or <code>null</code> in case it could not be found
	 */
	public static PathEntry find(final PathMapper pathMapper,
			final String remoteFile, final IProject currentProject,
			final IDebugTarget debugTarget) {

		final PathEntry[] localFile = new PathEntry[1];

		Job findJob = new Job(Messages.DebugSearchEngine_0) {
			protected IStatus run(IProgressMonitor monitor) {
				// First, look into the path mapper:
				localFile[0] = pathMapper.getLocalFile(remoteFile);
				if (localFile[0] != null) {
					if (localFile[0].getType() == Type.SERVER) {
						localFile[0] = null;
					}
					return Status.OK_STATUS;
				}

				// if it is server mapping
				localFile[0] = pathMapper.getServerFile(remoteFile);
				if (localFile[0] != null) {
					localFile[0] = null;
					return Status.OK_STATUS;
				}

				VirtualPath abstractPath = new VirtualPath(remoteFile);

				// Check whether we have an exact mapping for the remote path
				// If so - we shouldn't proceed with search (we should have this
				// file right in the mapped folder)
				VirtualPath testPath = abstractPath.clone();
				testPath.removeLastSegment();
				if (pathMapper.getLocalPathMapping(testPath) != null) {
					return Status.OK_STATUS;
				}

				LinkedList<PathEntry> results = new LinkedList<PathEntry>();

				IncludePath[] includePaths;
				IBuildpathEntry[] buildPaths = null;

				// Search in the whole workspace:
				Set<IncludePath> s = new LinkedHashSet<IncludePath>();
				Set<IBuildpathEntry> b = new LinkedHashSet<IBuildpathEntry>();
				IProject[] projects = null;
				if (currentProject != null && currentProject.isOpen()) {
					projects = new IProject[] { currentProject };
				} else {
					projects = ResourcesPlugin.getWorkspace().getRoot()
							.getProjects();
				}
				for (IProject project : projects) {
					if (project.isOpen() && project.isAccessible()) {
						// get include paths of all projects
						PHPSearchEngine.buildIncludePath(project, s);

						// get build paths of all projects
						IScriptProject scriptProject = DLTKCore.create(project);
						if (scriptProject != null && scriptProject.isOpen()) {
							try {
								IBuildpathEntry[] rawBuildpath = scriptProject
										.getRawBuildpath();
								for (IBuildpathEntry pathEntry : rawBuildpath) {
									b.add(pathEntry);
								}
							} catch (ModelException e) {
								PHPDebugPlugin.log(e);
							}

						}
					}
				}
				includePaths = s.toArray(new IncludePath[s.size()]);
				buildPaths = b.toArray(new IBuildpathEntry[b.size()]);

				// Try to find this file in the Workspace:
				try {
					IPath path = Path.fromOSString(remoteFile);
					IFile file = ResourcesPlugin.getWorkspace().getRoot()
							.getFileForLocation(path);
					if (file != null && file.exists()) {
						for (IncludePath includePath : includePaths) {
							if (includePath.getEntry() instanceof IContainer) {
								IContainer container = (IContainer) includePath
										.getEntry();
								if (container.getFullPath().isPrefixOf(
										file.getFullPath())) {
									localFile[0] = new PathEntry(file
											.getFullPath().toString(),
											Type.WORKSPACE, file.getParent());
									pathMapper.addEntry(remoteFile,
											localFile[0]);
									PathMapperRegistry.storeToPreferences();
									return Status.OK_STATUS;
								}
							}
						}
					}
				} catch (Exception e) {
					// no need to catch - this may be due to IPath creation
					// failure
				}

				// Try to find this file in the Include Path:
				File file = new File(remoteFile);
				if (file.exists()) {
					try {
						IScriptProject scriptProject = DLTKCore
								.create(currentProject);
						if (currentProject != null && scriptProject != null) {
							IBuildpathEntry[] rawBuildpath = scriptProject
									.getRawBuildpath();

							IEnvironment environment = EnvironmentManager
									.getEnvironment(currentProject);
							IPath remoteFilePath = EnvironmentPathUtils
									.getFullPath(environment, new Path(
											remoteFile));
							for (IBuildpathEntry entry : rawBuildpath) {
								IPath entryPath = entry.getPath();
								if (entry.getEntryKind() == IBuildpathEntry.BPE_VARIABLE) {
									entryPath = DLTKCore
											.getResolvedVariablePath(entryPath);
								}
								if (entryPath != null
										&& (entryPath.isPrefixOf(Path
												.fromOSString(remoteFile)) || entryPath
												.isPrefixOf(remoteFilePath))) {
									Type type = (entry.getEntryKind() == IBuildpathEntry.BPE_VARIABLE) ? Type.INCLUDE_VAR
											: Type.INCLUDE_FOLDER;
									localFile[0] = new PathEntry(
											file.getAbsolutePath(), type, entry);
									// pathMapper.addEntry(remoteFile,
									// localFile[0]);
									// PathMapperRegistry.storeToPreferences();
									return Status.OK_STATUS;
								}
							}
						}

					} catch (Exception e) {
						PHPDebugPlugin.log(e);
					}
					for (IncludePath includePath : includePaths) {
						if (includePath.getEntry() instanceof IBuildpathEntry) {
							IBuildpathEntry entry = (IBuildpathEntry) includePath
									.getEntry();
							IPath entryPath = entry.getPath();
							if (entry.getEntryKind() == IBuildpathEntry.BPE_VARIABLE) {
								entryPath = DLTKCore
										.getResolvedVariablePath(entryPath);
							}
							if (entryPath != null
									&& entryPath.isPrefixOf(Path
											.fromOSString(remoteFile))) {
								Type type = (entry.getEntryKind() == IBuildpathEntry.BPE_VARIABLE) ? Type.INCLUDE_VAR
										: Type.INCLUDE_FOLDER;
								localFile[0] = new PathEntry(
										file.getAbsolutePath(), type, entry);
								pathMapper.addEntry(remoteFile, localFile[0]);
								PathMapperRegistry.storeToPreferences();
								return Status.OK_STATUS;
							}
						}
					}
				}

				// try to find in build paths
				if (buildPaths != null) {
					for (IBuildpathEntry entry : buildPaths) {

						IPath entryPath = entry.getPath();
						if (entry.getEntryKind() == IBuildpathEntry.BPE_LIBRARY) {
							// We don't support lookup in archive
							File entryDir = entryPath.toFile();
							find(entryDir, abstractPath, entry, results);
						} else if (entry.getEntryKind() == IBuildpathEntry.BPE_PROJECT
								|| entry.getEntryKind() == IBuildpathEntry.BPE_SOURCE) {
							IResource res = ResourcesPlugin.getWorkspace()
									.getRoot()
									.findMember(entry.getPath().lastSegment());
							if (res instanceof IProject) {
								IProject project = (IProject) res;
								if (project.isOpen() && project.isAccessible()) {
									try {
										find(project, abstractPath, results);
									} catch (InterruptedException e) {
										PHPDebugPlugin.log(e);
									}
								}
							}
						} else if (entry.getEntryKind() == IBuildpathEntry.BPE_VARIABLE) {
							entryPath = DLTKCore
									.getResolvedVariablePath(entryPath);
							if (entryPath != null) {
								File entryDir = entryPath.toFile();
								find(entryDir, abstractPath, entry, results);
							}
						} else if (entry.getEntryKind() == IBuildpathEntry.BPE_CONTAINER) {

							try {
								if (projects.length == 0) {
									continue;
								}
								final IProject currentProject = projects[0];
								final IScriptProject scriptProject = DLTKCore
										.create(currentProject);

								IBuildpathContainer container = DLTKCore
										.getBuildpathContainer(entry.getPath(),
												scriptProject);
								if (container != null) {
									IBuildpathEntry[] buildpathEntries = container
											.getBuildpathEntries();
									entryPath = EnvironmentPathUtils
											.getLocalPath(buildpathEntries[0]
													.getPath());
									if (entryPath != null) {
										find(entryPath.toFile(), abstractPath,
												entry, results);
									}

								}
							} catch (ModelException e) {
								PHPCorePlugin.log(e);
							}

						}
					}
				}

				// Iterate over all include path, and search for a requested
				// file
				for (IncludePath includePath : includePaths) {
					if (includePath.getEntry() instanceof IContainer) {
						try {
							find((IContainer) includePath.getEntry(),
									abstractPath, results);
						} catch (InterruptedException e) {
							PHPDebugPlugin.log(e);
						}
					}
				}

				boolean foundInWorkspace = results.size() > 0;

				// search in opened editors
				searchOpenedEditors(results, abstractPath);

				if (!foundInWorkspace
						&& results.size() == 1
						&& abstractPath.equals(results.getFirst()
								.getAbstractPath())) {
					localFile[0] = results.getFirst();
				} else if (results.size() > 0) {
					Collections.sort(results, new BestMatchPathComparator(
							abstractPath));
					localFile[0] = filterItems(abstractPath,
							results.toArray(new PathEntry[results.size()]),
							debugTarget);
					if (localFile[0] != null) {
						if (localFile[0].getType() == Type.SERVER) {
							pathMapper.addServerEntry(remoteFile, localFile[0]);
							PathMapperRegistry.storeToPreferences();
							localFile[0] = null;
						} else {
							pathMapper.addEntry(remoteFile, localFile[0]);
							PathMapperRegistry.storeToPreferences();
						}
					}
				}
				return Status.OK_STATUS;
			}
		};

		findJob.schedule();
		try {
			findJob.join();
		} catch (InterruptedException e) {
		}

		return localFile[0];
	}

