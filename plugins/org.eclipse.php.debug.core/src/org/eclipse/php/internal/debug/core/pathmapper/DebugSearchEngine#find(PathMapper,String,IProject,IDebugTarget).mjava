	/**
	 * Searches for all local resources that match provided remote file, and returns it in best match order.
	 * @param pathMapper Path mapper to look at
	 * @param remoteFile Path of the file on server. This argument must not be <code>null</code>.
	 * @param debugTarget Current debug target
	 * @return path entry or <code>null</code> in case it could not be found
	 */
	private static PathEntry find(final PathMapper pathMapper, final String remoteFile, final IProject currentProject, final IDebugTarget debugTarget) {

		final PathEntry[] localFile = new PathEntry[1];

		Job findJob = new Job("Searching for local file...") {
			protected IStatus run(IProgressMonitor monitor) {
				// First, look into the path mapper:
				localFile[0] = pathMapper.getLocalFile(remoteFile);
				if (localFile[0] != null) {
					return Status.OK_STATUS;
				}

				VirtualPath abstractPath = new VirtualPath(remoteFile);

				// Check whether we have an exact mapping for the remote path
				// If so - we shouldn't proceed with search (we should have this file right in the mapped folder)
				VirtualPath testPath = abstractPath.clone();
				testPath.removeLastSegment();
				if (pathMapper.getLocalPathMapping(testPath) != null) {
					return Status.OK_STATUS;
				}

				LinkedList<PathEntry> results = new LinkedList<PathEntry>();

				Object[] includePaths;
				if (currentProject != null) {
					includePaths = PHPSearchEngine.buildIncludePath(currentProject);
				} else {
					// Search in the whole workspace:
					Set<Object> s = new LinkedHashSet<Object>();
					IProject[] projects = ResourcesPlugin.getWorkspace().getRoot().getProjects();
					for (IProject project : projects) {
						if (project.isOpen() && project.isAccessible()) {
							PHPSearchEngine.buildIncludePath(project, s);
						}
					}
					includePaths = s.toArray();
				}

				// Try to find this file in the Workspace:
				try {
					IPath path = Path.fromOSString(remoteFile);
					IFile file = ResourcesPlugin.getWorkspace().getRoot().getFileForLocation(path);
					if (file.exists()) {
						for (Object includePath : includePaths) {
							if (includePath instanceof IContainer) {
								IContainer container = (IContainer)includePath;
								if (container.getFullPath().isPrefixOf(file.getFullPath())) {
									localFile[0] = new PathEntry(file.getFullPath().toString(), Type.WORKSPACE, file.getParent());
									pathMapper.addEntry(remoteFile, localFile[0]);
									PathMapperRegistry.storeToPreferences();
									return Status.OK_STATUS;
								}
							}
						}
					}
				} catch (Exception e) {
					// no need to catch - this may be due to IPath creation failure
				}

				// Try to find this file in the Include Path:
				File file = new File(remoteFile);
				if (file.exists()) {
					for (Object includePath : includePaths) {
						if (includePath instanceof IIncludePathEntry) {
							IIncludePathEntry entry = (IIncludePathEntry) includePath;
							IPath entryPath = entry.getPath();
							if (entry.getEntryKind() == IIncludePathEntry.IPE_VARIABLE) {
								entryPath = IncludePathVariableManager.instance().resolveVariablePath(entryPath.toString());
							}
							if (entryPath != null && entryPath.isPrefixOf(Path.fromOSString(remoteFile))) {
								Type type = (entry.getEntryKind() == IIncludePathEntry.IPE_VARIABLE) ? Type.INCLUDE_VAR : Type.INCLUDE_FOLDER;
								localFile[0] = new PathEntry(file.getAbsolutePath(), type, entry);
								pathMapper.addEntry(remoteFile, localFile[0]);
								PathMapperRegistry.storeToPreferences();
								return Status.OK_STATUS;
							}
						}
					}
				}

				// Iterate over all include path, and search for a requested file
				for (Object includePath : includePaths) {
					if (includePath instanceof IContainer) {
						try {
							find((IContainer) includePath, abstractPath, results);
						} catch (InterruptedException e) {
							PHPDebugPlugin.log(e);
						}
					} else if (includePath instanceof IIncludePathEntry) {
						IIncludePathEntry entry = (IIncludePathEntry) includePath;
						IPath entryPath = entry.getPath();
						if (entry.getEntryKind() == IIncludePathEntry.IPE_LIBRARY) {
							if (entry.getContentKind() != IIncludePathEntry.K_BINARY) { // We don't support lookup in archive
								File entryDir = entryPath.toFile();
								find(entryDir, abstractPath, entry, results);
							}
						} else if (entry.getEntryKind() == IIncludePathEntry.IPE_PROJECT) {
							IProject project = (IProject) entry.getResource();
							if (project.isOpen() && project.isAccessible()) {
								try {
									find(project, abstractPath, results);
								} catch (InterruptedException e) {
									PHPDebugPlugin.log(e);
								}
							}
						} else if (entry.getEntryKind() == IIncludePathEntry.IPE_VARIABLE) {
							entryPath = IncludePathVariableManager.instance().resolveVariablePath(entryPath.toString());
							if (entryPath != null) {
								File entryDir = entryPath.toFile();
								find(entryDir, abstractPath, entry, results);
							}
						}
					}
				}

				boolean foundInWorkspace = results.size()> 0;

				//search in opened editors
				searchOpenedEditors(results, abstractPath);

				if (!foundInWorkspace && results.size() == 1 && abstractPath.equals(results.getFirst().getAbstractPath())) {
					localFile[0] = results.getFirst();
				}
				else if (results.size() > 0) {
					Collections.sort(results, new BestMatchPathComparator(abstractPath));
					localFile[0] = filterItems(abstractPath, results.toArray(new PathEntry[results.size()]), debugTarget);
					if (localFile[0] != null) {
						pathMapper.addEntry(remoteFile, localFile[0]);
						PathMapperRegistry.storeToPreferences();
					}
				}
				return Status.OK_STATUS;
			}
		};

		findJob.schedule();
		try {
			findJob.join();
		} catch (InterruptedException e) {
		}

		return localFile[0];
	}

