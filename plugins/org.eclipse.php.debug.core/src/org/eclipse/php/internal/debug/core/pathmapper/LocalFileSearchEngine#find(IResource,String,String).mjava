	/**
	 * Searches for the local file equivalent of the remote file in the given
	 * workspace resource.
	 * 
	 * @param container
	 *            Resource to start the search from
	 * @param remoteFilePath
	 *            Abstract path of the remote file
	 * @param serverUniqueId
	 *            Server unique ID (is used to get mappings for related server)
	 * @return
	 * @throws InterruptedException
	 */
	public LocalFileSearchResult find(final IResource container,
			final String remoteFilePath, final String serverUniqueId)
					throws InterruptedException {
		if (container == null || !container.exists()
				|| !container.isAccessible()) {
			return null;
		}
		final PathMapper pathMapper = serverUniqueId != null
				? PathMapperRegistry
						.getByServer(ServersManager.findServer(serverUniqueId))
				: new PathMapper();
		final VirtualPath abstractPath = new VirtualPath(remoteFilePath);
		final SyncObject<LocalFileSearchResult> searchResult = new SyncObject<LocalFileSearchResult>();
		Job findJob = new Job(
				Messages.LocalFileSearchEngine_Searching_for_local_file) {
			protected IStatus run(IProgressMonitor monitor) {
				// First, look into the path mapper:
				LinkedList<PathEntry> results = new LinkedList<PathEntry>();
				IncludePath[] includePaths;
				IBuildpathEntry[] buildPaths = null;
				// Search in the whole workspace:
				Set<IncludePath> s = new LinkedHashSet<IncludePath>();
				Set<IBuildpathEntry> b = new LinkedHashSet<IBuildpathEntry>();
				IProject[] projects = ResourcesPlugin.getWorkspace().getRoot()
						.getProjects();
				for (IProject project : projects) {
					if (project.isOpen() && project.isAccessible()) {
						// get include paths of all projects
						PHPSearchEngine.buildIncludePath(project, s);
						// get build paths of all projects
						IScriptProject scriptProject = DLTKCore.create(project);
						if (scriptProject != null && scriptProject.isOpen()) {
							try {
								IBuildpathEntry[] rawBuildpath = scriptProject
										.getRawBuildpath();
								for (IBuildpathEntry pathEntry : rawBuildpath) {
									b.add(pathEntry);
								}
							} catch (ModelException e) {
								PHPDebugPlugin.log(e);
							}

						}
					}
				}
				includePaths = s.toArray(new IncludePath[s.size()]);
				buildPaths = b.toArray(new IBuildpathEntry[b.size()]);
				// Try to find this file in the Workspace:
				try {
					IPath path = Path.fromOSString(remoteFilePath);
					IFile file = ResourcesPlugin.getWorkspace().getRoot()
							.getFileForLocation(path);
					if (file != null && file.exists()) {
						for (IncludePath includePath : includePaths) {
							if (includePath.getEntry() instanceof IContainer) {
								IContainer container = (IContainer) includePath
										.getEntry();
								if (container.getFullPath()
										.isPrefixOf(file.getFullPath())) {
									PathEntry localFile = new PathEntry(
											file.getFullPath().toString(),
											Type.WORKSPACE, file.getParent());
									pathMapper.addEntry(remoteFilePath,
											localFile);
									PathMapperRegistry.storeToPreferences();
									searchResult.set(new LocalFileSearchResult(
											localFile));
									return Status.OK_STATUS;
								}
							}
						}
					}
				} catch (Exception e) {
					// no need to catch
				}
				// Try to find in build paths
				if (buildPaths != null) {
					for (IBuildpathEntry entry : buildPaths) {
						IPath entryPath = EnvironmentPathUtils
								.getLocalPath(entry.getPath());
						if (entry
								.getEntryKind() == IBuildpathEntry.BPE_LIBRARY) {
							// We don't support lookup in archive
							File entryDir = entryPath.toFile();
							find(entryDir, abstractPath, entry, results);
						} else if (entry
								.getEntryKind() == IBuildpathEntry.BPE_PROJECT
								|| entry.getEntryKind() == IBuildpathEntry.BPE_SOURCE) {
							IResource res = ResourcesPlugin.getWorkspace()
									.getRoot()
									.findMember(entry.getPath().lastSegment());
							if (res instanceof IProject) {
								IProject project = (IProject) res;
								if (project.isOpen()
										&& project.isAccessible()) {
									try {
										find(project, abstractPath, results);
									} catch (InterruptedException e) {
										PHPDebugPlugin.log(e);
									}
								}
							}
						} else if (entry
								.getEntryKind() == IBuildpathEntry.BPE_VARIABLE) {
							entryPath = DLTKCore
									.getResolvedVariablePath(entryPath);
							if (entryPath != null) {
								File entryDir = entryPath.toFile();
								find(entryDir, abstractPath, entry, results);
							}
						} else if (entry
								.getEntryKind() == IBuildpathEntry.BPE_CONTAINER) {
							try {
								if (projects.length == 0) {
									continue;
								}
								final IProject currentProject = projects[0];
								final IScriptProject scriptProject = DLTKCore
										.create(currentProject);
								IBuildpathContainer container = DLTKCore
										.getBuildpathContainer(entry.getPath(),
												scriptProject);
								if (container != null) {
									IBuildpathEntry[] buildpathEntries = container
											.getBuildpathEntries();
									entryPath = EnvironmentPathUtils
											.getLocalPath(buildpathEntries[0]
													.getPath());
									if (entryPath != null) {
										find(entryPath.toFile(), abstractPath,
												entry, results);
									}
								}
							} catch (ModelException e) {
								PHPCorePlugin.log(e);
							}
						}
					}
				}
				// Iterate all include path, and search for a requested file
				for (IncludePath includePath : includePaths) {
					if (includePath.getEntry() instanceof IContainer) {
						try {
							find((IContainer) includePath.getEntry(),
									abstractPath, results);
						} catch (InterruptedException e) {
							PHPDebugPlugin.log(e);
						}
					}
				}
				boolean foundInWorkspace = results.size() > 0;
				if (!foundInWorkspace && results.size() == 1 && abstractPath
						.equals(results.getFirst().getAbstractPath())) {
					searchResult
							.set(new LocalFileSearchResult(results.getFirst()));
				} else if (results.size() > 0) {
					Collections.sort(results,
							new BestMatchPathComparator(abstractPath));
					LocalFileSearchResult filteredResult = filter(
							results.toArray(new PathEntry[results.size()]),
							abstractPath, serverUniqueId);
					if (filteredResult.getPathEntry() != null
							&& filteredResult.getStatus().isOK()) {
						pathMapper.addEntry(remoteFilePath,
								filteredResult.getPathEntry());
						PathMapperRegistry.storeToPreferences();
					}
					searchResult.set(filteredResult);
				}
				return Status.OK_STATUS;
			}
		};
		// Join the job...
		findJob.schedule();
		try {
			findJob.join();
		} catch (InterruptedException e) {
		}
		return searchResult.get();
	}

