	/**
	 * Constructs new abstract path instance
	 * 
	 * @param path
	 *            Full path
	 */
	public VirtualPath(String path) {
		if (path == null) {
			throw new NullPointerException();
		}
		String originalPath = path;
		if (path.startsWith("\\\\")) { // Network path //$NON-NLS-1$
			sepChar = '\\';
			device = "\\\\"; //$NON-NLS-1$
			path = path.substring(2);
			// Basic UNC checks:
			if (path.length() == 0 || path.startsWith("\\") || path.startsWith("/")) {//$NON-NLS-1$ //$NON-NLS-2$
				throw new IllegalArgumentException("Illegal or not full path: " + originalPath);//$NON-NLS-1$
			}
		} else if (path.startsWith("\\")) { //$NON-NLS-1$
			sepChar = '\\';
			device = "\\"; //$NON-NLS-1$
		} else {
			Matcher m = VOLNAME.matcher(path);
			if (m.matches()) { // Windows path
				sepChar = '\\';
				device = m.group(1) + "\\"; // correct path from //$NON-NLS-1$
											// C:/ to C:\
				path = m.group(2);
			} else if (path.startsWith("/")) { // Unix path //$NON-NLS-1$
				sepChar = '/';
				device = "/"; //$NON-NLS-1$
			} else {
				m = PROTOCOL.matcher(path);
				if (m.matches()) { // URL
					sepChar = '/';
					device = m.group(1);
					path = m.group(2);
				} else {
					throw new IllegalArgumentException("Illegal or not full path: " + originalPath);//$NON-NLS-1$
				}
			}
		}

		StringTokenizer st = new StringTokenizer(path, "/\\"); //$NON-NLS-1$
		segments = new LinkedList<>();
		while (st.hasMoreTokens()) {
			String segment = st.nextToken();
			if (segment.length() > 0) {
				segments.add(segment);
			}
		}
	}

