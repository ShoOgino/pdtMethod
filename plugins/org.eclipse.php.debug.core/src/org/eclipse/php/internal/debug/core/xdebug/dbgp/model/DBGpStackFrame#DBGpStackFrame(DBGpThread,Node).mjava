	public DBGpStackFrame(DBGpThread threadOwner, Node stackData) {
		super(threadOwner.getDebugTarget());
		owningThread = threadOwner;

		// parse the xml information about a stack

		/*
		 * <stack level="{NUM}" type="file|eval|?" filename="..." lineno="{NUM}"
		 * where="" cmdbegin="line_number:offset" cmdend="line_number:offset"/>
		 * <stack level="{NUM}" type="file|eval|?" filename="..."
		 * lineno="{NUM}"> <input level="{NUM}" type="file|eval|?"
		 * filename="..." lineno="{NUM}"/> </stack> </response>
		 */

		String line = DBGpResponse.getAttribute(stackData, "lineno"); //$NON-NLS-1$
		stackLevel = DBGpResponse.getAttribute(stackData, "level"); //$NON-NLS-1$
		lineNo = Integer.parseInt(line);
		qualifiedFile = DBGpUtils.getFilenameFromURIString(DBGpResponse
				.getAttribute(stackData, "filename")); //$NON-NLS-1$
		qualifiedFile = ((DBGpTarget) getDebugTarget())
				.mapToWorkspaceFileIfRequired(qualifiedFile);
		String function = DBGpResponse.getAttribute(stackData, "where"); //$NON-NLS-1$ 
		// check to see if the file exists in the workspace
		IFile[] fileFound = ResourcesPlugin.getWorkspace().getRoot()
				.findFilesForLocation(new Path(qualifiedFile));
		if (fileFound.length > 0) {
			IFile file = fileFound[0];
			// get the file found in workspace and show project/file
			String projectName = file.getProject().getName();
			String projectRelPath = file.getProjectRelativePath().toString();
			fileName = projectName + "/" + projectRelPath;
		} else {
			// fileName = null;
			fileName = qualifiedFile;
		}
		name = fileName + "." + function + " : lineno " + lineNo;
	}

