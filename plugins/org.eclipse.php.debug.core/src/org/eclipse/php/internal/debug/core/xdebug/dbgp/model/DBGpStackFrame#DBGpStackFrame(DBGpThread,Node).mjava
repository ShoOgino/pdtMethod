	public DBGpStackFrame(DBGpThread threadOwner, Node stackData) {
		super(threadOwner.getDebugTarget());
		owningThread = threadOwner;

		// parse the xml information about a stack

		/*
		    <stack level="{NUM}"
		           type="file|eval|?"
		           filename="..."
		           lineno="{NUM}"
		           where=""
		           cmdbegin="line_number:offset"
		           cmdend="line_number:offset"/>
		    <stack level="{NUM}"
		           type="file|eval|?"
		           filename="..."
		           lineno="{NUM}">
		        <input level="{NUM}"
		               type="file|eval|?"
		               filename="..."
		               lineno="{NUM}"/>
		    </stack>
		</response>       
		       */

		String line = DBGpResponse.getAttribute(stackData, "lineno");
		stackLevel = DBGpResponse.getAttribute(stackData, "level");
		lineNo = Integer.parseInt(line);
		qualifiedFile = DBGpUtils.getFilenameFromURIString(DBGpResponse.getAttribute(stackData, "filename"));
		qualifiedFile = ((DBGpTarget) getDebugTarget()).mapToWorkspaceFileIfRequired(qualifiedFile);
		// check to see if the file exists in the workspace
		IFile[] fileFound = ResourcesPlugin.getWorkspace().getRoot().findFilesForLocation(new Path(qualifiedFile));
		if (fileFound.length > 0) {
			IFile file = fileFound[0];
			fileName = file.getProjectRelativePath().toString();
			name = fileName + "." + DBGpResponse.getAttribute(stackData, "where") + " : lineno " + lineNo;
		} else {
			fileName = null;
			name = qualifiedFile + "." + DBGpResponse.getAttribute(stackData, "where") + " : lineno " + lineNo;
		}
	}

