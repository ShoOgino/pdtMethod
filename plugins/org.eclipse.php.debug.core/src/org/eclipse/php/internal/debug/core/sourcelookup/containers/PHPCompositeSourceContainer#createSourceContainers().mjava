    protected ISourceContainer[] createSourceContainers() throws CoreException {

        ArrayList containers = new ArrayList();
        ISourceContainer projectContainer = new ProjectSourceContainer(project, false);
        containers.add(projectContainer);
        PHPProjectOptions options = PHPProjectOptions.forProject(project);
        if (options != null) {
            IIncludePathEntry[] entries = options.readRawIncludePath();

            if (entries != null) {
                for (int i = 0; i < entries.length; i++) {
                    if (entries[i].getEntryKind() == IIncludePathEntry.IPE_LIBRARY) {
                        IPath path = entries[i].getPath();
                        File file = new File(path.toString());
                        if (entries[i].getContentKind() == IIncludePathEntry.K_BINARY) {
                            containers.add(new PHPExternalArchiveSourceContainer(file.getAbsolutePath(), false, project));
                        } else {
                            containers.add(new PHPDirectorySourceContainer(file, false, project));
                        }
                    } else if (entries[i].getEntryKind() == IIncludePathEntry.IPE_PROJECT) {
                        IResource includeResource = entries[i].getResource();
                        if (includeResource instanceof IProject) {
                            IProject includeProject = (IProject) entries[i].getResource();
                            containers.add(new ProjectSourceContainer(includeProject, false));
                        }
                    } else if (entries[i].getEntryKind() == IIncludePathEntry.IPE_VARIABLE) {
                        IPath path = entries[i].getPath();
                        containers.add(new PHPVariableSourceContainer(path, project));
                    }
                }
            }
        }
        ISourceContainer[] scontainers = new ISourceContainer[containers.size()];
        containers.toArray(scontainers);
        return scontainers;
    }

