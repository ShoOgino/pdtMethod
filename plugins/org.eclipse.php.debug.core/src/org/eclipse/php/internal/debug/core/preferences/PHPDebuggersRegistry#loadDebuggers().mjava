	// Load the debuggers into the map.
	// Do this only once.
	private void loadDebuggers() {
		final IExtensionRegistry registry = Platform.getExtensionRegistry();
		final IConfigurationElement[] elements = registry.getConfigurationElementsFor(PHPDebugPlugin.getID(),
				EXTENSION_POINT_NAME);
		// We use the following HashMap in order to accumulate non PDT debugger
		// configurations.
		// that are extension to point: org.eclipse.php.debug.core.phpDebuggers
		HashMap<String, AbstractDebuggerConfiguration> nonPDTConfigurations = new HashMap<>();
		for (final IConfigurationElement element : elements) {

			if (DEBUGGER_TAG.equals(element.getName())) {
				final String name = element.getAttribute(NAME_ATTRIBUTE);
				final String id = element.getAttribute(ID_ATTRIBUTE);
				boolean isPDT = element.getNamespaceIdentifier().startsWith("org.eclipse.php"); //$NON-NLS-1$
				boolean filter = WorkbenchActivityHelper.filterItem(new IPluginContribution() {
					@Override
					public String getLocalId() {
						return id;
					}

					@Override
					public String getPluginId() {
						return element.getNamespaceIdentifier();
					}
				});
				if (filter) {
					continue;
				}
				debuggers.put(id, name);
				try {
					AbstractDebuggerConfiguration configuration = (AbstractDebuggerConfiguration) element
							.createExecutableExtension(CONFIGURATION_CLASS_ATTRIBUTE);
					configuration.setDebuggerId(id);
					configuration.setName(name);
					try {
						List<ICommunicationDaemon> daemons = DaemonsRegistry.getDaemons();
						// find the daemon that fits this configuration (match
						// by debugger-id)
						for (ICommunicationDaemon daemon : daemons) {
							if (daemon.isDebuggerDaemon() && id.equals(daemon.getDebuggerID())) {
								configuration.setCommunicationDaemon(daemon); // Attach
																				// the
																				// daemon
																				// reference
																				// to
																				// the
																				// configuration.
								break;
							}
						}
					} catch (Exception e) {
						configuration.setPort(-1);
					}
					configurations.put(id, configuration);
					if (!isPDT) {
						nonPDTConfigurations.put(id, configuration);
					}
				} catch (CoreException e) {
					Logger.logException(e);
				}
			}
		}
		// Override any PDT debugger settings with any extension of debugger
		// configuration.
		for (Entry<String, AbstractDebuggerConfiguration> entry : nonPDTConfigurations.entrySet()) {
			AbstractDebuggerConfiguration configuration = entry.getValue();
			configurations.put(entry.getKey(), configuration);
			debuggers.put(configuration.getDebuggerId(), configuration.getName());
		}
		debuggers.put(NONE_DEBUGGER_ID, NONE_DEBUGGER_NAME);
	}

