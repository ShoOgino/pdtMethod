	/**
	 * Returns local file name corresponding to the given remote path
	 * @param remoteFile File to resolve
	 * @param cwd Current working directory received from the debugger
	 * @param currentScript Script that is on the top of the debug stack currently
	 * @return local file, or remoteFile in case of resolving failure
	 */
	public String convertToLocalFilename(String remoteFile, String cwd, String currentScript) {
		PHPDebugTarget debugTarget = debugHandler.getDebugTarget();
		if (debugTarget.getContextManager().isResolveBlacklisted(remoteFile)) {
			return remoteFile;
		}

		String resolvedFileKey = new StringBuilder(remoteFile).append(cwd).append(currentScript).toString();
		if (!resolvedFiles.containsKey(resolvedFileKey)) {
			String resolvedFile = null;
			// If we are running local debugger, check if "remote" file exists and return it if it does
			if (debugTarget.isPHPCGI() && new File(remoteFile).exists()) {
				IFile wsFile = ResourcesPlugin.getWorkspace().getRoot().getFileForLocation(new Path(remoteFile));
				if (wsFile != null) {
					resolvedFile = wsFile.getFullPath().toString();
				} else {
					resolvedFile = remoteFile;
				}
			}
			if (resolvedFile == null) {
				String currentScriptDir = null;
				if (currentScript != null) {
					currentScriptDir = new Path(currentScript).removeLastSegments(1).toString();
				}

				PathEntry pathEntry = DebugSearchEngine.find(remoteFile, debugTarget, cwd, currentScriptDir);
				if (pathEntry != null) {
					resolvedFile = pathEntry.getResolvedPath();
				}
			}
			if (resolvedFile == null) {
				resolvedFile = remoteFile; // in case of failure
			}
			resolvedFiles.put(resolvedFileKey, resolvedFile);
		}
		return resolvedFiles.get(resolvedFileKey);
	}

