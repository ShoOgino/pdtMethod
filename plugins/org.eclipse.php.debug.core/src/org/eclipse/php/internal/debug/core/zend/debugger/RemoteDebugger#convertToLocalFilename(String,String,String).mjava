	/**
	 * Returns local file name corresponding to the given remote path
	 * 
	 * @param remoteFile
	 *            File to resolve
	 * @param cwd
	 *            Current working directory received from the debugger
	 * @param currentScript
	 *            Script that is on the top of the debug stack currently
	 * @return local file, or <code>null</code> in case of resolving failure
	 */
	public String convertToLocalFilename(String remoteFile, String cwd,
			String currentScript) {
		PHPDebugTarget debugTarget = debugHandler.getDebugTarget();
		if (debugTarget.getContextManager().isResolveBlacklisted(remoteFile)) {
			return remoteFile;
		}

		IWorkspace workspace = ResourcesPlugin.getWorkspace();

		// check if this file is already local
		if (workspace.getRoot().findMember(remoteFile) != null) {
			return remoteFile;
		}

		// If we are running local debugger, check if "remote" file exists and
		// return it if it does
		if (debugTarget.isPHPCGI() && new File(remoteFile).exists()) {

			IFile wsFile = null;
			IPath location = new Path(remoteFile);
			IProject[] projects = workspace.getRoot().getProjects();
			IProject currentProject = debugTarget.getProject();
			// set current project to higher priority:
			for (int i = 0; i < projects.length; i++) {
				IProject project = projects[i];
				if (project.equals(currentProject)) {
					IProject tmp = projects[0];
					projects[0] = project;
					projects[i] = tmp;
					break;
				}
			}
			for (int i = 0; i < projects.length; i++) {
				IProject project = projects[i];
				if (!project.isOpen() || !project.isAccessible()) {
					continue;
				}
				IPath projectLocation = project.getLocation();
				if (projectLocation != null
						&& projectLocation.isPrefixOf(location)) {
					int segmentsToRemove = projectLocation.segmentCount();
					wsFile = workspace
							.getRoot()
							.getFile(
									project.getFullPath()
											.append(location
													.removeFirstSegments(segmentsToRemove)));
					break;
				}
			}

			if (wsFile != null) {
				return wsFile.getFullPath().toString();
			} else {
				return remoteFile;
			}
		}

		String resolvedFileKey = new StringBuilder(remoteFile).append(cwd)
				.append(currentScript).toString();
		if (!resolvedFiles.containsKey(resolvedFileKey)) {
			String currentScriptDir = null;
			if (currentScript != null) {
				currentScriptDir = new Path(currentScript)
						.removeLastSegments(1).toString();
			}

			String resolvedFile = null;
			PathEntry pathEntry = DebugSearchEngine.find(remoteFile,
					debugTarget, cwd, currentScriptDir);
			if (pathEntry != null) {
				resolvedFile = pathEntry.getResolvedPath();
			} else {
				try {
					resolvedFile = tryGuessMapping(remoteFile, debugTarget);
				} catch (ModelException e) {
					resolvedFile = remoteFile;
				}
			}
			resolvedFiles.put(resolvedFileKey, resolvedFile);
		}
		String localFile = resolvedFiles.get(resolvedFileKey);
		if (localFile == null) {
			return remoteFile;
		}
		return localFile;
	}

