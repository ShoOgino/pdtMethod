	public void initializeDefaultPreferences() {
		IEclipsePreferences node = DefaultScope.INSTANCE.getNode(PHPDebugPlugin
				.getDefault().getBundle().getSymbolicName());

		// formatting preferences
		node.putBoolean(PHPDebugCorePreferenceNames.STOP_AT_FIRST_LINE, true);
		node.putBoolean(PHPDebugCorePreferenceNames.RUN_WITH_DEBUG_INFO, true);
		node.putBoolean(PHPDebugCorePreferenceNames.OPEN_IN_BROWSER, true);
		node.putBoolean(PHPDebugCorePreferenceNames.OPEN_DEBUG_VIEWS, true);
		node.putBoolean(PHPDebugCorePreferenceNames.ZEND_NEW_PROTOCOL, true);
		node.putInt(PHPDebugCorePreferenceNames.ZEND_DEBUG_PORT, 10137);
		node.putInt(PHPDebugCorePreferenceNames.DEBUG_RESPONSE_TIMEOUT, 60000); // 60
																				// seconds
		node.put(PHPDebugCorePreferenceNames.TRANSFER_ENCODING, "UTF-8"); //$NON-NLS-1$
		node.put(PHPDebugCorePreferenceNames.OUTPUT_ENCODING, "UTF-8"); //$NON-NLS-1$
		node.put(PHPDebugCorePreferenceNames.CONFIGURATION_DELEGATE_CLASS,
				PHPExecutableLaunchDelegate.class.getName());
		node.put(PHPDebugCorePreferenceNames.PHP_DEBUGGER_ID,
				DebuggerCommunicationDaemon.ZEND_DEBUGGER_ID); // The default is
																// Zend's
																// debugger
		node.put(IPHPDebugConstants.PHP_DEBUG_PARAMETERS_INITIALIZER,
				"org.eclipse.php.debug.core.defaultInitializer"); //$NON-NLS-1$

		node.putBoolean(PHPDebugCorePreferenceNames.SORT_BY_NAME, false);
		List<Inet4Address> clientHosts = new ArrayList<Inet4Address>();
		clientHosts.add(LOCALHOST);
		try {
			Enumeration<NetworkInterface> ii = NetworkInterface
					.getNetworkInterfaces();
			while (ii.hasMoreElements()) {
				NetworkInterface i = ii.nextElement();
				if (i.getDisplayName().contains("VMware")) { //$NON-NLS-1$
					continue;
				}
				Enumeration<InetAddress> aa = i.getInetAddresses();
				while (aa.hasMoreElements()) {
					InetAddress a = aa.nextElement();
					if (a instanceof Inet4Address && !a.isLoopbackAddress()) {
						clientHosts.add((Inet4Address) a);
					}
				}
			}
		} catch (Exception e) {
			// in this case continue with already detected hosts
		}
		Inet4Address[] hosts = clientHosts.toArray(new Inet4Address[clientHosts
				.size()]);
		Arrays.sort(hosts, new Comparator<Inet4Address>() {

			@Override
			public int compare(Inet4Address first, Inet4Address second) {
				return getNetworkClass(second) - getNetworkClass(first);
			}
		});
		StringBuilder clientIPs = new StringBuilder();
		for (Inet4Address host : hosts) {
			if (clientIPs.length() > 0) {
				clientIPs.append(',');
			}
			clientIPs.append(host.getHostAddress());
		}
		node.put(PHPDebugCorePreferenceNames.CLIENT_IP, clientIPs.toString());
	}

