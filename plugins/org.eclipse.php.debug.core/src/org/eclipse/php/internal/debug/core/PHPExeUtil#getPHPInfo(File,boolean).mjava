	/**
	 * Creates and returns PHP executable info.
	 * 
	 * @param executableFile
	 * @param loadDefaultINI
	 * @return PHP info
	 * @throws PHPExeException
	 */
	public synchronized static PHPExeInfo getPHPInfo(final File executableFile, boolean reload) throws PHPExeException {
		PHPExeInfo phpInfo = phpInfos.get(executableFile);
		if (phpInfo != null && !reload)
			return phpInfo;
		String version = null, sapiType = null, name = null;
		String exePath = executableFile == null ? "<null>" //$NON-NLS-1$
				: executableFile.getAbsolutePath();
		// Simple pre-check
		if (executableFile == null || !executableFile.exists()
				|| !executableFile.getName().toLowerCase().contains("php") //$NON-NLS-1$
				|| executableFile.isDirectory()) {
			return null;
		}
		try {
			PHPexes.changePermissions(executableFile);
			Matcher m;
			String output = fetchVersion(executableFile);
			m = PATTERN_PHP_VERSION.matcher(output);
			if (!m.find()) {
				throw new PHPExeException(MessageFormat.format("Cannot determine version of the PHP executable ({0}).", //$NON-NLS-1$
						exePath));
			}
			// Fetch version
			version = m.group(1);
			// Fetch SAPI type
			String sType = m.group(2);
			sapiType = null;
			if (sType.startsWith("cgi")) { //$NON-NLS-1$
				sapiType = PHPexeItem.SAPI_CGI;
			} else if (sType.startsWith("cli")) { //$NON-NLS-1$
				sapiType = PHPexeItem.SAPI_CLI;
			} else {
				throw new PHPExeException(MessageFormat.format("Cannot determine type of the PHP executable ({0}).", //$NON-NLS-1$
						exePath));
			}
			// Fetch default name
			name = "PHP " + version + " (" + sapiType + ")"; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
		} catch (IOException e) {
			throw new PHPExeException(MessageFormat.format("Invalid PHP executable: {0}.", exePath), e); //$NON-NLS-1$
		}
		phpInfo = new PHPExeInfo(name, version, sapiType, executableFile);
		phpInfos.put(executableFile, phpInfo);
		return phpInfo;
	}

