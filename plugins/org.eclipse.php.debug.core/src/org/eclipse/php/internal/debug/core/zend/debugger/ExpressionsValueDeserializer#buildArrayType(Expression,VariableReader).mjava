	private ExpressionValue buildArrayType(Expression expression,
			VariableReader reader) {
		int objectLength = reader.readInt();
		int originalLength = objectLength;
		if (reader.isLastEnd()) {
			objectLength = 0;
		}
		Expression[] variableNodes = new Expression[objectLength];
		for (int i = 0; i < objectLength; i++) {
			char type = reader.readType();
			// System.out.println("type " + type);
			String name;
			if (type == 'i') {
				name = Integer.toString(reader.readInt());
			} else if (type == 's') {
				name = reader.readString();
			} else {
				// fall back when type is invalid
				return ExpressionValue.NULL_VALUE;
			}
			if (expression == null) {
				variableNodes[i] = createDefaultVariable(name);
			} else {
				variableNodes[i] = expression.createChildExpression(name,
						'[' + name + ']', KIND_ARRAY_MEMBER);
			}
			variableNodes[i].setValue(build(expression, reader));
		}
		return new ExpressionValue(ExpressionValue.ARRAY_TYPE, "Array", //$NON-NLS-1$
				"Array [" + originalLength + ']', variableNodes, originalLength); //$NON-NLS-1$
	}

