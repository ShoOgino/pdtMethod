	/**
	 * Save the edited PHP executable items to the plug-in preferences.
	 */
	public void save() {
		Preferences prefs = PHPProjectPreferences.getModelPreferences();
		final PHPexeItem[] phpItems = getEditableItems();
		final StringBuffer locationsString = new StringBuffer();
		final StringBuffer inisString = new StringBuffer();
		final StringBuffer namesString = new StringBuffer();
		final StringBuffer debuggersString = new StringBuffer();
		for (int i = 0; i < phpItems.length; i++) {
			final PHPexeItem item = phpItems[i];
			if (i > 0) {
				locationsString.append(SEPARATOR);
				inisString.append(SEPARATOR);
				namesString.append(SEPARATOR);
				debuggersString.append(SEPARATOR);
			}
			locationsString.append(item.getExecutable().toString());
			inisString.append(item.getINILocation() != null ? item
					.getINILocation().toString() : "null"); //$NON-NLS-1$
			namesString.append(item.getName());
			debuggersString.append(item.getDebuggerID());
		}
		prefs.setValue(PHPDebugCorePreferenceNames.INSTALLED_PHP_NAMES,
				namesString.toString());
		prefs.setValue(PHPDebugCorePreferenceNames.INSTALLED_PHP_LOCATIONS,
				locationsString.toString());
		prefs.setValue(PHPDebugCorePreferenceNames.INSTALLED_PHP_INIS,
				inisString.toString());
		prefs.setValue(PHPDebugCorePreferenceNames.INSTALLED_PHP_DEBUGGERS,
				debuggersString.toString());

		// save the default executables per debugger id
		final StringBuffer defaultsString = new StringBuffer();
		Iterator<PHPexeItem> iterator = defaultItems.values().iterator();
		while (iterator.hasNext()) {
			PHPexeItem exeItem = iterator.next();
			defaultsString.append(exeItem.getDebuggerID());
			defaultsString.append('=');
			defaultsString.append(exeItem.getName());
			if (iterator.hasNext()) {
				defaultsString.append(SEPARATOR);
			}
		}
		prefs.setValue(PHPDebugCorePreferenceNames.INSTALLED_PHP_DEFAULTS,
				defaultsString.toString());

		PHPDebugPlugin.getDefault().savePluginPreferences();
	}

