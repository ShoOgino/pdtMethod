	/**
	 * Save the edited PHP executable items to the plug-in preferences.
	 */
	public void save() {
		IEclipsePreferences prefs = PHPDebugPlugin.getInstancePreferences();
		final PHPexeItem[] phpItems = getEditableItems();
		final StringBuilder locationsString = new StringBuilder();
		final StringBuilder inisString = new StringBuilder();
		final StringBuilder namesString = new StringBuilder();
		final StringBuilder uniqueIdsString = new StringBuilder();
		final StringBuilder debuggersString = new StringBuilder();
		final StringBuilder defaultItemForPHPVersionString = new StringBuilder();
		final StringBuilder loadIniDefaultString = new StringBuilder();
		for (int i = 0; i < phpItems.length; i++) {
			final PHPexeItem item = phpItems[i];
			if (i > 0) {
				locationsString.append(SEPARATOR);
				inisString.append(SEPARATOR);
				namesString.append(SEPARATOR);
				uniqueIdsString.append(SEPARATOR);
				debuggersString.append(SEPARATOR);
				defaultItemForPHPVersionString.append(SEPARATOR);
				loadIniDefaultString.append(SEPARATOR);
			}
			locationsString.append(item.getExecutable().toString());
			inisString.append(item.getINILocation() != null ? item.getINILocation().toString() : NULL_PLACE_HOLDER);
			namesString.append(item.getName());
			uniqueIdsString.append(item.getUniqueId());
			debuggersString.append(item.getDebuggerID());
			loadIniDefaultString.append(item.isLoadDefaultINI() ? TRUE : FALSE);

			if (item.geDefaultForPHPVersionSize() > 0) {
				for (int j = 0; j < item.geDefaultForPHPVersionSize(); j++) {
					if (j > 0) {
						defaultItemForPHPVersionString.append(SEPARATOR_FOR_PHPVERSION);
					}
					defaultItemForPHPVersionString.append(item.getPHPVersionAtDefaultList(j).getAlias());
				}
			} else {
				defaultItemForPHPVersionString.append(NULL_PLACE_HOLDER);
			}

		}
		prefs.put(PHPDebugCorePreferenceNames.INSTALLED_PHP_NAMES, namesString.toString());
		prefs.put(PHPDebugCorePreferenceNames.INSTALLED_PHP_UNIQUE_IDS, uniqueIdsString.toString());
		prefs.put(PHPDebugCorePreferenceNames.INSTALLED_PHP_LOCATIONS, locationsString.toString());
		prefs.put(PHPDebugCorePreferenceNames.INSTALLED_PHP_INIS, inisString.toString());
		prefs.put(PHPDebugCorePreferenceNames.INSTALLED_PHP_DEBUGGERS, debuggersString.toString());
		prefs.put(PHPDebugCorePreferenceNames.INSTALLED_PHP_DEFAULT_FOR_VERSIONS,
				defaultItemForPHPVersionString.toString());
		prefs.put(PHPDebugCorePreferenceNames.INSTALLED_PHP_LOAD_DEFAULT_INIS, loadIniDefaultString.toString());
		try {
			prefs.flush();
		} catch (BackingStoreException e) {
			Logger.logException(e);
		}
	}

