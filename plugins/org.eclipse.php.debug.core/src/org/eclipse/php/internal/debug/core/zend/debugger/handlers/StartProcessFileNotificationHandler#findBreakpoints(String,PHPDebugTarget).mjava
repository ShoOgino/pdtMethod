	protected IBreakpoint[] findBreakpoints(String processFileLocation, PHPDebugTarget debugTarget) {
		IBreakpointManager breakpointManager = debugTarget.getBreakpointManager();
		if (!breakpointManager.isEnabled()) {
			return new IBreakpoint[0];
		}
		IBreakpoint[] breakpoints = breakpointManager.getBreakpoints(IPHPDebugConstants.ID_PHP_DEBUG_CORE);
		List<IBreakpoint> matches = new LinkedList<>();
		for (IBreakpoint bp : breakpoints) {
			if (bp instanceof IPHPExceptionBreakpoint || PharPath.isPharPath(new Path(processFileLocation))) {
				/*
				 * Not supported by Zend Debugger engine - exception breakpoints and handling
				 * breakpoints in PHAR files.
				 */
				continue;
			}
			IResource resource = ResourcesPlugin.getWorkspace().getRoot().findMember(processFileLocation);
			/*
			 * Check if breakpoint marker resource is the same as the one found for file
			 * location that should be processed.
			 */
			if (bp.getMarker().getResource().equals(resource)) {
				matches.add(bp);
				continue;
			}
			try {
				/*
				 * If previous check failed, try to establish if PHP breakpoint file location is
				 * pointing to the same file as the one that should be processed. Symbolic links
				 * will also be resolved.
				 */
				String bpMarkerFileLocation = bp.getMarker().getResource().getLocation().toOSString();
				String phpBpFileLocation = ((PHPLineBreakpoint) bp).getRuntimeBreakpoint().getFileName();
				if (FileUtils.isSameFile(bpMarkerFileLocation, processFileLocation)
						|| FileUtils.isSameFile(phpBpFileLocation, processFileLocation)) {
					/*
					 * If there is a debug target related project then we can filter out possible
					 * breakpoint duplicates (in case of symbolic links)
					 */
					IProject debugProject = PHPLaunchUtilities.getProject(debugTarget);
					IProject bpProject = bp.getMarker().getResource().getProject();
					if (debugProject == null || bpProject == null || debugProject.equals(bpProject)) {
						matches.add(bp);
						continue;
					}
				}
			} catch (Exception e) {
				/*
				 * Ignore as some path descriptors might be illegal for this check e.g. DLTK
				 * external library scripts (see next step).
				 */
			}
			/*
			 * Breakpoint may also correspond to a PHP script from project external
			 * libraries. Try to check it as well.
			 */
			String secondaryId = null;
			try {
				secondaryId = (String) bp.getMarker()
						.getAttribute(StructuredResourceMarkerAnnotationModel.SECONDARY_ID_KEY);
			} catch (CoreException e) {
				// Should never be thrown, anyway...
				Logger.logException(e);
			}
			if (secondaryId != null) {
				IPath path = Path.fromPortableString(secondaryId);
				if ((path.getDevice() == null) && (path.toString().startsWith("org.eclipse.dltk"))) { //$NON-NLS-1$
					String fullPathString = path.toString();
					String absolutePath = fullPathString.substring(fullPathString.indexOf(':') + 1);
					path = Path.fromPortableString(absolutePath);
				} else {
					path = EnvironmentPathUtils.getLocalPath(path);
				}
				secondaryId = path.toString();
				if ((VirtualPath.isAbsolute(processFileLocation)
						&& new VirtualPath(processFileLocation).equals(new VirtualPath(secondaryId)))
						|| (resource != null && resource.getLocation() != null
								&& secondaryId.equals(resource.getLocation().toString()))) {
					matches.add(bp);
				}
			}
		}
		return matches.toArray(new IBreakpoint[matches.size()]);
	}

