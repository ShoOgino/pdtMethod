	public void launch(ILaunchConfiguration configuration, String mode,
			ILaunch launch, IProgressMonitor monitor) throws CoreException {
		String debuggerId = XDebugCommunicationDaemon.XDEBUG_DEBUGGER_ID;
		if (mode.equals(ILaunchManager.DEBUG_MODE)) {
			if (XDebugLaunchListener.getInstance().isWebLaunchActive()) {
				displayErrorMessage(PHPDebugCoreMessages.XDebug_WebLaunchConfigurationDelegate_0);
				DebugPlugin.getDefault().getLaunchManager()
						.removeLaunch(launch);
				return;
			}
			PHPLaunchUtilities.showDebugView();
		}
		// Resolve the server
		Server server = ServersManager.getServer(configuration.getAttribute(
				Server.NAME, "")); //$NON-NLS-1$
		if (server == null) {
			Logger.log(Logger.ERROR,
					"Launch configuration could not find server"); //$NON-NLS-1$
			displayErrorMessage(PHPDebugCoreMessages.XDebug_WebLaunchConfigurationDelegate_1);
			DebugPlugin.getDefault().getLaunchManager().removeLaunch(launch);
			return;
		}
		// Get the project from the file name
		String fileName = configuration.getAttribute(Server.FILE_NAME,
				(String) null);
		IPath filePath = new Path(fileName);
		IProject proj = null;
		try {
			proj = ResourcesPlugin.getWorkspace().getRoot()
					.getProject(filePath.segment(0));
		} catch (Throwable t) {
			if (proj == null) {
				Logger.logException(
						"Could not execute the debug (Project is null).", t); //$NON-NLS-1$
				DebugPlugin.getDefault().getLaunchManager()
						.removeLaunch(launch);
				return;
			}
		}
		// Save the project name for source lookup
		ILaunchConfigurationWorkingCopy wc = configuration.getWorkingCopy();
		String project = proj.getFullPath().toString();
		wc.setAttribute(IPHPDebugConstants.PHP_Project, project);
		wc.setAttribute(IDebugParametersKeys.TRANSFER_ENCODING,
				PHPProjectPreferences.getTransferEncoding(proj));
		wc.setAttribute(IDebugParametersKeys.OUTPUT_ENCODING,
				PHPProjectPreferences.getOutputEncoding(proj));
		wc.doSave();
		/*
		 * Determine stop at first line (first calculate the default and then
		 * try to extract the configuration attribute).
		 */
		boolean stopAtFirstLine = PHPProjectPreferences
				.getStopAtFirstLine(proj);
		stopAtFirstLine = wc.getAttribute(
				IDebugParametersKeys.FIRST_LINE_BREAKPOINT, stopAtFirstLine);
		/*
		 * Generate a session id for this launch and start the listener then
		 * create the start and stop debug URLs
		 */
		String[] startStopURLs;
		String baseURL = new String(configuration.getAttribute(Server.BASE_URL,
				"").getBytes()); //$NON-NLS-1$
		IDBGpDebugTarget target = null;
		SSHTunnel tunnel = null;
		if (mode.equals(ILaunchManager.DEBUG_MODE)) {
			String sessionId = DBGpSessionHandler.getInstance()
					.generateSessionId();
			String ideKey = null;
			DBGpProxyHandler proxyHandler = DBGpProxyHandlersManager.INSTANCE
					.getHandler(server.getUniqueId());
			if (proxyHandler != null && proxyHandler.useProxy()) {
				ideKey = proxyHandler.getCurrentIdeKey();
				if (proxyHandler.registerWithProxy() == false) {
					displayErrorMessage(PHPDebugCoreMessages.XDebug_WebLaunchConfigurationDelegate_2
							+ proxyHandler.getErrorMsg());
					DebugPlugin.getDefault().getLaunchManager()
							.removeLaunch(launch);
					return;
				}
			} else {
				ideKey = DBGpSessionHandler.getInstance().getIDEKey();
			}
			startStopURLs = generateStartStopDebugURLs(baseURL, sessionId,
					ideKey);
			String launchScript = configuration.getAttribute(Server.FILE_NAME,
					(String) null);
			// Check if a tunneled connection is needed and create request for a
			// tunnel if needed.
			tunnel = PHPLaunchUtilities.getSSHTunnel(configuration);
			// determine if we should use the multisession manager or the single
			// session manager
			if (XDebugPreferenceMgr.useMultiSession() == true) {
				target = new DBGpMultiSessionTarget(launch, launchScript,
						startStopURLs[1], ideKey, stopAtFirstLine);
				target.setPathMapper(PathMapperRegistry.getByServer(server));
				launch.addDebugTarget(target); // has to be added now, not
			} else {
				target = new DBGpTarget(launch, launchScript, startStopURLs[1],
						ideKey, null, stopAtFirstLine);
				target.setPathMapper(PathMapperRegistry.getByServer(server));
			}
			DBGpSessionHandler.getInstance().addSessionListener(
					(IDBGpSessionListener) target);
			int requestPort = getDebugPort(server);
			if (!PHPLaunchUtilities.isDebugDaemonActive(requestPort,
					XDebugCommunicationDaemon.XDEBUG_DEBUGGER_ID)) {
				PHPLaunchUtilities
						.showLaunchErrorMessage(NLS
								.bind(PHPDebugCoreMessages.WebLaunchConfigurationDelegate_PortInUse,
										requestPort, server.getName()));
				monitor.setCanceled(true);
				monitor.done();
				return;
			}

		} else {
			startStopURLs = new String[] { baseURL, null };
		}
		final String startURL = startStopURLs[0];
		// Will be used in the future?
		@SuppressWarnings("unused")
		final SSHTunnel sshTunnel = tunnel;
		// load the URL into the appropriate web browser
		monitor.beginTask("", 10); //$NON-NLS-1$
		monitor.subTask(PHPDebugCoreMessages.XDebug_WebLaunchConfigurationDelegate_3);
		try {
			PHPDebugUtil.openLaunchURL(startURL);
		} catch (Exception e) {
			if (mode.equals(ILaunchManager.DEBUG_MODE)) {
				DBGpSessionHandler.getInstance().removeSessionListener(
						(IDBGpSessionListener) target);
			}
			DebugPlugin.getDefault().getLaunchManager().removeLaunch(launch);
			monitor.done();
			return;
		}
		monitor.worked(5);
		if (mode.equals(ILaunchManager.DEBUG_MODE)) {
			launch.addDebugTarget(target);
			monitor.subTask(PHPDebugCoreMessages.XDebug_WebLaunchConfigurationDelegate_4);
			target.waitForInitialSession(
					(DBGpBreakpointFacade) IDELayerFactory.getIDELayer(),
					XDebugPreferenceMgr.createSessionPreferences(), monitor);
		} else {
			/*
			 * launched is not in debug mode, so remove the launch from the
			 * debug view as we are not debugging anything.
			 */
			DebugPlugin.getDefault().getLaunchManager().removeLaunch(launch);
		}
		monitor.worked(5);
		monitor.done();
	}

