	/**
	 * Returns an array of system environment attributes from the given launch
	 * configuration. If empty, then the current native environment attributes
	 * will be returned. From this we append any additional environment
	 * variables we might want to add. Note: Additional environments may
	 * override the native environment attributes, but disregarded when an
	 * equivalent launch configuration attribute is set for the given launch.
	 * 
	 * @param configuration
	 *            the launch configuration
	 * @param additionalEnv
	 *            additional environment strings
	 * @return the complete environment
	 * @throws CoreException
	 *             rethrown exception
	 */
	@SuppressWarnings("unchecked")
	public static String[] getEnvironment(ILaunchConfiguration configuration,
			String[] additionalEnv) throws CoreException {

		if (additionalEnv == null) {
			additionalEnv = new String[0];
		}
		Map<String, String> additionalEnvMap = asAttributesMap(additionalEnv);

		String[] totalEnv = null;
		String[] launchConfigurationEnvironment = DebugPlugin.getDefault()
				.getLaunchManager().getEnvironment(configuration);

		if (launchConfigurationEnvironment != null) {
			// The launch configuration tab has environment settings.
			Map<String, String> envMap = asAttributesMap(
					launchConfigurationEnvironment);
			// Make sure that these settings override any additional settings,
			// so add them to the
			// additional environments map.
			envMap.putAll(additionalEnvMap);
			totalEnv = asAttributesArray(envMap);
		} else {
			// We have nothing in the environment tab, so we need to set
			// currentEnv ourselves to the current environment
			Map<String, String> nativeEnvironment = DebugPlugin.getDefault()
					.getLaunchManager().getNativeEnvironmentCasePreserved();
			// Make sure we override any native environment with the additional
			// environment values
			nativeEnvironment.putAll(additionalEnvMap);
			totalEnv = asAttributesArray(nativeEnvironment);
		}
		return totalEnv;
	}

