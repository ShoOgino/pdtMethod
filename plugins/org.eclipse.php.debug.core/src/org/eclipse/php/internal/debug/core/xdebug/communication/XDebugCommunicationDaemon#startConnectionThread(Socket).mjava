	/**
	 * Starts a connection handling thread on the given Socket.
	 * 
	 * @param socket
	 */
	protected void startConnectionThread(Socket socket) {
		// a socket has been accepted by the listener. This runs on the listener
		// thread so we should make damn sure we don't throw an exception here
		// otherwise it will abort that thread.
		if (DBGpLogger.debugSession()) {
			DBGpLogger.debug("Connection established: " + socket.toString());
		}

		try {
			DBGpSession session = new DBGpSession(socket);
			if (session.isActive()) {
				if (!DBGpSessionHandler.getInstance().fireSessionAdded(session)) {
					// Session not taken, we want to create a launch
					AcceptRemoteSession aSess = XDebugPreferenceMgr
							.getAcceptRemoteSession();
					if (aSess != AcceptRemoteSession.off) {
						if (aSess == AcceptRemoteSession.localhost
								&& session.getRemoteAddress()
										.isLoopbackAddress() == false) {
							session.endSession();
						} else if (aSess == AcceptRemoteSession.prompt) {
							PromptUser prompt = new PromptUser(session);
							Display.getDefault().syncExec(prompt);
							if (prompt.isResult()) {
								createLaunch(session);
							} else {
								session.endSession();
							}

						} else {
							// session was either localhost or from any outside
							// one and
							// preferences allow it.
							createLaunch(session);
						}
					} else {
						// reject the session
						session.endSession();
					}
				}
			}
		} catch (Exception e) {
			DBGpLogger.logException(
					"Unexpected Exception: Listener thread still listening",
					this, e);
		}
	}

