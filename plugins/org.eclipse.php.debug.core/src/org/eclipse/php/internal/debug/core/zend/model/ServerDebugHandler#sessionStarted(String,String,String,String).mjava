	public void sessionStarted(String remoteFile, String uri, String query, String options) {
		super.sessionStarted(remoteFile, uri, query, options);

		if (isUsingPathMapper()) {
			// Hack for the case when htdocs is symlinked to the workspace.
			// Zend Debugger resolves symbolic links later, and it fucks up the path mapper:
			try {
				File file = new File(remoteFile);
				if (file.exists()) {
					remoteFile = file.getCanonicalPath();
				}
			} catch (Exception e) {
			}

			try {
				ILaunchConfiguration launchConfiguration = fDebugTarget.getLaunch().getLaunchConfiguration();
				PathMapper pathMapper = PathMapperRegistry.getByLaunchConfiguration(launchConfiguration);

				if (pathMapper != null) {
					PathEntry pathEntry = pathMapper.getLocalFile(remoteFile);

					// If such file doesn't exist in path mapper yet, add it:
					if (pathEntry == null) {
						// Try to find a map point:
						String debugFileName = launchConfiguration.getAttribute(Server.FILE_NAME, (String) null);
						if (debugFileName == null) {
							debugFileName = launchConfiguration.getAttribute(PHPCoreConstants.ATTR_FILE, (String) null);
						}
						if (debugFileName != null) {
							IResource resource = ResourcesPlugin.getWorkspace().getRoot().findMember(debugFileName);
							if (resource instanceof IFile) {
								pathEntry = new PathEntry(debugFileName, Type.WORKSPACE, resource.getParent());
							} else if (resource instanceof IProject) {
								IProject project = (IProject) resource;
								int idx = remoteFile.lastIndexOf('/');
								if (idx == -1) {
									idx = remoteFile.lastIndexOf('\\');
								}
								String lastSegment;
								if (idx != -1) {
									lastSegment = remoteFile.substring(idx + 1);
								} else {
									lastSegment = remoteFile;
								}
								IFile file = project.getFile(lastSegment);
								if (file != null && file.exists()) {
									pathEntry = new PathEntry(file.getFullPath().toString(), Type.WORKSPACE, project);
								}
							}
						}
						if (pathEntry != null) {
							// Map remote file to the map point:
							pathMapper.addEntry(remoteFile, pathEntry);
							PathMapperRegistry.storeToPreferences();
						} else {
							// Find the local file, and map it:
							DebugSearchEngine.find(remoteFile, fDebugTarget);
						}
					}
				}
			} catch (Exception e) {
				PHPDebugPlugin.log(e);
			}
		}

		fDebugTarget.setLastFileName(remoteFile);
		if (!fDebugTarget.isPHPCGI()) {
			fDebugTarget.setServerWindows(false);
		}

		StartLock startLock = fDebugTarget.getStartLock();
		synchronized (startLock) {
			if (startLock.isRunStart()) {
				startLock.setStarted(true);
				fDebugTarget.started();
				fStatus = getRemoteDebugger().start(fDebugTarget.getStartResponseHandler());
				if (!fStatus) {
					Logger.log(Logger.ERROR, "PHPDebugTarget: debugger.start return false");
					try {
						fDebugTarget.disconnect();
					} catch (DebugException e) {
						Logger.logException(e);
					}
				}
				fDebugTarget.setLastCommand("start");
			} else {
				startLock.setRunStart(true);
			}
		}
	}

