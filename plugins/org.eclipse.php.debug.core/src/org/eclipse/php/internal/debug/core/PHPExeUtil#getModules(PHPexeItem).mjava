	/**
	 * Checks and outputs list of modules installed on top of given PHP
	 * executable item.
	 * 
	 * @param phpExeItem
	 * @return list of installed module names
	 */
	public static List<PHPModuleInfo> getModules(PHPexeItem phpExeItem) {
		List<PHPModuleInfo> modules = new ArrayList<>();
		String result;
		PHPVersion phpVersion = new PHPVersion(phpExeItem);
		File exec = phpExeItem.getExecutable();
		try {
			if (phpVersion.getMajor() >= 5) {
				result = PHPExeUtil.exec(exec.getAbsolutePath(), phpExeItem.isLoadDefaultINI() ? null : "-n", "-c", //$NON-NLS-1$ //$NON-NLS-2$
						getINIFile(exec).getAbsolutePath(), "-m"); //$NON-NLS-1$
			}
			else {
				result = PHPExeUtil.exec(phpExeItem.getExecutable().getAbsolutePath(), "-c", //$NON-NLS-1$
						getINIFile(exec).getAbsolutePath(), "-m"); //$NON-NLS-1$
			}
		} catch (IOException e) {
			// empty list
			return modules;
		}
		Scanner scanner = new Scanner(result);
		String currentGroup = null;
		while (scanner.hasNextLine()) {
			String line = scanner.nextLine().trim();
			if (line.startsWith("[")) { //$NON-NLS-1$
				currentGroup = line;
				continue;
			}
			if (!line.isEmpty()) {
				modules.add(new PHPModuleInfo(line, currentGroup));
			}
		}
		scanner.close();
		return modules;
	}

