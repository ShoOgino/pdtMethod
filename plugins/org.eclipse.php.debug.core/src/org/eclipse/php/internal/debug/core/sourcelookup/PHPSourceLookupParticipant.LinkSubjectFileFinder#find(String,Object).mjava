		public Object find(final String sourceLocation, Object element) {
			final LinkedList<IResource> matches = new LinkedList<IResource>();
			final String sourceFileName = (new Path(sourceLocation)).lastSegment();
			IProject project = null;
			if (element instanceof IStackFrame) {
				IDebugTarget target = ((IStackFrame) element).getDebugTarget();
				project = PHPLaunchUtilities.getProject(target);
			}
			final IResource scope = project != null ? project : ResourcesPlugin.getWorkspace().getRoot();
			try {
				scope.accept(new IResourceVisitor() {
					@Override
					public boolean visit(IResource resource) throws CoreException {
						try {
							// Retreat if we already have a match
							if (!matches.isEmpty()) {
								return false;
							}
							// We are looking for files only
							if (resource.getType() != IResource.FILE) {
								return true;
							}
							/*
							 * The goal of this pre-check condition is to reduce
							 * the amount of files to be checked by NIO
							 * (comparing with NIO can be time consuming ).
							 */
							if (resource.getName().equals(sourceFileName) || resource.isLinked()
									|| PHPSymbolicLinksCache.INSTANCE.isSymbolicLink(resource)) {
								String fileLocation = resource.getLocation().toOSString();
								if (FileUtils.isSameFile(sourceLocation, fileLocation)) {
									matches.add(resource);
								}
							}
						} catch (IOException e) {
							PHPDebugPlugin.log(e);
						}
						return true;
					}
				});
			} catch (CoreException e) {
				PHPDebugPlugin.log(e);
			}
			return !matches.isEmpty() ? matches.getFirst() : null;
		}

