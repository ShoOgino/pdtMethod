	protected void validate() {
		// Reset state
		setMessage(PHPDebugCoreMessages.ZendDebuggerConfigurationDialog_Dialog_description);
		// Check errors
		String debugPort = fDebugTextBox.getText();
		Integer portNumber = null;
		try {
			portNumber = Integer.valueOf(debugPort);
			int i = portNumber.intValue();
			if (i < 1 || i > 65535) {
				setMessage(
						PHPDebugCoreMessages.DebugConfigurationDialog_invalidPortRange,
						IMessageProvider.ERROR);
				return;
			}
		} catch (NumberFormatException ex) {
			setMessage(
					PHPDebugCoreMessages.DebugConfigurationDialog_invalidPort,
					IMessageProvider.ERROR);
			return;
		} catch (Exception e) {
			setMessage(
					PHPDebugCoreMessages.DebugConfigurationDialog_invalidPort,
					IMessageProvider.ERROR);
			return;
		}
		String responseTime = fDebugResponseTimeout.getText();
		Integer responseTimeout = null;
		try {
			responseTimeout = Integer.valueOf(responseTime);
			int i = responseTimeout.intValue();
			if (i < 5000) {
				setMessage(
						NLS.bind(
								PHPDebugCoreMessages.ZendDebuggerConfigurationDialog_invalid_response_time,
								5000), IMessageProvider.ERROR);
				return;
			}
		} catch (Exception exc) {
			setMessage(
					PHPDebugCoreMessages.ZendDebuggerConfigurationDialog_invalid_response_time_exc,
					IMessageProvider.ERROR);
			return;
		}
		// Check warnings
		if (!PHPLaunchUtilities.isPortAvailable(portNumber)
				&& !PHPLaunchUtilities.isDebugDaemonActive(portNumber,
						DebuggerCommunicationDaemon.ZEND_DEBUGGER_ID)) {
			setMessage(NLS.bind(
					PHPDebugCoreMessages.DebugConfigurationDialog_PortInUse,
					debugPort), IMessageProvider.WARNING);
		}
	}

