	protected void validate() {
		// Reset state
		setMessage(PHPDebugCoreMessages.ZendDebuggerConfigurationDialog_Dialog_description);
		// Check errors
		String debugPort = fDebugTextBox.getText();
		Integer debugPortNumber = null;
		try {
			debugPortNumber = Integer.valueOf(debugPort);
			int i = debugPortNumber.intValue();
			if (i < 1 || i > 65535) {
				setMessage(PHPDebugCoreMessages.DebugConfigurationDialog_invalidPortRange, IMessageProvider.ERROR);
				return;
			}
		} catch (NumberFormatException ex) {
			setMessage(PHPDebugCoreMessages.DebugConfigurationDialog_invalidPort, IMessageProvider.ERROR);
			return;
		} catch (Exception e) {
			setMessage(PHPDebugCoreMessages.DebugConfigurationDialog_invalidPort, IMessageProvider.ERROR);
			return;
		}
		String broadcastPort = fBroadcastPortText.getText();
		Integer broadcastPortNumber = null;
		try {
			broadcastPortNumber = Integer.valueOf(broadcastPort);
			int i = broadcastPortNumber.intValue();
			if (i < 1 || i > 65535) {
				setMessage(PHPDebugCoreMessages.DebugConfigurationDialog_invalidPortRange, IMessageProvider.ERROR);
				return;
			}
		} catch (NumberFormatException ex) {
			setMessage(PHPDebugCoreMessages.DebugConfigurationDialog_invalidPort, IMessageProvider.ERROR);
			return;
		} catch (Exception e) {
			setMessage(PHPDebugCoreMessages.DebugConfigurationDialog_invalidPort, IMessageProvider.ERROR);
			return;
		}
		String responseTime = fDebugResponseTimeout.getText();
		Integer responseTimeout = null;
		try {
			responseTimeout = Integer.valueOf(responseTime);
			int i = responseTimeout.intValue();
			if (i < 5000) {
				setMessage(NLS.bind(PHPDebugCoreMessages.ZendDebuggerConfigurationDialog_invalid_response_time, 5000),
						IMessageProvider.ERROR);
				return;
			}
		} catch (Exception exc) {
			setMessage(PHPDebugCoreMessages.ZendDebuggerConfigurationDialog_invalid_response_time_exc,
					IMessageProvider.ERROR);
			return;
		}
		// Check warnings
		String[] clientHosts = PHPDebugUtil.getZendHostsArray(fClientIP.getText());
		fNetworkMonitor.validate(clientHosts, new IHostsValidationListener[] { new IHostsValidationListener() {
			public void validated(List<String> invalidAddresses) {
				if (!invalidAddresses.isEmpty()) {
					StringBuilder addresses = new StringBuilder();
					for (String address : invalidAddresses) {
						addresses.append((addresses.length() != 0 ? ", " : "") //$NON-NLS-1$ //$NON-NLS-2$
								+ '\'' + address + '\'');
					}
					String message;
					if (invalidAddresses.size() == 1) {
						message = MessageFormat.format(
								PHPDebugCoreMessages.ZendDebuggerConfigurationDialog_ClientIPWarning,
								addresses.toString());
					} else {
						message = MessageFormat.format(
								PHPDebugCoreMessages.ZendDebuggerConfigurationDialog_ClientIPsWarning,
								addresses.toString());
					}
					final String warningMessage = message;
					PlatformUI.getWorkbench().getDisplay().asyncExec(new Runnable() {
						public void run() {
							if (!getShell().isDisposed() && getButton(IDialogConstants.OK_ID).isEnabled())
								setMessage(warningMessage, IMessageProvider.WARNING);
						}
					});
				}
			}
		} });
		if (!PHPLaunchUtilities.isPortAvailable(debugPortNumber) && !PHPLaunchUtilities
				.isDebugDaemonActive(debugPortNumber, DebuggerCommunicationDaemon.ZEND_DEBUGGER_ID)) {
			setMessage(NLS.bind(PHPDebugCoreMessages.DebugConfigurationDialog_PortInUse, debugPort),
					IMessageProvider.WARNING);
		}
		if (!PHPLaunchUtilities.isPortAvailable(broadcastPortNumber)) {
			for (ICommunicationDaemon daemon : DaemonsRegistry.getDaemons()) {
				if (daemon instanceof BroadcastDaemon && !((BroadcastDaemon) daemon).isListening(broadcastPortNumber)) {
					setMessage(NLS.bind(PHPDebugCoreMessages.DebugConfigurationDialog_PortInUse, broadcastPort),
							IMessageProvider.WARNING);
				}
			}
		}
	}

