	/**
	 * create variable entries for a byte array
	 * 
	 * @param bytes
	 *            the byte array
	 * @param bytePos
	 *            offset within byte array to start
	 * @param byteCount
	 *            number of bytes to process
	 * @param startOffset
	 *            offset within the ivariable array to place the information.
	 *            This allows the creation of ivariables but to be able to place
	 *            variable information before the result of this output
	 * @param debugTarget
	 *            the bebug target.
	 * @return the variables to return.
	 */
	public static IVariable[] createVariables(byte[] bytes, int bytePos,
			int byteCount, int startOffset, IDebugTarget debugTarget) {
		final int childLimit = 100;
		IVariable[] childVariables = null;
		// determine the number of variables to return
		if (byteCount > childLimit) {
			// more than one variable to be returned - split to partitions
			int split = childLimit;
			int children = byteCount / split;
			if (byteCount % split != 0) {
				children++;
			}
			while (children > childLimit) {
				split *= 10;
				children = byteCount / split;
				if (byteCount % split != 0) {
					children++;
				}
			}
			childVariables = new IVariable[children + startOffset];
			// now populate the variables
			int rangeStart = bytePos;
			int rangeEnd = 0;
			for (int j = 0; j < children; j++) {
				if (j == children - 1) {
					rangeEnd = bytePos + byteCount - 1;
				} else {
					rangeEnd = rangeStart + split - 1;
				}
				if (rangeStart <= rangeEnd) {
					final IValue value = new SimpleByteArrayValue(bytes,
							rangeStart, rangeEnd, debugTarget);
					IVariable partition = new VirtualPartition(debugTarget,
							new IVariableProvider() {
								@Override
								public IVariable[] getVariables()
										throws DebugException {
									return value.getVariables();
								}
							}, rangeStart, rangeEnd);
					childVariables[j + startOffset] = partition;
					rangeStart += split;
				}
			}
		} else {
			childVariables = new SimpleVariable[byteCount + startOffset];
			// don't split out the data.
			for (int i = 0; i < byteCount; i++) {
				IValue iv2 = new SimpleByteValue(bytes[bytePos + i],
						debugTarget);
				childVariables[i + startOffset] = new SimpleVariable(
						Integer.toString(bytePos + i), iv2, debugTarget,
						KIND_ARRAY_MEMBER);
			}
		}
		return childVariables;
	}

