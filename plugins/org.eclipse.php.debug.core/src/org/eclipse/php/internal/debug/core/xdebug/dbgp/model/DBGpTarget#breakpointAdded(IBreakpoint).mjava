	/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.debug.core.IBreakpointListener#breakpointAdded(org.eclipse
	 * .debug.core.model.IBreakpoint)
	 */
	@Override
	public void breakpointAdded(IBreakpoint breakpoint) {
		// attempt to add a breakpoint under the following conditions
		// 1. breakpoint manager enabled
		// 2. the breakpoint is valid for the environment
		// 3. the breakpoint is enabled
		// 4. the debugee is suspended or running and async is supported (send
		// immediately)
		// 5. the debugee is running and async not supported (defer and send
		// later)
		// otherwise do not send or defer the breakpoint

		if (!DebugPlugin.getDefault().getBreakpointManager().isEnabled()) {
			return;
		}

		if (supportsBreakpoint(breakpoint)) {
			try {
				if (breakpoint.isEnabled()) {
					DBGpBreakpoint bp = bpFacade.createDBGpBreakpoint(breakpoint);
					if (isSuspended() || (asyncSupported && isRunning())) {
						// we are suspended or async mode is supported and we
						// are running, so send the breakpoint.
						if (DBGpLogger.debugBP()) {
							DBGpLogger.debug("Breakpoint Add requested immediately"); //$NON-NLS-1$
						}
						sendBreakpointAddCmd(bp);
					} else if (isRunning()) {

						// we are running and async mode is not supported
						// If we send a breakpoint command we may not get a
						// response at all or may get a response when the script
						// suspends on another breakpoint which will hang the
						// gui until then if we send it synchronously.
						// Async would require the read thread to handle
						// the response, locate the breakpoint from the txn_id
						// and add the id to the runtimeBreakpoint.
						// We cannot guarantee that the debug server will hold
						// the request until the script suspends and even queue
						// multiple requests, so the best bet is to
						// queue the requests until we suspend.
						if (DBGpLogger.debugBP()) {
							DBGpLogger.debug("Breakpoint Add deferred until suspended"); //$NON-NLS-1$
						}
						DBGpBreakpointCmd bpSet = new DBGpBreakpointCmd(DBGpCommand.breakPointSet, bp);
						queueBpCmd(bpSet);
					}
				}
			} catch (CoreException e) {
				DBGpLogger.logException("Exception adding breakpoint", this, e); //$NON-NLS-1$
			}
		}
	}

