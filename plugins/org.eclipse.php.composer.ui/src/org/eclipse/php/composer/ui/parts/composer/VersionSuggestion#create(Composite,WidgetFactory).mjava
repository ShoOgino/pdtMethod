	private void create(Composite parent, WidgetFactory factory) {
		body = factory.createComposite(parent);
		body.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, false));
		body.setLayout(new GridLayout());
		body.setBackground(parent.getBackground());
		WidgetHelper.trimComposite(body, 0, 0, 0, 0, 0, 0);

		// suggestions
		Group suggestions = new Group(body, SWT.SHADOW_IN);
		suggestions.setText("Most Recent Version Suggestions");
		suggestions.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));
		suggestions.setLayout(new GridLayout(2, true));
		suggestions.setBackgroundMode(SWT.INHERIT_DEFAULT);
		WidgetHelper.trimComposite(suggestions, 0, 0, 0, 0, 0, 5);

		// major
		recentMajor = factory.createButton(suggestions);
		recentMajor.setAlignment(SWT.CENTER);
		recentMajor.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false));
		recentMajor.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(SelectionEvent e) {
				lastUpdate = RECENT;
				version.setVersion("~" + recentMajor.getData());
			}
		});

		// minor
		recentMinor = factory.createButton(suggestions);
		recentMinor.setAlignment(SWT.CENTER);
		recentMinor.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false));
		recentMinor.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(SelectionEvent e) {
				lastUpdate = RECENT;
				version.setVersion("~" + recentMajor.getData() + "." + recentMinor.getData());
			}
		});

		// custom
		custom = new Group(body, SWT.SHADOW_ETCHED_IN);
		custom.setText("Custom");
		custom.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));
		custom.setLayout(new GridLayout(2, false));
		custom.setBackgroundMode(SWT.INHERIT_DEFAULT);
		WidgetHelper.trimComposite(custom, 0, 0, 0, 0, 0, 5);

		VersionController controller = new VersionController();
		versions = new TableViewer(custom, SWT.H_SCROLL | SWT.V_SCROLL | SWT.SINGLE | SWT.BORDER);
		versions.getTable().setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, false, 1, 1));
		versions.setContentProvider(controller);
		versions.setLabelProvider(controller);
		GridData gd = new GridData(SWT.FILL, SWT.FILL, true, false);
		gd.heightHint = 65;
		versions.getTable().setLayoutData(gd);
		versions.addSelectionChangedListener(new ISelectionChangedListener() {
			public void selectionChanged(SelectionChangedEvent event) {
				Object elem = ((IStructuredSelection) event.getSelection()).getFirstElement();
				if (elem instanceof Version) {
					prepareCustomVersion();
					Version v = (Version) elem;
					customVersion.setMajor(v.getMajor());
					customVersion.setMinor(v.getMinor());
					customVersion.setFix(v.getFix());
					customVersion.setDevPosition(v.getDevPosition());
					customVersion.setStability(v.getStability());
					customVersion.setSuffix(v.getSuffix());
					version.from(customVersion);
				}
			}
		});
		versions.setComparator(new VersionSorter());

		// constraints
		right = factory.createComposite(custom, SWT.NO_BACKGROUND);
		right.setLayoutData(new GridData(SWT.RIGHT, SWT.TOP, false, false));
		right.setLayout(new GridLayout(3, false));
		right.setBackgroundMode(SWT.INHERIT_DEFAULT);
		WidgetHelper.trimComposite(right, -5, -5, -5, -5, 0, 0);

		Label constraintsLbl = factory.createLabel(right, SWT.NO_BACKGROUND | SWT.TRANSPARENT);
		constraintsLbl.setText("Constraints:");
		constraintsLbl.setBackground(custom.getBackground());
		constraintsLbl.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 2, 1));

		noConstraint = factory.createButton(right, SWT.RADIO | SWT.NO_BACKGROUND);
		noConstraint.setText("None");
		noConstraint.setBackground(custom.getBackground());
		noConstraint.setSelection(true);
		noConstraint.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(SelectionEvent e) {
				if (prepareCustomVersion()) {
					customVersion.setConstraint("");
					version.from(customVersion);
				}
			}
		});

		for (String constraint : new String[] { "~", ">", ">=", "!=", "<", ">=" }) {
			Button c = factory.createButton(right, SWT.RADIO | SWT.TRANSPARENT);
			c.setText(constraint);
			c.setBackground(custom.getBackground());
			c.addSelectionListener(new SelectionAdapter() {
				public void widgetSelected(SelectionEvent e) {
					if (prepareCustomVersion()) {
						customVersion.setConstraint(((Button) e.getSource()).getText());
						version.from(customVersion);
					}
				}
			});
			constraintButtons.put(constraint, c);
		}

		// Stability Override
		Label stabilityLbl = factory.createLabel(right);
		stabilityLbl.setText("Override Stability:");
		stabilityLbl.setBackground(custom.getBackground());
		gd = new GridData(SWT.FILL, SWT.CENTER, true, false, 3, 1);
		gd.verticalIndent = 10;
		stabilityLbl.setLayoutData(gd);

		stabilityOverride = factory.createCombo(right, SWT.READ_ONLY | SWT.FLAT);
		stabilityOverride.setItems((String[]) ArrayUtils.addAll(new String[] { "" }, ComposerConstants.STABILITIES));
		stabilityOverride.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 3, 1));
		stabilityOverride.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(SelectionEvent e) {
				if (prepareCustomVersion()) {
					customVersion
							.setStabilityModifier(stabilityOverride.getItem(stabilityOverride.getSelectionIndex()));
					version.from(customVersion);
				}
			}
		});

		uiFinished = true;
		updateUI();

		// add listener to update target when version changes
		version.addPropertyChangeListener(new PropertyChangeListener() {
			public void propertyChange(PropertyChangeEvent evt) {
				updateTarget();
			}
		});

	}

