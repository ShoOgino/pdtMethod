	@Override
	protected void createClient(Section section, FormToolkit toolkit) {
		section.setText("Scripts");
		section.setDescription("Manage the scripts for your package.");
		section.setLayout(FormLayoutFactory.createClearGridLayout(false, 1));
		GridData gd = new GridData(GridData.FILL_BOTH);
		gd.grabExcessVerticalSpace = true;
		section.setLayoutData(gd);

		Composite container = createClientContainer(section, 2, toolkit);
		createViewerPartControl(container, SWT.SINGLE, 2, toolkit);
		TreePart treePart = getTreePart();
		ScriptsController scriptsController = new ScriptsController(treePart.getTreeViewer());
		scriptsViewer = treePart.getTreeViewer();
		scriptsViewer.setUseHashlookup(true);
		scriptsViewer.setComparer(new IElementComparer() {
			@Override
			public int hashCode(Object element) {
				return element.hashCode();
			}

			// to support duplicate handler values correctly in TreeViewers
			// since handlers (attached to a Script object) are stored in a
			// JsonArray (and not in a UniqueJsonArray)
			@Override
			public boolean equals(Object a, Object b) {
				if (a instanceof String && b instanceof String) {
					// we cannot reliably compare multiple handler strings
					// between them, because at least multiple empty handler
					// strings have all same id (java optimization: a single
					// empty string instance is available)!
					// TODO: use a wrapper class around strings to be able to
					// reliably use the "==" operator everywhere
					return false;
				}
				return a == b;
			}
		});
		scriptsViewer.setContentProvider(scriptsController);
		scriptsViewer.setLabelProvider(scriptsController);

		toolkit.paintBordersFor(container);
		section.setClient(container);
		section.setLayout(FormLayoutFactory.createClearGridLayout(false, 1));

		scriptsViewer.setInput(composerPackage.getScripts());
		composerPackage.addPropertyChangeListener(this);
		updateButtons();

		makeActions();
		updateMenu();
	}

