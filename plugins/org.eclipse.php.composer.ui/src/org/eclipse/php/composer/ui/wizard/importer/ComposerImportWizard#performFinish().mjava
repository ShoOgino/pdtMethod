	@Override
	public boolean performFinish() {
		IRunnableWithProgress op = new IRunnableWithProgress() {
			@Override
			public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
				IWorkspace workspace = ResourcesPlugin.getWorkspace();
				IWorkspaceRoot root = workspace.getRoot();
				String projectName = mainPage.getProjectName();
				IProject project = root.getProject(mainPage.getProjectName());
				monitor.beginTask("Importing composer project", 5);

				try {

					IPath locationPath = new Path(mainPage.getSourcePath());
					IProjectDescription description = null;

					if (locationPath.append(".project").toFile().exists()) {
						ProjectDescriptionReader reader = new ProjectDescriptionReader(project);
						description = reader.read(locationPath.append(".project"));
					} else {
						description = workspace.newProjectDescription(projectName);
					}

					// If it is under the root use the default location
					if (Platform.getLocation().isPrefixOf(locationPath)) {
						description.setLocation(null);
					} else {
						description.setLocation(locationPath);
					}

					monitor.worked(1);
					project.create(description, monitor);
					project.open(monitor);
					monitor.worked(1);

					if (!project.hasNature(PHPNature.ID)) {
						ResourceUtil.addNature(project, monitor, PHPNature.ID);
					}

					if (!project.hasNature(ComposerNature.NATURE_ID)) {
						ResourceUtil.addNature(project, monitor, ComposerNature.NATURE_ID);
					}

					ProjectFacetsManager.create(project);

					FacetManager.installFacets(project, PHPVersion.PHP5_4, monitor);

					monitor.worked(1);

					project.refreshLocal(IResource.DEPTH_INFINITE, monitor);
					monitor.worked(2);

				} catch (CoreException e) {
					Logger.logException(e);
				} catch (IOException e) {
					Logger.logException(e);
				} finally {
					monitor.done();
				}
			}
		};

		try {
			getContainer().run(false, true, op);
		} catch (Exception e) {
			Logger.logException(e);
			return false;
		}
		return true;
	}

