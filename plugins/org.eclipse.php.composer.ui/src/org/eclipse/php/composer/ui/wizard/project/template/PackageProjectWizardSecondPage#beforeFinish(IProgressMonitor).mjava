	@Override
	protected void beforeFinish(IProgressMonitor monitor) throws Exception {

		PackageFilterItem filterItem = filter.getSelectedPackage();
		final CountDownLatch latch = new CountDownLatch(1);

		monitor.beginTask("Initializing composer project", 2);
		monitor.worked(1);

		File file = new File(firstPage.getLocationURI());
		IPath location = new Path(file.toString());

		// let the create-project command handle folder creation
		if (firstPage.isInLocalServer()) {
			location = location.removeLastSegments(1);
		}

		CreateProjectJob projectJob = new CreateProjectJob(location, firstPage.nameGroup.getName(),
				filterItem.getPackage().getName(), filterItem.getSelectedVersion());
		projectJob.setJobListener(new JobListener() {
			@Override
			public void jobStarted() {
				latch.countDown();
			}

			@Override
			public void jobFinished(String projectName) {
				latch.countDown();
				refreshProject(projectName);
			}

			@Override
			public void jobFailed() {
				latch.countDown();
			}
		});

		projectJob.schedule();

		// we need to wait until the first page has started the
		// create-project composer command and the command actually
		// wrote something to disk, otherwise the command will fail
		//
		// Note: The composer guys do not accept pull requests
		// to allow the create-project command be run on target paths
		// with files in it, so we have to use this workaround.
		try {
			latch.await();
		} catch (InterruptedException e) {

		}

		monitor.worked(1);
	}

