	@Override
	protected IStatus run(final IProgressMonitor monitor) {
		boolean callDoOnLauncherRunException = false;
		try {
			this.monitor = monitor;

			boolean tryAgain = false;
			do {
				try {
					launcher = manager.getLauncher(ComposerEnvironmentFactory.FACTORY_ID, getProject());
					tryAgain = false;
				} catch (ExecutableNotFoundException e) {
					callDoOnLauncherRunException = true;
					doOnLauncherRunException(e);
					// inform the user of the missing executable
					Display.getDefault().asyncExec(new MissingExecutableRunner());
					return Status.OK_STATUS;
				} catch (ScriptNotFoundException e) {
					callDoOnLauncherRunException = true;
					doOnLauncherRunException(e);
					if (tryAgain) {
						Display.getDefault().asyncExec(
								new ComposerFailureMessageRunner(Messages.ComposerJob_DownloadErrorMessage, monitor));
						return Status.OK_STATUS;
					} else {
						// run the downloader
						DownloadJob job = new DownloadJob(getProject());
						job.schedule();
						job.join();
						tryAgain = true;
					}
				}
			} while (tryAgain);

			launcher.addResponseListener(new ConsoleResponseHandler());
			launcher.addResponseListener(new ExecutionResponseAdapter() {
				public void executionFailed(final String response, final Exception exception) {
					Display.getDefault().asyncExec(new ComposerFailureMessageRunner(response, monitor));
				}

				@Override
				public void executionMessage(String message) {
					if (monitor != null && message != null) {
						monitor.subTask(message);
						monitor.worked(1);
					}
				}
			});

			monitor.beginTask(getName(), IProgressMonitor.UNKNOWN);
			monitor.worked(1);
			launch(launcher);
			monitor.worked(1);

			// refresh project
			if (getProject() != null) {
				getProject().refreshLocal(IProject.DEPTH_INFINITE, null);
				monitor.worked(1);
			}
		} catch (Exception e) {
			if (!callDoOnLauncherRunException) {
				callDoOnLauncherRunException = true;
				doOnLauncherRunException(e);
			}
			Logger.logException(e);
			return ERROR_STATUS;
		} finally {
			monitor.done();
		}

		return Status.OK_STATUS;
	}

