	@Override
	public void launch(String argument, String... params) throws ExecuteException, IOException, InterruptedException {
		CommandLine cmd = environment.getCommand();
		cmd.addArgument(argument);
		cmd.addArguments(params);

		Map<String, String> env = new HashMap<>(System.getenv());
		PHPLaunchUtilities.appendExecutableToPathEnv(env, new File(cmd.getExecutable()).getParentFile());
		PHPLaunchUtilities.appendLibrarySearchPathEnv(env, new File(cmd.getExecutable()).getParentFile());

		Map<String, Object> properties = new HashMap<>();
		List<String> envs = new ArrayList<>(env.size());
		for (String key : env.keySet()) {
			envs.add(key + '=' + env.get(key));
		}
		properties.put(ITerminalsConnectorConstants.PROP_PROCESS_ENVIRONMENT, envs.toArray(new String[envs.size()]));
		properties.put(ITerminalsConnectorConstants.PROP_PROCESS_MERGE_ENVIRONMENT, true);
		ITerminalServiceOutputStreamMonitorListener[] outListeners = new ITerminalServiceOutputStreamMonitorListener[] {
				new ITerminalServiceOutputStreamMonitorListener() {

					@Override
					public void onContentReadFromStream(byte[] byteBuffer, int bytesRead) {
						for (ExecutionResponseListener handler : getListeners()) {
							handler.executionMessage(new String(byteBuffer, 0, bytesRead));
						}
					}

				} };
		properties.put(ITerminalsConnectorConstants.PROP_STDOUT_LISTENERS, outListeners);

		// workaround for colored output on Windows
		if (Platform.OS_WIN32.equals(Platform.getOS())) {
			StringBuilder builder = new StringBuilder();
			builder.append("@echo off").append(WINDOWS_END_OF_LINE); //$NON-NLS-1$

			// 65001 - UTF-8
			builder.append("chcp 65001").append(WINDOWS_END_OF_LINE); //$NON-NLS-1$

			builder.append("cls").append(WINDOWS_END_OF_LINE); //$NON-NLS-1$
			builder.append(escapePath(cmd.getExecutable())).append(' ');
			for (String arg : cmd.getArguments()) {
				builder.append(arg).append(' ');
			}

			File file = File.createTempFile("composer_windows_", ".bat"); //$NON-NLS-1$//$NON-NLS-2$
			file.deleteOnExit();
			try (BufferedWriter writer = new BufferedWriter(new FileWriter(file));) {
				writer.write(builder.toString());
			} catch (FileNotFoundException ex) {
				ComposerPlugin.logException(ex);
			}

			properties.put(ITerminalsConnectorConstants.PROP_PROCESS_PATH, "cmd"); //$NON-NLS-1$
			String args = "/C " + file.getAbsolutePath(); //$NON-NLS-1$
			properties.put(ITerminalsConnectorConstants.PROP_PROCESS_ARGS, args);
		} else {
			properties.put(ITerminalsConnectorConstants.PROP_PROCESS_PATH, escapePath(cmd.getExecutable()));

			StringBuilder builder = new StringBuilder();
			for (String arg : cmd.getArguments()) {
				builder.append(arg + ' ');
			}
			properties.put(ITerminalsConnectorConstants.PROP_PROCESS_ARGS, builder.toString());
		}

		Logger.debug("Setting executor working directory to " + project.getLocation().toOSString()); //$NON-NLS-1$
		properties.put(ITerminalsConnectorConstants.PROP_PROCESS_WORKING_DIR, project.getLocation().toOSString());

		String title = MessageFormat.format(Messages.ComposerConsoleManager_ConsoleLabel,
				Messages.ComposerConsoleManager_ConsoleName, project.getName());
		IConsoleManager consoleManager = ConsolePlugin.getDefault().getConsoleManager();

		final CountDownLatch latch = new CountDownLatch(1);
		terminalConsole = new TerminalConsole(title, 0, properties, new Done() {

			@Override
			public void done(IStatus status) {
				latch.countDown();
			}
		});

		for (ExecutionResponseListener handler : getListeners()) {
			handler.executionStarted();
		}

		consoleManager.addConsoles(new IConsole[] { terminalConsole });
		consoleManager.showConsoleView(terminalConsole);

		latch.await();

		for (ExecutionResponseListener handler : getListeners()) {
			handler.executionFinished("", 0); //$NON-NLS-1$
		}
	}

