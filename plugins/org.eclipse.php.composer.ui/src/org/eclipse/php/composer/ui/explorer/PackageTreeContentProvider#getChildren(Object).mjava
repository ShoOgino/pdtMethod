	@Override
	public Object[] getChildren(Object parentElement) {
		if (ComposerPlugin.getDefault().isBuildpathContainerEnabled() == false) {
			return null;
		}

		if (parentElement instanceof PackagePath) {

			PackagePath pPath = (PackagePath) parentElement;
			IScriptProject scriptProject = pPath.getProject();
			IBuildpathEntry entry = pPath.getEntry();

			try {

				IProjectFragment[] allProjectFragments;
				allProjectFragments = scriptProject.getAllProjectFragments();
				for (IProjectFragment fragment : allProjectFragments) {
					if (fragment instanceof ExternalProjectFragment) {
						ExternalProjectFragment external = (ExternalProjectFragment) fragment;
						if (external.getBuildpathEntry().equals(entry)) {
							return super.getChildren(external);
						}
					}
				}
			} catch (ModelException e) {
				Logger.logException(e);
			}
		} else if (parentElement instanceof ComposerBuildpathContainer) {
			ComposerBuildpathContainer container = (ComposerBuildpathContainer) parentElement;

			IAdaptable[] children = container.getChildren();

			if (children == null || children.length == 0) {
				return NO_CHILDREN;
			}

			return children;
		} else if (parentElement instanceof IScriptProject) {
			try {
				IProject project = ((IScriptProject) parentElement).getProject();
				if (FacetManager.hasComposerFacet(project)) {
					return new Object[] { new ComposerBuildpathContainer((IScriptProject) parentElement) };
				}
			} catch (Exception e) {
				Logger.logException(e);
			}
		}
		return null;
	}

