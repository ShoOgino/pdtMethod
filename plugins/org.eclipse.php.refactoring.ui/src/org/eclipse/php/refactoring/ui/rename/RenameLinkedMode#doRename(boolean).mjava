	void doRename(boolean showPreview) {
		cancel();

		Image image = null;
		Label label = null;

		fShowPreview |= showPreview;
		try {
			ISourceViewer viewer = fEditor.getTextViewer();
			if (viewer instanceof SourceViewer) {
				SourceViewer sourceViewer = (SourceViewer) viewer;
				Control viewerControl = sourceViewer.getControl();
				if (viewerControl instanceof Composite) {
					Composite composite = (Composite) viewerControl;
					Display display = composite.getDisplay();

					// Flush pending redraw requests:
					while (!display.isDisposed() && display.readAndDispatch()) {
					}

					// Copy editor area:
					GC gc = new GC(composite);
					Point size;
					try {
						size = composite.getSize();
						image = new Image(gc.getDevice(), size.x, size.y);
						gc.copyArea(image, 0, 0);
					} finally {
						gc.dispose();
						gc = null;
					}

					// Persist editor area while executing refactoring:
					label = new Label(composite, SWT.NONE);
					label.setImage(image);
					label.setBounds(0, 0, size.x, size.y);
					label.moveAbove(null);
				}
			}

			String newName = fNamePosition.getContent();
			if (fOriginalName.equals(newName))
				return;
			RenameSupport renameSupport = undoAndCreateRenameSupport(newName);

			if (renameSupport == null)
				return;

			Shell shell = fEditor.getSite().getShell();
			boolean executed;
			if (fShowPreview) { // could have been updated by
				// undoAndCreateRenameSupport(..)
				executed = renameSupport.openDialog(shell);
			} else {
				renameSupport.perform(shell,
						fEditor.getSite().getWorkbenchWindow());
				executed = true;
			}
			if (executed) {
				restoreFullSelection();
			}

			IFile file = ((IFileEditorInput) fEditor.getEditorInput())
					.getFile();

			ISourceModule sourceModule = DLTKCore.createSourceModuleFrom(file);

			Program program = ASTUtils.createProgramFromSource(sourceModule);

			ScriptModelUtil.reconcile(sourceModule);
			fEditor.reconciled(program, true, new NullProgressMonitor());

		} catch (Exception e) {
			// TODO: handle the errors.

		} finally {
			if (label != null)
				label.dispose();
			if (image != null)
				image.dispose();
		}
	}

