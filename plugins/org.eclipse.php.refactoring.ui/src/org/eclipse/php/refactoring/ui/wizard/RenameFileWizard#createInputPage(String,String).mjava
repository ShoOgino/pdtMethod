	@Override
	protected RenameInputWizardPage createInputPage(String message, String initialSetting) {
		return new RenameInputWizardPage(message, null, true, initialSetting) {

			private static final String UPDATE_REFERENCES = "updateReferences"; //$NON-NLS-1$
			private Button fUpdateReferences;
			private Button fUPdateClassName;

			@Override
			protected RefactoringStatus validateTextField(String text) {
				return validateNewName(text);
			}

			@Override
			protected void addAdditionalOptions(Composite composite, RowLayouter layouter) {
				final IReferenceUpdating refactoring = getRefactoring().getAdapter(IReferenceUpdating.class);
				String title = PHPRefactoringUIMessages.getString("RenameFileWizard.1"); //$NON-NLS-1$
				boolean defaultValue = getBooleanSetting(UPDATE_REFERENCES, refactoring.getUpdateReferences());
				fUpdateReferences = createCheckbox(composite, title, defaultValue, layouter);
				// the default is update references
				fUpdateReferences.setSelection(true);
				refactoring.setUpdateRefernces(true);
				getRefactoringWizard().setForcePreviewReview(true);
				fUpdateReferences.addSelectionListener(new SelectionAdapter() {
					@Override
					public void widgetSelected(SelectionEvent e) {
						refactoring.setUpdateRefernces(fUpdateReferences.getSelection());
						updateForcePreview();
					}
				});

				String updateClass = refactoring.getAttribute(RenameFileProcessor.NEEDUPDATECLASSNAME);

				if (updateClass != null && Boolean.valueOf(updateClass)) {
					defaultValue = true;
					fUPdateClassName = createCheckbox(composite,
							PHPRefactoringUIMessages.getString("RenameFileWizard.3"), defaultValue, layouter); //$NON-NLS-1$
					// the default is update references
					fUPdateClassName.setSelection(true);
					refactoring.setAttribute(RenameFileProcessor.UPDATECLASSNAME,
							Boolean.toString((fUPdateClassName.getSelection())));
					getRefactoringWizard().setForcePreviewReview(true);
					fUPdateClassName.addSelectionListener(new SelectionAdapter() {
						@Override
						public void widgetSelected(SelectionEvent e) {
							refactoring.setAttribute(RenameFileProcessor.UPDATECLASSNAME,
									Boolean.toString(fUPdateClassName.getSelection()));
							updateForcePreview();
						}
					});
				}
			}

			@Override
			protected void updateForcePreview() {
				super.updateForcePreview();
				boolean forcePreview = false;
				Refactoring refactoring = getRefactoring();
				IReferenceUpdating refUpdate = refactoring.getAdapter(IReferenceUpdating.class);
				if (refUpdate != null) {
					forcePreview = refUpdate.getUpdateReferences();
				}
				getRefactoringWizard().setForcePreviewReview(forcePreview);
			}

			@Override
			public void dispose() {
				if (saveSettings()) {
					saveBooleanSetting(UPDATE_REFERENCES, fUpdateReferences);
				}
				super.dispose();
			}
		};
	}

