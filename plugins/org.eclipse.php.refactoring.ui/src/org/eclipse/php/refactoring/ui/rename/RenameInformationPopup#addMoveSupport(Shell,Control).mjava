	private void addMoveSupport(final Shell popupShell, final Control movedControl) {
		movedControl.addMouseListener(new MouseAdapter() {

			@Override
			public void mouseDown(final MouseEvent downEvent) {
				if (downEvent.button != 1) {
					return;
				}

				final Point POPUP_SOURCE = popupShell.getLocation();
				final StyledText textWidget = fEditor.getTextViewer().getTextWidget();
				Point pSize = getExtent();
				int originalSnapPosition = fSnapPosition;

				/*
				 * Feature in Tracker: it is not possible to directly control
				 * the feedback, see
				 * https://bugs.eclipse.org/bugs/show_bug.cgi?id=121300 and
				 * https://bugs.eclipse.org/bugs/show_bug.cgi?id=121298#c1 .
				 * 
				 * Workaround is to have an offscreen rectangle for tracking
				 * mouse movement and a manually updated rectangle for the
				 * actual drop target.
				 */
				final Tracker tracker = new Tracker(textWidget, SWT.NONE);

				final Point[] LOCATIONS = { textWidget.toControl(computePopupLocation(SNAP_POSITION_UNDER_RIGHT_FIELD)),
						textWidget.toControl(computePopupLocation(SNAP_POSITION_OVER_RIGHT_FIELD)),
						textWidget.toControl(computePopupLocation(SNAP_POSITION_UNDER_LEFT_FIELD)),
						textWidget.toControl(computePopupLocation(SNAP_POSITION_OVER_LEFT_FIELD)),
						textWidget.toControl(computePopupLocation(SNAP_POSITION_LOWER_RIGHT)) };

				final Rectangle[] DROP_TARGETS = { Geometry.createRectangle(LOCATIONS[0], pSize),
						Geometry.createRectangle(LOCATIONS[1], pSize),
						new Rectangle(LOCATIONS[2].x, LOCATIONS[2].y + HAH, pSize.x, pSize.y),
						Geometry.createRectangle(LOCATIONS[3], pSize), Geometry.createRectangle(LOCATIONS[4], pSize) };
				final Rectangle MOUSE_MOVE_SOURCE = new Rectangle(1000000, 0, 0, 0);
				tracker.setRectangles(new Rectangle[] { MOUSE_MOVE_SOURCE, DROP_TARGETS[fSnapPosition] });
				tracker.setStippled(true);

				ControlListener moveListener = new ControlAdapter() {
					/*
					 * @see
					 * org.eclipse.swt.events.ControlAdapter#controlMoved(org
					 * .eclipse.swt.events.ControlEvent)
					 */
					@Override
					public void controlMoved(ControlEvent moveEvent) {
						Rectangle[] currentRects = tracker.getRectangles();
						final Rectangle mouseMoveCurrent = currentRects[0];
						Point popupLoc = new Point(POPUP_SOURCE.x + mouseMoveCurrent.x - MOUSE_MOVE_SOURCE.x,
								POPUP_SOURCE.y + mouseMoveCurrent.y - MOUSE_MOVE_SOURCE.y);

						popupShell.setLocation(popupLoc);

						Point ePopupLoc = textWidget.toControl(popupLoc);
						int minDist = Integer.MAX_VALUE;
						for (int snapPos = 0; snapPos < DROP_TARGETS.length; snapPos++) {
							int dist = Geometry.distanceSquared(ePopupLoc, LOCATIONS[snapPos]);
							if (dist < minDist) {
								minDist = dist;
								fSnapPosition = snapPos;
								currentRects[1] = DROP_TARGETS[snapPos];
							}
						}
						tracker.setRectangles(currentRects);
					}
				};
				tracker.addControlListener(moveListener);
				boolean committed = tracker.open();
				tracker.close();
				tracker.dispose();
				if (committed) {
					getDialogSettings().put(SNAP_POSITION_KEY, fSnapPosition);
				} else {
					fSnapPosition = originalSnapPosition;
				}
				updatePopupLocation(true);
				activateEditor();
			}
		});
	}

