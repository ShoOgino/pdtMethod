	@Override
	protected void doCreatePreferences(Composite composite, int numColumns) {
		createLabel(numColumns, composite, FormatterMessages.OffOnTagsTabPage_description);

		// Add some vertical space
		Label separator = new Label(composite, SWT.NONE);
		separator.setVisible(false);
		GridData data = new GridData(GridData.FILL, GridData.FILL, false, false, numColumns, 1);
		data.heightHint = fPixelConverter.convertHeightInCharsToPixels(1) / 3;
		separator.setLayoutData(data);

		enablePref = createCheckboxPref(composite, numColumns, FormatterMessages.OffOnTagsTabPage_enableOffOnTags);
		enablePref.setIsChecked(codeFormatterPreferences.use_tags);

		IInputValidator inputValidator = new IInputValidator() {
			/*
			 * @see org.eclipse.jdt.internal.ui.preferences.formatter.
			 * ModifyDialogTabPage
			 * .StringPreference.Validator#isValid(java.lang.String)
			 * 
			 * @since 3.6
			 */
			@Override
			public String isValid(String input) {
				if (input.length() == 0)
					return null;

				if (Character.isWhitespace(input.charAt(0)))
					return FormatterMessages.OffOnTagsTabPage_error_startsWithWhitespace;

				if (Character.isWhitespace(input.charAt(input.length() - 1)))
					return FormatterMessages.OffOnTagsTabPage_error_endsWithWhitespace;

				return null;
			}
		};

		Composite tagComposite = new Composite(composite, SWT.NONE);
		final int indent = fPixelConverter.convertWidthInCharsToPixels(4);
		GridLayout layout = new GridLayout(numColumns, false);
		layout.marginWidth = 0;
		layout.marginHeight = 0;
		layout.marginLeft = indent;
		tagComposite.setLayout(layout);

		disableTagPref = createStringPref(tagComposite, numColumns, FormatterMessages.OffOnTagsTabPage_disableTag,
				CodeFormatterConstants.FORMATTER_DISABLING_TAG, inputValidator);
		if (codeFormatterPreferences.disabling_tag != null) {
			disableTagPref.setValue(new String(codeFormatterPreferences.disabling_tag));
		}

		enableTagPref = createStringPref(tagComposite, numColumns, FormatterMessages.OffOnTagsTabPage_enableTag,
				CodeFormatterConstants.FORMATTER_ENABLING_TAG, inputValidator);
		if (codeFormatterPreferences.enabling_tag != null) {
			enableTagPref.setValue(new String(codeFormatterPreferences.enabling_tag));
		}

		enablePref.getControl().addListener(SWT.Selection, new Listener() {
			@Override
			public void handleEvent(Event event) {
				boolean enabled = enablePref.isChecked();
				enableTagPref.setEnabled(enabled);
				disableTagPref.setEnabled(enabled);
			}
		});

		boolean enabled = enablePref.isChecked();
		enableTagPref.setEnabled(enabled);
		disableTagPref.setEnabled(enabled);

		isInitialized = true;
	}

