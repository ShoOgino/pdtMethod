	protected void doCreatePreferences(Composite composite, int numColumns) {
		// general setting
		final Group generalGroup = createGroup(numColumns, composite,
				FormatterMessages.IndentationTabPage_general_group_title);
		final String[] tabPolicyLabels = new String[] {
				FormatterMessages.IndentationTabPage_general_group_option_tab_policy_SPACE,
				FormatterMessages.IndentationTabPage_general_group_option_tab_policy_TAB };
		tabPolicy = createComboPref(generalGroup, numColumns,
				FormatterMessages.IndentationTabPage_general_group_option_tab_policy, tabPolicyLabels);

		// final CheckboxPreference onlyForLeading =
		// createCheckboxPref(generalGroup, numColumns,
		// CodeFormatterConstants.FORMATTER_USE_TABS_ONLY_FOR_LEADING_INDENTATIONS);
		indentSize = createNumberPref(generalGroup, numColumns,
				FormatterMessages.IndentationTabPage_general_group_option_indent_size, 0, 32);
		indentSize.setValue(codeFormatterPreferences.indentationSize);
		// final NumberPreference tabSize = createNumberPref(generalGroup,
		// numColumns, CodeFormatterConstants.FORMATTER_TAB_SIZE, 0, 32);
		tabSize = createNumberPref(generalGroup, numColumns,
				FormatterMessages.IndentationTabPage_general_group_option_tab_size, 0, 32);
		tabSize.setValue(codeFormatterPreferences.tabSize);

		fDefaultIndentArrayInit = createNumberPref(generalGroup, numColumns,
				FormatterMessages.LineWrappingTabPage_width_indent_option_default_indent_array, 0, 9999);
		fDefaultIndentArrayInit.setValue(codeFormatterPreferences.line_wrap_array_init_indentation);

		char indentChar = codeFormatterPreferences.indentationChar;
		if (indentChar == CodeFormatterPreferences.SPACE_CHAR) {
			indentSize.getControl().setEnabled(true);
			tabPolicy.setSelectedItem(tabPolicyLabels[0]);
		} else {
			indentSize.getControl().setEnabled(false);
			tabPolicy.setSelectedItem(tabPolicyLabels[1]);
		}

		// enabled the indentation size checkbox according to the indentation
		// type
		tabPolicy.addObserver(new Observer() {
			public void update(Observable o, Object arg) {
				int index = tabPolicy.getSelectionIndex();
				char indentChar = index == 0 ? CodeFormatterPreferences.SPACE_CHAR : CodeFormatterPreferences.TAB_CHAR;
				if (indentChar == CodeFormatterPreferences.SPACE_CHAR && !indentSize.getControl().isEnabled()) {
					indentSize.getControl().setEnabled(true);
				} else if (indentChar == CodeFormatterPreferences.TAB_CHAR && indentSize.getControl().isEnabled()) {
					indentSize.getControl().setEnabled(false);
					indentSize.setValue(1);
				}

				// update the preview and preferences value
				updatePreferences();
				doUpdatePreview();
				notifyValuesModified();
			}
		});

		// alignment group
		// final Group typeMemberGroup = createGroup(numColumns, composite,
		// FormatterMessages.IndentationTabPage_field_alignment_group_title);
		// createCheckboxPref(typeMemberGroup, numColumns,
		// FormatterMessages.IndentationTabPage_field_alignment_group_align_fields_in_columns);

		// indent group
		final Group classGroup = createGroup(numColumns, composite,
				FormatterMessages.IndentationTabPage_indent_group_title);
		classIndent = createCheckboxPref(classGroup, numColumns,
				FormatterMessages.IndentationTabPage_class_group_option_indent_declarations_within_class_body);
		classIndent.setIsChecked(codeFormatterPreferences.indent_statements_within_type_declaration);
		methodIndent = createCheckboxPref(classGroup, numColumns,
				FormatterMessages.IndentationTabPage_block_group_option_indent_statements_compare_to_body);
		methodIndent.setIsChecked(codeFormatterPreferences.indent_statements_within_function);
		blockIndent = createCheckboxPref(classGroup, numColumns,
				FormatterMessages.IndentationTabPage_block_group_option_indent_statements_compare_to_block);
		blockIndent.setIsChecked(codeFormatterPreferences.indent_statements_within_block);
		switchIndent = createCheckboxPref(classGroup, numColumns,
				FormatterMessages.IndentationTabPage_switch_group_option_indent_statements_within_switch_body);
		switchIndent.setIsChecked(codeFormatterPreferences.indent_statements_within_switch);
		caseIndent = createCheckboxPref(classGroup, numColumns,
				FormatterMessages.IndentationTabPage_switch_group_option_indent_statements_within_case_body);
		caseIndent.setIsChecked(codeFormatterPreferences.indent_statements_within_case);
		breakIndent = createCheckboxPref(classGroup, numColumns,
				FormatterMessages.IndentationTabPage_switch_group_option_indent_break_statements);
		breakIndent.setIsChecked(codeFormatterPreferences.indent_break_statements_within_case);
		emptylineIndent = createCheckboxPref(classGroup, numColumns,
				FormatterMessages.IndentationTabPage_indent_empty_lines);
		emptylineIndent.setIsChecked(codeFormatterPreferences.indent_empty_lines);

		isInitialized = true;
	}

