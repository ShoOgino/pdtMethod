	public static ArrayList createTreeByPhpElement(Map workingValues) {

		final InnerNode declarations = new InnerNode(null, workingValues,
				FormatterMessages.WhiteSpaceTabPage_declarations);
		createClassTree(workingValues, declarations);
		createFieldTree(workingValues, declarations);
		createMethodDeclTree(workingValues, declarations);

		final InnerNode statements = new InnerNode(null, workingValues,
				FormatterMessages.WhiteSpaceTabPage_statements);
		createOption(statements, workingValues,
				FormatterMessages.WhiteSpaceOptions_before_semicolon,
				CodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_SEMICOLON,
				SEMICOLON_PREVIEW);
		createBlockTree(workingValues, statements);
		createIfStatementTree(workingValues, statements);
		createForStatementTree(workingValues, statements);
		createForeachStatementTree(workingValues, statements);
		createSwitchStatementTree(workingValues, statements);
		createDoWhileTree(workingValues, statements);
		createTryStatementTree(workingValues, statements);
		createStaticTree(workingValues, statements);
		createGlobalTree(workingValues, statements);
		createEchoTree(workingValues, statements);

		final InnerNode expressions = new InnerNode(null, workingValues,
				FormatterMessages.WhiteSpaceTabPage_expressions);
		createFieldAccessTree(workingValues, expressions);
		createFunctionCallTree(workingValues, expressions);
		createAssignmentTree(workingValues, expressions);
		createOperatorTree(workingValues, expressions);
		createTypecastTree(workingValues, expressions);
		createConditionalTree(workingValues, expressions);
		createParenthesisExpressionTree(workingValues, expressions);

		final InnerNode arrays = new InnerNode(null, workingValues,
				FormatterMessages.WhiteSpaceTabPage_arrays);
		createArrayCreationTree(workingValues, arrays);
		createArrayElementAccessTree(workingValues, arrays);

		final ArrayList roots = new ArrayList();
		roots.add(declarations);
		roots.add(statements);
		roots.add(expressions);
		roots.add(arrays);
		return roots;
	}

