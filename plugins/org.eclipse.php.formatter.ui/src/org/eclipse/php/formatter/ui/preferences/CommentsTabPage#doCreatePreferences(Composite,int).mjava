	protected void doCreatePreferences(Composite composite, int numColumns) {
		final int indent = fPixelConverter.convertWidthInCharsToPixels(4);

		// global group
		final Group globalGroup = createGroup(numColumns, composite, FormatterMessages.CommentsTabPage_group1_title);
		javadoc = createCheckboxPref(globalGroup, numColumns,
				FormatterMessages.commentsTabPage_enable_javadoc_comment_formatting);
		javadoc.setIsChecked(codeFormatterPreferences.comment_format_javadoc_comment);

		blockComment = createCheckboxPref(globalGroup, numColumns,
				FormatterMessages.CommentsTabPage_enable_block_comment_formatting);
		blockComment.setIsChecked(codeFormatterPreferences.comment_format_block_comment);

		singleLineComments = createCheckboxPref(globalGroup, numColumns,
				FormatterMessages.CommentsTabPage_enable_line_comment_formatting);
		singleLineComments.setIsChecked(codeFormatterPreferences.comment_format_line_comment);

		singleLineCommentsOnFirstColumn = createCheckboxPref(globalGroup, numColumns,
				FormatterMessages.CommentsTabPage_format_line_comments_on_first_column);
		singleLineCommentsOnFirstColumn
				.setIsChecked(codeFormatterPreferences.comment_format_line_comment_starting_on_first_column);

		((GridData) singleLineCommentsOnFirstColumn.getControl().getLayoutData()).horizontalIndent = indent;
		header = createCheckboxPref(globalGroup, numColumns, FormatterMessages.CommentsTabPage_format_header);
		header.setIsChecked(codeFormatterPreferences.comment_format_header);

		GridData spacerData = new GridData(0, 0);
		spacerData.horizontalSpan = numColumns;
		new Composite(globalGroup, SWT.NONE).setLayoutData(spacerData);
		// chkbox1 = createCheckboxPref(
		// globalGroup,
		// numColumns,
		// FormatterMessages.CommentsTabPage_preserve_white_space_before_line_comment);
		// chkbox1.setIsChecked(codeFormatterPreferences.comment_format_javadoc_comment);

		chkbox2 = createCheckboxPref(globalGroup, numColumns,
				FormatterMessages.CommentsTabPage_never_indent_line_comments_on_first_column);
		chkbox2.setIsChecked(codeFormatterPreferences.never_indent_line_comments_on_first_column);

		chkbox3 = createCheckboxPref(globalGroup, numColumns,
				FormatterMessages.CommentsTabPage_never_indent_block_comments_on_first_column);
		chkbox3.setIsChecked(codeFormatterPreferences.never_indent_block_comments_on_first_column);

		chkbox4 = createCheckboxPref(globalGroup, numColumns, FormatterMessages.CommentsTabPage_do_not_join_lines);
		chkbox4.setIsChecked(codeFormatterPreferences.join_lines_in_comments);

		// javadoc comment formatting settings
		final Group settingsGroup = createGroup(numColumns, composite, FormatterMessages.CommentsTabPage_group2_title);
		// html = createCheckboxPref(settingsGroup, numColumns,
		// FormatterMessages.CommentsTabPage_format_html);
		// html.setIsChecked(codeFormatterPreferences.comment_format_javadoc_comment);
		//
		// code = createCheckboxPref(settingsGroup, numColumns,
		// FormatterMessages.CommentsTabPage_format_code_snippets);
		// code.setIsChecked(codeFormatterPreferences.comment_format_javadoc_comment);

		blankJavadoc = createPrefInsert(settingsGroup, numColumns,
				FormatterMessages.CommentsTabPage_blank_line_before_javadoc_tags,
				CodeFormatterConstants.FORMATTER_COMMENT_INSERT_EMPTY_LINE_BEFORE_ROOT_TAGS);
		blankJavadoc.setIsChecked(codeFormatterPreferences.comment_insert_empty_line_before_root_tags);

		indentJavadoc = createCheckboxPref(settingsGroup, numColumns,
				FormatterMessages.CommentsTabPage_indent_javadoc_tags);
		indentJavadoc.setIsChecked(codeFormatterPreferences.comment_indent_root_tags);

		indentDesc = createCheckboxPref(settingsGroup, numColumns,
				FormatterMessages.CommentsTabPage_indent_description_after_param);
		indentDesc.setIsChecked(codeFormatterPreferences.comment_indent_parameter_description);

		((GridData) indentDesc.getControl().getLayoutData()).horizontalIndent = indent;
		nlParam = createPrefInsert(settingsGroup, numColumns,
				FormatterMessages.CommentsTabPage_new_line_after_param_tags,
				CodeFormatterConstants.FORMATTER_COMMENT_INSERT_NEW_LINE_FOR_PARAMETER);
		nlParam.setIsChecked(codeFormatterPreferences.comment_insert_new_line_for_parameter);

		nlBoundariesJavadoc = createCheckboxPref(settingsGroup, numColumns,
				FormatterMessages.CommentsTabPage_new_lines_at_javadoc_boundaries);
		nlBoundariesJavadoc.setIsChecked(codeFormatterPreferences.comment_new_lines_at_javadoc_boundaries);

		blankLinesJavadoc = createCheckboxPref(settingsGroup, numColumns,
				FormatterMessages.CommentsTabPage_clear_blank_lines);
		blankLinesJavadoc.setIsChecked(codeFormatterPreferences.comment_clear_blank_lines_in_javadoc_comment);

		// block comment settings
		final Group blockSettingsGroup = createGroup(numColumns, composite,
				FormatterMessages.CommentsTabPage_group4_title);
		nlBoundariesBlock = createCheckboxPref(blockSettingsGroup, numColumns,
				FormatterMessages.CommentsTabPage_new_lines_at_comment_boundaries);
		nlBoundariesBlock.setIsChecked(codeFormatterPreferences.comment_new_lines_at_block_boundaries);

		blankLinesBlock = createCheckboxPref(blockSettingsGroup, numColumns,
				FormatterMessages.CommentsTabPage_remove_blank_block_comment_lines);
		blankLinesBlock.setIsChecked(codeFormatterPreferences.comment_clear_blank_lines_in_block_comment);

		// line width settings
		final Group widthGroup = createGroup(numColumns, composite, FormatterMessages.CommentsTabPage_group3_title);
		lineWidth = createNumberPref(widthGroup, numColumns, FormatterMessages.CommentsTabPage_line_width, 0, 9999);
		lineWidth.setValue(codeFormatterPreferences.comment_line_length);

		ArrayList<CheckboxPreference> lineFirstColumnMasters = new ArrayList<CheckboxPreference>();
		lineFirstColumnMasters.add(singleLineComments);

		ArrayList<Object> lineFirstColumnSlaves = new ArrayList<Object>();
		lineFirstColumnSlaves.add(singleLineCommentsOnFirstColumn);

		new Controller(lineFirstColumnMasters, lineFirstColumnSlaves) {
			@Override
			protected boolean areSlavesEnabled() {
				return singleLineComments.isChecked();
			}
		}.update(null, null);

		ArrayList<CheckboxPreference> javaDocMaster = new ArrayList<CheckboxPreference>();
		javaDocMaster.add(javadoc);
		javaDocMaster.add(header);

		ArrayList<Object> javaDocSlaves = new ArrayList<Object>();
		javaDocSlaves.add(settingsGroup);
		// javaDocSlaves.add(html);
		// javaDocSlaves.add(code);
		javaDocSlaves.add(blankJavadoc);
		javaDocSlaves.add(indentJavadoc);
		javaDocSlaves.add(nlParam);
		javaDocSlaves.add(nlBoundariesJavadoc);
		javaDocSlaves.add(blankLinesJavadoc);

		new OrController(javaDocMaster, javaDocSlaves);

		ArrayList<CheckboxPreference> indentMasters = new ArrayList<CheckboxPreference>();
		indentMasters.add(javadoc);
		indentMasters.add(header);
		indentMasters.add(indentJavadoc);

		ArrayList<Object> indentSlaves = new ArrayList<Object>();
		indentSlaves.add(indentDesc);

		new Controller(indentMasters, indentSlaves) {
			@Override
			protected boolean areSlavesEnabled() {
				return (javadoc.isChecked() || header.isChecked()) && indentJavadoc.isChecked();
			}
		}.update(null, null);

		ArrayList<CheckboxPreference> blockMasters = new ArrayList<CheckboxPreference>();
		blockMasters.add(blockComment);
		blockMasters.add(header);

		ArrayList<Object> blockSlaves = new ArrayList<Object>();
		blockSlaves.add(blockSettingsGroup);
		blockSlaves.add(nlBoundariesBlock);
		blockSlaves.add(blankLinesBlock);

		new OrController(blockMasters, blockSlaves);

		ArrayList<CheckboxPreference> lineWidthMasters = new ArrayList<CheckboxPreference>();
		lineWidthMasters.add(javadoc);
		lineWidthMasters.add(blockComment);
		lineWidthMasters.add(singleLineComments);
		lineWidthMasters.add(header);

		ArrayList<Object> lineWidthSlaves = new ArrayList<Object>();
		lineWidthSlaves.add(widthGroup);
		lineWidthSlaves.add(lineWidth);

		new OrController(lineWidthMasters, lineWidthSlaves);

		isInitialized = true;
	}

