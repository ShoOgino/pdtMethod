	/**
	 * Create the tree, in this order: syntax element - position - abstract element
	 * 
	 * @param workingValues
	 * @return returns roots (type <code>Node</code>)
	 */
	public static List<Node> createTreeBySyntaxElem(Map<String, Object> workingValues) {
		final ArrayList<Node> roots = new ArrayList<>();

		InnerNode element;

		element = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_opening_paren);
		createBeforeOpenParenTree(workingValues,
				createChild(element, workingValues, FormatterMessages.WhiteSpaceOptions_before));
		createAfterOpenParenTree(workingValues,
				createChild(element, workingValues, FormatterMessages.WhiteSpaceOptions_after));
		roots.add(element);

		element = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_closing_paren);
		createBeforeClosingParenTree(workingValues,
				createChild(element, workingValues, FormatterMessages.WhiteSpaceOptions_before));
		createAfterCloseParenTree(workingValues,
				createChild(element, workingValues, FormatterMessages.WhiteSpaceOptions_after));
		roots.add(element);

		element = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_opening_brace);
		createBeforeOpenBraceTree(workingValues,
				createChild(element, workingValues, FormatterMessages.WhiteSpaceOptions_before));
		roots.add(element);

		element = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_closing_brace);
		createAfterCloseBraceTree(workingValues,
				createChild(element, workingValues, FormatterMessages.WhiteSpaceOptions_after));
		roots.add(element);

		element = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_opening_bracket);
		createBeforeOpenBracketTree(workingValues,
				createChild(element, workingValues, FormatterMessages.WhiteSpaceOptions_before));
		createAfterOpenBracketTree(workingValues,
				createChild(element, workingValues, FormatterMessages.WhiteSpaceOptions_after));
		roots.add(element);

		element = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_closing_bracket);
		createBeforeClosingBracketTree(workingValues,
				createChild(element, workingValues, FormatterMessages.WhiteSpaceOptions_before));
		roots.add(element);

		element = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_operator);
		createBeforeOperatorTree(workingValues,
				createChild(element, workingValues, FormatterMessages.WhiteSpaceOptions_before));
		createAfterOperatorTree(workingValues,
				createChild(element, workingValues, FormatterMessages.WhiteSpaceOptions_after));
		roots.add(element);

		element = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_comma);
		createBeforeCommaTree(workingValues,
				createChild(element, workingValues, FormatterMessages.WhiteSpaceOptions_before));
		createAfterCommaTree(workingValues,
				createChild(element, workingValues, FormatterMessages.WhiteSpaceOptions_after));
		roots.add(element);

		element = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_colon);
		createBeforeColonTree(workingValues,
				createChild(element, workingValues, FormatterMessages.WhiteSpaceOptions_before));
		createAfterColonTree(workingValues,
				createChild(element, workingValues, FormatterMessages.WhiteSpaceOptions_after));
		roots.add(element);

		element = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_semicolon);
		createBeforeSemicolonTree(workingValues,
				createChild(element, workingValues, FormatterMessages.WhiteSpaceOptions_before));
		createAfterSemicolonTree(workingValues,
				createChild(element, workingValues, FormatterMessages.WhiteSpaceOptions_after));
		roots.add(element);

		element = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_question_mark);
		createBeforeQuestionTree(workingValues,
				createChild(element, workingValues, FormatterMessages.WhiteSpaceOptions_before));
		createAfterQuestionTree(workingValues,
				createChild(element, workingValues, FormatterMessages.WhiteSpaceOptions_after));
		roots.add(element);

		element = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_between_empty_parens);
		createBetweenEmptyParenTree(workingValues, element);
		roots.add(element);

		element = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_between_empty_brackets);
		createBetweenEmptyBracketsTree(workingValues, element);
		roots.add(element);

		element = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_before_arrow);
		createBeforeArrowTree(workingValues, element);
		roots.add(element);

		element = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_after_arrow);
		createAfterArrowTree(workingValues, element);
		roots.add(element);

		element = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_before_coloncolon);
		createBeforeColoncolonTree(workingValues, element);
		roots.add(element);

		element = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_after_coloncolon);
		createAfterColoncolonTree(workingValues, element);
		roots.add(element);

		return roots;
	}

