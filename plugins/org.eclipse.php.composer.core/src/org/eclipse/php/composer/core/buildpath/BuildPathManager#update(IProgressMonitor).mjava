	public void update(IProgressMonitor monitor) throws CoreException {
		// check for valid composer json, stop processing when invalid
		if (!composerProject.isValidComposerJson()) {
			Logger.log(Logger.INFO, "Stop BuildPathManager, composer.json invalid"); //$NON-NLS-1$
			return;
		}

		vendorPath = composerProject.getProject().getFullPath().append(composerProject.getVendorDir());
		composerPath = vendorPath.append("composer"); //$NON-NLS-1$

		IProject project = composerProject.getProject();
		IScriptProject scriptProject = composerProject.getScriptProject();
		BuildPathParser parser = new BuildPathParser(composerProject);
		List<BuildPathParser.BuildPathInfo> paths = parser.getPathsInfo();

		// project prefs
		IEclipsePreferences prefs = ComposerPlugin.getDefault().getProjectPreferences(project);
		IPath[] inclusions;
		List<IPath> exs = new ArrayList<IPath>();

		try {
			String encoded = prefs.get(ComposerPreferenceConstants.BUILDPATH_INCLUDES_EXCLUDES, ""); //$NON-NLS-1$
			inclusions = scriptProject.decodeBuildpathEntry(encoded).getInclusionPatterns();
			exs.addAll(Arrays.asList(scriptProject.decodeBuildpathEntry(encoded).getExclusionPatterns()));
		} catch (Exception e) {
			inclusions = new IPath[] {};
		}

		// add includes
		for (IPath inclusion : inclusions) {
			paths.add(new BuildPathParser.BuildPathInfo(inclusion.toString(), BuildPathParser.BuildPathInfo.SOURCE));
		}

		// clean up exclusion patterns: remove exact matches

		for (Iterator<IPath> eit = exs.iterator(); eit.hasNext();) {

			String exc = eit.next().removeTrailingSeparator().toString();
			for (Iterator<BuildPathParser.BuildPathInfo> it = paths.iterator(); it.hasNext();) {
				BuildPathParser.BuildPathInfo info = it.next();
				if (info.path.equals(exc)) {
					it.remove();
				}
			}
		}
		exclusions = exs.toArray(new IPath[] {});

		// clean build path
		List<IBuildpathEntry> buildPath = new ArrayList<IBuildpathEntry>(
				Arrays.asList(scriptProject.getRawBuildpath()));

		for (Iterator<IBuildpathEntry> it = buildPath.iterator(); it.hasNext();) {
			IBuildpathEntry entry = it.next();
			if (entry.getEntryKind() == IBuildpathEntry.BPE_SOURCE
					&& entry.getExtraAttribute(ComposerPluginConstants.BPE_ATTR_NAME) != null) {
				it.remove();
			}

		}
		Collections.sort(paths);
		// sort paths for nesting detection
		Collections.sort(buildPath, new Comparator<IBuildpathEntry>() {

			@Override
			public int compare(IBuildpathEntry o1, IBuildpathEntry o2) {
				return o1.getPath().toString().compareTo(o2.getPath().toString());
			}
		});

		// add new entries to buildpath
		for (BuildPathParser.BuildPathInfo path : paths) {
			IPath entry = new Path(path.path);
			IFolder folder = project.getFolder(entry);
			if (folder != null && folder.exists()) {
				addPath(folder.getFullPath(), buildPath, path.type);
			}
		}

		DLTKCore.create(project).setRawBuildpath(buildPath.toArray(new IBuildpathEntry[0]), monitor);

		IFolder folder = project.getFolder(new Path(composerProject.getVendorDir()));

		if (folder != null && folder.exists()) {
			if (!folder.isDerived()) {
				folder.setDerived(true, monitor);
			}

			// disable validation in the vendor folder
			ValidationFramework.getDefault().disableValidation(folder);
		}
	}

