	@Override
	public boolean visit(ArrowFunctionDeclaration arrowFunctionDeclaration) {
		int lastPosition = arrowFunctionDeclaration.getStart();
		StringBuilder buffer = new StringBuilder();
		if (arrowFunctionDeclaration.isStatic()) {
			buffer.append("static "); //$NON-NLS-1$
			lastPosition += 7; // "static ".length()
		}
		buffer.append("fn"); //$NON-NLS-1$
		lastPosition += 2; // "fn".length()

		// handle referenced function with '&'
		if (arrowFunctionDeclaration.isReference()) {
			buffer.append(" &"); //$NON-NLS-1$
			lastPosition += 2; // " &".length()
		}

		appendToBuffer(buffer.toString());
		handleChars(arrowFunctionDeclaration.getStart(), lastPosition);

		if (this.preferences.insert_space_before_opening_paren_in_function_declaration
				// https://bugs.eclipse.org/bugs/show_bug.cgi?id=492770
				|| !arrowFunctionDeclaration.isReference()) {
			insertSpace();
		}
		appendToBuffer(OPEN_PARN);
		List<FormalParameter> formalParameters = arrowFunctionDeclaration.formalParameters();
		ASTNode[] params = formalParameters.toArray(new FormalParameter[formalParameters.size()]);
		if (params.length > 0) {
			if (this.preferences.insert_space_after_opening_paren_in_function_declaration) {
				insertSpace();
			}
			int indentationGap = calculateIndentGap(
					this.preferences.line_wrap_parameters_in_method_declaration_indent_policy,
					this.preferences.line_wrap_wrapped_lines_indentation);
			lastPosition = handleCommaList(params, lastPosition,
					this.preferences.insert_space_before_comma_in_function_declaration,
					this.preferences.insert_space_after_comma_in_function_declaration,
					this.preferences.line_wrap_parameters_in_method_declaration_line_wrap_policy, indentationGap,
					this.preferences.line_wrap_parameters_in_method_declaration_force_split);

			if (this.preferences.insert_space_before_closing_paren_in_function_declaration) {
				insertSpace();
			}
		} else {
			if (this.preferences.insert_space_between_empty_paren_in_function_declaration) {
				insertSpace();
			}
		}
		appendToBuffer(CLOSE_PARN);

		if (arrowFunctionDeclaration.getReturnType() != null) {
			appendToBuffer(COLON);
			insertSpace();
			if (arrowFunctionDeclaration.getReturnType().isNullable()) {
				appendToBuffer(QUESTION_MARK);
			}
			handleChars(lastPosition, arrowFunctionDeclaration.getReturnType().getStart());
			arrowFunctionDeclaration.getReturnType().accept(this);

			lastPosition = arrowFunctionDeclaration.getReturnType().getEnd();
		}

		// handle function body
		if (arrowFunctionDeclaration.getBody() != null) {
			// XXX: create specific arrow function preferences
			if (this.preferences.insert_space_before_arrow_in_array) {
				insertSpace();
			}
			appendToBuffer(KEY_VALUE_OPERATOR);
			if (this.preferences.insert_space_after_arrow_in_array) {
				insertSpace();
			}
			handleChars(lastPosition, arrowFunctionDeclaration.getBody().getStart());

			arrowFunctionDeclaration.getBody().accept(this);
		} else {
			handleSemicolon(lastPosition, arrowFunctionDeclaration.getEnd());
		}

		return false;
	}

