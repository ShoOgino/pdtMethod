	private void formatPHPDocText(List<String> words, PHPDocTag phpDocTag,
			boolean insertTag, boolean hasDesc) {
		boolean insertSpace = true;
		String tag = ""; //$NON-NLS-1$
		int indentLength = 0;
		if (phpDocTag != null) {
			tag = "@" + PHPDocTag.getTagKind(phpDocTag.getTagKind()); //$NON-NLS-1$
			if (indentationLevelDesending) {
				for (int i = 0; i < preferences.indentationSize; i++) {
					indentLength += (preferences.indentationChar == CodeFormatterPreferences.SPACE_CHAR) ? 1
							: 4;
				}
			}
		}
		int tagLength = tag.length() + 1;
		newLineOfComment = true;
		if (phpDocTag != null) {
			if (insertTag) {
				insertSpaces(1);
				String reference = getTagReference(phpDocTag);
				appendToBuffer(tag);
				appendToBuffer(reference);
			}
			newLineOfComment = false;
			if (this.preferences.comment_insert_new_line_for_parameter
					&& phpDocTag.getTagKind() == PHPDocTag.PARAM) {
				if (insertTag && hasDesc) {
					insertNewLineForPHPDoc();
				}
				if (this.preferences.comment_indent_root_tags) {
					insertSpaces(tagLength);
				}

				insertSpaces(1);
				insertSpace = false;

				newLineOfComment = true;
				if (this.preferences.comment_indent_root_tags
						&& this.preferences.comment_indent_parameter_description) {
					for (int i = 0; i < preferences.indentationSize; i++) {
						appendToBuffer(preferences.indentationChar);
						lineWidth += (preferences.indentationChar == CodeFormatterPreferences.SPACE_CHAR) ? 0
								: 3;
					}

				}
			} else if (!insertTag && this.preferences.comment_indent_root_tags) {
				insertSpaces(tagLength);
			}
		}

		for (String word : words) {
			if (word.trim().length() == 0) {
				continue;
			}
			indertWordToComment(phpDocTag, tagLength, word, insertSpace);
			insertSpace = true;
		}
	}

