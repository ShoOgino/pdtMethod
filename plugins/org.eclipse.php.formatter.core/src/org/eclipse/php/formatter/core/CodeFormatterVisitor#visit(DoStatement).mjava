	@Override
	public boolean visit(DoStatement doStatement) {
		// do-while body
		addToLineWidth(2);
		Statement body = doStatement.getBody();
		handleAction(doStatement.getStart() + 2, body, true);
		if (preferences.control_statement_insert_newline_before_while_in_do) {
			insertNewLines(1);
			indent();
		} else {
			setSpaceAfterBlock(body);
		}

		int positionOfWhile = -1;
		int lastPosition = body.getEnd();
		try {
			positionOfWhile = getFirstTokenOffset(lastPosition, doStatement.getCondition().getStart(), stWhile, true);
		} catch (Exception e) {
			Logger.logException(e);
			return false;
		}
		if (positionOfWhile > lastPosition) {
			// 5 = "while".length()
			handleChars(lastPosition, positionOfWhile);
			addToLineWidth(5);
			handleChars(positionOfWhile + 5, positionOfWhile + 5);
			lastPosition = positionOfWhile + 5;
		} else {
			appendToBuffer("while"); //$NON-NLS-1$
		}

		// handle the chars between the 'while' and the condition start position
		if (this.preferences.insert_space_before_opening_paren_in_while) {
			insertSpace();
		}
		appendToBuffer(OPEN_PARN);
		if (this.preferences.insert_space_after_opening_paren_in_while) {
			insertSpace();
		}
		handleChars(lastPosition, doStatement.getCondition().getStart());

		// handle the while condition
		doStatement.getCondition().accept(this);

		// set the while closing paren spaces
		if (this.preferences.insert_space_before_closing_paren_in_while) {
			insertSpace();
		}
		appendToBuffer(CLOSE_PARN);

		handleSemicolon(doStatement.getCondition().getEnd(), doStatement.getEnd());
		return false;
	}

