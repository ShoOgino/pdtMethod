	@Override
	public boolean visit(InfixExpression infixExpression) {
		int oldIndentationLevel = indentationLevel;
		boolean oldWasBinaryExpressionWrapped = wasBinaryExpressionWrapped;

		if (binaryExpressionSavedBuffer == null) {
			binaryExpressionSavedMrnbLineWidth = mrnbLineWidth;
			binaryExpressionSavedLineWidth = lineWidth;
			binaryExpressionSavedIsPrevSpace = isPrevSpace;
			binaryExpressionSavedIsHeredocSemicolonPre73 = isHeredocSemicolonPre73;
			binaryExpressionSavedIsPHPEqualTag = isPHPEqualTag;
			binaryExpressionSavedBuffer = replaceBuffer.toString();
			binaryExpressionSavedNode = infixExpression;
			binaryExpressionSavedChangesIndex = changes.size() - 1;
		}

		if (binaryExpressionLineWrapPolicy == -1) {
			binaryExpressionLineWrapPolicy = this.preferences.line_wrap_binary_expression_line_wrap_policy;
			binaryExpressionIndentGap = calculateIndentGap(this.preferences.line_wrap_binary_expression_indent_policy,
					this.preferences.line_wrap_wrapped_lines_indentation);

			// NB: look for infixExpression and not infixExpression.getLeft()
			// to check full expression length
			indentInfixOperand(infixExpression, !wasBinaryExpressionWrapped);
		}

		handleChars(infixExpression.getStart(), infixExpression.getLeft().getStart());

		infixExpression.getLeft().accept(this);

		int operator = infixExpression.getOperator();
		boolean isStringOperator = isStringOperator(operator);

		if (isStringOperator || this.preferences.insert_space_before_binary_operation) {
			insertSpace();
		}

		appendToBuffer(InfixExpression.getOperator(operator));

		boolean isInsertNewLine = indentInfixOperand(infixExpression.getRight(), true);

		if (!isInsertNewLine && (isStringOperator || this.preferences.insert_space_after_binary_operation)) {
			insertSpace();
		}

		// handle the chars between the variable to the value
		handleChars(infixExpression.getLeft().getEnd(), infixExpression.getRight().getStart());

		infixExpression.getRight().accept(this);

		if (infixExpression == binaryExpressionSavedNode && binaryExpressionLineWrapPolicy == NO_LINE_WRAP) {
			revert(binaryExpressionSavedBuffer, binaryExpressionSavedChangesIndex, binaryExpressionSavedMrnbLineWidth,
					binaryExpressionSavedLineWidth, binaryExpressionSavedIsPrevSpace,
					binaryExpressionSavedIsHeredocSemicolonPre73, binaryExpressionSavedIsPHPEqualTag);
			// undo everything
			// https://bugs.eclipse.org/bugs/show_bug.cgi?id=506488
			binaryExpressionSavedBuffer = replaceBuffer.toString();
			// must be null to avoid infinite loop (note that
			// binaryExpressionSavedBuffer must stay non-null here to avoid
			// resetting binaryExpressionSavedNode to a non-null value later
			// again)
			binaryExpressionSavedNode = null;
			binaryExpressionSavedChangesIndex = changes.size() - 1;
			indentationLevel = oldIndentationLevel;
			wasBinaryExpressionWrapped = oldWasBinaryExpressionWrapped;

			infixExpression.accept(this);

			// used to enter in the "if (infixExpression ==
			// binaryExpressionSavedNode)" statement below, to reset all binary
			// expression variables
			binaryExpressionSavedNode = infixExpression;
		}
		if (infixExpression == binaryExpressionSavedNode) {
			binaryExpressionSavedMrnbLineWidth = 0;
			binaryExpressionSavedLineWidth = 0;
			binaryExpressionSavedIsPrevSpace = false;
			binaryExpressionSavedIsHeredocSemicolonPre73 = false;
			binaryExpressionSavedIsPHPEqualTag = false;
			binaryExpressionSavedBuffer = null;
			binaryExpressionSavedNode = null;
			binaryExpressionSavedChangesIndex = -1;
			indentationLevel = oldIndentationLevel;
			wasBinaryExpressionWrapped = oldWasBinaryExpressionWrapped;

			// reset the policy for binary expression states
			binaryExpressionLineWrapPolicy = -1;
			binaryExpressionIndentGap = 0;
		}
		return false;
	}

