	@Override
	public boolean visit(UseStatement useStatement) {
		int lastPosition = useStatement.getStart() + 3;
		addNonBlanksToLineWidth(3);// the word 'use'
		insertSpace();

		appendStatementType(useStatement.getStatementType());

		int lineWrapPolicy = NO_LINE_WRAP;
		int indentationGap = NO_LINE_WRAP_INDENT;
		boolean keepTrailingComma = true;
		boolean spaceBeforeComma = this.preferences.insert_space_before_comma_in_global;
		boolean spaceAfterComma = this.preferences.insert_space_after_comma_in_global;
		boolean forceSplit = false;
		if (useStatement.getNamespace() != null) {
			insertSpace();
			handleChars(lastPosition, useStatement.getNamespace().getStart());
			useStatement.getNamespace().accept(this);

			lastPosition = useStatement.getNamespace().getEnd();
			insertSpace();
			appendToBuffer(OPEN_CURLY);

			lineWrapPolicy = WRAP_ALL_ELEMENTS;
			forceSplit = true;
			indentationGap = 1;
			// NB: trailing comma works only with (mixed) group statements
			keepTrailingComma = this.preferences.line_keep_trailing_comma_in_list;
			spaceBeforeComma = false;
			spaceAfterComma = false;
		}

		List<UseStatementPart> parts = useStatement.parts();
		ASTNode[] allParts;
		if (useStatement.getEmptyPart() != null) {
			allParts = parts.toArray(new ASTNode[parts.size() + 1]);
			// https://bugs.eclipse.org/bugs/show_bug.cgi?id=521884
			// add the empty ASTNode (i.e. EmptyExpression) that is used
			// to represent the trailing comma introduced in PHP 7.2
			allParts[parts.size()] = useStatement.getEmptyPart();
		} else {
			allParts = parts.toArray(new ASTNode[parts.size()]);
		}
		lastPosition = handleCommaList(allParts, lastPosition, keepTrailingComma, spaceBeforeComma, spaceAfterComma,
				lineWrapPolicy, indentationGap, forceSplit);

		if (useStatement.getNamespace() != null) {
			insertNewLines(1);
			indent();
			appendToBuffer(CLOSE_CURLY);
		}

		handleSemicolon(lastPosition, useStatement.getEnd());
		return false;
	}

