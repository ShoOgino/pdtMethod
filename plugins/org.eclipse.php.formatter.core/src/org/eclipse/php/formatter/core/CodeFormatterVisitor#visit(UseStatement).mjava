	public boolean visit(UseStatement useStatement) {
		int lastPosition = useStatement.getStart() + 3;
		lineWidth += 3;// the word 'use'
		insertSpace();

		appendStatementType(useStatement.getStatementType());

		int lineWrapPolicy = NO_LINE_WRAP;
		int indentationGap = NO_LINE_WRAP_INDENT;
		boolean spaceBeforeComma = this.preferences.insert_space_before_comma_in_global;
		boolean spaceAfterComma = this.preferences.insert_space_after_comma_in_global;
		boolean forceSplit = false;
		if (useStatement.getNamespace() != null) {
			insertSpace();
			handleChars(lastPosition, useStatement.getNamespace().getStart());
			useStatement.getNamespace().accept(this);

			lastPosition = useStatement.getNamespace().getEnd();
			insertSpace();
			appendToBuffer(OPEN_CURLY);

			lineWrapPolicy = WRAP_ALL_ELEMENTS;
			forceSplit = true;
			indentationGap = 1;
			spaceBeforeComma = false;
			spaceAfterComma = false;
		}

		List<UseStatementPart> parts = useStatement.parts();
		lastPosition = handleCommaList(parts.toArray(new ASTNode[parts.size()]), lastPosition, spaceBeforeComma,
				spaceAfterComma, lineWrapPolicy, indentationGap, forceSplit);

		if (useStatement.getNamespace() != null) {
			insertNewLine();
			indent();
			appendToBuffer(CLOSE_CURLY);
		}

		handleSemicolon(lastPosition, useStatement.getEnd());
		return false;
	}

