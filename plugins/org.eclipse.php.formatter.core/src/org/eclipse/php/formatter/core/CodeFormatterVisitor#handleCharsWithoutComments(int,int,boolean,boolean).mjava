	private void handleCharsWithoutComments(int offset, int end, boolean isComment, boolean doIndentForComment)
			throws BadLocationException {
		String content = document.get(offset, end - offset).toLowerCase();
		int phpTagOpenIndex = -1;
		if (!isComment && ((phpTagOpenIndex = content.indexOf("<?")) != -1 //$NON-NLS-1$
				|| (phpTagOpenIndex = content.indexOf("<%")) != -1)) { //$NON-NLS-1$
			// reset the isPrevSpace
			isPrevSpace = false;
			handleSplittedPHPBlock(offset + phpTagOpenIndex, end);
		} else {
			int startLine = document.getLineOfOffset(offset);
			int endLine = document.getLineOfOffset(end);
			int emptyLines = 0;

			if (!ignoreEmptyLineSetting) {
				// count empty lines
				for (int line = startLine; line < endLine; line++) {
					if (isEmptyLine(line)) {
						emptyLines++;
					}
				}

				// set the preserve empty lines
				if (emptyLines > preferences.blank_line_preserve_empty_lines) {
					emptyLines = preferences.blank_line_preserve_empty_lines;
				}

				int newLinesInBuffer = countStrInBuffer(lineSeparator);

				// add empty lines
				if (emptyLines > 0 && newLinesInBuffer < emptyLines + 1) {
					// If newLinesInBuffer is = 0, it *could* mean that the
					// buffer was already (partly or completely) flushed (so
					// there are big chances that we already inserted a
					// newline), increase newLinesInBuffer by one to only insert
					// emptyLines - 1 newlines.
					// If newLinesInBuffer is > 0, first newline from buffer is
					// ignored because it either ends a non-empty line or some
					// formatter preference already forced the insertion of a
					// newline.
					// XXX: write a method that has same indentation logic as
					// method insertNewLines(int numberOfLines)
					int firstLine = newLinesInBuffer == 0 ? 1 : newLinesInBuffer;
					for (int line = firstLine; line < emptyLines + 1; line++) {
						if (preferences.indent_empty_lines && !isPHPEqualTag && line == firstLine
								&& replaceBuffer.toString().endsWith(lineSeparator)) {
							if (doIndentForComment) {
								indentForComment(indentationLevelDescending);
							} else {
								indent();
							}
						}
						insertNewLine();
						if (preferences.indent_empty_lines && !isPHPEqualTag && line < emptyLines) {
							if (doIndentForComment) {
								indentForComment(indentationLevelDescending);
							} else {
								indent();
							}
						}
					}
					// we inserted at least one "empty" line, now we can reset previous indentation
					resetCommentIndentVariables();
					if (doIndentForComment) {
						indentForComment(indentationLevelDescending);
					} else {
						indent();
					}

				}

			}
			ignoreEmptyLineSetting = false;

			// check if the replacement and the origin string are the same
			boolean needToReplace = true;
			if (end - offset == replaceBuffer.length()) {
				// in case the buffer is empty and the doc length is 0
				// no need to replace
				if (end - offset == 0 && replaceBuffer.length() == 0) {
					needToReplace = false;
				} else {
					// the buffer and document segment length are the same
					// in case of 2 different chars we need to replace the
					// document segment
					needToReplace = false;
					for (int index = 0; offset + index < end; index++) {
						char docChar = document.getChar(offset + index);
						char bufferChar = replaceBuffer.charAt(index);
						if (docChar != bufferChar) {
							needToReplace = true;
							break;
						}
					}
				}
			}
			if (needToReplace && editsEnabled) {
				insertString(offset, end, replaceBuffer.toString());
			}
			// keep isPrevSpace information, to correctly handle whitespaces
			// around prefix and unary operators
			isPrevSpace = replaceBuffer.length() > 0 ? replaceBuffer.charAt(replaceBuffer.length() - 1) == SPACE
					// keep previous value when replaceBuffer is empty
					: isPrevSpace;
			if (recordCommentIndentVariables) {
				recordCommentIndentVariables = false;
				indentLengthForComment = lineWidth;
				String afterNewLine = EMPTY_STRING;
				int position = replaceBuffer.lastIndexOf(lineSeparator);
				if (position >= 0) {
					if (getBufferFirstChar(position + lineSeparator.length()) == '\0') {
						afterNewLine = replaceBuffer.substring(position + lineSeparator.length(),
								replaceBuffer.length());
					}
				} else {
					if (getBufferFirstChar(0) == '\0') {
						afterNewLine = replaceBuffer.toString();
					}
				}
				indentStringForComment = afterNewLine;
			}
			// when necessary, keep current indentation level for further "empty" lines
			// insertion
			if (!doIndentForComment) {
				indentationLevelDescending = false;
			}
			// clear the buffer
			replaceBuffer.setLength(0);
		}
	}

