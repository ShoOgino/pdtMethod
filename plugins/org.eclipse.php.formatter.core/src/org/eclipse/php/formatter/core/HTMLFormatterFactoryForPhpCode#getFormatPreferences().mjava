	protected StructuredFormatPreferencesXML getFormatPreferences() {
		if (fFormatPreferences == null) {
			fFormatPreferences = new StructuredFormatPreferencesXML();

			IPreferencesService service = Platform.getPreferencesService();
			fFormatPreferences
					.setLineWidth(service.getInt(HTMLCorePlugin.ID, HTMLCorePreferenceNames.LINE_WIDTH, 0, null));
			fFormatPreferences.setSplitMultiAttrs(
					service.getBoolean(HTMLCorePlugin.ID, HTMLCorePreferenceNames.SPLIT_MULTI_ATTRS, false, null));
			fFormatPreferences.setAlignEndBracket(
					service.getBoolean(HTMLCorePlugin.ID, HTMLCorePreferenceNames.ALIGN_END_BRACKET, false, null));
			fFormatPreferences.setClearAllBlankLines(
					service.getBoolean(HTMLCorePlugin.ID, HTMLCorePreferenceNames.CLEAR_ALL_BLANK_LINES, false, null));

			char indentChar = ' ';
			String indentCharPref = service.getString(HTMLCorePlugin.ID, HTMLCorePreferenceNames.INDENTATION_CHAR, null,
					null);
			if (HTMLCorePreferenceNames.TAB.equals(indentCharPref)) {
				indentChar = '\t';
			}
			int indentationWidth = service.getInt(HTMLCorePlugin.ID, HTMLCorePreferenceNames.INDENTATION_SIZE, 0, null);

			StringBuffer indent = new StringBuffer();
			for (int i = 0; i < indentationWidth; i++) {
				indent.append(indentChar);
			}
			fFormatPreferences.setIndent(indent.toString());
		}

		return fFormatPreferences;
	}

