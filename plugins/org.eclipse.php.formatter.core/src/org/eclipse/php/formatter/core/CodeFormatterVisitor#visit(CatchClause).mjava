	@Override
	public boolean visit(CatchClause catchClause) {
		// handle the chars between the 'catch' and the identifier start
		// position
		if (this.preferences.insert_space_before_opening_paren_in_catch) {
			insertSpace();
		}
		appendToBuffer(OPEN_PARN);
		if (this.preferences.insert_space_after_opening_paren_in_catch) {
			insertSpace();
		}
		lineWidth += 5;
		handleChars(catchClause.getStart() + 5, catchClause.getClassNames().get(0).getStart());

		// handle the catch identifiers
		catchClause.getClassNames().get(0).accept(this);
		for (int i = 1; i < catchClause.getClassNames().size(); i++) {
			handleChars(catchClause.getClassNames().get(i - 1).getEnd(), catchClause.getClassNames().get(i).getStart());
			insertSpace();
			appendToBuffer('|');
			insertSpace();
			catchClause.getClassNames().get(i).accept(this);
		}

		insertSpace();
		handleChars(catchClause.getClassNames().get(catchClause.getClassNames().size() - 1).getEnd(),
				catchClause.getVariable().getStart());
		catchClause.getVariable().accept(this);

		// set the catch closing parn spaces
		if (this.preferences.insert_space_before_closing_paren_in_catch) {
			insertSpace();
		}
		appendToBuffer(CLOSE_PARN);

		boolean isIndentationAdded = handleBlockOpenBrace(this.preferences.brace_position_for_block,
				this.preferences.insert_space_before_opening_brace_in_block);
		handleChars(catchClause.getVariable().getEnd(), catchClause.getBody().getStart());
		catchClause.getBody().accept(this);
		if (isIndentationAdded) {
			indentationLevel--;
			indentationLevelDescending = true;
		}
		return false;
	}

