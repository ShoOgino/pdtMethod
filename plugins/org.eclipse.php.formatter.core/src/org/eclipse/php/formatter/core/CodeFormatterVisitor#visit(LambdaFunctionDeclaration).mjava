	@Override
	public boolean visit(LambdaFunctionDeclaration lambdaFunctionDeclaration) {
		int lastPosition = lambdaFunctionDeclaration.getStart();
		StringBuilder buffer = new StringBuilder();
		if (lambdaFunctionDeclaration.isStatic()) {
			buffer.append("static "); //$NON-NLS-1$
			lastPosition += 7; // "static ".length()
		}
		buffer.append("function"); //$NON-NLS-1$
		lastPosition += 8; // "function".length()

		// handle referenced function with '&'
		if (lambdaFunctionDeclaration.isReference()) {
			buffer.append(" &"); //$NON-NLS-1$
			lastPosition += 2; // " &".length()
		}

		appendToBuffer(buffer.toString());
		handleChars(lambdaFunctionDeclaration.getStart(), lastPosition);

		if (this.preferences.insert_space_before_opening_paren_in_function_declaration
				// https://bugs.eclipse.org/bugs/show_bug.cgi?id=492770
				|| !lambdaFunctionDeclaration.isReference()) {
			insertSpace();
		}
		appendToBuffer(OPEN_PARN);
		List<FormalParameter> formalParameters = lambdaFunctionDeclaration.formalParameters();
		ASTNode[] params = formalParameters.toArray(new FormalParameter[formalParameters.size()]);
		if (params.length > 0) {
			if (this.preferences.insert_space_after_opening_paren_in_function_declaration) {
				insertSpace();
			}
			int indentationGap = calculateIndentGap(
					this.preferences.line_wrap_parameters_in_method_declaration_indent_policy,
					this.preferences.line_wrap_wrapped_lines_indentation);
			lastPosition = handleCommaList(params, lastPosition,
					this.preferences.insert_space_before_comma_in_function_declaration,
					this.preferences.insert_space_after_comma_in_function_declaration,
					this.preferences.line_wrap_parameters_in_method_declaration_line_wrap_policy, indentationGap,
					this.preferences.line_wrap_parameters_in_method_declaration_force_split);

			if (this.preferences.insert_space_before_closing_paren_in_function_declaration) {
				insertSpace();
			}
		} else {
			if (this.preferences.insert_space_between_empty_paren_in_function_declaration) {
				insertSpace();
			}
		}
		appendToBuffer(CLOSE_PARN);

		List<Expression> variables = lambdaFunctionDeclaration.lexicalVariables();

		if (variables.size() > 0) {
			// TODO: Added a new preference?
			insertSpace();
			appendToBuffer("use"); //$NON-NLS-1$
			insertSpace();

			appendToBuffer(OPEN_PARN);
			if (this.preferences.insert_space_before_opening_paren_in_function_declaration) {
				insertSpace();
			}
			ASTNode[] vars = variables.toArray(new Expression[variables.size()]);

			lastPosition = handleCommaList(vars, lastPosition,
					this.preferences.insert_space_before_comma_in_function_declaration,
					this.preferences.insert_space_after_comma_in_function_declaration,
					this.preferences.line_wrap_parameters_in_method_declaration_line_wrap_policy, 0,
					this.preferences.line_wrap_parameters_in_method_declaration_force_split);

			if (this.preferences.insert_space_before_closing_paren_in_function_declaration) {
				insertSpace();
			}

			appendToBuffer(CLOSE_PARN);
		}

		if (lambdaFunctionDeclaration.getReturnType() != null) {
			appendToBuffer(COLON);
			insertSpace();
			if (lambdaFunctionDeclaration.getReturnType().isNullable()) {
				appendToBuffer(QUESTION_MARK);
			}
			handleChars(lastPosition, lambdaFunctionDeclaration.getReturnType().getStart());
			lambdaFunctionDeclaration.getReturnType().accept(this);

			lastPosition = lambdaFunctionDeclaration.getReturnType().getEnd();
		}

		// handle function body
		if (lambdaFunctionDeclaration.getBody() != null) {
			boolean isIndentationAdded = handleBlockOpenBrace(this.preferences.brace_position_for_lambda_function,
					this.preferences.insert_space_before_opening_brace_in_function);
			handleChars(lastPosition, lambdaFunctionDeclaration.getBody().getStart());

			lambdaFunctionDeclaration.getBody().accept(this);
			if (isIndentationAdded) {
				indentationLevel--;
				indentationLevelDescending = true;
			}
		} else {
			handleSemicolon(lastPosition, lambdaFunctionDeclaration.getEnd());
		}

		return false;
	}

