	private void handleElseIfCases(IfStatement ifStatement) throws BadLocationException {
		IfStatement falseIfStatement = (IfStatement) ifStatement.getFalseStatement();
		boolean elseIndentationLevelChanged = false;
		int trueStatementEnd = ifStatement.getTrueStatement().getEnd();
		boolean isIfToken = false;
		int positionOfElse = -1;
		try {
			// looking for 'if' or 'elseif'
			isIfToken = getFirstTokenOffset(falseIfStatement.getStart(), falseIfStatement.getCondition().getStart(),
					stElseIf, true) == -1;
			// looking for 'else' or 'elseif'
			positionOfElse = getFirstTokenOffset(trueStatementEnd, ifStatement.getFalseStatement().getStart(), stElse,
					true);
			if (positionOfElse == -1) {
				positionOfElse = getFirstTokenOffset(trueStatementEnd, ifStatement.getFalseStatement().getStart(),
						stElseIf, false /* no need to re-scan same range */);
			}
		} catch (Exception e) {
			Logger.logException(e);
			return;
		}

		if (ifStatement.getTrueStatement().getType() == ASTNode.BLOCK) {
			if (preferences.control_statement_insert_newline_before_else_and_elseif_in_if) {
				insertNewLines(1);
				indent();
			} else {
				if (isIfToken) {
					setSpaceAfterBlock(ifStatement.getTrueStatement());
				}
			}

			if (!isIfToken) {// elseif case
				if (positionOfElse > trueStatementEnd) {
					handleChars(trueStatementEnd, ifStatement.getFalseStatement().getStart());
				} else {
					// fix for setSpaceAfterBlock when no space is required
					// before 'elseif'
					if (!preferences.control_statement_insert_newline_before_else_and_elseif_in_if
							&& preferences.insert_space_after_closing_brace_in_block) {
						insertSpace();
					}
					handleChars(trueStatementEnd, ifStatement.getFalseStatement().getStart());
				}
			} else {
				if (positionOfElse > trueStatementEnd) {
					handleChars(trueStatementEnd, positionOfElse);
					appendToBuffer("else "); //$NON-NLS-1$
					if (!preferences.control_statement_keep_else_if_on_same_line) {
						indentationLevel++;
						elseIndentationLevelChanged = true;
						insertNewLines(1);
						indent();
					}
					handleChars(positionOfElse, ifStatement.getFalseStatement().getStart());
				} else {
					appendToBuffer("else "); //$NON-NLS-1$
					if (!preferences.control_statement_keep_else_if_on_same_line) {
						indentationLevel++;
						elseIndentationLevelChanged = true;
						insertNewLines(1);
						indent();
					}
					// the following line also handles the case : '}else' when
					// setSpaceAfterBlock() is called and offset is set to +1
					handleChars(trueStatementEnd, ifStatement.getFalseStatement().getStart());
				}
			}
		} else { // if the true statement is not a block then we should add new
			// line
			insertNewLines(1);
			indent();
			if (positionOfElse > trueStatementEnd) {
				handleChars(trueStatementEnd, positionOfElse);
				appendToBuffer("else "); //$NON-NLS-1$
				if (!preferences.control_statement_keep_else_if_on_same_line) {
					indentationLevel++;
					elseIndentationLevelChanged = true;
					insertNewLines(1);
					indent();
				}
				handleChars(positionOfElse, ifStatement.getFalseStatement().getStart());
			} else {
				appendToBuffer(isIfToken ? "else " : EMPTY_STRING); //$NON-NLS-1$
				if (isIfToken && !preferences.control_statement_keep_else_if_on_same_line) {
					indentationLevel++;
					elseIndentationLevelChanged = true;
					insertNewLines(1);
					indent();
				}
				// in case of: STATEMENT;elseif ...
				handleChars(trueStatementEnd, ifStatement.getFalseStatement().getStart());
			}
		}
		boolean processed = isProcessed(ifStatement);
		ifStatement.getFalseStatement().accept(this);
		if (elseIndentationLevelChanged) {
			indentationLevel--;
		}
		if (ifStatement.getTrueStatement().getType() == ASTNode.BLOCK
				&& !((Block) ifStatement.getTrueStatement()).isCurly() && !processed) {
			// 6 = "endif;".length()
			handleChars(ifStatement.getFalseStatement().getEnd(), ifStatement.getEnd() - 6);
			appendToBuffer("endif;"); //$NON-NLS-1$
			handleChars(ifStatement.getEnd() - 6, ifStatement.getEnd());
		}
	}

