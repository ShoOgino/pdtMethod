	/**
	 * Returns an array on newly initialized WizardFragments that complies to the given server type 
	 * id.
	 * The returned fragments array contains a union of the server specific fragments and the global
	 * fragments that can be defined by adding a fragments extention with a visibility of 'Always'.
	 * 
	 * @param serverType	The id of the server.
	 * @return	An array of ICompositeFragmentFactory.
	 */
	public static ICompositeFragmentFactory[] getFragmentsFactories(String serverType) {
		ServerFragmentsFactoryRegistry registry = getInstance();
		List factories = (List) registry.fragmentsByType.get(serverType);
		List allFragments = new ArrayList();
		if (factories != null) {
			for (int i = 0; i < factories.size(); i++) {
				FragmentsFactory factory = (FragmentsFactory) factories.get(i);
				allFragments.add(factory.createFragmentFactory());
			}
		}
		factories = registry.allWizardsfragments;
		for (int i = 0; i < factories.size(); i++) {
			FragmentsFactory factory = (FragmentsFactory) factories.get(i);
			allFragments.add(factory.createFragmentFactory());
		}
		ICompositeFragmentFactory[] fragmentFactories = new ICompositeFragmentFactory[allFragments.size()];
		allFragments.toArray(fragmentFactories);
		return fragmentFactories;
	}

