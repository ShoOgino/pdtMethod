	/**
	 * Locate a configuration to relaunch for the given type. If one cannot be
	 * found, create one.
	 * 
	 * @param breakAtFirstLine
	 * @param res
	 * 
	 * @return a re-useable config or <code>null</code> if none
	 */
	static ILaunchConfiguration findLaunchConfiguration(IProject project, String fileName, String selectedURL,
			Server server, String mode, ILaunchConfigurationType configType, boolean breakAtFirstLine,
			boolean showDebugDialog, IResource res) {
		ILaunchConfiguration config = null;

		try {
			ILaunchConfiguration[] configs = DebugPlugin.getDefault().getLaunchManager()
					.getLaunchConfigurations(configType);
			if (configs == null) {
				return config;
			}
			int numConfigs = configs.length;
			for (int i = 0; i < numConfigs; i++) {
				String configuredServerName = configs[i].getAttribute(Server.NAME, (String) null);
				String configuredFileName = configs[i].getAttribute(Server.FILE_NAME, (String) null);

				if (configuredFileName != null) {
					if (configuredFileName.equals(fileName) && server.getName().equals(configuredServerName)) {
						config = configs[i].getWorkingCopy();
						break;
					}
				}
			}

			if (config == null) {
				config = createConfiguration(project, fileName, selectedURL, server, configType, mode, breakAtFirstLine,
						showDebugDialog, res);
			}
		} catch (CoreException ce) {
			Logger.logException(ce);
		}
		return config;
	}

