	/**
	 * Provide a wizard page to change the Server's installation directory.
	 */
	protected void createControl() {
		GridLayout layout = new GridLayout(1, true);
		setLayout(layout);
		setLayoutData(new GridData(GridData.FILL_BOTH));

		Composite nameGroup = new Composite(this, SWT.NONE);
		layout = new GridLayout();
		layout.numColumns = 2;
		nameGroup.setLayout(layout);
		nameGroup.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));

		Label label = new Label(nameGroup, SWT.NONE);
		label.setText(PHPServerUIMessages
				.getString("ServerCompositeFragment.nameLabel")); //$NON-NLS-1$
		GridData data = new GridData();
		label.setLayoutData(data);

		name = new Text(nameGroup, SWT.BORDER);
		data = new GridData(GridData.FILL_HORIZONTAL);
		name.setLayoutData(data);
		name.addModifyListener(new ModifyListener() {
			public void modifyText(ModifyEvent e) {
				if (getServer() != null)
					modifiedValuesCache.serverName = name.getText();
				validate();
			}
		});

		Label debuggerLabel = new Label(nameGroup, SWT.NONE);
		debuggerLabel.setText(PHPServerUIMessages
				.getString("ServerCompositeFragment.debuggerLabel")); //$NON-NLS-1$
		debuggerLabel.setLayoutData(new GridData());

		debuggerCombo = new Combo(nameGroup, SWT.DROP_DOWN | SWT.READ_ONLY);
		data = new GridData(SWT.LEFT, SWT.FILL, true, false);
		debuggerCombo.setLayoutData(data);

		debuggerCombo.addModifyListener(new ModifyListener() {
			public void modifyText(ModifyEvent e) {
				if (getServer() != null) {
					int index = debuggerCombo.getSelectionIndex();
					modifiedValuesCache.debuggerId = debuggersIds.get(index);
				}
				validate();
			}
		});

		String defaultDebugger = PHPDebugPlugin.getCurrentDebuggerId();
		for (int i = 0; i < debuggersIds.size(); ++i) {
			String id = debuggersIds.get(i);
			String debuggerName = PHPDebuggersRegistry.getDebuggerName(id);
			debuggerCombo.add(debuggerName, i);
			if (id.equals(defaultDebugger)) {
				debuggerCombo.select(i);
			}
		}

		createURLGroup(this);
		init();
		validate();

		Dialog.applyDialogFont(this);

		name.forceFocus();
	}

