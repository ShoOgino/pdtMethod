	public static void searchAndLaunch(Object[] search, String mode, ILaunchConfigurationType configType) {
		if (search == null) {
			return;
		}
		int entries = search.length;
		for (int i = 0; i < entries; i++) {
			try {
				String phpPathString = null;
				IProject project = null;
				Object obj = search[i];
				IResource res = null;
				if (obj instanceof IModelElement) {
					IModelElement elem = (IModelElement) obj;

					if (elem instanceof ISourceModule) {
						res = ((ISourceModule) elem).getCorrespondingResource();
					} else if (elem instanceof IType) {
						res = ((IType) elem).getUnderlyingResource();
					} else if (elem instanceof IMethod) {
						res = ((IMethod) elem).getUnderlyingResource();
					}
					if (res instanceof IFile) {
						obj = res;
					}
				}

				if (obj instanceof IFile) {
					IFile file = (IFile) obj;
					res = file;
					project = file.getProject();
					IContentType contentType = Platform.getContentTypeManager()
							.getContentType(ContentTypeIdForPHP.ContentTypeID_PHP);
					if (contentType.isAssociatedWith(file.getName())) {
						phpPathString = file.getFullPath().toString();
					}
				}

				Server defaultServer = ServersManager.getDefaultServer(project);
				if (defaultServer == null) {
					defaultServer = ServersManager.getDefaultServer(project);
					if (defaultServer == null) {
						// Sould not happen
						throw new CoreException(new Status(IStatus.ERROR, PHPDebugUIPlugin.ID, IStatus.OK,
								Messages.PHPWebPageLaunchShortcut_0, null));
					}
				}

				boolean breakAtFirstLine = PHPProjectPreferences.getStopAtFirstLine(project);
				String selectedURL = null;
				boolean showDebugDialog = true;
				if (obj instanceof IScriptProject) {
					final PHPWebPageLaunchDialog dialog = new PHPWebPageLaunchDialog(mode, (IScriptProject) obj);
					final int open = dialog.open();
					if (open == PHPWebPageLaunchDialog.OK) {
						defaultServer = dialog.getServer();
						selectedURL = dialog.getPHPPathString();
						phpPathString = dialog.getFilename();
						breakAtFirstLine = dialog.isBreakAtFirstLine();
						showDebugDialog = false;
					} else {
						continue;
					}
				}

				if (phpPathString == null) {
					// Could not find target to launch
					throw new CoreException(new Status(IStatus.ERROR, PHPDebugUIPlugin.ID, IStatus.OK,
							Messages.launch_failure_no_target, null));
				}

				// Launch the app
				ILaunchConfiguration config = findLaunchConfiguration(project, phpPathString, selectedURL,
						defaultServer, mode, configType, breakAtFirstLine, showDebugDialog, res);
				if (config != null) {
					DebugUITools.launch(config, mode);
				} else {
					// Could not find launch configuration or the user
					// cancelled.
					// throw new CoreException(new Status(IStatus.ERROR,
					// PHPDebugUIPlugin.ID, IStatus.OK,
					// PHPDebugUIMessages.launch_failure_no_config, null));
				}
			} catch (CoreException ce) {
				final IStatus stat = ce.getStatus();
				Display.getDefault().asyncExec(new Runnable() {
					@Override
					public void run() {
						ErrorDialog.openError(PHPDebugUIPlugin.getActiveWorkbenchShell(),
								Messages.launch_failure_msg_title, Messages.launch_failure_server_msg_text, stat);
					}
				});
			}
		}
	}

