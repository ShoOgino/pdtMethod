	protected void createFieldListeners() {
		fPHPexeName.setDialogFieldListener(new IDialogFieldListener() {
			@Override
			public void dialogFieldChanged(DialogField field) {
				updateItem();
			}
		});

		fPHPExePath.setDialogFieldListener(new IDialogFieldListener() {
			@Override
			public void dialogFieldChanged(DialogField field) {
				String newPath = fPHPExePath.getText();
				if (newPath != null && newPath.trim().length() > 0) {
					if (!isIniFileSet || (fPHPIni.getText() == null || fPHPIni.getText().trim().length() == 0)) {
						IPath path = new Path(newPath);
						path = path.removeLastSegments(1);
						path = path.append(PHP_INI);
						if (path.toFile().exists()) {
							fPHPIni.setTextWithoutUpdate(path.toOSString());
						}
					}
					File executable = new File(newPath);
					PHPExeInfo phpExecInfo = getPHPInfo(executable);
					if (phpExecInfo != null) {
						if (fPHPexeName.getText().isEmpty() && phpExecInfo.getName() != null)
							fPHPexeName.setTextWithoutUpdate(phpExecInfo.getName());
						if (phpExecInfo.getSapiType() != null)
							fSapiTypes.setText(phpExecInfo.getSapiType());
						if (phpExecInfo.getVersion() != null)
							fVersionLabel.setText(phpExecInfo.getVersion());
					} else {
						fSapiTypes.deselectAll();
						fVersionLabel.setText(""); //$NON-NLS-1$
					}
				}
				updateItem();
			}
		});

		fPHPIni.setDialogFieldListener(new IDialogFieldListener() {
			@Override
			public void dialogFieldChanged(DialogField field) {
				updateItem();
			}
		});

		fLoadDefaultPHPIni.addSelectionListener(new SelectionListener() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				updateItem();
			}

			@Override
			public void widgetDefaultSelected(SelectionEvent e) {
				updateItem();
			}
		});

		fSapiTypes.addSelectionListener(new SelectionListener() {
			@Override
			public void widgetDefaultSelected(SelectionEvent e) {
				updateItem();
			}

			@Override
			public void widgetSelected(SelectionEvent e) {
				updateItem();
			}
		});

	}

