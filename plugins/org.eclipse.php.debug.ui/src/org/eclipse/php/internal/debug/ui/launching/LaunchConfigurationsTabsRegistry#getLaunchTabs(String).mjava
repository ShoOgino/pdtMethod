	/**
	 * Returns an array on newly initialized AbstractLaunchConfigurationTab that are registered
	 * for the requested configuration tab group.
	 * 
	 * @param launchConfigurationTabGroupId The group id for the requested launch configuration tabs.
	 * @return	An array of AbstractLaunchConfigurationTab.
	 */
	public static AbstractLaunchConfigurationTab[] getLaunchTabs(String launchConfigurationTabGroupId) {
		LaunchConfigurationsTabsRegistry registry = getInstance();
		List fragments = registry.factories;
		List factoriesList = new ArrayList();
		for (int i = 0; i < fragments.size(); i++) {
			TabFactory factory = (TabFactory) fragments.get(i);
			// Sort out only the tabs that are related to the requested configuration tab group.
			if (factory.getGroupID().equals(launchConfigurationTabGroupId)) {
				factoriesList.add(factory.createFragmentFactory());
			}
		}
		AbstractLaunchConfigurationTab[] tabs = new AbstractLaunchConfigurationTab[factoriesList.size()];
		factoriesList.toArray(tabs);
		return tabs;
	}

