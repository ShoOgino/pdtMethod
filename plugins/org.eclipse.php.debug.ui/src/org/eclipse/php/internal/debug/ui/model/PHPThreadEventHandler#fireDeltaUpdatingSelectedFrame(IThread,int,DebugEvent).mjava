	private void fireDeltaUpdatingSelectedFrame(IThread thread, int flags, DebugEvent event) {
		ModelDelta delta = buildRootDelta();
		ModelDelta node = addPathToThread(delta, thread);
		IStackFrame prev = null;
		synchronized (this) {
			prev = fLastTopFrame.get(thread);
		}
		IStackFrame frame = null;
		try {
			Object frameToSelect = event.getData();
			if (frameToSelect == null || !(frameToSelect instanceof IStackFrame)) {
				frame = thread.getTopStackFrame();
			} else {
				frame = (IStackFrame) frameToSelect;
			}
		} catch (DebugException e) {
		}
		int threadIndex = indexOf(thread);
		int childCount = childCount(thread);
		if (isEqual(frame, prev)) {
			if (frame == null) {
				if (thread.isSuspended()) {
					// no frames, but suspended - update & select
					node = node.addNode(thread, threadIndex, flags | IModelDelta.STATE | IModelDelta.SELECT,
							childCount);
				}
			} else {
				node = node.addNode(thread, threadIndex, flags, childCount);
			}
		} else {
			if (event.getDetail() == DebugEvent.STEP_END) {
				if (prev == null) {
					flags = flags | IModelDelta.EXPAND;
				} else if (frame == null) {
					return;
				}
			}
			node = node.addNode(thread, threadIndex, flags | IModelDelta.CONTENT, childCount);
		}
		if (frame != null) {
			node.addNode(frame, indexOf(frame), IModelDelta.STATE | IModelDelta.SELECT, childCount(frame));
		}
		synchronized (this) {
			if (!isDisposed()) {
				fLastTopFrame.put(thread, frame);
			}
		}
		fireDelta(delta);
	}

