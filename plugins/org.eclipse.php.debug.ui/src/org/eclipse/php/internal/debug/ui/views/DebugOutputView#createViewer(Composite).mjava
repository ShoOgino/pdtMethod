	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.eclipse.debug.ui.AbstractDebugView#createViewer(org.eclipse.swt.widgets
	 * .Composite)
	 */
	protected Viewer createViewer(Composite parent) {

		int styles = SWT.V_SCROLL | SWT.H_SCROLL | SWT.MULTI
				| SWT.FULL_SELECTION;
		fSourceViewer = new StructuredTextViewer(parent, null, null, false,
				styles);
		fSourceViewer.setEditable(false);
		fSourceViewer.configure(new StructuredTextViewerConfigurationHTML());
		getSite().getWorkbenchWindow().getSelectionService()
				.addSelectionListener(IDebugUIConstants.ID_DEBUG_VIEW, this);
		getSite().setSelectionProvider(fSourceViewer.getSelectionProvider());

		setBackgroundColor();

		terminateListener = new IDebugEventSetListener() {
			IPHPDebugTarget target;

			public void handleDebugEvents(DebugEvent[] events) {
				if (events != null) {
					int size = events.length;
					for (int i = 0; i < size; i++) {
						Object obj = events[i].getSource();
						// 386462: [Regression] Debug Output does not refresh
						// depending on the focus
						// https://bugs.eclipse.org/bugs/show_bug.cgi?id=386462
						if (!(obj instanceof IPHPDebugTarget || obj instanceof PHPThread))
							continue;

						if (events[i].getKind() == DebugEvent.TERMINATE
								|| events[i].getKind() == DebugEvent.SUSPEND) {
							if (obj instanceof IPHPDebugTarget) {

								target = (IPHPDebugTarget) obj;
							} else {
								target = (IPHPDebugTarget) ((PHPThread) obj)
										.getDebugTarget();
							}
							Job job = new UIJob("debug output") { //$NON-NLS-1$
								public IStatus runInUIThread(
										IProgressMonitor monitor) {
									update(target);
									return Status.OK_STATUS;
								}
							};
							job.schedule();
						}
					}
				}
			}
		};
		DebugPlugin.getDefault().addDebugEventListener(terminateListener);

		debugViewHelper = new DebugViewHelper();

		return fSourceViewer;
	}

