	public void initializeValues(PreferencePage propertyPage) {
		this.propertyPage = propertyPage;
		Preferences prefs = PHPProjectPreferences.getModelPreferences();
		IScopeContext[] preferenceScopes = createPreferenceScopes(propertyPage);
		IProject project = getProject(propertyPage);
		boolean stopAtFirstLine = prefs
				.getBoolean(PHPDebugCorePreferenceNames.STOP_AT_FIRST_LINE);
		boolean enableCLIDebug = prefs
				.getBoolean(PHPDebugCorePreferenceNames.ENABLE_CLI_DEBUG);
		String serverName = ServersManager.getDefaultServer(null).getName();
		String phpExeName = InstanceScope.INSTANCE.getNode(PHPDebugPlugin.ID)
				.get(PHPDebugCorePreferenceNames.DEFAULT_PHP, null);
		if (phpExeName == null || phpExeName.isEmpty()) {
			phpExeName = PHPDebugUIMessages.PhpDebugPreferencePage_noExeDefined;
		}
		String transferEncoding = prefs
				.getString(PHPDebugCorePreferenceNames.TRANSFER_ENCODING);
		String outputEncoding = prefs
				.getString(PHPDebugCorePreferenceNames.OUTPUT_ENCODING);
		loadServers(fDefaultServer);
		String serverDebuggerId = PHPDebugPlugin.getDebuggerId(serverName);
		boolean exeLoaded = false;
		// Update the values in case we have a project-specific settings.
		if (preferenceScopes[0] instanceof ProjectScope && isProjectSpecific) {
			IEclipsePreferences node = preferenceScopes[0]
					.getNode(getPreferenceNodeQualifier());
			if (node != null && project != null) {
				if (getBasePathValue(project) == null
						|| getBasePathValue(project) == "") { //$NON-NLS-1$
					setBasePathValue(project, project.getName());
				}
				String projectServerName = ServersManager.getDefaultServer(
						project).getName();
				if (!projectServerName.equals("")) { //$NON-NLS-1$
					serverName = projectServerName;
					stopAtFirstLine = node.getBoolean(
							PHPDebugCorePreferenceNames.STOP_AT_FIRST_LINE,
							stopAtFirstLine);
					enableCLIDebug = node.getBoolean(
							PHPDebugCorePreferenceNames.ENABLE_CLI_DEBUG,
							enableCLIDebug);
					transferEncoding = node.get(
							PHPDebugCorePreferenceNames.TRANSFER_ENCODING,
							transferEncoding);
					outputEncoding = node.get(
							PHPDebugCorePreferenceNames.OUTPUT_ENCODING,
							outputEncoding);
					PHPexeItem item = PHPDebugPlugin.getPHPexeItem(project);
					if (item != null && item.getName() != null) {
						phpExeName = item.getName();
					}
					serverDebuggerId = PHPDebugPlugin.getDebuggerId(serverName);
					loadPHPExes(fDefaultPHPExe, PHPexes.getInstance()
							.getAllItems());
					exeLoaded = true;
				}
			}
		}
		if (!exeLoaded) {
			loadPHPExes(fDefaultPHPExe, PHPexes.getInstance().getAllItems());
		}
		fStopAtFirstLine.setSelection(stopAtFirstLine);
		fEnableCLIDebug.setSelection(enableCLIDebug);
		fDefaultServer.select(fDefaultServer.indexOf(serverName));
		fServerDebugger.setText(PHPDebuggersRegistry
				.getDebuggerName(serverDebuggerId));
		if (fDefaultPHPExe.indexOf(phpExeName) != -1) {
			fDefaultPHPExe.select(fDefaultPHPExe.indexOf(phpExeName));
		} else {
			fDefaultPHPExe.select(0);
		}
		PHPexeItem item = PHPexes.getInstance().getItem(
				fDefaultPHPExe.getText());
		if (item != null) {
			fCLIDebugger.setText(PHPDebuggersRegistry.getDebuggerName(item
					.getDebuggerID()));
		} else {
			fCLIDebugger
					.setText(PHPDebugUIMessages.PhpDebugPreferencePage_noExeDefined);
		}
		fDebugEncodingSettings.setText(transferEncoding);
		fOutputEncodingSettings.setText(outputEncoding);

		if (isPropertyPage()) {
			defaultBasePath = getBasePathValue(project);
			initAutoGenerateListener();
			fDefaultBasePath.setText(defaultBasePath);
		}
	}

