	public String getHoverInfo(ITextViewer textViewer, IRegion hoverRegion) {
		if (textViewer == null || textViewer.getDocument() == null) {
			return null;
		}
		if (textViewer instanceof PHPStructuredTextViewer) {
			setEditor(((PHPStructuredTextViewer) textViewer).getTextEditor());
		}

		PHPDebugTarget debugTarget = getDebugTarget();
		if (debugTarget == null) {
			return null;
		}

		int offset = hoverRegion.getOffset();
		IStructuredDocumentRegion flatNode = ((IStructuredDocument) textViewer
				.getDocument()).getRegionAtCharacterOffset(offset);
		ITextRegion region = null;
		if (flatNode != null) {
			region = flatNode.getRegionAtCharacterOffset(offset);
		}

		ITextRegionCollection container = flatNode;
		if (region instanceof ITextRegionContainer) {
			container = (ITextRegionContainer) region;
			region = container.getRegionAtCharacterOffset(offset);
		}
		IPhpScriptRegion phpScriptRegion = null;
		if (region.getType() == PHPRegionContext.PHP_CONTENT) {
			phpScriptRegion = (IPhpScriptRegion) region;
			try {
				region = phpScriptRegion.getPhpToken(offset
						- container.getStartOffset() - region.getStart());
			} catch (BadLocationException e) {
				region = null;
			}

			if (region != null) {
				int varOffset = 0;
				int varLength = 0;

				String regionType = region.getType();
				if (regionType == PHPRegionTypes.PHP_VARIABLE) {
					IDocument doc = textViewer.getDocument();
					varOffset = hoverRegion.getOffset();
					varLength = hoverRegion.getLength();
					try {
						if (doc.getChar(varOffset - 1) == ':'
								&& doc.getChar(varOffset - 2) == ':') {
							if (phpScriptRegion != null) {

								ITextRegion prevPhpToken = phpScriptRegion
										.getPhpToken(varOffset - 2);
								if (prevPhpToken != null) {
									varOffset = prevPhpToken.getStart() - 1;
									varLength += prevPhpToken.getLength() + 1;
								}
							}
						}
					} catch (BadLocationException e) {
						Logger.logException("Error retrieving the value\n", e);
					}
				} else if (regionType == PHPRegionTypes.PHP_STRING) {
					try {
						ITextRegion nextRegion = phpScriptRegion
								.getPhpToken(region.getEnd());
						ITextRegion prevRegion = phpScriptRegion
								.getPhpToken(region.getStart() - 1);
						if (prevRegion.getType() == PHPRegionTypes.PHP_OBJECT_OPERATOR) {
							prevRegion = phpScriptRegion.getPhpToken(prevRegion
									.getStart() - 1);
							if (prevRegion.getType() == PHPRegionTypes.PHP_VARIABLE) {
								String nextTokenString = textViewer
										.getDocument()
										.get(phpScriptRegion.getStart()
												+ nextRegion.getStart(),
												nextRegion.getLength());
								if (!"(".equals(nextTokenString)) {
									varOffset = phpScriptRegion.getStart()
											+ prevRegion.getStart();
									varLength = region.getEnd()
											- prevRegion.getStart();
								}
							}
						}
					} catch (BadLocationException e) {
						Logger.logException("Error retrieving the value\n", e);
					}
				}

				if (varLength > 0) {
					String variable = null;
					try {
						int[] variableRange = getVariableRange(textViewer,
								varOffset, varLength);
						variable = textViewer.getDocument().get(
								variableRange[0], variableRange[1]);
						variable = "<B>" + variable + " = </B>"
								+ getValue(debugTarget, variable);
					} catch (BadLocationException e) {
						Logger.logException("Error retrieving the value\n", e);
					}
					return variable;
				}
			}
		}
		return null;
	}

