	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.eclipse.ui.dialogs.ElementTreeSelectionDialog#createDialogArea(org
	 * .eclipse.swt.widgets.Composite)
	 */
	protected Control createDialogArea(Composite parent) {
		if (!fAllowExternalFiles) {
			return super.createDialogArea(parent);
		}
		Font font = parent.getFont();
		Composite composite = new Composite(parent, SWT.NULL);
		GridLayout layout = new GridLayout(1, false);
		layout.marginHeight = 0;
		layout.marginLeft = convertHorizontalDLUsToPixels(IDialogConstants.HORIZONTAL_MARGIN);
		layout.horizontalSpacing = convertHorizontalDLUsToPixels(IDialogConstants.HORIZONTAL_SPACING);
		composite.setLayout(layout);
		composite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
		composite.setFont(font);

		// Attach the regular dialog area
		super.createDialogArea(composite);

		// Attach the checkbox
		fExternalFilesBt = new Button(composite, SWT.CHECK);
		fExternalFilesBt.setText(Messages.ApplicationFileSelectionDialog_0);
		GridData data = new GridData();
		data.grabExcessHorizontalSpace = true;
		data.horizontalIndent = convertHorizontalDLUsToPixels(IDialogConstants.HORIZONTAL_MARGIN);
		fExternalFilesBt.setLayoutData(data);

		// Add a listener
		fExternalFilesBt.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(SelectionEvent e) {
				updateView(fExternalFilesBt.getSelection());
			}
		});

		// Set the current state as saved in the preferences.
		String shouldShowExternals = Platform.getPreferencesService().getString(PHPDebugUIPlugin.ID,
				SHOW_EXTERNAL_FILES, Boolean.toString(false), null);
		boolean show = Boolean.valueOf(shouldShowExternals).booleanValue();
		fExternalFilesBt.setSelection(show);
		updateView(show);

		return composite;
	}

