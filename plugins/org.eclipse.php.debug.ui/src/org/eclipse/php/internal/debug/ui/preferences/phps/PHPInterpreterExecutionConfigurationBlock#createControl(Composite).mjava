	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.eclipse.jface.preference.PreferencePage#createContents(org.eclipse
	 * .swt.widgets.Composite)
	 */
	protected Control createControl(Composite ancestor) {
		fControl = ancestor;
		Composite container = new Composite(ancestor, SWT.NONE);
		GridLayout layout = new GridLayout();
		layout.numColumns = 2;
		layout.marginHeight = 0;
		layout.marginWidth = 0;
		layout.makeColumnsEqualWidth = true;
		container.setLayout(layout);
		GridData gd = new GridData(GridData.FILL_BOTH);
		container.setLayoutData(gd);
		container.setFont(ancestor.getFont());

		Composite eeContainer = new Composite(container, SWT.NONE);
		layout = new GridLayout();
		layout.marginWidth = 0;
		eeContainer.setLayout(layout);
		eeContainer.setLayoutData(new GridData(GridData.FILL_BOTH));

		Label label = new Label(eeContainer, SWT.NONE);
		label.setFont(ancestor.getFont());
		label.setText(Messages.PHPInterpreterExecutionConfigurationBlock_0);
		label.setLayoutData(new GridData(SWT.FILL, 0, true, false));

		Table table = new Table(eeContainer, SWT.BORDER | SWT.SINGLE);
		table.setLayout(layout);
		table.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));
		fProfilesViewer = new TableViewer(table);
		fProfilesViewer.setContentProvider(new ArrayContentProvider());
		fProfilesViewer
				.setLabelProvider(new ExecutionEnvironmentsLabelProvider());
		fProfilesViewer.setComparator(new ViewerComparator());
		fProfilesViewer.setInput(PHPVersion.values());

		Composite jreContainer = new Composite(container, SWT.NONE);
		layout = new GridLayout();
		layout.marginWidth = 0;
		jreContainer.setLayout(layout);
		jreContainer.setLayoutData(new GridData(GridData.FILL_BOTH));

		label = new Label(jreContainer, SWT.NONE);
		label.setFont(ancestor.getFont());
		label.setText(Messages.PHPInterpreterExecutionConfigurationBlock_1);
		label.setLayoutData(new GridData(SWT.FILL, 0, true, false));

		table = new Table(jreContainer, SWT.CHECK | SWT.BORDER | SWT.SINGLE);
		table.setLayout(layout);
		table.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));
		fJREsViewer = new CheckboxTableViewer(table);
		fJREsViewer.setContentProvider(new ArrayContentProvider());
		fJREsViewer.setLabelProvider(new PHPExeLabelProvider());
		fJREsViewer.setInput(new PHPexeItem[0]);

		fProfilesViewer
				.addSelectionChangedListener(new ISelectionChangedListener() {
					public void selectionChanged(SelectionChangedEvent event) {
						PHPVersion version = (PHPVersion) ((IStructuredSelection) event
								.getSelection()).getFirstElement();
						PHPexeItem jre = versionToDefaultItem.get(version);
						fJREsViewer.setInput(getCompatibleItems(allItems,
								version));
						if (jre != null) {
							fJREsViewer
									.setCheckedElements(new Object[] { jre });
						} else {
							fJREsViewer.setCheckedElements(new Object[0]);
						}
					}

				});

		fJREsViewer.addCheckStateListener(new ICheckStateListener() {
			public void checkStateChanged(CheckStateChangedEvent event) {
				if (event.getChecked()) {
					Object element = event.getElement();
					versionToDefaultItem
							.put(
									(PHPVersion) ((IStructuredSelection) fProfilesViewer
											.getSelection()).getFirstElement(),
									(PHPexeItem) element);
					fJREsViewer.setCheckedElements(new Object[] { element });
				} else {
					versionToDefaultItem.remove(fJREsViewer.getInput());
				}

			}
		});

		Dialog.applyDialogFont(ancestor);
		return ancestor;
	}

