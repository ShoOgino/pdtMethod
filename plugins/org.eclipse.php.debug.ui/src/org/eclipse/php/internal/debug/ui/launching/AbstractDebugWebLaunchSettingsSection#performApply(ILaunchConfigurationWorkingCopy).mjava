	/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.php.internal.debug.ui.launching.
	 * IDebuggerLaunchSettingsSection#performApply(org.eclipse.debug.core.
	 * ILaunchConfigurationWorkingCopy)
	 */
	@Override
	public void performApply(ILaunchConfigurationWorkingCopy configuration) {
		if (breakpointGroup != null) {
			configuration.setAttribute(IDebugParametersKeys.FIRST_LINE_BREAKPOINT, breakOnFirstLine.getSelection());
		}
		if (tunnelGroup != null) {
			configuration.setAttribute(IPHPDebugConstants.USE_SSH_TUNNEL, debugThroughTunnel.getSelection());
			if (debugThroughTunnel.getSelection()) {
				configuration.setAttribute(IPHPDebugConstants.SSH_TUNNEL_USER_NAME, userName.getText().trim());
				/*
				 * We save a hash of the password and not the real one. This is
				 * only used to allow an apply when a password change happens.
				 * The real password saving is done through the secured storage
				 * right after that line.
				 */
				String passwordDigest = Digester.digest(password.getText().trim());
				if (passwordDigest == null) {
					// As a default, use the string hash.
					passwordDigest = String.valueOf(password.getText().trim().hashCode());
				}
				configuration.setAttribute(IPHPDebugConstants.SSH_TUNNEL_PASSWORD, passwordDigest);
				// Save to secured storage
				try {
					/*
					 * Note: At this point we write to the secure storage at any
					 * apply. This might put in the storage some un-needed keys,
					 * so we also scan the launch configurations on startup and
					 * make sure that the storage contains only what we need.
					 */
					if (!isSSHCredentialsChange) {
						/*
						 * We'll save to the secured storage only if the change
						 * was done outside text fields (that might contains the
						 * changes in the user-name and password as we type
						 * them). This flag will be off when the apply button is
						 * actually clicked (or when other widgets are
						 * triggering the apply call).
						 */
						PHPLaunchUtilities.getSecurePreferences(PHPLaunchUtilities.getDebugHost(getConfiguration()))
								.put(userName.getText(), password.getText().trim(), true /* encrypt */);
					}
				} catch (StorageException e) {
					Logger.logException("Error saving to the secured storage", //$NON-NLS-1$
							e);
				}
			} else {
				configuration.setAttribute(IPHPDebugConstants.SSH_TUNNEL_USER_NAME, ""); //$NON-NLS-1$
				configuration.setAttribute(IPHPDebugConstants.SSH_TUNNEL_PASSWORD, ""); //$NON-NLS-1$
			}
		}
		isSSHCredentialsChange = false; // Reset this flag here.
	}

