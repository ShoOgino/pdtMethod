	/**
	 * This method is called upon plug-in activation
	 */
	@SuppressWarnings("unchecked")
	public void start(BundleContext context) throws Exception {
		super.start(context);
		showViewListener = new ShowViewListener();
		DebugPlugin.getDefault().addDebugEventListener(showViewListener);

		// Install the TerminateDebugLaunchListener, which is responsible of
		// asking
		// the user to return to the PHP perspective when all the debug sessions
		// where terminated.
		finishDebugLaunchListener = new TerminateDebugLaunchListener();
		DebugPlugin.getDefault().getLaunchManager().addLaunchListener(finishDebugLaunchListener);

		// Install the FirstSelectionDebugLaunchListener, which is responsible
		// of selecting the
		// new launch in the LaunchView.
		firstSelectionDebugLaunchListener = new FirstSelectionDebugLaunchListener();
		DebugPlugin.getDefault().getLaunchManager().addLaunchListener(firstSelectionDebugLaunchListener);

		// Register the PHPDebugElementAdapterFactory.
		// To make sure we are the first adapter factory for the IVariable
		// class, we insert the
		// factory before any other factory.
		AdapterManager manager = (AdapterManager) Platform.getAdapterManager();
		List<IAdapterFactory> list = (List<IAdapterFactory>) manager.getFactories().get(IVariable.class.getName());
		PHPDebugElementAdapterFactory propertiesFactory = new PHPDebugElementAdapterFactory();
		manager.registerAdapters(propertiesFactory, IVariable.class);
		manager.registerAdapters(propertiesFactory, IWatchExpression.class);
		manager.registerAdapters(propertiesFactory, PHPLaunch.class);
		manager.registerAdapters(propertiesFactory, PHPMultiDebugTarget.class);
		manager.registerAdapters(propertiesFactory, DBGpMultiSessionTarget.class);
		// In case the list had some factories, make sure our factory is the
		// first in the list.
		if (list != null && list.size() > 1) {
			list.remove(propertiesFactory);
			list.add(0, propertiesFactory);
		}
		// Perform a clean on the secured storage, which might contain SSH
		// tunnels passwords that no longer being used by any of the defined
		// launch configurations.
		cleanSecuredStorage();
		EvaluationContextManager.startup();
	}

