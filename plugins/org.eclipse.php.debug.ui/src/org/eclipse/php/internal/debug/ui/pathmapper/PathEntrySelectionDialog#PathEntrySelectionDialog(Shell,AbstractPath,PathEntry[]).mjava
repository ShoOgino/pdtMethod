	/**
	 * Constructor
	 * @param shell
	 * @param path Abstract path of the file to match
	 * @param files Files to choose
	 */
	public PathEntrySelectionDialog(Shell shell, AbstractPath path, PathEntry[] pathEntries) {
		super(shell);
		this.pathEntries = pathEntries;
		this.comparator = Collections.reverseOrder(new BestMatchPathComparator(path));

		// Set dummy selection history to avoid null pointer exception
		setSelectionHistory(new SelectionHistory() {
			protected Object restoreItemFromMemento(IMemento memento) {
				return null;
			}
			protected void storeItemToMemento(Object item, IMemento memento) {
			}
		});

		setTitle("Select local resource that matches remote file");
		setMessage(NLS.bind("Select local resource that matches remote file ''{0}''\n\nUse pattern to filter results (? = any character, * = any string):", path.toString()));
		setListLabelProvider(createListLabelProvider());
		setDetailsLabelProvider(createDetailsLabelProvider());
	}

