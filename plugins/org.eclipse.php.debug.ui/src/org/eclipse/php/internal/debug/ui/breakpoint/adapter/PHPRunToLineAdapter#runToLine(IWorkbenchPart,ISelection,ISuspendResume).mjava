	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.eclipse.debug.ui.actions.IRunToLineTarget#runToLine(org.eclipse.ui
	 * .IWorkbenchPart, org.eclipse.jface.viewers.ISelection,
	 * org.eclipse.debug.core.model.ISuspendResume)
	 */
	public void runToLine(IWorkbenchPart part, ISelection selection,
			ISuspendResume target) throws CoreException {
		IEditorPart editorPart = (IEditorPart) part;
		IEditorInput input = editorPart.getEditorInput();
		String errorMessage = null;
		if (input == null) {
			errorMessage = PHPDebugUIMessages.PHPRunToLineAdapter_0;
		} else {
			ITextEditor textEditor = (ITextEditor) editorPart;
			IDocument document = textEditor.getDocumentProvider().getDocument(
					input);
			if (document == null) {
				errorMessage = PHPDebugUIMessages.PHPRunToLineAdapter_1;
			} else {
				ITextSelection textSelection = (ITextSelection) selection;

				int lineNumber = 0;
				try {
					lineNumber = document.getLineOfOffset(textSelection
							.getOffset()) + 1;
				} catch (BadLocationException e) {
				}
				// Figure out if the selected line is a valid line to place a
				// temporary breakpoint for the run-to-line
				int validLinePosition = PHPBreakpointProvider.getValidPosition(
						document, lineNumber);
				if (validLinePosition < 0) {
					StatusLineMessageTimerManager.setErrorMessage(
							PHPDebugUIMessages.CannotRunToLine, 1000, true); // hide
																				// message
																				// after
																				// 1
																				// second
					return;
				} else {
					int validLineNumber = 0;
					try {
						validLineNumber = document
								.getLineOfOffset(validLinePosition) + 1;
						if (validLineNumber != lineNumber) {
							StatusLineMessageTimerManager.setErrorMessage(
									PHPDebugUIMessages.CannotRunToLine, 1000,
									true); // hide message after 1 second
							return;
						}
					} catch (BadLocationException ble) {
						StatusLineMessageTimerManager.setErrorMessage(
								PHPDebugUIMessages.CannotRunToLine, 1000, true); // hide
																					// message
																					// after
																					// 1
																					// second
						return;
					}
				}
				if (lineNumber > 0) {
					if (getValidPosition(document, lineNumber) != -1) {
						if (target instanceof IAdaptable) {
							IDebugTarget debugTarget = (IDebugTarget) ((IAdaptable) target)
									.getAdapter(IDebugTarget.class);
							if (debugTarget != null) {
								IFile file = getFile(textEditor);
								// TODO: we need a to call a debugger specific
								// api, so an extension point is
								// required here for different debuggers to plug
								// into.
								if (debugTarget instanceof PHPDebugTarget) {
									IBreakpoint breakpoint = new PHPRunToLineBreakpoint(
											file, lineNumber);
									RunToLineHandler handler = new RunToLineHandler(
											debugTarget, target, breakpoint);
									handler.run(new NullProgressMonitor());
								} else if (debugTarget instanceof DBGpTarget) {
									DBGpTarget t = (DBGpTarget) debugTarget;
									t.runToLine(file, lineNumber);
								}
								return;
							}
						}
					} else {
						errorMessage = PHPDebugUIMessages.PHPRunToLineAdapter_2;
					}
				} else {
					errorMessage = PHPDebugUIMessages.PHPRunToLineAdapter_2;
				}
			}
		}
		throw new CoreException(
				new Status(IStatus.ERROR, PHPDebugUIPlugin.getID(),
						IPHPDebugConstants.INTERNAL_ERROR, errorMessage, null));
	}

