	/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.part.WorkbenchPart#createPartControl(org.eclipse.swt.
	 * widgets .Composite)
	 */
	@Override
	public void createPartControl(Composite parent) {
		int styles = SWT.V_SCROLL | SWT.H_SCROLL | SWT.MULTI | SWT.FULL_SELECTION;
		fSourceViewer = new StructuredTextViewer(parent, null, null, false, styles);
		fSourceViewer.setEditable(false);
		fSourceViewer.configure(new StructuredTextViewerConfigurationHTML());
		getSite().getWorkbenchWindow().getSelectionService().addSelectionListener(IDebugUIConstants.ID_DEBUG_VIEW,
				this);
		getSite().setSelectionProvider(fSourceViewer.getSelectionProvider());
		setBackgroundColor();
		fTerminateListener = new IDebugEventSetListener() {
			@Override
			public void handleDebugEvents(DebugEvent[] events) {
				if (events != null) {
					int size = events.length;
					for (int i = 0; i < size; i++) {
						Object obj = events[i].getSource();
						if (!(obj instanceof IPHPDebugTarget || obj instanceof PHPThread))
							continue;
						if (events[i].getKind() == DebugEvent.TERMINATE || events[i].getKind() == DebugEvent.SUSPEND) {
							final IPHPDebugTarget target;
							if (obj instanceof IPHPDebugTarget) {
								target = (IPHPDebugTarget) obj;
							} else {
								target = (IPHPDebugTarget) ((PHPThread) obj).getDebugTarget();
							}
							Job job = new UIJob(PHPDebugUIMessages.PHPDebugUIPlugin_1) {
								@Override
								public IStatus runInUIThread(IProgressMonitor monitor) {
									update(target);
									return Status.OK_STATUS;
								}
							};
							job.schedule();
						}
					}
				}
			}
		};
		DebugPlugin.getDefault().addDebugEventListener(fTerminateListener);
		if (fPartListener == null) {
			fPartListener = new DebugViewPartListener();
			getSite().getPage().addPartListener(fPartListener);
		}
	}

