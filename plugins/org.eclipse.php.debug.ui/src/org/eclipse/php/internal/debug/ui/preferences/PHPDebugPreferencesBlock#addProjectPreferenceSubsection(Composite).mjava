	private void addProjectPreferenceSubsection(Composite composite) {
		Group defultServerGroup = new Group(composite, SWT.NONE);
		defultServerGroup.setText(PHPDebugUIMessages.PHPDebugPreferencesBlock_0);
		defultServerGroup.setFont(composite.getFont());
		GridLayout layout = new GridLayout();
		layout.numColumns = 3;
		layout.verticalSpacing = 10;
		defultServerGroup.setLayout(layout);
		defultServerGroup.setLayoutData(new GridData(GridData.FILL_BOTH));

		Label label = addLabelControl(defultServerGroup, PHPDebugUIMessages.PHPDebugPreferencePage_9,
				ServersManager.DEFAULT_SERVER_PREFERENCES_KEY);
		GridData gd = new GridData();
		gd.widthHint = 90;
		label.setLayoutData(gd);
		fDefaultServer = addCombo(defultServerGroup, 2);
		addLink(defultServerGroup, PHPDebugUIMessages.PHPDebugPreferencePage_serversLink, SERVERS_PAGE_ID);
		label = addLabelControl(defultServerGroup, PHPDebugUIMessages.PHPDebugPreferencesBlock_ServerDebugger, null);
		gd = new GridData();
		gd.widthHint = 90;
		label.setLayoutData(gd);
		fServerDebugger = new Label(defultServerGroup, SWT.NONE);
		gd = new GridData(GridData.FILL_HORIZONTAL);
		gd.horizontalIndent = 2;
		fServerDebugger.setLayoutData(gd);

		Group defultCLIGroup = new Group(composite, SWT.NONE);
		defultCLIGroup.setText(PHPDebugUIMessages.PHPDebugPreferencesBlock_CLISettings);
		defultCLIGroup.setFont(composite.getFont());
		layout = new GridLayout();
		layout.numColumns = 3;
		layout.verticalSpacing = 10;
		defultCLIGroup.setLayout(layout);
		defultCLIGroup.setLayoutData(new GridData(GridData.FILL_BOTH));

		label = addLabelControl(defultCLIGroup, PHPDebugUIMessages.PHPDebugPreferencePage_12,
				PHPDebugCorePreferenceNames.DEFAULT_PHP);
		gd = new GridData();
		gd.widthHint = 90;
		label.setLayoutData(gd);
		fDefaultPHPExe = addCombo(defultCLIGroup, 2);
		addLink(defultCLIGroup, PHPDebugUIMessages.PHPDebugPreferencePage_installedPHPsLink, PHP_EXE_PAGE_ID);
		label = addLabelControl(defultCLIGroup, PHPDebugUIMessages.PHPDebugPreferencesBlock_CLIDebugger, null);
		gd = new GridData();
		gd.widthHint = 90;
		label.setLayoutData(gd);
		fCLIDebugger = new Label(defultCLIGroup, SWT.NONE);
		gd = new GridData(GridData.FILL_HORIZONTAL);
		gd.horizontalIndent = 2;
		fCLIDebugger.setLayoutData(gd);

		new Label(composite, SWT.NONE); // dummy label

		Group encodingGroup = new Group(composite, SWT.NONE);
		encodingGroup.setText(PHPDebugUIMessages.PHPDebugPreferencesBlock_2);
		encodingGroup.setLayout(new GridLayout(2, false));
		encodingGroup.setLayoutData(new GridData(GridData.FILL_BOTH));

		addLabelControl(encodingGroup, PHPDebugUIMessages.PHPDebugPreferencesAddon_debugTransferEncoding,
				PHPDebugCorePreferenceNames.TRANSFER_ENCODING);
		fDebugEncodingSettings = addEncodingSettings(encodingGroup);

		addLabelControl(encodingGroup, PHPDebugUIMessages.PHPDebugPreferencesAddon_debugOutputEncoding,
				PHPDebugCorePreferenceNames.OUTPUT_ENCODING);
		fOutputEncodingSettings = addEncodingSettings(encodingGroup);

		ModifyListener modifyListener = new ModifyListener() {
			public void modifyText(ModifyEvent e) {
				boolean isValid = isValidEncoding(((Combo) e.getSource()).getText());
				if (isValid) {
					propertyPage.setErrorMessage(null);
				} else {
					propertyPage.setErrorMessage(PHPDebugUIMessages.PHPDebugPreferencesAddon_unsupportedEncoding);
				}
				propertyPage.setValid(isValid);
			}
		};
		fDebugEncodingSettings.addModifyListener(modifyListener);
		fOutputEncodingSettings.addModifyListener(modifyListener);

		new Label(composite, SWT.NONE); // dummy label
		if (isPropertyPage())
			createBaseURLGroup(composite);

		fStopAtFirstLine = addCheckBox(composite, PHPDebugUIMessages.PHPDebugPreferencePage_1,
				PHPDebugCorePreferenceNames.STOP_AT_FIRST_LINE, 0);

		fDefaultPHPExe.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(SelectionEvent e) {
				PHPexeItem item = PHPexes.getInstance().getItem(fDefaultPHPExe.getText());
				if (item != null) {
					fCLIDebugger.setText(PHPDebuggersRegistry.getDebuggerName(item.getDebuggerID()));
				} else {
					fCLIDebugger.setText(PHPDebugUIMessages.PHPDebugPreferencePage_noExeDefined);
				}
			}
		});

		fDefaultServer.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(SelectionEvent e) {
				try {
					PHPDebugPreferencesBlock.this.refreshAutoGeneratedBaseURLDisplay();
					String serverDebuggerId = PHPDebugPlugin.getDebuggerId(fDefaultServer.getText());
					fServerDebugger.setText(PHPDebuggersRegistry.getDebuggerName(serverDebuggerId));
				} catch (MalformedURLException e1) {
					// safe Malformed URL - exisiting server
				}
			}
		});
	}

