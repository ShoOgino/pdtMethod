	/**
	 * Creates this control inside the given control.
	 * 
	 * @param ancestor
	 *            containing control
	 */
	public void createControl(final Composite ancestor) {
		// Create a 'cosmetic' composite to fit the dialog style of margins.
		Composite comp = new Composite(ancestor, SWT.NULL);
		GridLayout layout = new GridLayout();
		comp.setLayout(layout);
		GridData data = new GridData(GridData.FILL_BOTH);
		comp.setLayoutData(data);

		final Group parent = new Group(comp, SWT.NULL);
		parent.setText(PHPDebugUIMessages.PHPDebuggersTable_installedDebuggers);
		layout = new GridLayout();
		layout.numColumns = 2;
		layout.marginHeight = 0;
		layout.marginWidth = 0;
		parent.setLayout(layout);
		final Font font = ancestor.getFont();
		parent.setFont(font);
		data = new GridData(GridData.FILL_BOTH);
		parent.setLayoutData(data);

		final Table table = new Table(parent, SWT.BORDER | SWT.MULTI | SWT.FULL_SELECTION);

		data = new GridData(GridData.FILL_BOTH);
		data.heightHint = 35;
		table.setLayoutData(data);
		table.setFont(font);

		table.setHeaderVisible(true);
		table.setLinesVisible(true);

		final TableLayout tableLayout = new TableLayout();
		table.setLayout(tableLayout);

		final TableColumn debuggerTypeColumn = new TableColumn(table, SWT.NULL);
		debuggerTypeColumn.setText(PHPDebugUIMessages.PHPDebuggersTable_debuggerType);

		fPHPDebuggers = new CheckboxTableViewer(table);
		fPHPDebuggers.setLabelProvider(new PHPDebuggersLabelProvider());
		fPHPDebuggers.setContentProvider(new PHPDebuggersContentProvider());
		fPHPDebuggers.addSelectionChangedListener(new ISelectionChangedListener() {
			@Override
			public void selectionChanged(final SelectionChangedEvent evt) {
				enableButtons();
			}
		});

		fPHPDebuggers.addDoubleClickListener(new IDoubleClickListener() {
			@Override
			public void doubleClick(final DoubleClickEvent e) {
				if (!fPHPDebuggers.getSelection().isEmpty()) {
					editSettings();
				}
			}
		});

		final Composite buttons = new Composite(parent, SWT.NULL);
		buttons.setLayoutData(new GridData(GridData.VERTICAL_ALIGN_BEGINNING));
		layout = new GridLayout();
		layout.marginHeight = 0;
		layout.marginWidth = 0;
		buttons.setLayout(layout);
		buttons.setFont(font);

		fSettingsButton = createPushButton(buttons, PHPDebugUIMessages.PHPDebuggersTable_configure);
		fSettingsButton.addListener(SWT.Selection, new Listener() {
			@Override
			public void handleEvent(final Event evt) {
				editSettings();
			}
		});

		fPHPDebuggers.setComparator(new ViewerComparator() {
			@Override
			public int compare(Viewer viewer, Object e1, Object e2) {
				if (e1 instanceof IDebuggerConfiguration && e2 instanceof IDebuggerConfiguration) {
					return ((IDebuggerConfiguration) e2).getName().compareTo(((IDebuggerConfiguration) e1).getName());
				}
				return super.compare(viewer, e1, e2);
			}
		});
		configureTableResizing(parent, buttons, table, debuggerTypeColumn);

		fillWithWorkspaceDebuggers();
		enableButtons();
		Display.getDefault().asyncExec(new Runnable() {
			@Override
			public void run() {
				resizeTable(parent, buttons, table, debuggerTypeColumn);
			}
		});
	}

