	/*
	 * Clean the secure storage from any SSH Tunnel definitions that are no
	 * longer used by any of the launch configuration definitions.
	 */
	private void cleanSecuredStorage() {
		Job cleanStorageJob = new Job("Cleans the PHP Tunnels Storage") {
			protected IStatus run(IProgressMonitor monitor) {
				try {
					// First, collect all the tunnel definitions in the launch
					// configurations.
					HashMap<String, List<String>> hostToUsers = new HashMap<String, List<String>>();
					ILaunchManager launchManager = DebugPlugin.getDefault()
							.getLaunchManager();
					ILaunchConfigurationType configurationType = launchManager
							.getLaunchConfigurationType(IPHPDebugConstants.PHPServerLaunchType);
					ILaunchConfiguration[] configs = launchManager
							.getLaunchConfigurations(configurationType);
					for (ILaunchConfiguration configuration : configs) {
						addTunnelConfiguration(configuration, hostToUsers);
					}
					// Then, check with the secure-storage node and remove
					// anything that should not be there.
					ISecurePreferences root = SecurePreferencesFactory
							.getDefault();
					ISecurePreferences node = root
							.node(IPHPDebugConstants.SSH_TUNNEL_SECURE_PREF_NODE);
					String[] listedHosts = node.childrenNames();
					// For each host that we have in the secured storage, check
					// that it's existing in the launch configurations and that
					// it contains
					// only the user names that are defined.
					// In any other case, remove the item from the storage (a
					// host node, or a user node).
					for (String host : listedHosts) {
						if (!hostToUsers.containsKey(host)) {
							ISecurePreferences hostNode = node.node(host);
							hostNode.removeNode();
						} else {
							if (node.nodeExists(host)) {
								ISecurePreferences hostNode = node.node(host);
								// holds the user names field in the secure
								// preference
								String[] usersKeys = hostNode.keys();
								List<String> usersList = hostToUsers.get(host);
								for (String userNode : usersKeys) {
									if (!usersList.contains(userNode)) {
										hostNode.remove(userNode);
									}
								}
							}
						}
					}
				} catch (Exception e) {
					Logger
							.logException(
									"Error while cleaning up the php debug tunnels credentials from the secured storage",
									e);
				}
				return Status.OK_STATUS;
			}
		};
		cleanStorageJob.setSystem(true);
		cleanStorageJob.setPriority(Job.LONG);
		// No rush. We can schedule it to run a few seconds after the loading.
		cleanStorageJob.schedule(30000L);
	}

