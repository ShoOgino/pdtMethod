	/**
	 * Creates this block's control in the given control.
	 * 
	 * @param anscestor containing control
	 */
	public void createControl(final Composite ancestor) {
		final Font font = ancestor.getFont();
		Composite composite = null;
		if (isTitled) {
			Group g = new Group(ancestor, SWT.NULL);
			if (fTitle == null)
				fTitle = PHPDebugUIMessages.PHPexesComboBlock_3;
			g.setText(fTitle);
			composite = g;
		} else {
			composite = new Composite(ancestor, SWT.NULL);
		}
		GridLayout layout = new GridLayout(2, false);
		composite.setLayout(layout);
		GridData gridData = new GridData(GridData.FILL_HORIZONTAL);
		composite.setLayoutData(gridData);
		composite.setFont(font);
		fControl = composite;

		GridData data;
		// Add a top-left composite that will hold the label and the combo of the php debuggers
		Composite topLeft = new Composite(composite, SWT.NONE);
		layout = new GridLayout(2, false);
		topLeft.setLayout(layout);
		topLeft.setFont(font);
		// Add the label
		Label debuggerLabel = new Label(topLeft, SWT.WRAP);
		debuggerLabel.setText(PHPDebugUIMessages.PhpDebugPreferencePage_phpDebugger);
		data = new GridData(GridData.BEGINNING);
		data.widthHint = 100;
		debuggerLabel.setLayoutData(data);
		// Add the debuggers combo
		fDebuggersCombo = new Combo(topLeft, SWT.DROP_DOWN | SWT.READ_ONLY);
		fDebuggersCombo.setFont(font);

		data = new GridData(GridData.FILL_HORIZONTAL);
		data.grabExcessHorizontalSpace = true;
		fDebuggersCombo.setLayoutData(data);
		fDebuggersCombo.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(final SelectionEvent e) {
				String selectedDebuggerID = getSelectedDebuggerId();
				PHPexeItem[] items = exes.getItems(selectedDebuggerID);
				List<PHPexeItem> itemsList;
				if (items != null) {
					itemsList = Arrays.asList(items);
				} else {
					itemsList = new ArrayList<PHPexeItem>(0);
				}
				setPHPexes(itemsList);
				fireSelectionChanged();
				signalExecutablesCombo();
			}
		});

		// add a dummy label to fill in the missing column
		Label dummy = new Label(composite, SWT.NONE);
		dummy.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL));

		// Add a bottom-left composite that will hold the label and the combo of the php executables
		Composite bottomLeft = new Composite(composite, SWT.NONE);
		layout = new GridLayout(2, false);
		bottomLeft.setLayout(layout);
		bottomLeft.setFont(font);
		data = gridData;
		bottomLeft.setLayoutData(data);
		// Add the label
		Label executableLabel = new Label(bottomLeft, SWT.WRAP);
		executableLabel.setText("PHP Executable:");
		data = new GridData(GridData.BEGINNING);
		data.widthHint = 100;
		executableLabel.setLayoutData(data);
		fExecutablesCombo = new Combo(bottomLeft, SWT.DROP_DOWN | SWT.READ_ONLY);
		fExecutablesCombo.setFont(font);
		data = new GridData(GridData.FILL_HORIZONTAL);
		data.grabExcessHorizontalSpace = true;
		fExecutablesCombo.setLayoutData(data);
		fExecutablesCombo.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(final SelectionEvent e) {
				setPHPexe(getPHPexe());
			}
		});
		// Add the php executables link to the right side of the composite
		link = new Link(composite, SWT.NONE);
		data = new GridData();
		data.horizontalSpan = 1;
		link.setLayoutData(data);
		link.setFont(font);
		link.setText(PHPDebugUIMessages.PhpDebugPreferencePage_installedPHPsLink);
		link.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(SelectionEvent e) {
				PHPexeItem selected = getPHPexe();
				new ShowPHPsPreferences().run(null);
				fillWithWorkspacePHPexes();
				if (phpExecutables.contains(selected)) {
					String name = selected.getName() + " (" + selected.getPhpEXE().toString() + ")"; //$NON-NLS-1$ //$NON-NLS-2$
					fExecutablesCombo.select(fExecutablesCombo.indexOf(name));
				}
			}
		});

		checkDeuggers();
		fillDebuggers();
		fillWithWorkspacePHPexes();
	}

