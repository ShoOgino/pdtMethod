	void createSettings(String debuggerId) {
		IUniqueIdentityElement debuggerOwner = getDebuggerOwner();
		if (debuggerOwner == null || debuggerId == null)
			return;
		IDebuggerSettings settings = DebuggerSettingsManager.INSTANCE
				.findSettings(debuggerOwner.getUniqueId(), debuggerId);
		boolean pack = false;
		if (debuggerSettingsSection != null) {
			debuggerSettingsComposite.dispose();
			pack = true;
		}
		// Rebuild settings composite
		debuggerSettingsComposite = new Composite(mainComposite, SWT.NONE);
		debuggerSettingsComposite.setLayout(new GridLayout());
		debuggerSettingsComposite.setLayoutData(new GridData(SWT.FILL,
				SWT.FILL, true, true));
		if (PHPDebuggersRegistry.NONE_DEBUGGER_ID.equals(debuggerId)) {
			debuggerSettingsSection = new EmptySettingsSection(
					debuggerSettingsComposite);
		} else if (settings == null) {
			debuggerSettingsSection = new DebuggerUnsupportedSettingsSection(
					this, debuggerSettingsComposite);
		} else {
			debuggerSettingsWC = getSettingsWC(debuggerId, settings);
			IDebuggerSettingsProvider provider = DebuggerSettingsProviderRegistry
					.getProvider(debuggerId);
			IDebuggerSettingsSectionBuilder sectionBuilder = DebuggerSettingsSectionBuildersRegistry
					.getBuilder(provider.getId());
			debuggerSettingsSection = sectionBuilder.build(this,
					debuggerSettingsComposite, debuggerSettingsWC);
		}
		if (!debuggerSettingsSection.canTest())
			debuggerTest.setVisible(false);
		else
			debuggerTest.setVisible(true);
		this.getParent().layout(true, true);
		if (pack) {
			this.getShell().pack(true);
		}
	}

