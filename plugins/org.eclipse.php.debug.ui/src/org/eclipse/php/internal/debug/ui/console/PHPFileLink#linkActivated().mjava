	/* (non-Javadoc)
	 * @see org.eclipse.debug.ui.console.IConsoleHyperlink#linkActivated()
	 */
	public void linkActivated() {
		IEditorPart editorPart = null;
		DOMModelForPHP domModel = null;
		try {
			if (fFile instanceof File) {
				FileStoreEditorInput editorInput = new FileStoreEditorInput(new LocalFile((File)fFile));
				editorPart = EditorUtility.openInEditor(editorInput, PHPUiConstants.PHP_EDITOR_ID, false);
			} else if (fFile instanceof ExternalFileDecorator) {
				ExternalFileDecorator externalFile = (ExternalFileDecorator)fFile;
				FileStoreEditorInput editorInput = new FileStoreEditorInput(new LocalFile(new File(externalFile.getFullPath().toString())));
				editorPart = EditorUtility.openInEditor(editorInput, PHPUiConstants.PHP_EDITOR_ID, false);
			} else if (fFile instanceof IFile) {
				editorPart = EditorUtility.openInEditor(new FileEditorInput((IFile) fFile), PHPUiConstants.PHP_EDITOR_ID, false);
			} else {
				editorPart = EditorUtility.openInEditor(fFile, false);
			}
			if (editorPart != null && fFileLineNumber > 0 && editorPart instanceof StructuredTextEditor) {
				if (fFileOffset < 0) {
					IRegion region = ((StructuredTextEditor) editorPart).getTextViewer().getDocument().getLineInformation(fFileLineNumber - 1);
					fFileOffset = region.getOffset();
					fFileLength = region.getLength();
				}
			}
		} catch (PartInitException e) {
			Logger.logException(e);
		} catch (BadLocationException e) {
			Logger.logException(e);
		} catch (NullPointerException npe) {
			Logger.logException(npe);
		} finally {
			if (editorPart != null) {
				EditorUtility.revealInEditor(editorPart, fFileOffset, fFileLength);
				if (domModel != null) {
					domModel.releaseFromRead();
				}
			}
		}
	}

