	/* (non-Javadoc)
	 * @see org.eclipse.debug.ui.console.IConsoleHyperlink#linkActivated()
	 */
	public void linkActivated() {
		IEditorPart editorPart = null;
		DOMModelForPHP domModel = null;
		try {
			if (fFile instanceof PHPCodeData) {
				IPath path = Path.fromOSString(((PHPCodeData) fFile).getName());
				fFile = new ExternalFileDecorator(ResourcesPlugin.getWorkspace().getRoot().getFile(path), path.getDevice()) {
					/*
					 * Override the default IFile exists method to allow the retrival of the DOM model.
					 */
					public boolean exists() {
						return true; //getFullPath().toFile().exists();
					}
				};
			}
			if (fFile instanceof IFile) {
				editorPart = EditorUtility.openInEditor(new FileEditorInput((IFile) fFile), PHPUiConstants.PHP_EDITOR_ID, false);
			} else {
				editorPart = EditorUtility.openInEditor(fFile, false);
			}
			if (editorPart != null && fFileLineNumber > 0) {
				if (fFileOffset < 0) {
					domModel = ((DOMModelForPHP) StructuredModelManager.getModelManager().getModelForRead((IFile) fFile));
					IRegion region = domModel.getDocument().getStructuredDocument().getLineInformation(fFileLineNumber - 1);
					fFileOffset = region.getOffset();
					fFileLength = region.getLength();
				}
			}
		} catch (PartInitException e) {
			Logger.logException(e);
		} catch (BadLocationException e) {
			Logger.logException(e);
		} catch (IOException e) {
			Logger.logException(e);
		} catch (CoreException e) {
			Logger.logException(e);
		} catch (NullPointerException npe) {
			Logger.logException(npe);
		} finally {
			if (editorPart != null) {
				EditorUtility.revealInEditor(editorPart, fFileOffset, fFileLength);
				if (domModel != null) {
					domModel.releaseFromRead();
				}
			}
		}
	}

