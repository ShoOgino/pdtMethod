	public IStatus addBreakpoint(IDocument document, IEditorInput input, int lineNumber, int offset)
			throws CoreException {

		// check if file is a remote storage one
		if (input instanceof RemoteFileStorageEditorInput) {
			RemoteFileStorage storage = (RemoteFileStorage) ((RemoteFileStorageEditorInput) input).getStorage();
			this.originalURL = storage.getOriginalURL();
		}

		// check if this is a history file and if it is so - skip adding it
		Object storage = input.getAdapter(IStorage.class);
		if (storage instanceof IFileState) {
			return new Status(IStatus.CANCEL, PHPDebugUIPlugin.getID(),
					PHPDebugUIMessages.DefaultPHPBreakpointProvider_Breakpoint_cannot_be_installed_on_history_file);
		}

		// check if there is a valid position to set breakpoint
		int pos = getValidPosition(document, lineNumber);

		// calculate the line number here so both workspace files AND externals
		// will get it
		try {
			lineNumber = document.getLineOfOffset(pos) + 1;
		} catch (BadLocationException e) {
			Logger.logException(e);
			return new Status(IStatus.ERROR, PHPDebugUIPlugin.getID(),
					PHPDebugUIMessages.DefaultPHPBreakpointProvider_0);
		}

		IStatus status = null;
		IBreakpoint point = null;
		if (pos >= 0) {

			IResource resource = getResourceFromInput(input);

			Map<String, String> attributes = new HashMap<String, String>();
			ISourceModule modelElement = DLTKUIPlugin.getEditorInputModelElement(input);

			if (modelElement != null) {
				attributes.put(IMarker.LOCATION, modelElement.getPath().toString());
			}

			// Calculate secondary ID
			String secondaryId = null;
			if (input instanceof IFileEditorInput) {
				IFileEditorInput fileEditorInput = (IFileEditorInput) input;
				if (fileEditorInput.getFile().isLinked()) {
					secondaryId = fileEditorInput.getFile().getRawLocation().toString();
				}
			} else if (input instanceof IURIEditorInput || (input instanceof NonExistingPHPFileEditorInput)) {

				if (input instanceof IPlatformIndependentPathEditorInput) {
					secondaryId = ((IPlatformIndependentPathEditorInput) input).getPath();
				} else if (input instanceof IURIEditorInput) {
					secondaryId = URIUtil.toPath(((IURIEditorInput) input).getURI()).toOSString();
				} else {
					secondaryId = ((NonExistingPHPFileEditorInput) input).getPath(input).toString();
				}

			} else if (input instanceof IStorageEditorInput) {
				storage = ((IStorageEditorInput) input).getStorage();
				if (storage instanceof IModelElement) {
					IModelElement element = (IModelElement) storage;
					secondaryId = EnvironmentPathUtils.getFile(element).getFullPath().toPortableString();
				}
			}

			if (secondaryId != null) {
				attributes.put(StructuredResourceMarkerAnnotationModel.SECONDARY_ID_KEY, secondaryId);
			}

			if (findBreakpointMarker(secondaryId, resource, lineNumber) == null) {
				IRegion region = null;
				int charStart = -1;
				int charEnd = -1;
				try {
					region = document.getLineInformationOfOffset(pos);
					charStart = region.getOffset();
					charEnd = charStart + region.getLength();
				} catch (BadLocationException e) {
					PHPDebugUIPlugin.log(e);
				}
				point = createBreakpoint(input, resource, lineNumber, charStart, charEnd, attributes);
			}
		}

		if (point == null) {
			showErrorMessage();
		}

		if (status == null) {
			status = new Status(IStatus.OK, PHPDebugUIPlugin.getID(), IStatus.OK,
					MessageFormat.format(PHPDebugUIMessages.BreakpointCreated_1, new Object[] {}), null);
		}
		return status;
	}

