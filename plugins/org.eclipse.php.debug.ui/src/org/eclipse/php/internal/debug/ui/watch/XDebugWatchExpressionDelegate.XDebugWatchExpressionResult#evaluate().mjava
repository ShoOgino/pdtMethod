		void evaluate() {
			String watchExpression = expressionText.trim();
			Node result = null;
			String stackLevel = stackFrame.getStackLevel();
			Kind exprKind = Kind.EVAL;
			if (watchExpression.startsWith("$")) {//$NON-NLS-1$
				ISourceRange enclosingIdentifier = PHPTextSequenceUtilities.getEnclosingIdentifier(watchExpression, 0);
				if (enclosingIdentifier != null && enclosingIdentifier.getLength() == watchExpression.length() + 1) {
					exprKind = Kind.STACK;
				}
			}
			switch (exprKind) {
			case STACK: {
				result = debugTarget.getProperty(watchExpression, stackLevel, 0);
				if (result == null || DBGpResponse.REASON_ERROR.equals(result.getNodeName())) {
					// Check if it is not super global property
					stackLevel = "-1"; //$NON-NLS-1$
					result = debugTarget.getProperty(watchExpression, stackLevel, 0);
				}
				break;
			}
			default:
				result = debugTarget.eval(watchExpression);
				break;
			}
			if (result != null) {
				IVariable tempVar;
				switch (exprKind) {
				case STACK: {
					tempVar = new DBGpStackVariable(debugTarget, result, Integer.valueOf(stackLevel));
					break;
				}
				default:
					tempVar = new DBGpEvalVariable(debugTarget, watchExpression, result);
					break;
				}
				evalResult = null;
				try {
					evalResult = tempVar.getValue();
					if (evalResult == null) {
						hasErrors = true;
					}
				} catch (Exception e) {
					hasErrors = true;
				}
			} else {
				hasErrors = true;
			}
		}

