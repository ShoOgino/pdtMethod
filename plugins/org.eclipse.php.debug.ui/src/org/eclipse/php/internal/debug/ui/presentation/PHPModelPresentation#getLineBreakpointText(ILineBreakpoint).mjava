	protected String getLineBreakpointText(ILineBreakpoint breakpoint) {
		IMarker marker = breakpoint.getMarker();
		IResource resource = marker.getResource();
		try {
			Integer lineNumber = (Integer) marker.getAttribute(IMarker.LINE_NUMBER);
			String fileName = null;
			if (resource instanceof IFile) {
				fileName = resource.getFullPath().toString();
			} else if (resource instanceof IWorkspaceRoot) {
				fileName = (String) marker.getAttribute(StructuredResourceMarkerAnnotationModel.SECONDARY_ID_KEY);
				if (fileName == null) {
					return null;
				}
				IPath path = Path.fromPortableString(fileName);
				if ((path.getDevice() == null) && (path.toString().startsWith("org.eclipse.dltk"))) { //$NON-NLS-1$
					String fullPathString = path.toString();
					String absolutePath = fullPathString.substring(fullPathString.indexOf(':') + 1);
					path = Path.fromPortableString(absolutePath);
				} else {
					path = EnvironmentPathUtils.getLocalPath(path);
				}
				NonExistingPHPFileEditorInput nonExistingEditorInput = NonExistingPHPFileEditorInput
						.findEditorInput(path);
				if (nonExistingEditorInput != null) {
					fileName = nonExistingEditorInput.getName();
				} else {
					if (EnvironmentPathUtils.isFull(path)) {
						fileName = EnvironmentPathUtils.getLocalPathString(path);
					} else {
						fileName = path.toPortableString();
					}
				}
			}
			if (fileName != null) {
				return fileName + " [line: " + lineNumber.toString() + "]"; //$NON-NLS-1$ //$NON-NLS-2$
			}
		} catch (CoreException e) {
			Logger.logException(e);
		}
		return null;
	}

