			public Object[] getChildren(Object parentElement) {
				try {
					if (parentElement instanceof IContainer) {
						List<Object> r = new LinkedList<Object>();
						// Add all members:
						IContainer container = (IContainer) parentElement;
						IResource[] members = container.members();
						for (IResource member : members) {
							if (member instanceof IContainer && member.isAccessible()) {
								r.add(member);
							}
						}
						// Add include paths:
						if (parentElement instanceof IProject) {
							IProject project = (IProject) parentElement;
							IScriptProject scriptProject = DLTKCore.create(project);
							IBuildpathEntry[] includePath = scriptProject.getRawBuildpath();
							r.addAll(Arrays.asList(includePath));
						}
						return r.toArray();
					} else if (parentElement instanceof IBuildpathEntry) {
						IBuildpathEntry includePathEntry = (IBuildpathEntry) parentElement;
						IPath path = includePathEntry.getPath();
						File file = null;
						if (includePathEntry.getEntryKind() == IBuildpathEntry.BPE_LIBRARY) {
							file = path.toFile();
						}
						else if (includePathEntry.getEntryKind() == IBuildpathEntry.BPE_VARIABLE) {
							path = DLTKCore.getResolvedVariablePath(path);
							if (path != null) {
								file = path.toFile();
							}
						}
						if (file != null) {
							return getChildren(new IPFile(includePathEntry, file));
						}
					} else if (parentElement instanceof IPFile) {
						IPFile ipFile = (IPFile) parentElement;
						File file = ipFile.file;
						if (file.isDirectory()) {
							File dirs[] = file.listFiles(new FileFilter() {
								public boolean accept(File pathname) {
									return pathname.isDirectory();
								}
							});
							List<Object> r = new ArrayList<Object>(dirs.length);
							for (File dir : dirs) {
								r.add(new IPFile(ipFile.includePathEntry, dir));
							}
							return r.toArray();
						}
					}
				} catch (CoreException e) {
				}
				return new Object[0];
			}

