	/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.debug.internal.ui.viewers.update.DebugTargetProxy#
	 * getNextSuspendedThreadDelta(org.eclipse.debug.core.model.IThread, boolean)
	 */
	@Override
	protected ModelDelta getNextSuspendedThreadDelta(IThread currentThread, boolean reverse) {
		if (debugTarget != null) {
			try {
				IThread[] threads = debugTarget.getThreads();
				ILaunchManager manager = DebugPlugin.getDefault().getLaunchManager();
				ILaunch launch = debugTarget.getLaunch();
				int launchIndex = indexOf(manager.getLaunches(), debugTarget.getLaunch());
				int targetIndex = indexOf(debugTarget.getLaunch().getChildren(), debugTarget);
				List<IThread> chosen = new ArrayList<>();
				// Select & unfold all suspended threads
				boolean takeNext = currentThread == null;
				int startIdx = reverse ? threads.length - 1 : 0;
				int endIdx = reverse ? -1 : threads.length;
				int increment = reverse ? -1 : 1;
				for (int i = startIdx; i != endIdx; i = i + increment) {
					IThread thread = threads[i];
					if (thread.isSuspended()) {
						IBreakpoint[] bps = thread.getBreakpoints();
						if (bps != null && bps.length > 0) {
							chosen.add(thread);
						} else if (thread.isSuspended()) {
							chosen.add(thread);
						}
					}
					takeNext = takeNext || thread.equals(currentThread);
				}
				if (!chosen.isEmpty()) {
					ModelDelta delta = new ModelDelta(manager, IModelDelta.NO_CHANGE);
					ModelDelta node = delta.addNode(launch, launchIndex, IModelDelta.NO_CHANGE,
							debugTarget.getLaunch().getChildren().length);
					node = node.addNode(debugTarget, targetIndex, IModelDelta.NO_CHANGE, threads.length);
					for (int i = 0; i < chosen.size(); i++) {
						IThread t = chosen.get(i);
						IStackFrame frame = t.getTopStackFrame();
						if (frame != null) {
							ModelDelta next = node.addNode(t, i, IModelDelta.NO_CHANGE | IModelDelta.EXPAND,
									t.getStackFrames().length);
							next = next.addNode(frame, 0, IModelDelta.NO_CHANGE | IModelDelta.SELECT, 0);
						}
					}
					return delta;
				}
			} catch (DebugException e) {
			}
		}
		return null;
	}

