	/**
	 * Returns all markers which include the ruler's line of activity.
	 * 
	 * @return an array of markers which include the ruler's line of activity
	 */
	protected IMarker[] getMarkers(ITextEditor editor) {
		List markers = new ArrayList();

		IResource resource = getResource(editor.getEditorInput());
		IDocument document = getDocument(editor);
		AbstractMarkerAnnotationModel annotationModel = getAnnotationModel(editor);

		if (resource != null && annotationModel != null && resource.exists()) {
			try {
				IMarker[] allMarkers = resource.findMarkers(
						IBreakpoint.BREAKPOINT_MARKER, true,
						IResource.DEPTH_ZERO);
				if (allMarkers != null) {
					for (int i = 0; i < allMarkers.length; i++) {
						if (includesRulerLine(editor,
								annotationModel
										.getMarkerPosition(allMarkers[i]),
								document)) {
							markers.add(allMarkers[i]);
						}
					}
				}
			} catch (CoreException x) {
				//
			}
		}

		return (IMarker[]) markers.toArray(new IMarker[0]);
	}

