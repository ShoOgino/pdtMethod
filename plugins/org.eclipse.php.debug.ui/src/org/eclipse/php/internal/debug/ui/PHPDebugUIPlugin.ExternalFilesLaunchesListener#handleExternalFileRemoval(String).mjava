		private void handleExternalFileRemoval(String localPath) {
			ILaunchManager launchManager = DebugPlugin.getDefault().getLaunchManager();
			// Remove all the launches that are related to the removed local path.
			try {
				ILaunch[] launchs = launchManager.getLaunches();
				for (int i = 0; i < launchs.length; i++) {
					if (localPath.equals(launchs[i].getLaunchConfiguration().getAttribute(PHPCoreConstants.ATTR_FILE, (String) null))) {
						// Terminate the launch in case that the file was closed during the debug session.
						if (!launchs[i].isTerminated()) {
							launchs[i].terminate();
						}
						launchManager.removeLaunch(launchs[i]);
					}
				}
			} catch (CoreException e) {
				Logger.logException(e);
			}
			// Check if there is a launch for this file.
			try {
				ILaunchConfiguration[] configs = launchManager.getLaunchConfigurations(configType);
				int numConfigs = configs == null ? 0 : configs.length;
				for (int i = 0; i < numConfigs; i++) {
					String fileName = configs[i].getAttribute(PHPCoreConstants.ATTR_FILE, (String) null);
					if (localPath.equals(fileName)) {
						deleteLaunchConfiguration(configs[i]);
						break;
					}
				}
			} catch (CoreException e) {
				Logger.logException(e);
			}

			// Check for any marker that we have of the file and remove it when this file is closed.
			IWorkspace workspace = ResourcesPlugin.getWorkspace();
			try {
				IMarker[] allMarkers = workspace.getRoot().findMarkers(null, true, IResource.DEPTH_INFINITE);
				for (int i = 0; i < allMarkers.length; i++) {
					String storageType = allMarkers[i].getAttribute(IPHPConstants.STORAGE_TYPE, "");
					if (storageType.equals(IPHPConstants.STORAGE_TYPE_EXTERNAL) || storageType.equals(IPHPConstants.STORAGE_TYPE_REMOTE)) {
						String fileName = allMarkers[i].getAttribute(IPHPConstants.STORAGE_FILE, "");
						if (localPath.equals(fileName)) {
							allMarkers[i].delete();
						}
					}
				}
			} catch (CoreException e) {
				Logger.logException(e);
			}
		}

