	/**
	 * Creates this block's control in the given control.
	 * 
	 * @param ancestor
	 *            containing control the user that opens the installed PHPs pref
	 *            page for PHP management, or to provide 'add, remove, edit, and
	 *            search' buttons.
	 */
	public void createControl(final Composite ancestor) {

		final Composite parent = new Composite(ancestor, SWT.NULL);
		GridLayout layout = new GridLayout();
		layout.numColumns = 2;
		layout.marginHeight = 0;
		layout.marginWidth = 0;
		parent.setLayout(layout);
		final Font font = ancestor.getFont();
		parent.setFont(font);
		fControl = parent;

		GridData data;

		final Label tableLabel = new Label(parent, SWT.NONE);
		tableLabel.setText(PHPDebugUIMessages.InstalledPHPsBlock_15);
		data = new GridData();
		data.horizontalSpan = 2;
		tableLabel.setLayoutData(data);
		tableLabel.setFont(font);

		Composite tableComposite = new Composite(parent, SWT.NONE);
		data = new GridData(GridData.FILL_BOTH);
		tableComposite.setLayoutData(data);

		Table table = new Table(tableComposite, SWT.BORDER | SWT.MULTI | SWT.FULL_SELECTION);

		table.setHeaderVisible(true);
		table.setLinesVisible(true);

		fPHPExeList = new CheckboxTableViewer(table);
		fPHPExeList.setLabelProvider(new PHPExeLabelProvider());
		fPHPExeList.setContentProvider(new PHPsContentProvider());
		fPHPExeList.addSelectionChangedListener(new ISelectionChangedListener() {
			public void selectionChanged(final SelectionChangedEvent evt) {
				enableButtons();
			}
		});

		fPHPExeList.addDoubleClickListener(new IDoubleClickListener() {
			public void doubleClick(final DoubleClickEvent e) {
				if (!fPHPExeList.getSelection().isEmpty())
					editPHPexe();
			}
		});
		table.addKeyListener(new KeyAdapter() {
			public void keyPressed(final KeyEvent event) {
				if (fRemoveButton != null && !fRemoveButton.isDisposed() && !fRemoveButton.isEnabled()) {
					return;
				}
				if (event.character == SWT.DEL && event.stateMask == 0)
					removePHPexes();
			}
		});

		final TableColumn column1 = new TableColumn(table, SWT.NULL);
		column1.setText(PHPDebugUIMessages.InstalledPHPsBlock_0);
		column1.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(final SelectionEvent e) {
				sortByName();
			}
		});

		final TableColumn column2 = new TableColumn(table, SWT.NULL);
		column2.setText(PHPDebugUIMessages.InstalledPHPsBlock_17);
		column2.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(final SelectionEvent e) {
				sortByDebugger();
			}
		});

		final TableColumn column3 = new TableColumn(table, SWT.NULL);
		column3.setText(PHPDebugUIMessages.InstalledPHPsBlock_18);
		column3.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(final SelectionEvent e) {
				sortByVersion();
			}
		});

		final TableColumn column4 = new TableColumn(table, SWT.NULL);
		column4.setText(PHPDebugUIMessages.InstalledPHPsBlock_1);
		column4.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(final SelectionEvent e) {
				sortByLocation();
			}
		});

		// Create table column layout
		TableColumnLayout tableColumnLayout = new TableColumnLayout();
		PixelConverter pixelConverter = new PixelConverter(font);
		tableColumnLayout.setColumnData(column1,
				new ColumnWeightData(20, pixelConverter.convertWidthInCharsToPixels(24)));
		tableColumnLayout.setColumnData(column2,
				new ColumnWeightData(15, pixelConverter.convertWidthInCharsToPixels(18)));
		tableColumnLayout.setColumnData(column3,
				new ColumnWeightData(10, pixelConverter.convertWidthInCharsToPixels(10)));
		tableColumnLayout.setColumnData(column4,
				new ColumnWeightData(35, pixelConverter.convertWidthInCharsToPixels(28)));
		tableComposite.setLayout(tableColumnLayout);

		final Composite buttons = new Composite(parent, SWT.NULL);
		buttons.setLayoutData(new GridData(GridData.VERTICAL_ALIGN_BEGINNING));
		layout = new GridLayout();
		layout.marginHeight = 0;
		layout.marginWidth = 0;
		buttons.setLayout(layout);
		buttons.setFont(font);

		fAddButton = createPushButton(buttons, PHPDebugUIMessages.InstalledPHPsBlock_3);
		fAddButton.addListener(SWT.Selection, new Listener() {
			public void handleEvent(final Event evt) {
				addPHPexe();
			}
		});

		fEditButton = createPushButton(buttons, PHPDebugUIMessages.InstalledPHPsBlock_4);
		fEditButton.addListener(SWT.Selection, new Listener() {
			public void handleEvent(final Event evt) {
				editPHPexe();
			}
		});

		fRemoveButton = createPushButton(buttons, PHPDebugUIMessages.InstalledPHPsBlock_5);
		fRemoveButton.addListener(SWT.Selection, new Listener() {
			public void handleEvent(final Event evt) {
				removePHPexes();
			}
		});

		fSetDefaultButton = createPushButton(buttons, PHPDebugUIMessages.InstalledPHPsBlock_setDefault);
		fSetDefaultButton.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(SelectionEvent e) {
				PHPexeItem defaultItem = (PHPexeItem) ((IStructuredSelection) fPHPExeList.getSelection())
						.getFirstElement();
				PHPexes.getInstance().setDefaultItem(defaultItem);
				commitChanges();
				setPHPs(PHPexes.getInstance().getAllItems());
			}
		});

		// copied from ListDialogField.CreateSeparator()
		final Label separator = new Label(buttons, SWT.NONE);
		separator.setVisible(false);
		final GridData gd = new GridData();
		gd.horizontalAlignment = GridData.FILL;
		gd.verticalAlignment = GridData.BEGINNING;
		gd.heightHint = 4;
		separator.setLayoutData(gd);

		fSearchButton = createPushButton(buttons, PHPDebugUIMessages.InstalledPHPsBlock_6);
		fSearchButton.addListener(SWT.Selection, new Listener() {
			public void handleEvent(final Event evt) {
				search();
			}
		});

		fillWithWorkspacePHPs();
		// by default, sort by name
		sortByName();
		enableButtons();
	}

