	/**
	 * Sets the PHPexes to be displayed in this block
	 * 
	 * @param vms
	 *            PHPexes to be displayed
	 */
	protected void setPHPexes(final List<PHPexeItem> phps) {
		phpExecutables.clear();
		phpExecutables.addAll(phps);
		// sort by name
		Collections.sort(phpExecutables, new Comparator<PHPexeItem>() {
			public int compare(final PHPexeItem o1, final PHPexeItem o2) {
				if (null != o1 && null != o2) {
					String o1Name = o1.getName();
					String o2Name = o2.getName();
					if (null != o1Name && null != o2Name)
						return o1Name.compareToIgnoreCase(o2Name);
				}
				return 0;
			}

			public boolean equals(final Object obj) {
				return obj == this;
			}
		});
		// now make an array of names
		String[] names = new String[phpExecutables.size()];
		final Iterator<PHPexeItem> iter = phpExecutables.iterator();
		int i = 0;
		while (iter.hasNext()) {
			final PHPexeItem item = iter.next();
			names[i] = getDisplayName(item, false);
			i++;
		}
		if (names.length == 0) {
			names = new String[] { PHPDebugUIMessages.PhpDebugPreferencePage_noExeDefined };
		}
		fExecutablesCombo.setItems(names);
		PHPexeItem defaultExe = exes.getDefaultItem(getSelectedDebuggerId());
		if (defaultExe != null) {
			String defaultName = defaultExe.getName()
					+ " (" + defaultExe.getExecutable().toString() + ")"; //$NON-NLS-1$ //$NON-NLS-2$
			fExecutablesCombo.select(fExecutablesCombo.indexOf(defaultName));
		} else {
			fExecutablesCombo.select(0);
		}
	}

