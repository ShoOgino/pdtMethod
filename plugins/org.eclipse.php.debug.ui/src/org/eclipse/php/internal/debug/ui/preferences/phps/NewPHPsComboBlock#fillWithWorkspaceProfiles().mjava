	/**
	 * Populates the PHP profile combo with profiles defined in the workspace.
	 */
	protected void fillWithWorkspaceProfiles() {
		fEnvironments.clear();
		PHPVersion[] environments = PHPVersion.supportedVersions();
		for (int i = 0; i < environments.length; i++) {
			fEnvironments.add(environments[i]);
		}
		// sort by name
		// Collections.sort(fEnvironments, new Comparator() {
		// public int compare(Object o1, Object o2) {
		// PHPVersion left = (PHPVersion) o1;
		// PHPVersion right = (PHPVersion) o2;
		// return left.getId().compareToIgnoreCase(right.getId());
		// }
		//
		// public boolean equals(Object obj) {
		// return obj == this;
		// }
		// });
		// now make an array of names
		// String[] names = new String[fEnvironments.size()];
		// Iterator iter = fEnvironments.iterator();
		// int i = 0;
		// while (iter.hasNext()) {
		// PHPVersion env = (PHPVersion) iter.next();
		// IPath path = PHPRuntime.newPHPContainerPath(env);
		// IVMInstall install = PHPRuntime.getVMInstall(path);
		// if (install != null) {
		// names[i] = MessageFormat.format(
		// PHPDebugUIMessages.PHPexesComboBlock_15, new String[] {
		// env.getId(), install.getName() });
		// } else {
		// names[i] = MessageFormat.format(
		// PHPDebugUIMessages.PHPexesComboBlock_16,
		// new String[] { env.getId() });
		// }
		// i++;
		// }
		String[] names = new String[fEnvironments.size()];
		for (int i = 0; i < names.length; i++) {
			names[i] = environments[i].getAlias();
		}
		fEnvironmentsCombo.setItems(names);
		fEnvironmentsCombo.setVisibleItemCount(Math.min(names.length, 20));
	}

