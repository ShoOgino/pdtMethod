	private void addProjectPreferenceSubsection(Composite composite) {
		// Set a height hint for the group.
		GridData gd = (GridData) composite.getLayoutData();
		gd.heightHint = 260;
		composite.setLayoutData(gd);
		addLabelControl(composite, PHPDebugUIMessages.PhpDebugPreferencePage_phpDebugger, PHPDebugCorePreferenceNames.PHP_DEBUGGER_ID);
		fDefaultDebugger = addCombo(composite, 2);
		new Label(composite, SWT.NONE); // dummy label
		addLabelControl(composite, PHPDebugUIMessages.PhpDebugPreferencePage_9, ServersManager.DEFAULT_SERVER_PREFERENCES_KEY);
		fDefaultServer = addCombo(composite, 2);
		addLink(composite, PHPDebugUIMessages.PhpDebugPreferencePage_serversLink, SERVERS_PAGE_ID);
		addLabelControl(composite, PHPDebugUIMessages.PhpDebugPreferencePage_12, PHPDebugCorePreferenceNames.DEFAULT_PHP);
		fDefaultPHPExe = addCombo(composite, 2);
		addLink(composite, PHPDebugUIMessages.PhpDebugPreferencePage_installedPHPsLink, PHP_EXE_PAGE_ID);

		final ScrolledPageContent sc1 = new ScrolledPageContent(composite);
		Composite comp = sc1.getBody();
		GridLayout layout = new GridLayout(3, false);
		layout.marginHeight = 0;
		layout.marginWidth = 0;
		comp.setLayout(layout);

		gd = new GridData(GridData.FILL_HORIZONTAL);
		gd.horizontalSpan = 3;
		sc1.setLayoutData(gd);

		expandbleDebugEncoding = createStyleSection(comp, PHPDebugUIMessages.PHPDebugPreferencesAddon_debugTransferEncoding, 3);
		Composite inner = new Composite(expandbleDebugEncoding, SWT.NONE);
		inner.setFont(composite.getFont());
		inner.setLayout(new GridLayout(3, false));
		expandbleDebugEncoding.setClient(inner);
		fDebugEncodingSettings = addEncodingSettings(inner, PHPDebugUIMessages.PHPDebugPreferencesAddon_selectedEncoding);

		expandbleOutputEncoding = createStyleSection(comp, PHPDebugUIMessages.PHPDebugPreferencesAddon_debugOutputEncoding, 3);
		inner = new Composite(expandbleOutputEncoding, SWT.NONE);
		inner.setFont(composite.getFont());
		inner.setLayout(new GridLayout(3, false));
		expandbleOutputEncoding.setClient(inner);
		fOutputEncodingSettings = addEncodingSettings(inner, PHPDebugUIMessages.PHPDebugPreferencesAddon_selectedEncoding);
		expandbleOutputEncoding.setText(PHPDebugUIMessages.PHPDebugPreferencesAddon_debugOutputEncoding + " (" + fOutputEncodingSettings.getIANATag() + ")");
		fStopAtFirstLine = addCheckBox(composite, PHPDebugUIMessages.PhpDebugPreferencePage_1, PHPDebugCorePreferenceNames.STOP_AT_FIRST_LINE, 0);

		fClientIPLabel = new Label(composite, SWT.NONE);
		fClientIPLabel.setText("Client Host/IP:");
		fClientIP = new Text(composite, SWT.BORDER);
		GridData layoutData = new GridData(GridData.FILL_HORIZONTAL);
		layoutData.horizontalSpan = 2;
		fClientIP.setLayoutData(layoutData);

		Display.getDefault().asyncExec(new Runnable() {
			public void run() {
				// Expand the debug encoding after the component is layout.
				// This code fixes an issue that caused the top encoding combo to scroll automatically
				// without any reasonable cause.
				expandbleDebugEncoding.setExpanded(true);
				ScrolledPageContent spc = (ScrolledPageContent) FormUtil.getScrolledComposite(expandbleDebugEncoding);
				Point p = spc.getSize();
				spc.setSize(p.x, 70);
				spc.getParent().layout();
			}
		});

		// Add a default debugger listener that will update the possible executables
		// and, maybe, servers that can work with this debugger.
		fDefaultDebugger.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(SelectionEvent e) {
				String selectedDebugger = getSelectedDebuggerId();
				PHPexeItem[] items = PHPexes.getInstance().getItems(selectedDebugger);
				loadPHPExes(fDefaultPHPExe, items);
			}
		});
	}

