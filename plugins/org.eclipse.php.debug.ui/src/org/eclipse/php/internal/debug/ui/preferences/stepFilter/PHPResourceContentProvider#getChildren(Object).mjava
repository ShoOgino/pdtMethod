	public Object[] getChildren(Object parentElement) {
		try {
			if (parentElement instanceof IContainer) {
				List<Object> r = new LinkedList<Object>();
				// Add all members:
				IContainer container = (IContainer) parentElement;
				IResource[] members = container.members();
				for (IResource member : members) {
					if (member instanceof IContainer && member.isAccessible()
							&& !isResourceFiltered(member)) {
						if (member instanceof IProject) { // show only PHP
															// projects
							IProject project = (IProject) member;
							if (project.hasNature(PHPNature.ID)) {
								r.add(member);
							}
						} else {
							r.add(member);
						}
					}
				}
				// Add include paths:
				if (parentElement instanceof IProject) {
					IProject project = (IProject) parentElement;
					IncludePath[] includePath = IncludePathManager
							.getInstance().getIncludePaths(project);
					for (IncludePath path : includePath) {
						if (path.isBuildpath()) {
							IBuildpathEntry buildpathEntry = (IBuildpathEntry) path
									.getEntry();
							if (buildpathEntry.getEntryKind() == IBuildpathEntry.BPE_LIBRARY
									|| buildpathEntry.getEntryKind() == IBuildpathEntry.BPE_VARIABLE) {
								r.add(buildpathEntry);
							}
						}
					}
				}
				return r.toArray();
			} else if (parentElement instanceof IBuildpathEntry) {
				IBuildpathEntry buildpathEntry = (IBuildpathEntry) parentElement;
				IPath path = buildpathEntry.getPath();
				File file = null;
				if (buildpathEntry.getEntryKind() == IBuildpathEntry.BPE_LIBRARY) {
					file = path.toFile();
				} else if (buildpathEntry.getEntryKind() == IBuildpathEntry.BPE_VARIABLE) {
					path = DLTKCore.getResolvedVariablePath(path);
					if (path != null) {
						file = path.toFile();
					}
				}
				if (file != null) {
					return getChildren(new IncPathFile(buildpathEntry, file));
				}
			} else if (parentElement instanceof IncPathFile) {
				IncPathFile ipFile = (IncPathFile) parentElement;
				File file = ipFile.file;
				if (file.isDirectory()) {
					File files[] = file.listFiles();
					List<Object> r = new ArrayList<Object>(files.length);
					for (File currentFile : files) {
						r.add(new IncPathFile(ipFile.IBuildpathEntry,
								currentFile));
					}
					return r.toArray();
				}
			}
		} catch (CoreException e) {
		}
		return new Object[0];
	}

