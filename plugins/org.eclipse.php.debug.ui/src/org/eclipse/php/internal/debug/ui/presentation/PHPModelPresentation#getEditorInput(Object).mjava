	/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.debug.ui.ISourcePresentation#getEditorInput(java.lang.Object)
	 */
	public IEditorInput getEditorInput(Object element) {
		if (element instanceof IFile) {
			return new FileEditorInput((IFile) element);
		}
		if (element instanceof PHPLineBreakpoint) {
			PHPLineBreakpoint breakpoint = (PHPLineBreakpoint) element;
			IMarker marker = breakpoint.getMarker();
			IResource resource = marker.getResource();
			if (resource instanceof IFile) {
				return new FileEditorInput((IFile) resource);
			} else if (resource instanceof IWorkspaceRoot) {
				try {
					String filename = (String) marker.getAttribute(IPHPConstants.Include_Storage);
					String type = (String) marker.getAttribute(IPHPConstants.Include_Storage_type);
					String id = (String) marker.getAttribute(StructuredResourceMarkerAnnotationModel.SECONDARY_ID_KEY);
					String projectName = (String) marker.getAttribute(IPHPConstants.Include_Storage_Project, "");
					IProject project = PHPDebugUIPlugin.getProject(projectName);
					if (IPHPConstants.Include_Storage_LFile.equals(type)) {
						File file = new File(id);
						LocalFileStorage lfs = new LocalFileStorage(file);
						if (marker.getAttribute(IPHPConstants.Non_Workspace_Breakpoint) != Boolean.TRUE) {
							lfs.setProject(project);
						}
						return new LocalFileStorageEditorInput(lfs);
					} else if (IPHPConstants.Include_Storage_zip.equals(type)) {
						int index = id.lastIndexOf(filename);
						String archive = id.substring(0, index - 1);
						ZipFile zip = new ZipFile(archive);
						ZipEntry entry = new ZipEntry(filename);
						ZipEntryStorage zipStore = new ZipEntryStorage(zip, entry);
						zipStore.setProject(project);
						return new ZipEntryStorageEditorInput(zipStore);

					}
				} catch (CoreException e) {
					Logger.logException("Unexpected error in PHPModelPresentation", e);
				} catch (IOException e) {
					Logger.logException("Unexpected error in PHPModelPresentation", e);
				}
			}

			//            return new FileEditorInput((IFile) ((ILineBreakpoint) element).getMarker().getResource());
		}
		if (element instanceof ZipEntryStorage) {
			return new ZipEntryStorageEditorInput((ZipEntryStorage) element);
		}
		if (element instanceof LocalFileStorage) {
			return new LocalFileStorageEditorInput((LocalFileStorage) element);
		}
		if (element instanceof PHPSourceNotFoundInput) {
			return new PHPSourceNotFoundEditorInput((PHPSourceNotFoundInput) element);
		}
		Logger.log(Logger.WARNING_DEBUG, "Unknown editor input type: " + element.getClass().getName());
		return null;
	}

