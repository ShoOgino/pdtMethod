	/**
	 * Search for installed VMs in the file system
	 */
	protected void search() {

		// choose a root directory for the search
		final DirectoryDialog dialog = new DirectoryDialog(getShell());
		dialog.setMessage(PHPDebugUIMessages.InstalledPHPsBlock_9);
		dialog.setText(PHPDebugUIMessages.InstalledPHPsBlock_10);
		final String path = dialog.open();
		if (path == null)
			return;

		// ignore installed locations
		final Set exstingLocations = new HashSet();
		Iterator iter = fPHPexes.iterator();
		while (iter.hasNext())
			exstingLocations.add(((PHPexeItem) iter.next()).getPhpExecutable().getParentFile());

		// search
		final File rootDir = new File(path);
		final List locations = new ArrayList();

		final IRunnableWithProgress r = new IRunnableWithProgress() {
			public void run(IProgressMonitor monitor) {
				monitor.beginTask(PHPDebugUIMessages.InstalledPHPsBlock_11, IProgressMonitor.UNKNOWN);
				search(rootDir, locations, exstingLocations, monitor);
				monitor.done();
			}
		};

		try {
			final ProgressMonitorDialog progress = new ProgressMonitorDialog(getShell());
			progress.run(true, true, r);
		} catch (final InvocationTargetException e) {
			PHPDebugUIPlugin.log(e);
		} catch (final InterruptedException e) {
			// cancelled
			return;
		}

		if (locations.isEmpty())
			MessageDialog.openInformation(getShell(), PHPDebugUIMessages.InstalledPHPsBlock_12, MessageFormat.format(PHPDebugUIMessages.InstalledPHPsBlock_13, new String[] { path }));
		else {
			iter = locations.iterator();
			while (iter.hasNext()) {
				final File location = (File) iter.next();
				final String name = PHPDebugUIMessages.InstalledPHPsBlock_16;
				String nameCopy = new String(name);
				int i = 1;
				while (isDuplicateName(nameCopy)) {
					nameCopy = name + '(' + i++ + ')';
				}
				// Since the search for PHP exe option does not 'know' the debugger id it should assign to the PHPexeItem,
				// we call for PHPexes.getDefaultDebuggerId() - which can also return null in some cases.
				final PHPexeItem phpExe = new PHPexeItem(nameCopy, location, null, PHPDebuggersRegistry.getDefaultDebuggerId(), true);
				if (phpExe.getPhpExecutable() != null) {
					fPHPexes.add(phpExe);
					phpExes.addItem(phpExe);
					fPHPExeList.refresh();
				}
			}
		}

	}

