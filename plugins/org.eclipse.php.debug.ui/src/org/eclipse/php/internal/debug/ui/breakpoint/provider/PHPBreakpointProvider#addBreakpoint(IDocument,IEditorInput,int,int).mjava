	public IStatus addBreakpoint(IDocument document, IEditorInput input, int editorLineNumber, int offset) throws CoreException {
		// check if there is a valid position to set breakpoint
		int pos = getValidPosition(document, editorLineNumber);
		IStatus status = null;
		IBreakpoint point = null;
		if (pos >= 0) {
			IResource res = getResourceFromInput(input);
			if (res != null && (input instanceof IFileEditorInput)) {
				try {
					editorLineNumber = document.getLineOfOffset(pos) + 1;
					Integer lineNumberInt = new Integer(editorLineNumber);
					IMarker[] breakpoints = res.findMarkers(IBreakpoint.LINE_BREAKPOINT_MARKER, true, IResource.DEPTH_ZERO);
					for (int i = 0; i < breakpoints.length; ++i) {
						if (breakpoints[i].getAttributes().get("lineNumber").equals(lineNumberInt)) {
							throw new BadLocationException();
						}
					}
					point = PHPDebugTarget.createBreakpoint(res, editorLineNumber);
				} catch (BadLocationException e) {
				}
			}
			else if (input instanceof IURIEditorInput || (input instanceof NonExistingPHPFileEditorInput)) {
				Map attributes = new HashMap();
				String pathName = null;
				if (input instanceof IURIEditorInput){
					if (res instanceof ExternalFileDecorator) {
						pathName = res.getFullPath().toString();
					} else {
						pathName = URIUtil.toPath(((IURIEditorInput)input).getURI()).toString();
					}
				}
				else {
					pathName = ((NonExistingPHPFileEditorInput)input).getPath().toString();
				}
				String fileName = RemoteDebugger.convertToSystemIndependentFileName(pathName);
				if (res instanceof IWorkspaceRoot) {
					// We are dealing with remote
					attributes.put(IPHPConstants.STORAGE_TYPE, IPHPConstants.STORAGE_TYPE_REMOTE);
				} else {
					// We are dealing with storage
					attributes.put(IPHPConstants.STORAGE_TYPE, IPHPConstants.STORAGE_TYPE_EXTERNAL);
				}
				attributes.put(IPHPConstants.STORAGE_FILE, fileName);
				attributes.put(StructuredResourceMarkerAnnotationModel.SECONDARY_ID_KEY, fileName);
				point = PHPDebugTarget.createBreakpoint(res, editorLineNumber, attributes);
			}
			else if (input instanceof IStorageEditorInput) {
				IStorage storage = ((IStorageEditorInput) input).getStorage();
				
				Map attributes = new HashMap();
				String fileName = "";
				
				String secondaryId = storage.getFullPath().toString();
				attributes.put(StructuredResourceMarkerAnnotationModel.SECONDARY_ID_KEY, secondaryId);
				
				if (storage instanceof LocalFileStorage) {
					attributes.put(IPHPConstants.STORAGE_TYPE, IPHPConstants.STORAGE_TYPE_INCLUDE);
					
					fileName = RemoteDebugger.convertToSystemIndependentFileName(((LocalFileStorage) storage).getName());
					String incDir = ((LocalFileStorage) storage).getIncBaseDirName();
					incDir = RemoteDebugger.convertToSystemIndependentFileName(incDir);
					if (incDir != null) {
						fileName = secondaryId.substring(incDir.length() + 1);
					}
					IProject project = ((LocalFileStorage) storage).getProject();
					attributes.put(IPHPConstants.STORAGE_PROJECT, project != null ? project.getName() : "");
					attributes.put(IPHPConstants.STORAGE_INC_BASEDIR, incDir != null ? incDir : "");
				} else {
					attributes.put(IPHPConstants.STORAGE_TYPE, IPHPConstants.STORAGE_TYPE_REMOTE);
					fileName = storage.getName();
				}
				
				attributes.put(IPHPConstants.STORAGE_FILE, fileName);
				point = PHPDebugTarget.createBreakpoint(res, editorLineNumber, attributes);
			}
		}
		if (point == null) {
			StatusLineMessageTimerManager.setErrorMessage(PHPDebugUIMessages.ErrorCreatingBreakpoint_1, 1000, true); // hide message after 1 second
		}
		if (status == null) {
			status = new Status(IStatus.OK, PHPDebugUIPlugin.getID(), IStatus.OK, MessageFormat.format(PHPDebugUIMessages.BreakpointCreated_1, new Object[] {}), null);
		}
		return status;
	}

