	protected IEditorInput getLineBreakpointEditorInput(Object element) {
		ILineBreakpoint bp = (ILineBreakpoint) element;
		IMarker marker = bp.getMarker();
		try {
			String originalURL = (String) marker.getAttribute(IDebugParametersKeys.ORIGINAL_URL);
			if (originalURL != null) {
				final String location = (String) marker
						.getAttribute(StructuredResourceMarkerAnnotationModel.SECONDARY_ID_KEY);
				String decodedFileName;
				try {
					decodedFileName = URLDecoder.decode(location, "UTF-8"); //$NON-NLS-1$
				} catch (UnsupportedEncodingException e) {
					decodedFileName = location;
				}
				return new RemoteFileStorageEditorInput(new RemoteFileStorage(null, decodedFileName, originalURL));
			}
		} catch (CoreException e) {
			DLTKUIPlugin.log(e);
		}
		IResource resource = marker.getResource();
		if (resource instanceof IFile) {
			return new FileEditorInput((IFile) resource);
		}
		try {
			final String location = (String) marker
					.getAttribute(StructuredResourceMarkerAnnotationModel.SECONDARY_ID_KEY);
			if (location == null) {
				return null;
			}
			IPath path = Path.fromPortableString(location);
			NonExistingPHPFileEditorInput nonExistingEditorInput = NonExistingPHPFileEditorInput.findEditorInput(path);
			if (nonExistingEditorInput != null) {
				return nonExistingEditorInput;
			}
			HandleFactory fac = new HandleFactory();
			IDLTKSearchScope scope = DLTKSearchScopeFactory.getInstance().createWorkspaceScope(true,
					PHPLanguageToolkit.getDefault());
			Openable openable = fac.createOpenable(path.toString(), scope);
			if (openable instanceof IStorage) {
				return new ExternalStorageEditorInput((IStorage) openable);
			}
			// Support external files opened using File -> Open
			File localFile = new File(location);
			if (localFile.exists()) {
				return new FileStoreEditorInput(new LocalFile(localFile));
			}
		} catch (CoreException e) {
			DLTKUIPlugin.log(e);
		}
		return null;
	}

