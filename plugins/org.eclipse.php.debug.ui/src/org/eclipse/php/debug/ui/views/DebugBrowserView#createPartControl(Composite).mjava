	/* (non-Javadoc)
	 * @see org.eclipse.ui.IWorkbenchPart#createPartControl(org.eclipse.swt.widgets.Composite)
	 */
	public void createPartControl(Composite parent) {
	    Composite container = new Composite(parent,SWT.NONE);

	    GridLayout layout = new GridLayout();
	    layout.numColumns=1;
	    layout.makeColumnsEqualWidth=true;
	    container.setLayout(layout);
	    RowLayout rowLayout =new RowLayout();
	    rowLayout.spacing=1;
		swtBrowser=new Browser(container,SWT.NONE);
		GridData gridData=new GridData();
		gridData.grabExcessHorizontalSpace=true;
		gridData.grabExcessVerticalSpace=true;
		gridData.horizontalAlignment=SWT.FILL;
		gridData.verticalAlignment=SWT.FILL;
		swtBrowser.setLayoutData(gridData);
		
		debugViewHelper = new DebugViewHelper();
		
        terminateListener = new IDebugEventSetListener() {
        	PHPDebugTarget target;
			public void handleDebugEvents(DebugEvent[] events) {
				if (events != null) {
					int size = events.length;
					for (int i = 0; i < size; i++) {
						Object obj = events[i].getSource();
						
						if(!(obj instanceof PHPDebugTarget))
							continue;
					
						if ( events[i].getKind() == DebugEvent.TERMINATE) {
							target = (PHPDebugTarget)obj;
							Job job = new UIJob("debug output") {
								public IStatus runInUIThread(IProgressMonitor monitor) {
									update(target);
									return Status.OK_STATUS;
								}
							};
							job.schedule();
						}
					}
				}
			}
		};
		DebugPlugin.getDefault().addDebugEventListener(terminateListener);		
		getSite().getWorkbenchWindow().getSelectionService().addSelectionListener(IDebugUIConstants.ID_DEBUG_VIEW, this);

        
        if (fPartListener == null) {
            fPartListener= new DebugViewPartListener();
            getSite().getPage().addPartListener(fPartListener);
        }
	}

