	public void initializeValues(PropertyPage propertyPage) {
		this.propertyPage = propertyPage;
		Preferences prefs = PHPProjectPreferences.getModelPreferences();
		IScopeContext[] preferenceScopes = createPreferenceScopes(propertyPage);

		boolean stopAtFirstLine = prefs.getBoolean(PHPDebugCorePreferenceNames.STOP_AT_FIRST_LINE);
		String serverName = prefs.getString(PHPDebugCorePreferenceNames.DEFAULT_SERVER);
		String phpExe = prefs.getString(PHPDebugCorePreferenceNames.DEFAULT_PHP);
		String transferEncoding = prefs.getString(PHPDebugCorePreferenceNames.TRANSFER_ENCODING);
		loadServers(fDefaultServer);
		loadPHPExes(fDefaultPHPExe);
		if (preferenceScopes[0] instanceof ProjectScope) {
			IEclipsePreferences node = preferenceScopes[0].getNode(getPreferenceNodeQualifier());
			if (node != null && getProject(propertyPage) != null) {
				String projectServerName = node.get(PHPDebugCorePreferenceNames.DEFAULT_SERVER, "");
				if (!projectServerName.equals("")) {
					serverName = projectServerName;
					stopAtFirstLine = node.getBoolean(PHPDebugCorePreferenceNames.STOP_AT_FIRST_LINE, stopAtFirstLine);
					transferEncoding = node.get(PHPDebugCorePreferenceNames.TRANSFER_ENCODING, "");
					phpExe = node.get(PHPDebugCorePreferenceNames.DEFAULT_PHP, phpExe);
				}
			}
		}
		fStopAtFirstLine.setSelection(stopAtFirstLine);
		fDefaultServer.select(fDefaultServer.indexOf(serverName));
		fDefaultPHPExe.select(fDefaultPHPExe.indexOf(phpExe));
		fEncodingSettings.setIANATag(transferEncoding);
	}

