	public IStatus addBreakpoint(IDocument document, IEditorInput input, int editorLineNumber, int offset) throws CoreException {
		// check if there is a valid position to set breakpoint
		int pos = getValidPosition(document, editorLineNumber);
		IStatus status = null;
		if (pos >= 0) {
			IResource res = getResourceFromInput(input);
			if (res != null && (input instanceof IFileEditorInput)) {
				IBreakpoint point = null;
				try {
					editorLineNumber = document.getLineOfOffset(pos) + 1;
					point = PHPDebugTarget.createBreakpoint(res, editorLineNumber);
				} catch (BadLocationException e) {
				}
				if (point == null) {
					status = new Status(IStatus.ERROR, PHPDebugUIPlugin.getID(), IStatus.ERROR, MessageFormat.format(PHPDebugUIMessages.ErrorCreatingBreakpoint_1, new Object[] {}), null); //$NON-NLS-1$
				}
			}

			else if (input instanceof IStorageEditorInput) {
				// For non-resources, use the workspace root and a coordinated
				// attribute that is used to
				// prevent unwanted (breakpoint) markers from being loaded
				// into the editors.
				res = ResourcesPlugin.getWorkspace().getRoot();
				String id = input.getName();
				IStorage storage = ((IStorageEditorInput) input).getStorage();
				if (input instanceof IStorageEditorInput && ((IStorageEditorInput) input).getStorage() != null) {
					id = storage.getFullPath().toString();
				}
				Map attributes = new HashMap();
				attributes.put(StructuredResourceMarkerAnnotationModel.SECONDARY_ID_KEY, id);
				String fileName = "";
				IProject project = null;
				if (storage instanceof ZipEntryStorage) {
					fileName = RemoteDebugger.convertToSystemIndependentFileName(((ZipEntryStorage) storage).getZipEntry().getName());
					attributes.put(IPHPConstants.Include_Storage_type, IPHPConstants.Include_Storage_zip);
					project = ((ZipEntryStorage) storage).getProject();
				} else if (storage instanceof LocalFileStorage) {
					attributes.put(IPHPConstants.Include_Storage_type, IPHPConstants.Include_Storage_LFile);
					fileName = RemoteDebugger.convertToSystemIndependentFileName(((LocalFileStorage) storage).getName());
					String incDir = ((LocalFileStorage) storage).getIncBaseDirName();
					incDir = RemoteDebugger.convertToSystemIndependentFileName(incDir);
					if (incDir != null) {
						fileName = id.substring(incDir.length() + 1);
					}
					project = ((LocalFileStorage) storage).getProject();
				}
				attributes.put(IPHPConstants.Include_Storage, fileName);
				String projectName = "";
				if (project != null)
					projectName = project.getName();
				attributes.put(IPHPConstants.Include_Storage_Project, projectName);
				IBreakpoint point = PHPDebugTarget.createBreakpoint(res, editorLineNumber, attributes);
				if (point == null) {
					status = new Status(IStatus.ERROR, PHPDebugUIPlugin.getID(), IStatus.ERROR, MessageFormat.format(PHPDebugUIMessages.ErrorCreatingBreakpoint_1, new Object[] {}), null); //$NON-NLS-1$
				}
			}
		} else {
			StatusLineMessageTimerManager.setErrorMessage(PHPDebugUIMessages.ErrorCreatingBreakpoint_1, 1000, true); // hide message after 1 second
		}
		if (status == null) {
			status = new Status(IStatus.OK, PHPDebugUIPlugin.getID(), IStatus.OK, MessageFormat.format(PHPDebugUIMessages.BreakpointCreated_1, new Object[] {}), null);
		}
		return status;
	}

