	private void savePreferences(boolean isProjectSpecific) {
		Preferences prefs = PHPProjectPreferences.getModelPreferences();
		IScopeContext[] preferenceScopes = createPreferenceScopes(propertyPage);
		IEclipsePreferences node = preferenceScopes[0].getNode(getPreferenceNodeQualifier());
		if (isProjectSpecific && node != null && preferenceScopes[0] instanceof ProjectScope && getProject(propertyPage) != null) {
			node.putBoolean(PHPDebugCorePreferenceNames.STOP_AT_FIRST_LINE, fStopAtFirstLine.getSelection());
			node.putInt(PHPDebugCorePreferenceNames.DEBUG_PORT, Integer.parseInt(fDebugTextBox.getText()));
			node.put(PHPDebugCorePreferenceNames.DEDAULT_URL, fDefaultURLTextBox.getText());
			node.put(PHPDebugCorePreferenceNames.TRANSFER_ENCODING, fEncodingSettings.getIANATag());
		} else {
			if (getProject(propertyPage) == null) {
				prefs.setValue(PHPDebugCorePreferenceNames.STOP_AT_FIRST_LINE, fStopAtFirstLine.getSelection());
				prefs.setValue(PHPDebugCorePreferenceNames.DEBUG_PORT, fDebugTextBox.getText());
				prefs.setValue(PHPDebugCorePreferenceNames.DEDAULT_URL, fDefaultURLTextBox.getText());
				prefs.setValue(PHPDebugCorePreferenceNames.TRANSFER_ENCODING, fEncodingSettings.getIANATag());
			} else {
				if (node != null) {
					node.remove(PHPDebugCorePreferenceNames.STOP_AT_FIRST_LINE);
					node.remove(PHPDebugCorePreferenceNames.DEBUG_PORT);
					node.remove(PHPDebugCorePreferenceNames.DEDAULT_URL);
					node.remove(PHPDebugCorePreferenceNames.TRANSFER_ENCODING);
				}
			}
		}
		try {
			node.flush();
			PHPDebugPlugin.getDefault().savePluginPreferences();
		} catch (BackingStoreException e) {
			Logger.logException(e);
		}
	}

