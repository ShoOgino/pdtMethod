	/**
	 * Reads and returns server connection tests for given debugger type.
	 * 
	 * @param debuggerId
	 * @return server connection tests
	 */
	public static IDebugServerConnectionTest[] getTests(final String debuggerId) {
		Map<String, IDebugServerConnectionTest> filtersMap = new HashMap<>();
		IConfigurationElement[] elements = Platform.getExtensionRegistry().getConfigurationElementsFor(EXTENSION_ID);
		for (int i = 0; i < elements.length; i++) {
			IConfigurationElement element = elements[i];
			if (PROP_TEST.equals(element.getName())) {
				String debuggerTypeName = elements[i].getAttribute(PROP_DEBUGGER_TYPE);
				String overridesIds = elements[i].getAttribute(PROP_OVERRIDES_ID);
				if (debuggerTypeName.equals(PHPDebuggersRegistry.getDebuggerName(debuggerId))) {
					String id = element.getAttribute(PROP_ID);
					if (!filtersMap.containsKey(id)) {
						if (overridesIds != null) {
							StringTokenizer st = new StringTokenizer(overridesIds, ", "); //$NON-NLS-1$
							while (st.hasMoreTokens()) {
								filtersMap.put(st.nextToken(), null);
							}
						}
						try {
							filtersMap.put(id, (IDebugServerConnectionTest) element.createExecutableExtension("class")); //$NON-NLS-1$
						} catch (CoreException e) {
							Logger.logException(e);
						}
					}

				}
			}
		}
		Collection<IDebugServerConnectionTest> testers = filtersMap.values();
		while (testers.remove(null))
			; // remove null elements
		IDebugServerConnectionTest[] debugTests = testers.toArray(new IDebugServerConnectionTest[testers.size()]);
		return debugTests;
	}

