	public void update(IProgressMonitor monitor) throws CoreException {
		// check for valid composer json, stop processing when invalid
		if (!composerProject.isValidComposerJson()) {
			Logger.log(Logger.INFO, "Stop BuildPathManager, composer.json invalid");
			return;
		}
		
		vendorPath = composerProject.getProject().getFullPath().append(composerProject.getVendorDir());
		composerPath = vendorPath.append("composer");

		IProject project = composerProject.getProject();
		IScriptProject scriptProject = composerProject.getScriptProject();
		BuildPathParser parser = new BuildPathParser(composerProject);
		List<String> paths = parser.getPaths();
		
		// project prefs
		IEclipsePreferences prefs = ComposerPlugin.getDefault().getProjectPreferences(project);
		IPath[] inclusions;

		try {
			String encoded = prefs.get(ComposerPreferenceConstants.BUILDPATH_INCLUDES_EXCLUDES, "");
			exclusions = scriptProject.decodeBuildpathEntry(encoded).getExclusionPatterns();
			inclusions = scriptProject.decodeBuildpathEntry(encoded).getInclusionPatterns();
		} catch (Exception e) {
			exclusions = new IPath[]{};
			inclusions = new IPath[]{};
		}
		
		// add includes
		for (IPath inclusion : inclusions) {
			paths.add(inclusion.toString());
		}
		
		// clean up exclusion patterns: remove exact matches
		List<IPath> exs = new ArrayList<IPath>();
		for (IPath exclusion : exclusions) {
			String exc = exclusion.removeTrailingSeparator().toString();
			
			if (paths.contains(exc)) {
				paths.remove(exc);
			} else {
				exs.add(exclusion);
			}
		}
		exclusions = exs.toArray(new IPath[]{});
		
		// clean build path
		IBuildpathEntry[] rawBuildpath = scriptProject.getRawBuildpath();
		for (IBuildpathEntry entry : rawBuildpath) {
			if (entry.getEntryKind() == IBuildpathEntry.BPE_SOURCE) {
				BuildPathUtils.removeEntryFromBuildPath(scriptProject, entry);
			}
		}
		
		// sort paths for nesting detection
		Collections.sort(paths);
		
		// add new entries to buildpath
		List<IBuildpathEntry> newEntries = new ArrayList<IBuildpathEntry>();
		for (String path : paths) {
			IPath entry = new Path(path);
			IFolder folder = project.getFolder(entry);
			if (folder != null && folder.exists()) {
				addPath(folder.getFullPath(), newEntries);
			}
		}

		if (newEntries.size() > 0) {
			BuildPathUtils.addNonDupEntriesToBuildPath(scriptProject, newEntries);
		}

		IFolder folder = project.getFolder(new Path(composerProject.getVendorDir()));
		
		if (folder != null && folder.exists()) {
			if (!folder.isDerived()) {
				folder.setDerived(true, monitor);
			}

			// disable validation in the vendor folder
			ValidationFramework.getDefault().disableValidation(folder);
		}
	}

