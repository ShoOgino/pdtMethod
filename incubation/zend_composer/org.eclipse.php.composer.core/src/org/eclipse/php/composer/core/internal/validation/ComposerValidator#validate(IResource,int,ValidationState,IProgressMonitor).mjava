	@Override
	public ValidationResult validate(IResource resource, int kind, ValidationState state, IProgressMonitor monitor) {
		ValidationResult result = new ValidationResult();
		if (resource.getType() != IResource.FILE) {
			return result;
		}
		IFile file = (IFile) resource;
		ComposerJsonValidator validator = new ComposerJsonValidator(file);
		validator.validate();
		try {
			// file.deleteMarkers(IMarker.PROBLEM, true, IResource.DEPTH_ZERO);
			if (!validator.isValid()) {
				int start = (int) validator.getCharOffset();
				long byteOffset = validator.getByteOffset();
				ValidatorMessage problem = ValidatorMessage.create(validator.getMessage(), resource);
				problem.setAttribute(IMarker.LINE_NUMBER, validator.getLine());
				problem.setAttribute(IMarker.CHAR_START, (int) validator.getCharOffset());
				problem.setAttribute(IMarker.LINE_NUMBER, validator.getLine());
				problem.setAttribute(IMarker.SEVERITY, IMarker.SEVERITY_ERROR);
				problem.setAttribute(IMarker.CHAR_START, start);
				if (byteOffset <= 0) {
					problem.setAttribute(IMarker.CHAR_END, start + 1);
				} else {
					problem.setAttribute(IMarker.CHAR_END, start + (int) byteOffset);
				}

				result.add(problem);
			} else {
				ComposerRoot root = validator.getObject();
				if (root != null) {
					validatePackages(file, root.getRequire(), result);
					validatePackages(file, root.getRequireDev(), result);
					validatePackages(file, root.getConflict(), result);
					validatePackages(file, root.getReplace(), result);
					validatePackages(file, root.getProvide(), result);
				}
			}
		} catch (CoreException e) {
			ComposerCorePlugin.logError(e);
		}
		return result;
	}

