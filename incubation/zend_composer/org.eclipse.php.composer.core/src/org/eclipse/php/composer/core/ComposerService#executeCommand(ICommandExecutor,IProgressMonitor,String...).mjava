	private Status executeCommand(ICommandExecutor cmd, IProgressMonitor monitor, String... action) {
		error = null;
		if (!isComposerProject(root)) {
			return Status.NOT_COMPOSER;
		}

		PHPexeItem phpExec = getPhpExec();
		if (phpExec == null) {
			return Status.NO_PHP_EXEC;
		}
		File phpExe = phpExec.getExecutable();
		if (phpExe == null || !phpExe.exists()) {
			return Status.NO_PHP_EXEC;
		}
		String execPath = phpExe.getAbsolutePath();

		String composerPhar;
		try {
			composerPhar = getComposerPhar(execPath);
		} catch (CoreException e) {
			error = e;
			return Status.NO_COMPOSER_PHAR;
		}
		File composerFile = new File(composerPhar);
		if (!composerFile.exists()) {
			error = new Exception(Messages.ComposerService_No_Composer_Phar);
			return Status.NO_COMPOSER_PHAR;
		}
		// we need to execute command from the directory where .phar is located,
		// as there is a bug where the absolute path to .phar file cannot exceed
		// 130 characters
		cmd.setWorkingDirectory(composerFile.getParent());

		String workingDir = root.getLocation().toOSString();

		List<String> command = new ArrayList<String>();
		command.add(execPath);
		File iniPath = phpExec.getINILocation();
		if (iniPath == null) {
			File iniFile = new File(phpExec.getExecutable().getParentFile(), PHP_INI);
			if (iniFile.exists()) {
				iniPath = iniFile;
			}
		}
		if (iniPath != null) {
			command.add("-n"); //$NON-NLS-1$
			command.add("-c"); //$NON-NLS-1$
			command.add(iniPath.getAbsolutePath());
		}
		command.add(ComposerPreferences.COMPOSER_PHAR);
		command.addAll(Arrays.asList(action));
		command.add(WORKING_DIR);
		command.add(workingDir);
		cmd.setCommand(command);

		Map<String, String> env = new HashMap<String, String>();
		PHPLaunchUtilities.appendLibrarySearchPathEnv(env, phpExe.getParentFile());
		for (Map.Entry<String, String> entry : env.entrySet()) {
			cmd.setEnvironmentVar(entry.getKey(), entry.getValue());
		}

		try {
			addJGitAndPHPPathToPathEnvVar(cmd);
			addJGitClasspathToEnv(cmd);
			addJavaHomeToEnv(cmd);

			if (cmd.run(monitor) != 0) {
				String errorDetails = cmd.getCommandError();
				if (errorDetails == null || errorDetails.trim().isEmpty()) {
					errorDetails = cmd.getCommandOutput();
				}
				ComposerCorePlugin.logError(new Exception(errorDetails));
				error = new Exception(MessageFormat.format(Messages.ComposerService_CmdExecError, command));
				return Status.ERROR;
			}

		} catch (IOException e) {
			error = e;
			ComposerCorePlugin.logError(e);
			return Status.ERROR;
		}
		return Status.OK;
	}

