	private String normalize(String version) {
		version = version.trim();

		// ignore aliases and just assume the alias is required instead of the
		// source
		String[] matches = null;
		if ((matches = preg_match("^([^,\\s]+) +as +([^,\\s]+)$", version)) != null) { //$NON-NLS-1$
			version = matches[1];
		}

		// match master-like branches
		if (preg_match("^(?:dev-)?(?:master|trunk|default)$", version) != null) { //$NON-NLS-1$
			return null;// "9999999-dev";
		}

		if (version.length() >= 4 && "dev-".equals(version.toLowerCase().substring(0, 4))) { //$NON-NLS-1$
			return null;
		}

		// match classical versioning
		if ((matches = preg_match("^v?(\\d{1,3})(\\.\\d+)?(\\.\\d+)?(\\.\\d+)?" //$NON-NLS-1$
				+ MODIFIER_REGEX + "$", version)) != null) { //$NON-NLS-1$

			return null;
		} else if ((matches = preg_match("^v?(\\d{4}(?:[.:-]?\\d{2}){1,6}(?:[.:-]?\\d{1,3})?)" //$NON-NLS-1$
				+ MODIFIER_REGEX + "$", version)) != null) { // match //$NON-NLS-1$
																// date-based
																// versioning
			return null;
		}

		if (preg_match("(.*?)[.-]?dev$", version) != null) { //$NON-NLS-1$
			return null;
		}

		if (version.startsWith("^")) {
			return normalize(version.substring(1));
		}

		return "Invalid version string \"" + version + "\""; //$NON-NLS-1$ //$NON-NLS-2$
	}

