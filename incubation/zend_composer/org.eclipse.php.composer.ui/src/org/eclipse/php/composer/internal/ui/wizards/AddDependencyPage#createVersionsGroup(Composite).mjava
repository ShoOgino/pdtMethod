	private void createVersionsGroup(Composite container) {
		Group versionGroup = new Group(container, SWT.NONE);
		versionGroup.setLayout(new GridLayout(2, false));
		versionGroup.setLayoutData(new GridData(SWT.FILL, SWT.FILL, false,
				false, 2, 1));
		versionGroup.setText(Messages.AddDependencyPage_VersionGroup);

		versionTypeCombo = new Combo(versionGroup, SWT.READ_ONLY);
		versionTypeCombo.setItems(new String[] {
				Messages.AddDependencyPage_Equals,
				Messages.AddDependencyPage_Matches });
		versionTypeCombo.select(MATCHES_TYPE);
		versionTypeCombo.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				if (versionTypeCombo.getSelectionIndex() == MATCHES_TYPE) {
					versionsStack.topControl = equalsContainer;
				} else {
					versionsStack.topControl = matchesContainer;
				}
				versionsStackComposite.layout();
			}
		});

		versionsStackComposite = new Composite(versionGroup, SWT.NONE);
		versionsStack = new StackLayout();
		versionsStackComposite.setLayout(versionsStack);
		versionsStackComposite.setLayoutData(new GridData(SWT.FILL, SWT.CENTER,
				true, true, 1, 1));

		equalsContainer = new Composite(versionsStackComposite, SWT.NONE);
		equalsContainer.setLayout(new GridLayout(3, false));

		Label equalsLabel = new Label(equalsContainer, SWT.NONE);
		equalsLabel.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false,
				false, 1, 1));
		equalsLabel.setText(Messages.AddDependencyPage_EqualsVersion);

		equalsConstraintCombo = new ComboViewer(equalsContainer, SWT.READ_ONLY);
		equalsConstraintCombo.setContentProvider(ArrayContentProvider
				.getInstance());
		equalsConstraintCombo.setLabelProvider(new LabelProvider());
		equalsConstraintCombo.setInput(VersionConstraint.values());
		equalsConstraintCombo.setSelection(new StructuredSelection(
				VersionConstraint.NONE));
		equalsConstraintCombo.getControl().setLayoutData(
				new GridData(SWT.FILL, SWT.CENTER, false, false, 1, 1));

		equalsCombo = new Combo(equalsContainer, SWT.NONE);
		equalsCombo.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true,
				false, 1, 1));
		equalsCombo.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				if (equalsCombo.getText().equals(DEV_MASTER_VERSION)) {
					equalsConstraintCombo.setSelection(new StructuredSelection(
							VersionConstraint.NONE));
				}
			}
		});

		versionsStack.topControl = equalsContainer;
		versionsStackComposite.layout();

		matchesContainer = new Composite(versionsStackComposite, SWT.NONE);
		matchesContainer.setLayout(new GridLayout(6, false));

		Label minLabel = new Label(matchesContainer, SWT.NONE);
		minLabel.setText(Messages.AddDependencyPage_MinMatches);

		minConstraintCombo = new Combo(matchesContainer, SWT.READ_ONLY);
		fillRangeConstraints(minConstraintCombo);
		minConstraintCombo.setLayoutData(new GridData(SWT.BEGINNING,
				SWT.CENTER, false, false, 1, 1));

		minCombo = new Combo(matchesContainer, SWT.NONE);
		GridData gridData = new GridData(SWT.FILL, SWT.CENTER, true, false);
		gridData.widthHint = 100;
		minCombo.setLayoutData(gridData);

		Label maxLabel = new Label(matchesContainer, SWT.NONE);
		maxLabel.setText(Messages.AddDependencyPage_MaxMatches);

		maxConstraintCombo = new Combo(matchesContainer, SWT.READ_ONLY);
		fillRangeConstraints(maxConstraintCombo);
		maxConstraintCombo.setLayoutData(new GridData(SWT.BEGINNING,
				SWT.CENTER, false, false, 1, 1));

		maxCombo = new Combo(matchesContainer, SWT.NONE);
		gridData = new GridData(SWT.FILL, SWT.CENTER, true, false);
		gridData.widthHint = 100;
		maxCombo.setLayoutData(gridData);
	}

