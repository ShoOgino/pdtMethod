	private Text createTextInput(Composite parent, String label, final IProperty property,
			final IPropertyValidator... validators) {
		Label nameLabel = getManagedForm().getToolkit().createLabel(parent, label + ':', SWT.NONE);
		nameLabel.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false, false, 1, 1));
		final Text text = getManagedForm().getToolkit().createText(parent, property.getValue(), SWT.NONE);
		text.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));
		final ControlDecoration decoration = new ControlDecoration(text, SWT.LEFT | SWT.TOP);
		text.addModifyListener(new ModifyListener() {

			@Override
			public void modifyText(ModifyEvent event) {
				property.setValue(text.getText(), true);
				if (validators != null && validators.length > 0) {
					String result = null;
					for (IPropertyValidator validator : validators) {
						result = validator.validate(property);
						if (result != null) {
							break;
						}
					}
					setFieldErrorMessage(result, decoration);
				}
			}
		});
		modelContainer.addModelListener(new IModelChangeListener() {
			@Override
			public void modelReloaded() {
				if (!text.isDisposed()) {
					if (modelContainer.isLoaded() && canEdit) {
						text.setEnabled(true);
						if (property.getValue() != null) {
							text.setText(property.getValue());
						} else {
							text.setText(""); //$NON-NLS-1$
						}
					} else {
						text.setEnabled(false);
					}
				}
			}
		});
		return text;
	}

