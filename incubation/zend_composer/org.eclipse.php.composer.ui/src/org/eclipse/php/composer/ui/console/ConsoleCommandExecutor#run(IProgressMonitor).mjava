	@Override
	public int run(IProgressMonitor monitor) throws IOException {
		configureProxy();

		Map<String, Object> properties = new HashMap<String, Object>();

		Map<String, String> envMap = getEnvTokens();
		List<String> envs = new ArrayList<>(envMap.size());
		for (String key : envMap.keySet()) {
			envs.add(key + '=' + envMap.get(key));
		}
		properties.put(ITerminalsConnectorConstants.PROP_PROCESS_ENVIRONMENT, envs.toArray(new String[envs.size()]));
		properties.put(ITerminalsConnectorConstants.PROP_PROCESS_MERGE_ENVIRONMENT, true);

		if (EnvironmentUtils.isWindows()) {
			StringBuilder builder = new StringBuilder();
			builder.append("@echo off").append(WINDOWS_END_OF_LINE); //$NON-NLS-1$
			// 65001 - UTF-8
			builder.append("chcp 65001").append(WINDOWS_END_OF_LINE); //$NON-NLS-1$
			builder.append("cls").append(WINDOWS_END_OF_LINE); //$NON-NLS-1$
			for (int i = 0; i < getCommand().length; i++) {
				builder.append(escapePath(getCommand()[i])).append(' ');
			}

			File file = File.createTempFile("composer_windows_", ".bat"); //$NON-NLS-1$ //$NON-NLS-2$
			file.deleteOnExit();
			try (BufferedWriter writer = new BufferedWriter(new FileWriter(file));) {
				writer.write(builder.toString());
			} catch (FileNotFoundException ex) {
				ComposerUIPlugin.logError(ex);
			}

			properties.put(ITerminalsConnectorConstants.PROP_PROCESS_PATH, "cmd"); //$NON-NLS-1$
			String args = "/C " + file.getAbsolutePath(); //$NON-NLS-1$
			properties.put(ITerminalsConnectorConstants.PROP_PROCESS_ARGS, args);
		} else {
			properties.put(ITerminalsConnectorConstants.PROP_PROCESS_PATH, escapePath(getCommand()[0]));
			String args = ""; //$NON-NLS-1$
			for (int i = 1; i < getCommand().length; i++) {
				args += escapePath(getCommand()[i]) + ' ';
			}
			properties.put(ITerminalsConnectorConstants.PROP_PROCESS_ARGS, args);
		}

		properties.put(ITerminalsConnectorConstants.PROP_PROCESS_WORKING_DIR, workingDirectory);

		String exeName = ComposerPreferences.get(ComposerPreferences.PHP_EXEC_NODE);
		String title = MessageFormat.format(Messages.ComposerConsoleManager_ConsoleLabel,
				Messages.ComposerConsoleManager_ConsoleName, exeName);

		final AtomicBoolean closed = new AtomicBoolean(false);

		IConsoleManager consoleManager = ConsolePlugin.getDefault().getConsoleManager();
		TerminalConsole terminalConsole = new TerminalConsole(title, 0, properties, new Done() {

			@Override
			public void done(IStatus status) {
				closed.set(true);
			}
		});
		consoleManager.addConsoles(new IConsole[] { terminalConsole });
		consoleManager.showConsoleView(terminalConsole);

		while (!closed.get()) {
			try {
				Thread.sleep(50);
			} catch (InterruptedException e) {
				ComposerUIPlugin.logError(e);
			}
		}
		return 0;
	}

