	private void createRepositoriesSection(IManagedForm managedForm) {
		Section repoSection = managedForm.getToolkit().createSection(managedForm.getForm().getBody(),
				Section.TWISTIE | Section.TITLE_BAR);
		repoSection.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));
		managedForm.getToolkit().paintBordersFor(repoSection);
		repoSection.setText(Messages.GeneralPage_RepositoriesSection);
		repoSection.setExpanded(true);

		Label repoDescLabel = managedForm.getToolkit().createLabel(repoSection, Messages.GeneralPage_RepositoriesDesc,
				SWT.NONE);
		repoSection.setDescriptionControl(repoDescLabel);

		Composite repoContainer = managedForm.getToolkit().createComposite(repoSection, SWT.NONE);
		managedForm.getToolkit().paintBordersFor(repoContainer);
		repoSection.setClient(repoContainer);
		repoContainer.setLayout(new GridLayout(2, false));

		final TableViewer repoViewer = new TableViewer(repoContainer, SWT.BORDER | SWT.FULL_SELECTION | SWT.MULTI);
		repoViewer.setContentProvider(new RepositoriesContentProvider());
		repoViewer.setLabelProvider(new LabelProvider() {
			public String getText(Object element) {
				if (element instanceof IRepository) {
					IRepository repo = (IRepository) element;
					switch (repo.getType()) {
					case PACKAGE:
						IRepositoryPackage rPackage = repo.getRepositoryPackage();
						return rPackage.getName();
					default:
						return repo.getUrl();
					}
				}
				return super.getText(element);
			}
		});
		repoViewer.setInput(model.getRepositories());

		final Table repoTable = repoViewer.getTable();
		GridData gridData = new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1);
		gridData.widthHint = 200;
		repoTable.setLayoutData(gridData);
		managedForm.getToolkit().paintBordersFor(repoTable);

		Composite repoButtonsContainer = managedForm.getToolkit().createComposite(repoContainer, SWT.NONE);
		repoButtonsContainer.setLayoutData(new GridData(SWT.LEFT, SWT.TOP, false, true, 1, 1));
		managedForm.getToolkit().paintBordersFor(repoButtonsContainer);
		FillLayout layout = new FillLayout(SWT.VERTICAL);
		layout.spacing = 5;
		repoButtonsContainer.setLayout(layout);

		Button addButton = createButton(repoButtonsContainer, Messages.GeneralPage_RepositoriesAdd);
		addButton.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				AddRepositoryDialog dialog = new AddRepositoryDialog(getSite().getShell(), model.getRepositories());
				if (dialog.open() == Window.OK) {
					List<IRepository> toAdd = dialog.getRepositories();
					IRepositories repos = model.getRepositoriesProperty();
					for (IRepository repo : toAdd) {
						repos.addRepository(repo, true);
					}
					if (toAdd.size() > 0) {
						repoViewer.setInput(model.getRepositories());
					}
				}
			}
		});
		final Button removeButton = managedForm.getToolkit().createButton(repoButtonsContainer,
				Messages.GeneralPage_RepositoriesRemove, SWT.NONE);

		removeButton.setEnabled(false);
		removeButton.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				IStructuredSelection selection = (IStructuredSelection) repoViewer.getSelection();
				Object[] selectedRepos = selection.toArray();
				for (Object repo : selectedRepos) {
					model.getRepositories().removeRepository((IRepository) repo, true);
				}
				if (selectedRepos.length > 0) {
					repoViewer.setInput(model.getRepositories());
				}
			}
		});
		repoViewer.addSelectionChangedListener(new ISelectionChangedListener() {
			@Override
			public void selectionChanged(SelectionChangedEvent event) {
				boolean enabled = !event.getSelection().isEmpty();
				removeButton.setEnabled(enabled);
			}
		});

		modelContainer.addModelListener(new IModelChangeListener() {
			@Override
			public void modelReloaded() {
				if (!repoViewer.getSelection().isEmpty()) {
					removeButton.setEnabled(modelContainer.isLoaded() && canEdit);
				}

				repoViewer.setInput(model.getRepositories());
				repoTable.setEnabled(modelContainer.isLoaded() && canEdit);
			}
		});
	}

