	private void createRepositoriesSection(Composite parent) {
		Group filtersSection = new Group(parent, SWT.NONE);
		filtersSection.setText(Messages.ComposerPreferencePage_RepoSection);
		filtersSection.setLayout(new GridLayout(2, false));
		filtersSection.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 2, 1));
		filtersSection.setLayout(new GridLayout(2, false));
		Label filtersLabel = new Label(filtersSection, SWT.NONE);
		filtersLabel.setLayoutData(new GridData(SWT.FILL, SWT.TOP, true, false, 2, 1));
		filtersLabel.setText(Messages.ComposerPreferencePage_RepoDesc);
		viewer = new TableViewer(filtersSection, SWT.SINGLE | SWT.BORDER);
		viewer.getTable().setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));
		viewer.addSelectionChangedListener(new ISelectionChangedListener() {
			public void selectionChanged(SelectionChangedEvent event) {
				ISelection selection = viewer.getSelection();
				if (selection != null && !selection.isEmpty()) {
					removeButton.setEnabled(true);
					modifyButton.setEnabled(true);
				} else {
					removeButton.setEnabled(false);
					modifyButton.setEnabled(false);
				}
			}
		});
		viewer.setContentProvider(new RepositoriesContentProvider());
		viewer.setLabelProvider(new LabelProvider() {
			public String getText(Object element) {
				if (element instanceof IRepository) {
					IRepository repo = (IRepository) element;
					switch (repo.getType()) {
					case PACKAGE:
						IRepositoryPackage rPackage = repo.getRepositoryPackage();
						return rPackage.getName();
					default:
						return repo.getUrl();
					}
				}
				return super.getText(element);
			}
		});

		Composite buttonsSection = new Composite(filtersSection, SWT.NONE);
		GridData gd = new GridData(SWT.FILL, SWT.FILL, false, true);
		gd.widthHint = 90;
		buttonsSection.setLayoutData(gd);
		GridLayout layout = new GridLayout(1, true);
		layout.marginWidth = 0;
		layout.marginHeight = 0;
		buttonsSection.setLayout(layout);
		addButton = new Button(buttonsSection, SWT.PUSH);
		addButton.setText(Messages.ComposerPreferencePage_RepoAdd);
		addButton.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, false));
		addButton.addSelectionListener(new SelectionAdapter() {

			public void widgetSelected(SelectionEvent e) {
				CreateRepositoryWizard wizard = new CreateRepositoryWizard(null, input);
				WizardDialog dialog = new WizardDialog(getShell(), wizard);
				dialog.setPageSize(550, 350);
				dialog.create();
				if (dialog.open() == Window.OK) {
					IRepository repo = wizard.getRepository();
					input.addRepository(repo, true);
					viewer.refresh();
				}
			}
		});
		modifyButton = new Button(buttonsSection, SWT.PUSH);
		modifyButton.setText(Messages.ComposerPreferencePage_RepoModify);
		modifyButton.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, false));
		modifyButton.addSelectionListener(new SelectionAdapter() {

			public void widgetSelected(SelectionEvent e) {
				IStructuredSelection sel = (IStructuredSelection) viewer.getSelection();
				Object[] selected = sel.toArray();
				if (selected.length > 0) {
					IRepository oldRepo = (IRepository) selected[0];
					CreateRepositoryWizard wizard = new CreateRepositoryWizard(oldRepo, input);
					WizardDialog dialog = new WizardDialog(getShell(), wizard);
					dialog.setPageSize(550, 350);
					dialog.create();
					if (dialog.open() == Window.OK) {
						IRepository repo = wizard.getRepository();
						oldRepo.setType(repo.getType());
						oldRepo.setUrl(repo.getUrl());
						oldRepo.setRepositoryPackage(repo.getRepositoryPackage());
						oldRepo.setParameters(repo.getParameters());
						viewer.refresh();
					}
				}
			}
		});
		removeButton = new Button(buttonsSection, SWT.PUSH);
		removeButton.setText(Messages.ComposerPreferencePage_RepoRemove);
		removeButton.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, false));
		removeButton.addSelectionListener(new SelectionAdapter() {

			public void widgetSelected(SelectionEvent e) {
				removeElement(viewer.getSelection());
			}
		});
		removeButton.setEnabled(false);
		modifyButton.setEnabled(false);
	}

