	private void createDependenciesSection(IManagedForm managedForm) {
		Section packagesSection = managedForm.getToolkit().createSection(managedForm.getForm().getBody(),
				Section.TWISTIE | Section.TITLE_BAR);
		packagesSection.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 2));
		managedForm.getToolkit().paintBordersFor(packagesSection);
		packagesSection.setText(Messages.GeneralPage_DependenciesSection);
		packagesSection.setExpanded(true);

		Composite packagesContainer = managedForm.getToolkit().createComposite(packagesSection, SWT.NONE);
		managedForm.getToolkit().paintBordersFor(packagesContainer);
		packagesSection.setClient(packagesContainer);
		packagesContainer.setLayout(new GridLayout(2, false));

		installUpdateLink = managedForm.getToolkit().createImageHyperlink(packagesContainer, SWT.NONE);
		if (ComposerService.isInstalled(composer.getRoot())) {
			installUpdateLink.setText(Messages.GeneralPage_DependenciesUpdate);
			installUpdateLink.setImage(ComposerUIPlugin.getDefault().getImage(ComposerUIPlugin.IMAGE_UPDATE));
		} else {
			installUpdateLink.setText(Messages.GeneralPage_DependenciesInstall);
			installUpdateLink.setImage(ComposerUIPlugin.getDefault().getImage(ComposerUIPlugin.IMAGE_INSTALL));
		}
		installUpdateLink.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, true, false, 2, 1));
		installUpdateLink.addHyperlinkListener(new HyperlinkAdapter() {
			public void linkActivated(HyperlinkEvent e) {
				if (!PlatformUI.getWorkbench().saveAllEditors(true)) {
					return;
				}
				final IProject project = getProjectFromEditor();
				if (project != null && ProjectUtils.checkProject((IContainer) project)) {
					Job opJob = ComposerService.isInstalled(composer.getRoot()) ? new UpdateDependenciesJob(composer)
							: new InstallDependenciesJob(composer);
					opJob.schedule();
				} else {
					// TODO log it
				}
			}
		});
		managedForm.getToolkit().paintBordersFor(installUpdateLink);

		dumpAutoloadLink = managedForm.getToolkit().createImageHyperlink(packagesContainer, SWT.NONE);
		dumpAutoloadLink.setText(Messages.GeneralPage_DumpAutoloadLabel);
		dumpAutoloadLink.setImage(ComposerUIPlugin.getDefault().getImage(ComposerUIPlugin.IMAGE_DUMP_AUTOLOAD));
		dumpAutoloadLink.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, true, false, 2, 1));
		dumpAutoloadLink.addHyperlinkListener(new HyperlinkAdapter() {
			public void linkActivated(HyperlinkEvent e) {
				if (!PlatformUI.getWorkbench().saveAllEditors(true)) {
					return;
				}
				final IProject project = getProjectFromEditor();
				if (project != null && ProjectUtils.checkProject((IContainer) project)) {
					Job opJob = new DumpAutoloadJob(composer);
					opJob.schedule();
				} else {
					// TODO log it
				}
			}
		});
		managedForm.getToolkit().paintBordersFor(installUpdateLink);

		Label packagesListDescLabel = managedForm.getToolkit().createLabel(packagesContainer,
				Messages.GeneralPage_DependenciesDesc, SWT.NONE);
		packagesListDescLabel.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, true, false, 2, 1));

		final TableViewer packagesViewer = new TableViewer(packagesContainer,
				SWT.BORDER | SWT.FULL_SELECTION | SWT.MULTI);
		packagesViewer.setContentProvider(ArrayContentProvider.getInstance());

		packagesTable = packagesViewer.getTable();
		packagesTable.setHeaderVisible(true);
		packagesTable.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));
		managedForm.getToolkit().paintBordersFor(packagesTable);

		TableViewerColumn nameViewerColumn = new TableViewerColumn(packagesViewer, SWT.NONE);
		nameViewerColumn.setLabelProvider(new ColumnLabelProvider() {
			@Override
			public String getText(Object element) {
				return ((IPackage) element).getName();
			}
		});
		TableColumn nameColumn = nameViewerColumn.getColumn();
		nameColumn.setWidth(150);
		nameColumn.setText(Messages.GeneralPage_DependenciesNameColumn);

		TableViewerColumn typeViewerColumn = new TableViewerColumn(packagesViewer, SWT.NONE);
		typeViewerColumn.setLabelProvider(new ColumnLabelProvider() {
			@Override
			public String getText(Object element) {
				return ((IPackage) element).getType().getName();
			}
		});
		TableColumn typeColumn = typeViewerColumn.getColumn();
		typeColumn.setWidth(100);
		typeColumn.setText(Messages.GeneralPage_DependenciesTypeColumn);

		TableViewerColumn versionViewerColumn = new TableViewerColumn(packagesViewer, SWT.NONE);
		versionViewerColumn.setLabelProvider(new ColumnLabelProvider() {
			@Override
			public String getText(Object element) {
				return ((IPackage) element).getVersionConstraint();
			}
		});
		TableColumn versionColumn = versionViewerColumn.getColumn();
		versionColumn.setWidth(100);
		versionColumn.setText(Messages.GeneralPage_DependenciesVersionColumn);

		packagesViewer.setInput(getAllPackages());

		Composite packagesButtonsContainer = managedForm.getToolkit().createComposite(packagesContainer, SWT.NONE);
		packagesButtonsContainer.setLayoutData(new GridData(SWT.LEFT, SWT.TOP, false, true, 1, 1));
		managedForm.getToolkit().paintBordersFor(packagesButtonsContainer);
		FillLayout layout = new FillLayout(SWT.VERTICAL);
		layout.spacing = 5;
		packagesButtonsContainer.setLayout(layout);

		Button addButton = createButton(packagesButtonsContainer, Messages.GeneralPage_DependenciesAdd);
		addButton.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				handleAddPackage(packagesViewer);
				updateInstallLinkState(packagesViewer);
			}
		});
		final Button modifyButton = managedForm.getToolkit().createButton(packagesButtonsContainer,
				Messages.GeneralPage_DependenciesModify, SWT.NONE);
		modifyButton.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				handleModifyPackage(packagesViewer);
			}
		});
		modifyButton.setEnabled(false);
		final Button removeButton = managedForm.getToolkit().createButton(packagesButtonsContainer,
				Messages.GeneralPage_DependenciesRemove, SWT.NONE);

		removeButton.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				handleRemovePackage(packagesViewer);
				updateInstallLinkState(packagesViewer);
			}
		});
		removeButton.setEnabled(false);

		packagesViewer.addSelectionChangedListener(new ISelectionChangedListener() {
			@Override
			public void selectionChanged(SelectionChangedEvent event) {
				boolean enabled = !event.getSelection().isEmpty();
				modifyButton.setEnabled(enabled);
				removeButton.setEnabled(enabled);
			}
		});

		Label packagesDescLabel = managedForm.getToolkit().createLabel(packagesSection,
				Messages.GeneralPage_DependenciesSectionDesc, SWT.NONE);
		packagesSection.setDescriptionControl(packagesDescLabel);

		modelContainer.addModelListener(new IModelChangeListener() {
			@Override
			public void modelReloaded() {
				updateInstallLinkState(packagesViewer);

				dumpAutoloadLink.setEnabled(modelContainer.isLoaded() && canEdit);
				packagesTable.setEnabled(modelContainer.isLoaded() && canEdit);

				if (!packagesViewer.getSelection().isEmpty()) {
					modifyButton.setEnabled(modelContainer.isLoaded() && canEdit);
				}

				if (!packagesViewer.getSelection().isEmpty()) {
					removeButton.setEnabled(modelContainer.isLoaded() && canEdit);
				}

				packagesViewer.setInput(getAllPackages());
			}
		});
	}

