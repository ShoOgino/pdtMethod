	private boolean validatePage() {
		setErrorMessage(null);
		switch (RepositoryType.byName(typeCombo.getText())) {
		case PACKAGE:
			if (packageNameText != null) {
				String packageName = packageNameText.getText();
				if (packageName.isEmpty()) {
					setMessage(Messages.CreateRepositoryPage_SpecifyName);
					return false;
				}
			}
			if (packageVersionText != null) {
				String version = packageVersionText.getText();
				if (version.isEmpty()) {
					setMessage(Messages.CreateRepositoryPage_SpecifyVersion);
					return false;
				}
				PackageVersion v = PackageVersion.byName(version);
				if (v == PackageVersion.UNKNOWN
						|| (v.getMajor() < 0 || v.getMinor() < 0
								|| v.getBuild() < 0 || v.getRevision() < 0)) {
					setErrorMessage(Messages.CreateRepositoryPage_MissingVersion);
					return false;
				}
			}
			String urlString = packageUrlText.getText();
			if (urlString.isEmpty()) {
				setMessage(Messages.CreateRepositoryPage_SpecifyUrl);
				return false;
			} else {
				try {
					new URL(urlString);
				} catch (MalformedURLException e) {
					setErrorMessage(Messages.CreateRepositoryPage_InvalidUrl);
					return false;
				}
			}
			if (packageSourceCombo.getSelectionIndex() == 1) {
				if (packageReferenceText != null) {
					if (packageReferenceText.getText().isEmpty()) {
						setMessage(Messages.CreateRepositoryPage_SpecifyReference);
						return false;
					}
				}
			}
			break;
		default:
			urlString = urlText.getText();
			if (urlString.isEmpty()) {
				setMessage(Messages.CreateRepositoryPage_MissingURLError);
				return false;
			} else {
				try {
					new URL(urlString);
				} catch (MalformedURLException e) {
					setErrorMessage(Messages.CreateRepositoryPage_InvalidURLError);
					return false;
				}
			}
			break;
		}
		if (!extraParamsText.getText().isEmpty()) {
			String extra = extraParamsText.getText();
			try {
				ExtraAttributes.toModel(extra);
			} catch (IOException e) {
				setErrorMessage(Messages.CreateRepositoryPage_InvalidExtraError);
				return false;
			}
		}
		if (repository == null) {
			IRepository repo = getRepository();
			if (repositories.getRepositories().contains(repo)) {
				setErrorMessage(Messages.CreateRepositoryPage_ConflictRepository);
				return false;
			}
		}
		setErrorMessage(null);
		setMessage(Messages.CreateRepositoryPage_Desc);
		return true;
	}

