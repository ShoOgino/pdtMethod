	private void initalizeFields() {
		if (repository != null) {
			String[] types = typeCombo.getItems();
			for (int i = 0; i < types.length; i++) {
				if (RepositoryType.byName(types[i]) == repository.getType()) {
					typeCombo.select(i);
					switch (repository.getType()) {
					case PACKAGE:
						setControlVisibility(defaultTypeGroup, false);
						IRepositoryPackage rp = repository
								.getRepositoryPackage();
						if (rp != null) {
							packageNameText.setText(rp.getName());
							packageVersionText.setText(rp.getVersion());
							if (rp.getDist() != null) {
								IDist dist = rp.getDist();
								packageSourceCombo.select(0);
								packageUrlText.setText(dist.getUrl());
								packageTypeCombo.setText(dist.getType());
							} else if (rp.getSource() != null) {
								ISource source = rp.getSource();
								packageSourceCombo.select(1);
								packageUrlText.setText(source.getUrl());
								packageTypeCombo.setText(source.getType());
								packageReferenceText.setText(source
										.getReference());
							}
						}
						break;
					default:
						setControlVisibility(packageGroup, false);
						if (repository.getUrl() != null) {
							urlText.setText(repository.getUrl());
						}
						break;
					}
					break;
				}
			}
			ExtraAttributes extraObj = new ExtraAttributes();
			Map<String, Object> parameters = repository.getParameters();
			if (parameters != null && parameters.size() > 0) {
				Set<String> keys = parameters.keySet();
				for (String key : keys) {
					extraObj.set(key, parameters.get(key));
				}
			}
			try {
				extraParamsText.setText(extraObj.toList());
			} catch (IOException e) {
				setErrorMessage(Messages.CreateRepositoryPage_CannotParseError);
				ComposerUIPlugin.logError(e);
			}
		} else {
			setControlVisibility(packageGroup, false);
		}
		setMessage(Messages.CreateRepositoryPage_Desc);
		setErrorMessage(null);
		setPageComplete(false);
	}

