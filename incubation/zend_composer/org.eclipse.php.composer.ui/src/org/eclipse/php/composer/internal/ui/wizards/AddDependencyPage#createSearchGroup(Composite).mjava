	private void createSearchGroup(Composite container) {
		searchText = new Text(container, SWT.SINGLE | SWT.BORDER | SWT.SEARCH
				| SWT.ICON_CANCEL);
		searchText.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true,
				false, 2, 1));
		searchText.setFocus();

		searchJob = new UIJob(container.getDisplay(), "Search UI Job") { //$NON-NLS-1$

			@Override
			public IStatus runInUIThread(IProgressMonitor monitor) {
				doSearch();
				return Status.OK_STATUS;
			}
		};
		searchJob.setSystem(true);
		searchJob.setUser(false);

		searchText.addModifyListener(new ModifyListener() {
			@Override
			public void modifyText(ModifyEvent e) {
				applyFilter();
			}
		});
		searchText.addVerifyListener(new VerifyListener() {

			@Override
			public void verifyText(VerifyEvent arg0) {
				if (inProgress) {
					arg0.doit = false;
				}
			}
		});

		this.contentProvider = new DependencySearchContentProvider(
				searchService) {
			@Override
			protected void notifyEndOfList() {
				getShell().getDisplay().asyncExec(new Runnable() {

					@Override
					public void run() {
						doSearchNextPage();
					}
				});
			}
		};

		resultViewer = new TableViewer(container, SWT.SINGLE | SWT.BORDER
				| SWT.VIRTUAL);
		resultViewer.setContentProvider(contentProvider);
		IStyledLabelProvider lp = new DependencySearchLabelProvider();
		resultViewer
				.setLabelProvider(new DelegatingStyledCellLabelProvider(lp));
		resultViewer.setUseHashlookup(true);
		resultViewer.setInput(Collections.emptyList());

		GridData gd = new GridData(SWT.FILL, SWT.FILL, true, true, 2, 1);
		gd.heightHint = 250;
		gd.widthHint = 200;
		resultViewer.getControl().setLayoutData(gd);
		resultViewer
				.addSelectionChangedListener(new ISelectionChangedListener() {
					@Override
					public void selectionChanged(SelectionChangedEvent event) {
						IStructuredSelection selection = (IStructuredSelection) resultViewer
								.getSelection();
						if (selection.isEmpty()
								|| contentProvider.getNumberOfElements() == 0) {
							updateDetailsEnablement(false);
							return;
						}
						selectedPackage = (IPackage) selection
								.getFirstElement();
						updateDetailsEnablement(true);
						updateDetails();
						setPageComplete(validatePage());
					}
				});
	}

