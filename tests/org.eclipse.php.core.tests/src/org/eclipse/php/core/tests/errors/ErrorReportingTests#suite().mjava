	public static Test suite() {

		TestSuite suite = new TestSuite("Error Reporting Tests");

		for (final PHPVersion phpVersion : TESTS.keySet()) {
			TestSuite phpVerSuite = new TestSuite(phpVersion.getAlias());

			for (String testsDirectory : TESTS.get(phpVersion)) {

				for (final String fileName : getPDTTFiles(testsDirectory)) {
					try {
						final PdttFile pdttFile = new PdttFile(fileName);

						phpVerSuite.addTest(new ErrorReportingTests("/"
								+ fileName) {

							protected void setUp() throws Exception {
								PHPCoreTests.setProjectPhpVersion(project,
										phpVersion);
								project.build(
										IncrementalProjectBuilder.FULL_BUILD,
										null);

								PHPCoreTests.waitForIndexer();
								PHPCoreTests.waitForAutoBuild();
							}

							protected void tearDown() throws Exception {
								if (testFile != null) {
									try {
										testFile.delete(true, null);
									} catch (Exception e) {
									}
									testFile = null;
								}
							}

							protected void runTest() throws Throwable {
								IFile file = createFile(pdttFile.getFile());

								StringBuilder buf = new StringBuilder();

								IMarker[] markers = file.findMarkers(
										DefaultProblem.MARKER_TYPE_PROBLEM,
										true, IResource.DEPTH_ZERO);
								for (IMarker marker : markers) {
									buf.append("\n[line=");
									buf.append(marker
											.getAttribute(IMarker.LINE_NUMBER));
									buf.append(", start=");
									buf.append(marker
											.getAttribute(IMarker.CHAR_START));
									buf.append(", end=");
									buf.append(marker
											.getAttribute(IMarker.CHAR_END));
									buf.append("] ");
									buf.append(
											marker.getAttribute(IMarker.MESSAGE))
											.append('\n');
								}
								assertContents(pdttFile.getExpected(),
										buf.toString());
							}
						});
					} catch (final Exception e) {
						phpVerSuite.addTest(new TestCase(fileName) { // dummy
																		// test
									// indicating
									// PDTT
									// file parsing
									// failure
									protected void runTest() throws Throwable {
										throw e;
									}
								});
					}
				}
			}
			suite.addTest(phpVerSuite);
		}

		// Create a setup wrapper
		TestSetup setup = new TestSetup(suite) {
			protected void setUp() throws Exception {
				setUpSuite();
			}

			protected void tearDown() throws Exception {
				tearDownSuite();
			}
		};

		return setup;
	}

