	public static Test suite() {

		TestSuite suite = new TestSuite("Auto Code Assist Tests");

		for (final PHPVersion phpVersion : TESTS.keySet()) {
			TestSuite phpVerSuite = new TestSuite(phpVersion.getAlias());
			
			for (String testsDirectory : TESTS.get(phpVersion)) {

				for (final String fileName : getPDTTFiles(testsDirectory)) {
					try {
						final CodeAssistPdttFile pdttFile = new CodeAssistPdttFile(fileName);
						phpVerSuite.addTest(new CodeAssistTests(phpVersion.getAlias() + " - /" + fileName) {

							protected void setUp() throws Exception {
								Activator.setProjectPhpVersion(project, phpVersion);
							}

							protected void tearDown() throws Exception {
								if (testFile != null) {
									testFile.delete(true, null);
									testFile = null;
								}
							}

							protected void runTest() throws Throwable {
								CompletionProposal[] proposals = getProposals(pdttFile.getFile());
								ExpectedProposal[] expectedProposals = pdttFile.getExpectedProposals();

								boolean proposalsEqual = true;
								if (proposals.length == expectedProposals.length) {
									for (ExpectedProposal expectedProposal : pdttFile.getExpectedProposals()) {
										boolean found = false;
										for (CompletionProposal proposal : proposals) {
											IModelElement modelElement = proposal.getModelElement();
											if (modelElement == null) {
												if (new String(proposal.getName()).equalsIgnoreCase(expectedProposal.name)) { // keyword
													found = true;
													break;
												}
											} else if (modelElement.getElementType() == expectedProposal.type && modelElement.getElementName().equalsIgnoreCase(expectedProposal.name)) {
												found = true;
												break;
											}
										}
										if (!found) {
											proposalsEqual = false;
											break;
										}
									}
								} else {
									proposalsEqual = false;
								}

								if (!proposalsEqual) {
									StringBuilder errorBuf = new StringBuilder();
									errorBuf.append("\nEXPECTED COMPLETIONS LIST:\n-----------------------------\n");
									errorBuf.append(pdttFile.getExpected());
									errorBuf.append("\nACTUAL COMPLETIONS LIST:\n-----------------------------\n");
									for (CompletionProposal p : proposals) {
										IModelElement modelElement = p.getModelElement();
										if (modelElement == null || modelElement.getElementName() == null) {
											errorBuf.append("keyword(").append(p.getName()).append(")\n");
										} else {
											switch (modelElement.getElementType()) {
												case IModelElement.FIELD:
													errorBuf.append("field");
													break;
												case IModelElement.METHOD:
													errorBuf.append("method");
													break;
												case IModelElement.TYPE:
													errorBuf.append("type");
													break;
											}
											errorBuf.append('(').append(modelElement.getElementName()).append(")\n");
										}
									}
									fail(errorBuf.toString());
								}
							}
						});
					} catch (final Exception e) {
						phpVerSuite.addTest(new TestCase(fileName) { // dummy test indicating PDTT file parsing failure
								protected void runTest() throws Throwable {
									throw e;
								}
							});
					}
				}
			}
			suite.addTest(phpVerSuite);
		}

		// Create a setup wrapper
		TestSetup setup = new TestSetup(suite) {
			protected void setUp() throws Exception {
				setUpSuite();
			}

			protected void tearDown() throws Exception {
				tearDownSuite();
			}
		};
		return setup;
	}

