	/*
	 * Creates a script project with the given source folders an output
	 * location. Add those on the project's buildpath.
	 */
	protected IScriptProject createScriptProject(final String projectName, final String[] natures,
			final String[] sourceFolders, final String[] projects, final String[] containers) throws CoreException {
		final IScriptProject[] result = new IScriptProject[1];
		IWorkspaceRunnable create = new IWorkspaceRunnable() {
			@Override
			public void run(IProgressMonitor monitor) throws CoreException {
				// create project
				createProject(projectName);

				IProject project = getWorkspaceRoot().getProject(projectName);

				// add natures
				IProjectDescription description = project.getDescription();
				description.setNatureIds(natures);
				project.setDescription(description, null);

				// create buildpath entries
				IPath projectPath = project.getFullPath();
				int sourceLength = sourceFolders == null ? 0 : sourceFolders.length;
				int containersLength = containers == null ? 0 : containers.length;
				int projectLength = projects == null ? 0 : projects.length;
				IBuildpathEntry[] entries = new IBuildpathEntry[sourceLength + projectLength + containersLength];
				for (int i = 0; i < sourceLength; i++) {
					IPath sourcePath = new Path(sourceFolders[i]);
					int segmentCount = sourcePath.segmentCount();
					if (segmentCount > 0) {
						// create folder and its parents
						IContainer container = project;
						for (int j = 0; j < segmentCount; j++) {
							IFolder folder = container.getFolder(new Path(sourcePath.segment(j)));
							if (!folder.exists()) {
								folder.create(true, true, null);
							}
							container = folder;
						}
					}
					// create source entry
					entries[i] = DLTKCore.newSourceEntry(projectPath.append(sourcePath));
				}

				for (int i = 0; i < projectLength; i++) {

					// accessible files
					IPath[] accessibleFiles;
					accessibleFiles = new IPath[0];

					// non accessible files
					IPath[] nonAccessibleFiles;
					nonAccessibleFiles = new IPath[0];

					entries[sourceLength + i] = DLTKCore.newProjectEntry(new Path(projects[i]),
							BuildpathEntry.getAccessRules(accessibleFiles, nonAccessibleFiles), true,
							new IBuildpathAttribute[0], false);
				}

				for (int i = 0; i < containersLength; i++) {
					entries[sourceLength + projectLength + i] = DLTKCore.newContainerEntry(new Path(containers[i]));
				}
				// set buildpath and output location
				IScriptProject scriptProject = DLTKCore.create(project);
				scriptProject.setRawBuildpath(entries, null);

				result[0] = scriptProject;
			}
		};
		getWorkspace().run(create, null);
		return result[0];
	}

