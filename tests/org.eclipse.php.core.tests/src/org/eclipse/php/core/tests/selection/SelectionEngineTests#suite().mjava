	public static Test suite() {

		TestSuite suite = new TestSuite("Auto Selection Engine Tests");

		for (final PHPVersion phpVersion : TESTS.keySet()) {
			TestSuite phpVerSuite = new TestSuite(phpVersion.getAlias());

			for (String testsDirectory : TESTS.get(phpVersion)) {

				for (final String fileName : getPDTTFiles(testsDirectory)) {
					try {
						final CodeAssistPdttFile pdttFile = new CodeAssistPdttFile(fileName);
						phpVerSuite.addTest(new SelectionEngineTests(phpVersion.getAlias() + " - /" + fileName) {

							protected void setUp() throws Exception {
								PHPCoreTests.setProjectPhpVersion(project, phpVersion);
							}

							protected void tearDown() throws Exception {
								if (testFile != null) {
									testFile.delete(true, null);
									testFile = null;
								}
							}

							protected void runTest() throws Throwable {
								IModelElement[] elements = getSelection(pdttFile.getFile());
								ExpectedProposal[] expectedProposals = pdttFile.getExpectedProposals();

								boolean proposalsEqual = true;
								if (elements.length == expectedProposals.length) {
									for (ExpectedProposal expectedProposal : pdttFile.getExpectedProposals()) {
										boolean found = false;
										for (IModelElement modelElement : elements) {
											if (modelElement.getElementType() == expectedProposal.type && modelElement.getElementName().equalsIgnoreCase(expectedProposal.name)) {
												found = true;
												break;
											}
										}
										if (!found) {
											proposalsEqual = false;
											break;
										}
									}
								} else {
									proposalsEqual = false;
								}

								if (!proposalsEqual) {
									StringBuilder errorBuf = new StringBuilder();
									errorBuf.append("\nEXPECTED ELEMENTS LIST:\n-----------------------------\n");
									errorBuf.append(pdttFile.getExpected());
									errorBuf.append("\nACTUAL ELEMENTS LIST:\n-----------------------------\n");
									for (IModelElement modelElement : elements) {
										switch (modelElement.getElementType()) {
											case IModelElement.FIELD:
												errorBuf.append("field");
												break;
											case IModelElement.METHOD:
												errorBuf.append("method");
												break;
											case IModelElement.TYPE:
												errorBuf.append("type");
												break;
										}
										errorBuf.append('(').append(modelElement.getElementName()).append(")\n");
									}
									fail(errorBuf.toString());
								}
							}
						});
					} catch (final Exception e) {
						phpVerSuite.addTest(new TestCase(fileName) { // dummy test indicating PDTT file parsing failure
								protected void runTest() throws Throwable {
									throw e;
								}
							});
					}
				}
			}
			suite.addTest(phpVerSuite);
		}

		// Create a setup wrapper
		TestSetup setup = new TestSetup(suite) {
			protected void setUp() throws Exception {
				setUpSuite();
			}

			protected void tearDown() throws Exception {
				tearDownSuite();
			}
		};
		return setup;
	}

