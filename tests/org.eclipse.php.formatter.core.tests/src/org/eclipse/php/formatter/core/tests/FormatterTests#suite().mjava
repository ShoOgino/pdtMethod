	public static Test suite() {

		TestSuite suite = new TestSuite("Formatter Tests");

		for (final PHPVersion phpVersion : TESTS.keySet()) {

			Bundle bundle = Activator.getDefault().getBundle();
			String xmlConfigurationFile = null;
			for (String testingDirectory : TESTS.get(phpVersion)) {
				TestSuite phpVerSuite = new TestSuite(phpVersion.getAlias());

				String[] testingDirectories = getTestingDirectories(bundle,
						testingDirectory);
				for (String testsDirectory : testingDirectories) {

					TestSuite formatterConfigurationSuite = new TestSuite(
							testsDirectory);

					// read formatter configuration file from current pdtt
					// directory
					String[] formatterConfigurationFile = getFiles(
							testsDirectory, bundle, ".xml");

					if (formatterConfigurationFile.length > 0) {
						xmlConfigurationFile = formatterConfigurationFile[0];
					} else {
						xmlConfigurationFile = null;
					}

					boolean filesFound = false;
					for (final String fileName : getPDTTFiles(testsDirectory,
							bundle)) {
						filesFound = true;
						try {
							final PdttFile pdttFile = new PdttFile(Activator.getDefault().getBundle(), fileName);
							filesMap.put(pdttFile, null);

							formatterConfigurationSuite
									.addTest(new FormatterTests(phpVersion
											.getAlias() + " - /" + fileName) {

										protected void setUp() throws Exception {
											PHPCoreTests.setProjectPhpVersion(
													project, phpVersion);
										}

										protected void runTest()
												throws Throwable {

											IFile file = filesMap.get(pdttFile);

											IStructuredModel modelForEdit = StructuredModelManager
													.getModelManager()
													.getModelForEdit(file);
											try {
												IDocument document = modelForEdit
														.getStructuredDocument();
												String beforeFormat = document
														.get();

												PHPFormatProcessorProxy formatter = new PHPFormatProcessorProxy();
												formatter.formatDocument(document, 0, document.getLength());

												assertContents(pdttFile
														.getExpected(),
														document.get());

												// change the document text as
												// was
												// before
												// the formatting
												document.set(beforeFormat);
												modelForEdit.save();
											} finally {
												if (modelForEdit != null) {
													modelForEdit
															.releaseFromEdit();
												}
											}
										}
									});
						} catch (final Exception e) {
							phpVerSuite.addTest(new TestCase(fileName) { // dummy
										// test
										// indicating
										// PDTT
										// file
										// parsing
										// failure
										protected void runTest()
												throws Throwable {
											throw e;
										}
									});
						}
					}
					if(filesFound) {
						TestSetup setup = new ConfigurableTestSetup(
								formatterConfigurationSuite, xmlConfigurationFile);
						phpVerSuite.addTest(setup);
					}
				}
				suite.addTest(phpVerSuite);
			}

		}

		return suite;
	}

