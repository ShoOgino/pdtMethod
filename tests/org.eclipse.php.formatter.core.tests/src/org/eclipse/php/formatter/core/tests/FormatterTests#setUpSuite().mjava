	@BeforeList
	public void setUpSuite() throws Exception {
		project = ResourcesPlugin.getWorkspace().getRoot().getProject("FormatterTests_" + suiteCounter++);

		project.create(null);
		project.open(null);
		
		// Disable WTP validation to skip unnecessary clashes
		ValidationFramework.getDefault().suspendValidation(project, true);
		// configure nature
		IProjectDescription desc = project.getDescription();
		desc.setNatureIds(new String[] { PHPNature.ID });
		project.setDescription(desc, null);

		for (String fileName : fileNames) {
			PdttFile pdttFile = new PdttFile(getContext(), fileName);
			IFile file = createFile(pdttFile.getFile().trim());
			files.put(fileName, file);
			pdttFiles.put(fileName, pdttFile);
		}

		project.refreshLocal(IResource.DEPTH_INFINITE, null);
		project.build(IncrementalProjectBuilder.FULL_BUILD, null);

		PHPCoreTests.setProjectPhpVersion(project, phpVersion);

		PHPCoreTests.waitForIndexer();

		profileManager.clearAllSettings(scopeContext);
		profileManager.commitChanges(scopeContext);

		if (xmlFile != null) {
			// apply configuration to the formatter configuration
			// manager
			String abcolutXmlFilePath = null;
			try {
				URL url = FileLocator.find(getContext(), new Path(xmlFile), null);
				URL resolved = FileLocator.resolve(url);
				IPath path = Path.fromOSString(resolved.getFile());
				abcolutXmlFilePath = path.toString();
			} catch (Exception e) {
				Logger.logException(e);
			}

			final File file = new File(abcolutXmlFilePath);
			assertTrue("Formatter Configuration Not Found " + file.toString(), file.exists());

			List<Profile> profiles = null;
			try {

				profiles = ProfileStore.readProfilesFromFile(file);
			} catch (CoreException e) {
				Logger.logException("Error while reading profile configuration xml file", e);
			}

			// should be only one profile in file
			if (profiles != null && profiles.size() > 0) {
				// update formatter configuration profile
				CustomProfile profile = (CustomProfile) profiles.iterator().next();
				profileManager.addProfile(profile);
				profileManager.setSelected(profile);
				profileManager.commitChanges(scopeContext);

			}
		} else {

		}
	}

