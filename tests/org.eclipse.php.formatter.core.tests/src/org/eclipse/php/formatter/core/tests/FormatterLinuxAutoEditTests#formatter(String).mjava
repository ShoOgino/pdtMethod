	@Override
	@Test
	public void formatter(String fileName) throws Exception {
		IFile file = files.get(fileName);
		PdttFile pdttFile = pdttFiles.get(fileName);
		IDocument document = StructuredModelManager.getModelManager().getModelForRead(file).getStructuredDocument();
		String data = document.get();
		int offset1 = data.indexOf(OFFSET_CHAR);
		int offset2 = data.lastIndexOf(OFFSET_CHAR);
		if (offset1 == -1) {
			throw new IllegalArgumentException(data + ",offset character is not set");
		}
		// replace the offset character
		if (offset1 == offset2) {
			data = data.substring(0, offset1) + data.substring(offset1 + 1);
		} else {
			data = data.substring(0, offset1) + data.substring(offset1 + 1, offset2) + data.substring(offset2 + 1);
		}
		document.set(data);
		MainAutoEditStrategy indentLineAutoEditStrategy = new MainAutoEditStrategy();
		DocumentCommand cmd = new DocumentCommand() {
		};
		cmd.offset = offset1;
		cmd.length = offset1 == offset2 ? 0 : offset2 - offset1 - 1;
		if (pdttFile.getOther() != null) {
			cmd.text = pdttFile.getOther().replaceAll("\r\n?", "\n");
		} else {
			cmd.text = "\n";
		}
		cmd.doit = true;
		cmd.shiftsCaret = true;
		cmd.caretOffset = -1;
		indentLineAutoEditStrategy.customizeDocumentCommand(document, cmd);
		document.replace(cmd.offset, cmd.length, cmd.text);
		// Compare contents
		PDTTUtils.assertContents(pdttFile.getExpected().replaceAll("\r\n?", "\n"), document.get());
	}

