	private void validateLineDelimiters(String contents) {

		if (fLegalLineDelimiters == null) {
			// collect all line delimiters in the document
			HashSet existingDelimiters = new HashSet();

			for (int i = fDocument.getNumberOfLines() - 1; i >= 0; i--) {
				try {
					String curr = fDocument.getLineDelimiter(i);
					if (curr != null) {
						existingDelimiters.add(curr);
					}
				} catch (BadLocationException e) {
					e.printStackTrace();
					// DLTKPlugin.log(e);
				}
			}
			if (existingDelimiters.isEmpty()) {
				return; // first insertion of a line delimiter: no test
			}
			fLegalLineDelimiters = existingDelimiters;

		}

		DefaultLineTracker tracker = new DefaultLineTracker();
		tracker.set(contents);

		int lines = tracker.getNumberOfLines();
		if (lines <= 1)
			return;

		for (int i = 0; i < lines; i++) {
			try {
				String curr = tracker.getLineDelimiter(i);
				if (curr != null && !fLegalLineDelimiters.contains(curr)) {
					StringBuffer buf = new StringBuffer("New line delimiter added to new code: "); //$NON-NLS-1$
					for (int k = 0; k < curr.length(); k++) {
						buf.append(String.valueOf((int) curr.charAt(k)));
					}
					// DLTKPlugin.log(new Exception(buf.toString()));
					(new Exception(buf.toString())).printStackTrace();
				}
			} catch (BadLocationException e) {
				e.printStackTrace();
			}
		}
	}

