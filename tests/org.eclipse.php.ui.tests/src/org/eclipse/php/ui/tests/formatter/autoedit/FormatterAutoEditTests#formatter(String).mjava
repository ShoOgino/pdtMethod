	@Test
	public void formatter(String fileName) throws Exception {
		final PdttFile pdttFile = new PdttFile(PHPUiTests.getDefault().getBundle(), fileName);
		final String cursor = getCursor(pdttFile) != null ? getCursor(pdttFile) : DEFAULT_CURSOR;
		final DocumentCommand cmd = createFile(pdttFile.getFile().trim(), cursor);
		final ISourceModule modelElement = (ISourceModule) DLTKCore.create(testFile);
		if (ScriptModelUtil.isPrimary(modelElement))
			modelElement.becomeWorkingCopy(new IProblemRequestor() {

				public void acceptProblem(IProblem problem) {
				}

				public void beginReporting() {
				}

				public void endReporting() {
				}

				public boolean isActive() {
					return false;
				}
			}, null);

		final Exception[] err = new Exception[1];

		IStructuredModel modelForEdit = StructuredModelManager.getModelManager().getModelForEdit(testFile);
		try {
			final IDocument document = modelForEdit.getStructuredDocument();
			Display.getDefault().syncExec(new Runnable() {

				@Override
				public void run() {
					try {
						openEditor();
					} catch (Exception e) {
						err[0] = e;
					}
				}
			});
			if (err[0] != null) {
				throw err[0];
			}

			SharedASTProvider.getAST(modelElement, SharedASTProvider.WAIT_YES, null);

			Display.getDefault().syncExec(new Runnable() {

				@Override
				public void run() {
					try {
						IAutoEditStrategy indentLineAutoEditStrategy = new MainAutoEditStrategy();

						if (pdttFile.getOther() != null && !pdttFile.getOther().isEmpty()) {
							cmd.text = pdttFile.getOther().substring(0, pdttFile.getOther().length() - 1);
							if (cmd.text != null && cmd.text.trim().length() == 1) {
								// support single (non-blank) character
								// insertion
								cmd.text = cmd.text.trim();
							}
						} else {
							cmd.text = "\n";
						}

						cmd.doit = true;
						cmd.shiftsCaret = true;
						cmd.caretOffset = -1;

						indentLineAutoEditStrategy.customizeDocumentCommand(document, cmd);
						document.replace(cmd.offset, cmd.length, cmd.text);
					} catch (Exception e) {
						err[0] = e;
					}
				}
			});
			if (err[0] != null) {
				throw err[0];
			}

			PDTTUtils.assertContents(pdttFile.getExpected(), document.get());

			modelForEdit.save();
		} finally {
			if (modelForEdit != null) {
				modelForEdit.releaseFromEdit();
			}
			Display.getDefault().syncExec(new Runnable() {

				@Override
				public void run() {
					try {
						closeEditor();
					} catch (Exception e) {
						err[0] = e;
					}
				}
			});
			if (err[0] != null) {
				throw err[0];
			}

		}
	}

