	public static Test suite() {

		TestSuite suite = new TestSuite("Content Assist Tests");
		for (Entry<PHPVersion, String[]> pair : TESTS.entrySet()) {
			phpVersion = pair.getKey();
			TestSuite phpVerSuite = new TestSuite(phpVersion.getAlias());

			for (int i = 0; i < pair.getValue().length; i++) {
				String[] files = getPDTTFiles(pair.getValue()[i], PHPUiTests
						.getDefault().getBundle());

				for (final String fileName : files) {
					try {
						final PdttFile pdttFile = new PdttFile(PHPUiTests
								.getDefault().getBundle(), fileName);
						phpVerSuite.addTest(new ContentAssistTests(phpVersion
								.getAlias()
								+ " - /" + fileName) {

							protected void setUp() throws Exception {
								PHPCoreTests.setProjectPhpVersion(project,
										phpVersion);
								pdttFile.applyPreferences();
							}

							protected void tearDown() throws Exception {
								if (testFile != null) {
									testFile.delete(true, null);
									testFile = null;
								}
							}

							protected void runTest() throws Throwable {
								String data = pdttFile.getFile();
								int offset = data.lastIndexOf(OFFSET_CHAR);

								// replace the offset character
								data = data.substring(0, offset)
										+ data.substring(offset + 1);

								createFile(new ByteArrayInputStream(data
										.getBytes()), fileName);
								String result = executeAutoInsert(offset);
								closeEditor();
								if (!pdttFile.getExpected().trim().equals(
										result.trim())) {
									StringBuilder errorBuf = new StringBuilder();
									errorBuf.append("\nEXPECTED COMPLETIONS LIST:\n-----------------------------\n");
									errorBuf.append(pdttFile.getExpected());
									errorBuf.append("\nACTUAL COMPLETIONS LIST:\n-----------------------------\n");
									errorBuf.append(result);
									fail(errorBuf.toString());
								}
							}
						});
					} catch (final Exception e) {
						phpVerSuite.addTest(new TestCase(fileName) {
							protected void runTest() throws Throwable {
								throw e;
							}
						});
					}
				}
			}

			suite.addTest(phpVerSuite);
		}

		// Create a setup wrapper
		TestSetup setup = new TestSetup(suite) {
			protected void setUp() throws Exception {
				setUpSuite();
			}

			protected void tearDown() throws Exception {
				tearDownSuite();
			}
		};
		return setup;
	}

