	public static Test suite() {

		TestSuite suite = new TestSuite("Semantic Highlighting Tests");
		for (Entry<PHPVersion, String> pair : TESTS.entrySet()) {
			PHPVersion phpVersion = pair.getKey();
			TestSuite phpVerSuite = new TestSuite(phpVersion.getAlias());

			String[] files = getPDTTFiles(pair.getValue());

			for (final String fileName : files) {
				try {
					final PdttFile pdttFile = new PdttFile(fileName);
					phpVerSuite.addTest(new SemanticHighlightingTests(
							phpVersion.getAlias() + " - /" + fileName) {

						protected void setUp() throws Exception {
							PHPCoreTests.setProjectPhpVersion(project,
									PHPVersion.PHP5_3);
						}

						protected void tearDown() throws Exception {
							if (testFile != null) {
								testFile.delete(true, null);
								testFile = null;
							}
						}

						@SuppressWarnings("restriction")
						protected void runTest() throws Throwable {
							;
							String result = "";
							createFile(new ByteArrayInputStream(pdttFile
									.getFile().getBytes()));
							ISourceModule module = getSourceModule();
							assertNotNull(module);
							String index = fileName.substring(fileName
									.lastIndexOf('/') + 1, fileName
									.indexOf('.'));
							// System.err.println(index);
							AbstractSemanticHighlighting highlighter = highlighters
									.get(index);
							assertNotNull(highlighter);
							highlighter.setSourceModule(module);
							Position[] positions = highlighter
									.consumes(getProgram(module));
							result += highlighter.getClass().getName() + ":\n";
							for (Position position : positions) {
								result += "highlight("
										+ pdttFile.getFile().substring(
												position.getOffset(),
												position.getOffset()
														+ position.getLength())
										+ ")\n";
							}

							// System.err.println(result);
							assertEquals(pdttFile.getExpected(), result);
						}

						private Program getProgram(ISourceModule module)
								throws ModelException, IOException {
							return SharedASTProvider.getAST(module,
									SharedASTProvider.WAIT_YES, null);

						}
					});
				} catch (final Exception e) {
					phpVerSuite.addTest(new TestCase(fileName) {
						protected void runTest() throws Throwable {
							throw e;
						}
					});
				}
			}
			suite.addTest(phpVerSuite);
		}

		// Create a setup wrapper
		TestSetup setup = new TestSetup(suite) {
			protected void setUp() throws Exception {
				setUpSuite();
			}

			protected void tearDown() throws Exception {
				tearDownSuite();
			}
		};
		return setup;
	}

