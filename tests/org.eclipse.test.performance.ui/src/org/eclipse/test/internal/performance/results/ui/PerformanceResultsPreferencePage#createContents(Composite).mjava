/**
 * (non-Javadoc) Method declared on PreferencePage
 */
protected Control createContents(Composite parent) {

	// Eclipse version choice
	Composite composite_eclipseVersion = createComposite(parent, 5, 1);
	createLabel(composite_eclipseVersion, "Eclipse version", false);
	Composite composite_versionChoice = createComposite(composite_eclipseVersion, 5, 1);
	this.mVersionRadioButton = createRadioButton(composite_versionChoice, "v"+ECLIPSE_MAINTENANCE_VERSION);
	this.dVersionRadionButton = createRadioButton(composite_versionChoice, "v"+ECLIPSE_DEVELOPMENT_VERSION);

	// Database location
	Composite compositeDatabase = createComposite(parent, 5, 1);
	Group databaseGroup = createGroup(compositeDatabase, "Database");
	Composite compositeDatabaseConnection = createComposite(databaseGroup, 3, 5);
	this.dbConnectionCheckBox = createCheckBox(compositeDatabaseConnection, "Connected");
	this.dbRelengRadioButton = createRadioButton(compositeDatabaseConnection, "Releng");
	this.dbLocalRadioButton = createRadioButton(compositeDatabaseConnection, "Local");
	this.dbLocationLabel = createLabel(databaseGroup, "Location", false);
	this.databaseLocationCombo = createCombo(databaseGroup);
	this.databaseLocationCombo.setEditable(false);
    this.dbLocalBrowseButton = createPushButton(databaseGroup, "Browse");

	// Milestones
	Composite compositeMilestones = createComposite(parent, 3, 1);
	createLabel(compositeMilestones, "Milestones", false);
	this.milestonesCombo = createCombo(compositeMilestones);
	this.milestonesCombo.setToolTipText("Enter the date of the milestone as yyyymmddHHMM");

	// Default dimension layout
	StringBuffer tooltip = new StringBuffer("Select the default dimension which will be used for performance results\n");
	tooltip.append("When changed, the new selected dimension is automatically added to the dimensions list below...");
	String tooltipText = tooltip.toString();
	Composite compositeDefaultDimension = createComposite(parent, 3, 1);
	createLabel(compositeDefaultDimension, "Default dimension: ", false);
	this.defaultDimensionCombo = createCombo(compositeDefaultDimension);
	this.defaultDimensionCombo.setEditable(false);
	this.defaultDimensionCombo.setToolTipText(tooltipText);

	// Results dimensions layout
	tooltip = new StringBuffer("Select the dimensions which will be used while generating performance results\n");
	tooltip.append("When changed, the default dimension above is automatically added to the new list...");
	tooltipText = tooltip.toString();
	Composite compositeResultsDimensions = createComposite(parent, 3, 1);
	createLabel(compositeResultsDimensions, "Results dimensions: ", true/*beginning*/);
	this.resultsDimensionsList = createList(compositeResultsDimensions);
	this.resultsDimensionsList.setToolTipText(tooltipText);

	// Config descriptors layout
	/* TODO See whether config descriptors need to be set as preferences or not...
	Composite compositeConfigDescriptors = createComposite(parent, 3);
	createLabel(compositeConfigDescriptors, "Config descriptors: ", false);
	this.configDescriptorsTable = createTable(compositeConfigDescriptors);
	TableColumn firstColumn = new TableColumn(this.configDescriptorsTable, SWT.LEFT);
	firstColumn.setText ("Name");
	firstColumn.setWidth(50);
	TableColumn secondColumn = new TableColumn(this.configDescriptorsTable, SWT.FILL | SWT.LEFT);
	secondColumn.setText ("Description");
	secondColumn.setWidth(300);
	*/

	// init values
	initializeValues();

	// font = null;
	Composite contents = new Composite(parent, SWT.NULL);
	contents.pack(true);
	return contents;
}

