/**
 * Get all data points for a given scenario and configuration.
 *
 * @param config The name of the concerned configuration
 * @param scenarioID The id of the scenario
 * @param lastBuildName Name of the last build on which data were stored locally
 * @param lastBuildTime Date in ms of the last build on which data were stored locally
 * @return A set of the query result
 * @throws SQLException
 */
ResultSet queryScenarioTimestampDataPoints(String config, int scenarioID, String lastBuildName, long lastBuildTime) throws SQLException {
	if (DB_Results.LOG) DB_Results.LOG_WRITER.starts("		+ SQL query (config="+config+", scenario ID="+scenarioID+", build name="+lastBuildName); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
	if (this.queryScenarioTimestampDataPoints== null) {
		String statement = "select DATAPOINT.ID, DATAPOINT.STEP, VARIATION.KEYVALPAIRS from SAMPLE, DATAPOINT, VARIATION where " + //$NON-NLS-1$
			"SAMPLE.SCENARIO_ID = ? and " + //$NON-NLS-1$
			"DATAPOINT.SAMPLE_ID = SAMPLE.ID and " + //$NON-NLS-1$
			"SAMPLE.STARTTIME > ? and " + //$NON-NLS-1$
			"SAMPLE.VARIATION_ID = VARIATION.ID " + //$NON-NLS-1$
			"ORDER BY DATAPOINT.ID, DATAPOINT.STEP"; //$NON-NLS-1$
		this.queryScenarioTimestampDataPoints = this.fConnection.prepareStatement(statement);
	}
	this.queryScenarioTimestampDataPoints.setInt(1, scenarioID);
	Timestamp timestamp = new Timestamp(lastBuildTime+(5*3600L*1000)); // create a time-stamp 5h after the given build time
	this.queryScenarioTimestampDataPoints.setTimestamp(2, timestamp);
	ResultSet resultSet =  this.queryScenarioTimestampDataPoints.executeQuery();
	if (DB_Results.LOG) DB_Results.LOG_WRITER.ends(")"); //$NON-NLS-1$
	return resultSet;
}

