int initStatus(BuildResults buildResults) {
	this.status = READ;
	double buildValue = buildResults.getValue();
	ConfigResults configResults = (ConfigResults) buildResults.getParent();
	BuildResults baselineResults = configResults.getBaselineBuildResults(buildResults.getName());
	double baselineValue = baselineResults.getValue();
	double delta = (baselineValue - buildValue) / baselineValue;
	if (Double.isNaN(delta)) {
		this.status |= NO_BASELINE;
	}
	long baselineCount = baselineResults.getCount();
	long currentCount = buildResults.getCount();
	double error = Double.NaN;
	if (baselineCount == 1 || currentCount == 1) {
		this.status |= SINGLE_RUN;
	} else {
		double ttestValue = Util.computeTTest(baselineResults, buildResults);
		int degreeOfFreedom = (int) (baselineResults.getCount()+buildResults.getCount()-2);
		if (ttestValue >= 0 && StatisticsUtil.getStudentsT(degreeOfFreedom, StatisticsUtil.T90) >= ttestValue) {
			this.status |= STUDENT_TTEST;
		}
		double baselineError = baselineResults.getError();
		double currentError = buildResults.getError();
		error = Double.isNaN(baselineError)
				? currentError / baselineValue
				: Math.sqrt(baselineError*baselineError + currentError*currentError) / baselineValue;
		if (error > 0.03) {
			this.status |= BIG_ERROR;
		}
		if (delta < -0.1) {
			this.status |= BIG_DELTA;
			double currentBuildValue = buildResults.getValue();
			double diff = Math.abs(baselineValue - currentBuildValue);
			if (currentBuildValue < 100 || diff < 100) { // moderate the status when
				// diff is less than 100ms
				this.status |= SMALL_VALUE;
			} else {
				if (this.deviation < 0) {
					double[] stats = ((ConfigResults)buildResults.getParent()).getStatistics();
					this.deviation = stats[3];
				}
				if (this.deviation > 20) { // invalidate the status when the test
					// historical deviation is over 20%
					this.status |= NOT_RELIABLE;
				} else if (this.deviation > 10) { // moderate the status when the test
					// historical deviation is between 10%
					// and 20%
					this.status |= NOT_STABLE;
				}
			}
		}
	}
	return this.status;
}

