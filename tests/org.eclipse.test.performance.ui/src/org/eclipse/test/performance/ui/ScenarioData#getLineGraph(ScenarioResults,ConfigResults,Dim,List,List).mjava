/*
 * Returns a LineGraph object representing measurements for a scenario over builds.
 */
private TimeLineGraph getLineGraph(ScenarioResults scenarioResults, ConfigResults configResults, Dim dim, List highlightedPoints, List currentBuildIdPrefixes) {
	Display display = Display.getDefault();

	Color black = display.getSystemColor(SWT.COLOR_BLACK);
	Color yellow = display.getSystemColor(SWT.COLOR_DARK_YELLOW);
	Color magenta = display.getSystemColor(SWT.COLOR_MAGENTA);

	String scenarioName = scenarioResults.getName();
	TimeLineGraph graph = new TimeLineGraph(scenarioName + ": " + dim.getName(), dim);
	String baseline = configResults.getBaselineBuildName();
	String current = configResults.getCurrentBuildName();

	final String defaultBaselinePrefix = DB_Results.getDbBaselinePrefix();
	Iterator builds = configResults.getResults();
	List lastSevenNightlyBuilds = configResults.lastNightlyBuildNames(7);
	buildLoop: while (builds.hasNext()) {
		BuildResults buildResults = (BuildResults) builds.next();
		String buildID = buildResults.getName();
		int underscoreIndex = buildID.indexOf('_');
		String label = (underscoreIndex != -1 && buildID.equals(current)) ? buildID.substring(0, underscoreIndex) : buildID;
		if (buildID.startsWith(defaultBaselinePrefix)) {
			label = defaultBaselinePrefix+buildID.charAt(defaultBaselinePrefix.length())+buildID.substring(underscoreIndex);
		}

		double value = buildResults.getValue(dim.getId());

		if (buildID.equals(current)) {
			Color color = black;
			if (buildID.startsWith("N"))
				color = yellow;

			graph.addItem("main", label, dim.getDisplayValue(value), value, color, true, Utils.getDateFromBuildID(buildID), true);
			continue;
		}
		if (highlightedPoints.contains(buildID)) {
			graph.addItem("main", label, dim.getDisplayValue(value), value, black, false, Utils.getDateFromBuildID(buildID, false), true);
			continue;
		}
		if (buildID.charAt(0) == 'N') {
			if (lastSevenNightlyBuilds.contains(buildID)) {
				graph.addItem("main", buildID, dim.getDisplayValue(value), value, yellow, false, Utils.getDateFromBuildID(buildID), false);
			}
			continue;
		}
		for (int i=0;i<currentBuildIdPrefixes.size();i++){
			if (buildID.startsWith(currentBuildIdPrefixes.get(i).toString())) {
				graph.addItem("main", buildID, dim.getDisplayValue(value), value, black, false, Utils.getDateFromBuildID(buildID), false);
				continue buildLoop;
			}
		}
		if (buildID.equals(baseline)) {
			boolean drawBaseline = (this.baselinePrefix != null) ? false : true;
			graph.addItem("reference", label, dim.getDisplayValue(value), value, magenta, true, Utils.getDateFromBuildID(buildID, true), true, drawBaseline);
			continue;
		}
		if (this.baselinePrefix != null) {
			if (buildID.startsWith(this.baselinePrefix) && !buildID.equals(baseline) && Utils.getDateFromBuildID(buildID, true) <= Utils.getDateFromBuildID(baseline, true)) {
				graph.addItem("reference", label, dim.getDisplayValue(value), value, magenta, false, Utils.getDateFromBuildID(buildID, true), false);
				continue;
			}
		}
	}
	return graph;
}

