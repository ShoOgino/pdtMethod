	public static long getDateFromBuildID(String buildId, boolean matchLast) {
		Calendar calendar = Calendar.getInstance();

		if (buildId.indexOf('_') != -1) {
			String[] buildIdParts = buildId.split("_");

			int buildIdSegment = 1;
			if (matchLast)
				buildIdSegment = buildIdParts.length - 1;
			// if release build, expect <release>_<release date and
			// timestamp>_<date and timestamp test ran>
			// use test date and time for plotting
			int year = Integer.parseInt(buildIdParts[buildIdSegment].substring(0, 4));
			int month = Integer.parseInt(buildIdParts[buildIdSegment].substring(4, 6)) - 1;
			int date = Integer.parseInt(buildIdParts[buildIdSegment].substring(6, 8));
			int hours = Integer.parseInt(buildIdParts[buildIdSegment].substring(8, 10));
			int min = Integer.parseInt(buildIdParts[buildIdSegment].substring(10, 12));

			calendar.set(year, month, date, hours, min);
			return calendar.getTimeInMillis();

		} else if (buildId.indexOf('-') != -1) {
			// if regular build, expect <buildType><date>-<time> format
			String[] buildIdParts = buildId.split("-");
			int year = Integer.parseInt(buildIdParts[0].substring(1, 5));
			int month = Integer.parseInt(buildIdParts[0].substring(5, 7)) - 1;
			int date = Integer.parseInt(buildIdParts[0].substring(7, 9));
			int hours = Integer.parseInt(buildIdParts[1].substring(0, 2));
			int min = Integer.parseInt(buildIdParts[1].substring(2, 4));
			calendar.set(year, month, date, hours, min);

			return calendar.getTimeInMillis();
		}

		return -1;
	}

