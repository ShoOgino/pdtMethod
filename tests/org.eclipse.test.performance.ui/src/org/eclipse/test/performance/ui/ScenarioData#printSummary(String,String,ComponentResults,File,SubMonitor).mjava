/*
 * Print the summary file of the builds data.
 */
void printSummary(String configName, String configBox, ComponentResults componentResults, File outputDir, SubMonitor subMonitor) {
	Iterator scenarios = componentResults.getResults();
	while (scenarios.hasNext()) {
		List highlightedPoints = new ArrayList();
		ScenarioResults scenarioResults = (ScenarioResults) scenarios.next();
		ConfigResults configResults = scenarioResults.getConfigResults(configName);
		if (configResults == null || !configResults.isValid()) continue;

		// get latest points of interest matching
		if (this.pointsOfInterest != null) {
			Iterator buildPrefixes = this.pointsOfInterest.iterator();
			while (buildPrefixes.hasNext()) {
				String buildPrefix = (String) buildPrefixes.next();
				List builds = configResults.getBuilds(buildPrefix);
				if (buildPrefix.indexOf('*') <0 && buildPrefix.indexOf('?') < 0) {
					if (builds.size() > 0) {
						highlightedPoints.add(builds.get(builds.size()-1));
					}
				} else {
					highlightedPoints.addAll(builds);
				}
			}
		}

		String scenarioFileName = scenarioResults.getFileName();
		File outputFile = new File(outputDir, scenarioFileName+".html");
		PrintStream stream = null;
		try {
			stream = new PrintStream(new BufferedOutputStream(new FileOutputStream(outputFile)));
		} catch (FileNotFoundException e) {
			System.err.println("can't create output file" + outputFile); //$NON-NLS-1$
		}
		if (stream == null) {
			stream = System.out;
		}
		stream.print(Utils.HTML_OPEN);
		stream.print(Utils.HTML_DEFAULT_CSS);

		stream.print("<title>" + scenarioResults.getName() + "(" + configBox + ")" + "</title></head>\n"); //$NON-NLS-1$
		stream.print("<h4>Scenario: " + scenarioResults.getName() + " (" + configBox + ")</h4><br>\n"); //$NON-NLS-1$ //$NON-NLS-2$

		String failureMessage = Utils.failureMessage(configResults.getCurrentBuildDeltaInfo(), true);
 		if (failureMessage != null){
   			stream.print("<table><tr><td><b>"+failureMessage+"</td></tr></table>\n");
 		}

 		BuildResults currentBuildResults = configResults.getCurrentBuildResults();
 		String comment = currentBuildResults.getComment();
		if (comment != null) {
			stream.print("<p><b>Note:</b><br>\n");
			stream.print(comment + "</p>\n");
		}

		// Print link to raw data.
		String rawDataFile = "raw/" + scenarioFileName+".html";
		stream.print("<br><br><b><a href=\""+rawDataFile+"\">Raw data and Stats</a></b><br><br>\n");
		stream.print("<b>Click measurement name to view line graph of measured values over builds.</b><br><br>\n");
		if (subMonitor.isCanceled()) throw new OperationCanceledException();

		try {
			// Print build result table
			stream.print("<table border=\"1\">\n"); //$NON-NLS-1$
			stream.print("<tr><td><b>Build Id</b></td>"); //$NON-NLS-1$
			int dimLength = this.dimensions.length;
			for (int d=0; d<dimLength; d++) {
				Dim dim = this.dimensions[d];
				stream.print("<td><a href=\"#" + dim.getLabel() + "\"><b>" + dim.getName() + "</b></a></td>");
			}
			stream.print("</tr>\n");

			// Write build lines
			printTableLine(stream, currentBuildResults);
			printTableLine(stream, configResults.getBaselineBuildResults());

			// Write difference line
			printDifferenceLine(stream, configResults);

			// End of table
			stream.print("</table>\n");
			stream.print("*Delta values in red and green indicate degradation > 10% and improvement > 10%,respectively.<br><br>\n");
			stream.print("<br><hr>\n\n");

			// print text legend.
			stream.print("Black and yellow points plot values measured in integration and last seven nightly builds.<br>\n" + "Magenta points plot the repeated baseline measurement over time.<br>\n"
					+ "Boxed points represent previous releases, milestone builds, current reference and current build.<br><br>\n"
					+ "Hover over any point for build id and value.\n");

			// print image maps of historical
			for (int d=0; d<dimLength; d++) {
				Dim dim = this.dimensions[d];
				TimeLineGraph lineGraph = getLineGraph(scenarioResults, configResults, dim, highlightedPoints, this.buildIDStreamPatterns);
				if (subMonitor.isCanceled()) throw new OperationCanceledException();

				String dimShortName = dim.getLabel();
				String imgFileName = scenarioFileName + "_" + dimShortName;
				File imgFile = createFile(outputDir, "graphs", imgFileName, "gif");
				saveGraph(lineGraph, imgFile);
				stream.print("<br><a name=\"" + dimShortName + "\"></a>\n");
				stream.print("<br><b>" + dim.getName() + "</b><br>\n");
				stream.print(dim.getDescription() + "<br><br>\n");
				stream.print("<img src=\"graphs/");
				stream.print(imgFile.getName());
				stream.print("\" usemap=\"#" + lineGraph.fTitle + "\">");
				stream.print("<map name=\"" + lineGraph.fTitle + "\">");
				stream.print(lineGraph.getAreas());
				stream.print("</map>\n");
				if (subMonitor.isCanceled()) throw new OperationCanceledException();
			}
			stream.print("<br><br></body>\n");
			stream.print(Utils.HTML_CLOSE);
			if (stream != System.out)
				stream.close();

		} catch (AssertionFailedError e) {
			e.printStackTrace();
			continue;
		}
	}
}

