	/**
	 * Collect global performance info. This includes things like the total
	 * committed memory for the entire system.
	 * 
	 * This function depends on the GetPerformanceInfo() function being available in
	 * the Windows ivjperf.dll. This is available in XP but is usually not available
	 * in Win2000. If it is not available then this function throws an UnsupportedOperationException.
	 * @param scalars
	 */
	protected void collectGlobalPerformanceInfo(Map scalars) {
		synchronized(this) {
			if (!fgNativeGetPerformanceInfoNotAvailable && org.eclipse.perfmsr.core.PerformanceMonitor.isLoaded()) {
		    	long[] counters= new long[13];
				try {
					org.eclipse.perfmsr.core.PerformanceMonitor.nativeGetPerformanceInfo(counters);
					long pageSize= counters[9];
					addScalar(scalars, InternalDimensions.COMMIT_TOTAL, counters[0]*pageSize);
					addScalar(scalars, InternalDimensions.COMMIT_LIMIT, counters[1]*pageSize); 
					addScalar(scalars, InternalDimensions.COMMIT_PEAK, counters[2]*pageSize);
					addScalar(scalars, InternalDimensions.PHYSICAL_TOTAL, counters[3]*pageSize); 
					addScalar(scalars, InternalDimensions.PHYSICAL_AVAIL, counters[4]*pageSize); 
					addScalar(scalars, InternalDimensions.SYSTEM_CACHE, counters[5]*pageSize);
					addScalar(scalars, InternalDimensions.KERNEL_TOTAL, counters[6]*pageSize); 
					addScalar(scalars, InternalDimensions.KERNEL_PAGED, counters[7]*pageSize); 
					addScalar(scalars, InternalDimensions.KERNEL_NONPAGED, counters[8]*pageSize); 
					addScalar(scalars, InternalDimensions.PAGE_SIZE, counters[9]);
					addScalar(scalars, InternalDimensions.HANDLE_COUNT, counters[10]); 
					addScalar(scalars, InternalDimensions.PROCESS_COUNT, counters[11]); 
					addScalar(scalars, InternalDimensions.THREAD_COUNT, counters[12]);
				} catch (Exception e) {
				    PerformanceTestPlugin.logWarning("native function GetPerformanceInfo() not available on this version of Windows"); //$NON-NLS-1$
					fgNativeGetPerformanceInfoNotAvailable= true;
				}
			}
		    super.collectGlobalPerformanceInfo(scalars);
		}
	}

