	/**
	 * Returns the dimensions displayed in the performance results.
	 *
	 * @return The list of {@link Dimension}   which will be displayed in the generated results data pages.
	 */
	public static Dimension[] getResultsDimensions() {
		String resultsDimension = System.getProperty(ECLIPSE_PERF_RESULTS_DIMENSIONS);
		if (resultsDimension == null)  return DEFAULT_RESULTS_DIMENSIONS;
		StringTokenizer tokenizer = new StringTokenizer(resultsDimension, ","); //$NON-NLS-1$
		List list = new ArrayList();
		while (tokenizer.hasMoreTokens()) {
			String token = tokenizer.nextToken().trim();
			Dimension dimension = getDimension(token);
			if (dimension == null) {
				try {
					dimension = getDimension(Integer.parseInt(token));
				} catch (NumberFormatException e) {
					// skip
				}
				if (dimension == null) {
					System.err.println("Skip invalid results dimension found in system property '"+ECLIPSE_PERF_RESULTS_DIMENSIONS+"': "+resultsDimension); //$NON-NLS-1$ //$NON-NLS-2$
					continue;
				}
			}
			list.add(dimension);
		}
		int size = list.size();
		if (size == 0) {
			System.err.println("No valid dimension was found in system property '"+ECLIPSE_PERF_RESULTS_DIMENSIONS+"'!"); //$NON-NLS-1$ //$NON-NLS-2$
			System.err.println("=> default results dimensions will be used instead!"); //$NON-NLS-1$
			return DEFAULT_RESULTS_DIMENSIONS;
		}
		Dimension[] dimensions = new Dimension[size];
		list.toArray(dimensions);
		return dimensions;
	}

