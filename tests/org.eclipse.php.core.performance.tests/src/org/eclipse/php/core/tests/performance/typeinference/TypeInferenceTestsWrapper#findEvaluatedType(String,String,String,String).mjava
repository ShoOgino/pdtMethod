	protected void findEvaluatedType(String fileName, String code, String criteriaFunction, final String pruner)
			throws Exception {
		IFile file = project.getFile("pdttest/test.php");
		if (file.exists()) {
			file.setContents(new ByteArrayInputStream(code.getBytes()), true, false, null);
		} else {
			file.create(new ByteArrayInputStream(code.getBytes()), true, null);
		}

		try {
			project.build(IncrementalProjectBuilder.INCREMENTAL_BUILD, null);
			TestUtils.waitForIndexer();

			ISourceModule sourceModule = DLTKCore.createSourceModuleFrom(file);
			ModuleDeclaration moduleDecl = SourceParserUtil.getModuleDeclaration(sourceModule);

			ASTNodeSearcher searcher = new ASTNodeSearcher(sourceModule, criteriaFunction);
			moduleDecl.traverse(searcher);

			Assert.assertNotNull("Method call " + criteriaFunction + "() in code: " + code, searcher.getResult());
			Assert.assertNotNull("Can't find context for " + criteriaFunction + "() in code: " + code,
					searcher.getContext());

			final ExpressionTypeGoal goal = new ExpressionTypeGoal(searcher.getContext(), searcher.getResult());
			perfMonitor.execute("PerformanceTests.testCodeAssist" + "_" + fileName, new Operation() {
				public void run() throws Exception {
					if ("phpdocGoals".equals(pruner)) {
						typeInferenceEngine.evaluateTypeHeavy(goal, ENGINE_TIMEOUT);
					} else if ("heavyGoals".equals(pruner)) {
						typeInferenceEngine.evaluateTypePHPDoc(goal, ENGINE_TIMEOUT);
					} else {
						typeInferenceEngine.evaluateType(goal, ENGINE_TIMEOUT);
					}
				}
			}, 1, 10);

		} finally {
			try {
				file.delete(true, null);
			} catch (Exception e) {
				// do not handle - may be it's currently in use
			}
		}
	}

