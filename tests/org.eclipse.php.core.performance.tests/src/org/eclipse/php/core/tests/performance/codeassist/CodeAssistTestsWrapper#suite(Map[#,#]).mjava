	public Test suite(final Map<?, ?> map) {
		project = ResourcesPlugin.getWorkspace().getRoot().getProject(map.get(ProjectSuite.PROJECT).toString());
		perfMonitor = PHPCorePerformanceTests.getPerformanceMonitor();
		TestSuite suite = new TestSuite("Auto Code Assist Tests");

		final PHPVersion phpVersion = (PHPVersion) map.get(ProjectSuite.PHP_VERSION);
		for (String testsDirectory : TESTS.get(phpVersion)) {
			testsDirectory = testsDirectory.replaceAll("project", map.get(ProjectSuite.PROJECT).toString());
			for (final String fileName : getPDTTFiles(testsDirectory,
					PHPCorePerformanceTests.getDefault().getBundle())) {
				try {
					final CodeAssistPdttFile pdttFile = new CodeAssistPdttFile(
							PHPCorePerformanceTests.getDefault().getBundle(), fileName);
					CodeAssistTests test = new CodeAssistTests(fileName) {

						@Override
						protected void setUp() throws Exception {
						}

						@Override
						protected void tearDown() throws Exception {
							if (testFile != null) {
								testFile.delete(true, null);
								testFile = null;
							}
						}

						@Override
						protected void runTest() throws Throwable {
							perfMonitor.execute("PerformanceTests.testCodeAssist" + "_" + fileName, new Operation() {
								@Override
								public void run() throws Exception {
									CompletionProposal[] proposals = getProposals(pdttFile.getFile());
								}
							}, 1, 10);
						}
					};
					suite.addTest(test);
				} catch (final Exception e) {
					suite.addTest(new TestCase(fileName) { // dummy
						// test
						// indicating
						// PDTT
						// file
						// parsing
						// failure
						@Override
						protected void runTest() throws Throwable {
							throw e;
						}
					});
				}
			}
		}
		return suite;
	}

