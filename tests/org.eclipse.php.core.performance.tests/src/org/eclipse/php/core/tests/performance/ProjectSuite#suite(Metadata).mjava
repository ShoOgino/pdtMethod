	public Test suite(final Metadata metadata) {
		this.metadata = metadata;

		TestSuite suite = new TestSuite(metadata.project + " Performance Tests");

		suite.addTest(new BuildProjectTest());
		suite.addTest(new SearchAllTypesTest());
		suite.addTest(new SearchAllFunctionsTest());
		suite.addTest(new SearchGlobalVariablesTest());
		suite.addTest(new SearchIncludeStatementsTest());
		suite.addTest(new SuperTypeHierarchyTest());
		suite.addTest(new TypeHierarchyTest());

		suite.addTest(new CodeAssistTestsWrapper().suite(metadata));
		suite.addTest(new MarkOccurrenceTestsWrapper().suite(metadata));
		suite.addTest(new PhpElementConciliatorTestWrapper().suite(metadata));
		suite.addTest(new FormatterTestsWrapper().suite(metadata));
		suite.addTest(new SelectionEngineTestsWrapper().suite(metadata));
		suite.addTest(new TypeInferenceTestsWrapper().suite(metadata));

		// Create a setup wrapper
		TestSetup setup = new TestSetup(suite) {
			protected void setUp() throws Exception {
				deleteProject(metadata.project);
				IProject project = getProject(metadata.project);

				IScriptProject scriptProject = DLTKCore.create(project);
				project.create(null);
				project.open(null);

				// configure nature
				IProjectDescription desc = project.getDescription();
				desc.setNatureIds(new String[] { PHPNature.ID });
				project.setDescription(desc, null);
				ProjectOptions.setPhpVersion(metadata.phpVersion, project
						.getProject());

				Util.downloadAndExtract(metadata.url, scriptProject
						.getProject().getLocation().toString());
				perfMonitor = PHPCorePerformanceTests.getPerformanceMonitor();
			}

			protected void tearDown() throws Exception {
				deleteProject(metadata.project);
			}
		};
		return setup;
	}

