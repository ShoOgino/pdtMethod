	public Test suite(final Map<?, ?> map) {
		project = ResourcesPlugin.getWorkspace().getRoot().getProject(map.get(ProjectSuite.PROJECT).toString());
		perfMonitor = PHPCorePerformanceTests.getPerformanceMonitor();

		TestSuite suite = new TestSuite("Type Inference Tests");

		final PHPVersion phpVersion = (PHPVersion) map.get(ProjectSuite.PHP_VERSION);
		for (String testsDirectory : TESTS.get(phpVersion)) {
			testsDirectory = testsDirectory.replaceAll("project", map.get(ProjectSuite.PROJECT).toString());
			for (final String fileName : getPDTTFiles(testsDirectory,
					PHPCorePerformanceTests.getDefault().getBundle())) {
				try {
					final PdttFile pdttFile = new PdttFile(PHPCorePerformanceTests.getDefault().getBundle(), fileName);
					final String pruner = getPrunerType(pdttFile);

					suite.addTest(new TypeInferenceTests(phpVersion.getAlias() + " - /" + fileName) {

						@Override
						protected void setUp() throws Exception {
							TestUtils.setProjectPHPVersion(project, phpVersion);
						}

						@Override
						protected void tearDown() throws Exception {
						}

						@Override
						protected void runTest() throws Throwable {
							String criteriaFunction = new File(fileName).getName().replaceAll("\\.pdtt", "");
							String code = pdttFile.getFile();

							findEvaluatedType(fileName, code, criteriaFunction, pruner);
						}
					});
				} catch (final Exception e) {
					suite.addTest(new TestCase(fileName) { // dummy
															// test
															// indicating
															// PDTT
															// file
															// parsing
															// failure
						@Override
						protected void runTest() throws Throwable {
							throw e;
						}
					});
				}
			}
		}

		// Create a setup wrapper
		TestSetup setup = new TestSetup(suite) {
			@Override
			protected void setUp() throws Exception {
				setUpSuite();
			}

			@Override
			protected void tearDown() throws Exception {
				tearDownSuite();
			}
		};
		return setup;
	}

