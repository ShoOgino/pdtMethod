	public void testRename1() throws CoreException {
		
		System.setProperty("disableStartupRunner", "true");
		PHPCoreTests.waitForIndexer();
		PHPCoreTests.waitForAutoBuild();

		project1 = FileUtils.createProject("project1", PHPVersion.PHP5_3);

		IFolder folder = project1.getFolder("src");

		if (!folder.exists()) {
			folder.create(true, true, new NullProgressMonitor());
		}
		
		IFile file1 = folder.getFile("test0027134_1.php");

		InputStream source = new ByteArrayInputStream(
				"<?php class MyClass{} ?>"
						.getBytes());

		if (!file1.exists()) {
			file1.create(source, true, new NullProgressMonitor());
		} else {
			file1.setContents(source, IFile.FORCE, new NullProgressMonitor());
		}
		
		IFile file2 = folder.getFile("test0027134_2.php");

		source = new ByteArrayInputStream(
				"<?php include 'test0027134_1.php'; class SecondClass extends MyClass{} ?>"
						.getBytes());

		if (!file2.exists()) {
			file2.create(source, true, new NullProgressMonitor());
		} else {
			file2.setContents(source, IFile.FORCE, new NullProgressMonitor());
		}

		
		PHPCoreTests.waitForIndexer();
		PHPCoreTests.waitForAutoBuild();

		Program program = createProgram(file1);

		assertNotNull(program);

		int start = 12;
		ASTNode selectedNode = locateNode(program, start, 0);
		assertNotNull(selectedNode);

		RenameClassProcessor processor = new RenameClassProcessor(file1,
				selectedNode);

		processor.setNewElementName("MyClass1");
		processor.setUpdateTextualMatches(true);

		checkInitCondition(processor);

		performChange(processor);

		try {
			String content = FileUtils.getContents(file1);
			assertEquals(
					"<?php class MyClass1{} ?>",
					content);
			
			content = FileUtils.getContents(file2);
			assertEquals(
					"<?php include 'test0027134_1.php'; class SecondClass extends MyClass1{} ?>",
					content);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

