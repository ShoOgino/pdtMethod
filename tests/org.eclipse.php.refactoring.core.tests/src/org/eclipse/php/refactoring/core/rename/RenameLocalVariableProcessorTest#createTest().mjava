	public List<TestCase> createTest() {
		List<TestCase> tests = new ArrayList<TestCase>();
		try {
			initFiles();
		} catch (Exception e1) {
			return tests;
		}

		for (final String fileName : filesMap.keySet()) {
			final PdttFileExt testFile = filesMap.get(fileName);
			tests.add(new RenameLocalVariableProcessorTest(fileName){
				@Override
				protected void runTest() throws Throwable {
					IFile file = project.findFile(testFile.getTestFiles().get(0).getName());

					Program program = createProgram(file);

					assertNotNull(program);

					int start = Integer.valueOf(testFile.getConfig().get("start"));
					ASTNode selectedNode = locateNode(program, start, 0);
					assertNotNull(selectedNode);

					RenameLocalVariableProcessor processor = new RenameLocalVariableProcessor(file, selectedNode);

					processor.setNewElementName(testFile.getConfig().get("newName"));
					processor.setUpdateTextualMatches(Boolean.valueOf(testFile.getConfig().get("updateTextualMatches")));

					checkInitCondition(processor);
					performChange(processor);
					checkTestResult(testFile);
				}
				@Override
				protected void tearDown() throws Exception {

				}	
			});
		}
		return tests;
	}

