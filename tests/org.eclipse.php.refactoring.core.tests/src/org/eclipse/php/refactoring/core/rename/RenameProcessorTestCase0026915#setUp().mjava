	@Before
	public void setUp() throws Exception {
		PHPCoreTests.waitForIndexer();
		PHPCoreTests.waitForAutoBuild();

		project1 = FileUtils.createProject("project1");

		IFolder folder = project1.getFolder("src");

		if (!folder.exists()) {
			folder.create(true, true, new NullProgressMonitor());
		}
		IFile file = folder.getFile("test1.php");

		InputStream source = new ByteArrayInputStream("<?php class TestRenameClass{}?>".getBytes());

		if (!file.exists()) {
			file.create(source, true, new NullProgressMonitor());
		} else {
			file.setContents(source, IFile.FORCE, new NullProgressMonitor());
		}

		IPath fPath = new Path("/project1/src");
		IPath[] inclusionPattern = new IPath[0];
		IPath[] exclusionPattern = new IPath[0];
		IBuildpathEntry sourceEntry = DLTKCore.newSourceEntry(fPath, inclusionPattern, exclusionPattern,
				new IBuildpathAttribute[0]);

		fPath = new Path("/project1");
		inclusionPattern = new IPath[0];
		exclusionPattern = new IPath[1];
		exclusionPattern[0] = new Path("src/");
		IBuildpathEntry sourceEntry1 = DLTKCore.newSourceEntry(fPath, inclusionPattern, exclusionPattern,
				new IBuildpathAttribute[0]);

		final IScriptProject scriptProject = DLTKCore.create(project1.getProject());

		final List<IBuildpathEntry> entriesList = new ArrayList<IBuildpathEntry>();
		IBuildpathEntry[] entries;
		try {
			entries = scriptProject.getRawBuildpath();

			entries = FileUtils.removeEntryFromBuildPath(entries, project1.getFullPath());

			entriesList.addAll(Arrays.asList(entries));

			entriesList.add(sourceEntry);
			entriesList.add(sourceEntry1);
		} catch (ModelException e) {
			e.printStackTrace();
		}

		final IBuildpathEntry[] newEntries = new IBuildpathEntry[entriesList.size()];

		scriptProject.setRawBuildpath(null, new NullProgressMonitor());
		scriptProject.setRawBuildpath(entriesList.toArray(newEntries), new NullProgressMonitor());

		PHPCoreTests.waitForIndexer();
		PHPCoreTests.waitForAutoBuild();
	}

