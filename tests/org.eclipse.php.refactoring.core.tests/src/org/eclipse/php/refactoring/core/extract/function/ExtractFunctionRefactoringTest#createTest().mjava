	public List<TestCase> createTest() {
		List<TestCase> tests = new ArrayList<TestCase>();
		try {
			initFiles();
		} catch (Exception e1) {
			return tests;
		}

		for (final String fileName : filesMap.keySet()) {
			final PdttFileExt testFile = filesMap.get(fileName);
			tests.add(new ExtractFunctionRefactoringTest(fileName) {
				@Override
				protected void runTest() throws Throwable {
					IFile file = project.findFile(testFile.getTestFiles().get(0).getName());

					IStructuredModel model = null;
					try {
						model = StructuredModelManager.getModelManager().createUnManagedStructuredModelFor(file);
					} catch (IOException e) {
						fail(e.getMessage());
					} catch (CoreException e) {
						fail(e.getMessage());
					}
					assertNotNull(model);

					IStructuredDocument structuredDocument = model.getStructuredDocument();
					assertNotNull(structuredDocument);

					int start = Integer.valueOf(testFile.getConfig().get("start"));

					int length = Integer.valueOf(testFile.getConfig().get("length"));

					String visibility = testFile.getConfig().get("visibility");
					
					ExtractFunctionRefactoring processor = new ExtractFunctionRefactoring(DLTKCore.createSourceModuleFrom(file), structuredDocument, start, length);

					if("default".equals(visibility)){
						processor.setVisibility(Modifiers.AccDefault);
					}

					if("public".equals(visibility)){
						processor.setVisibility(Modifiers.AccPublic);
					}

					if("prvate".equals(visibility)){
						processor.setVisibility(Modifiers.AccPrivate);
					}
					
					if("protected".equals(visibility)){
						processor.setVisibility(Modifiers.AccProtected);
					}


					processor.setNewFunctionName(testFile.getConfig().get("newName"));

					checkInitCondition(processor);
					performChange(processor);
					checkTestResult(testFile, structuredDocument);
				}

				@Override
				protected void tearDown() throws Exception {

				}
			});
		}
		return tests;
	}

