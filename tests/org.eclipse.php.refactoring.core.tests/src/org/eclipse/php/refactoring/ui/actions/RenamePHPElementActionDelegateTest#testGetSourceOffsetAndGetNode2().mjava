	public void testGetSourceOffsetAndGetNode2() {

		IFile file = project1.getFile("test2.php");

		InputStream sourceStream = new ByteArrayInputStream(
				"<?php class MyClass { function myfunc1(){ return(true);}}?>".getBytes());
		try {
			if (!file.exists()) {

				file.create(sourceStream, true, new NullProgressMonitor());
			} else {
				file.setContents(sourceStream, IFile.FORCE, new NullProgressMonitor());
			}
		} catch (CoreException e) {
			fail(e.getMessage());
		}

		IModelElement source = null;
		try {
			source = DLTKCore.create(file);
		} catch (Exception e) {
			fail(e.getMessage());
		}
		assertNotNull(source);

		try {
			((ISourceModule) source).makeConsistent(new NullProgressMonitor());
		} catch (ModelException e1) {
			fail(e1.getMessage());
		}

		final ArrayList<IMethod> methods = new ArrayList<IMethod>();
		try {
			source.accept(new IModelElementVisitor() {
				@Override
				public boolean visit(IModelElement element) {
					if (element.getElementType() == ISourceModule.METHOD) {
						methods.add((IMethod) element);
						return false;
					}
					return true;
				}
			});

		} catch (ModelException e) {
			fail(e.getMessage());
		}
		assertTrue(methods.size() > 0);

		RenamePHPElementActionDelegateProxy action = new RenamePHPElementActionDelegateProxy();
		int offset = -1;
		try {
			offset = action.getSourceOffset(methods.get(0));
		} catch (ModelException e) {
			fail(e.getMessage());
		}

		assertTrue(offset >= 0);
		Program program;
		try {
			program = RefactoringUtility.getProgramForFile(file);
			ASTNode node = action.getSelectedNode(program, offset, 0);
			assertTrue(node instanceof FunctionDeclaration);
			assertTrue(node.getParent() instanceof MethodDeclaration);
		} catch (Exception e) {
			fail(e.getMessage());
		}
	}

